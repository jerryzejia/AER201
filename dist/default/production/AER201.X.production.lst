

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Apr 10 06:40:14 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    55                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    56                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    57  0000                     
    58                           ; Version 1.41
    59                           ; Generated 25/01/2017 GMT
    60                           ; 
    61                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    62                           ; All rights reserved.
    63                           ; 
    64                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    65                           ; 
    66                           ; Redistribution and use in source and binary forms, with or without modification, are
    67                           ; permitted provided that the following conditions are met:
    68                           ; 
    69                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    70                           ;        conditions and the following disclaimer.
    71                           ; 
    72                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    73                           ;        of conditions and the following disclaimer in the documentation and/or other
    74                           ;        materials provided with the distribution.
    75                           ; 
    76                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    77                           ;        software without specific prior written permission.
    78                           ; 
    79                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    80                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    81                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    82                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    83                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    84                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    85                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    86                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    87                           ; 
    88                           ; 
    89                           ; Code-generator required, PIC18F4620 Definitions
    90                           ; 
    91                           ; SFR Addresses
    92  0000                     
    93                           	psect	smallconst
    94  001000                     __psmallconst:
    95                           	opt stack 0
    96  001000  00                 	db	0
    97  001001                     _keys:
    98                           	opt stack 0
    99  001001  31                 	db	49
   100  001002  32                 	db	50
   101  001003  33                 	db	51
   102  001004  41                 	db	65
   103  001005  34                 	db	52
   104  001006  35                 	db	53
   105  001007  36                 	db	54
   106  001008  42                 	db	66
   107  001009  37                 	db	55
   108  00100A  38                 	db	56
   109  00100B  39                 	db	57
   110  00100C  43                 	db	67
   111  00100D  2A                 	db	42
   112  00100E  30                 	db	48
   113  00100F  23                 	db	35
   114  001010  44                 	db	68
   115  001011  00                 	db	0
   116  001012                     __end_of_keys:
   117                           	opt stack 0
   118  001012                     _dpowers:
   119                           	opt stack 0
   120  001012  0001               	dw	1
   121  001014  000A               	dw	10
   122  001016  0064               	dw	100
   123  001018  03E8               	dw	1000
   124  00101A  2710               	dw	10000
   125  00101C                     __end_of_dpowers:
   126                           	opt stack 0
   127  00101C                     _hexpowers:
   128                           	opt stack 0
   129  00101C  0001               	dw	1
   130  00101E  0010               	dw	16
   131  001020  0100               	dw	256
   132  001022  1000               	dw	4096
   133  001024                     __end_of_hexpowers:
   134                           	opt stack 0
   135  001024                     _timeSetter:
   136                           	opt stack 0
   137  001024  00                 	db	0
   138  001025  07                 	db	7
   139  001026  03                 	db	3
   140  001027  02                 	db	2
   141  001028  10                 	db	16
   142  001029  04                 	db	4
   143  00102A  17                 	db	23
   144  00102B                     __end_of_timeSetter:
   145                           	opt stack 0
   146  0000                     _PORTB	set	3969
   147  0000                     _LATBbits	set	3978
   148  0000                     _INTCONbits	set	4082
   149  0000                     _ADCON2	set	4032
   150  0000                     _ADCON1	set	4033
   151  0000                     _LATE	set	3981
   152  0000                     _LATC	set	3979
   153  0000                     _LATB	set	3978
   154  0000                     _LATA	set	3977
   155  0000                     _TRISE	set	3990
   156  0000                     _TRISB	set	3987
   157  0000                     _TRISD	set	3989
   158  0000                     _TRISC	set	3988
   159  0000                     _TRISA	set	3986
   160  0000                     _LATAbits	set	3977
   161  0000                     _LATEbits	set	3981
   162  0000                     _LATCbits	set	3979
   163  0000                     _PORTBbits	set	3969
   164  0000                     _ADRESH	set	4036
   165  0000                     _ADCON0bits	set	4034
   166  0000                     _ADCON0	set	4034
   167  0000                     _LATD	set	3980
   168  0000                     _LATDbits	set	3980
   169  0000                     _SSPBUF	set	4041
   170  0000                     _SSPADD	set	4040
   171  0000                     _SSPCON2	set	4037
   172  0000                     _SSPCON1	set	4038
   173  0000                     _SSPSTAT	set	4039
   174  0000                     _INT1IF	set	32640
   175  0000                     _INT1IE	set	32643
   176  0000                     _ADON	set	32272
   177  0000                     _ACKEN	set	32300
   178  0000                     _ACKDT	set	32301
   179  0000                     _RCEN	set	32299
   180  0000                     _PEN	set	32298
   181  0000                     _RSEN	set	32297
   182  0000                     _SEN	set	32296
   183  0000                     _TRISC4	set	31908
   184  0000                     _TRISC3	set	31907
   185  00102B                     STR_4:
   186  00102B  32                 	db	50	;'2'
   187  00102C  20                 	db	32
   188  00102D  42                 	db	66	;'B'
   189  00102E  61                 	db	97	;'a'
   190  00102F  63                 	db	99	;'c'
   191  001030  6B                 	db	107	;'k'
   192  001031  20                 	db	32
   193  001032  74                 	db	116	;'t'
   194  001033  6F                 	db	111	;'o'
   195  001034  20                 	db	32
   196  001035  73                 	db	115	;'s'
   197  001036  74                 	db	116	;'t'
   198  001037  61                 	db	97	;'a'
   199  001038  72                 	db	114	;'r'
   200  001039  74                 	db	116	;'t'
   201  00103A  20                 	db	32
   202  00103B  6D                 	db	109	;'m'
   203  00103C  65                 	db	101	;'e'
   204  00103D  6E                 	db	110	;'n'
   205  00103E  75                 	db	117	;'u'
   206  00103F  00                 	db	0
   207  001040                     STR_11:
   208  001040  50                 	db	80	;'P'
   209  001041  72                 	db	114	;'r'
   210  001042  65                 	db	101	;'e'
   211  001043  73                 	db	115	;'s'
   212  001044  73                 	db	115	;'s'
   213  001045  20                 	db	32
   214  001046  31                 	db	49	;'1'
   215  001047  2F                 	db	47
   216  001048  32                 	db	50	;'2'
   217  001049  2F                 	db	47
   218  00104A  41                 	db	65	;'A'
   219  00104B  20                 	db	32
   220  00104C  74                 	db	116	;'t'
   221  00104D  6F                 	db	111	;'o'
   222  00104E  20                 	db	32
   223  00104F  73                 	db	115	;'s'
   224  001050  74                 	db	116	;'t'
   225  001051  6F                 	db	111	;'o'
   226  001052  70                 	db	112	;'p'
   227  001053  00                 	db	0
   228  001054                     STR_16:
   229  001054  30                 	db	48	;'0'
   230  001055  31                 	db	49	;'1'
   231  001056  32                 	db	50	;'2'
   232  001057  33                 	db	51	;'3'
   233  001058  34                 	db	52	;'4'
   234  001059  35                 	db	53	;'5'
   235  00105A  36                 	db	54	;'6'
   236  00105B  37                 	db	55	;'7'
   237  00105C  38                 	db	56	;'8'
   238  00105D  39                 	db	57	;'9'
   239  00105E  61                 	db	97	;'a'
   240  00105F  62                 	db	98	;'b'
   241  001060  63                 	db	99	;'c'
   242  001061  64                 	db	100	;'d'
   243  001062  65                 	db	101	;'e'
   244  001063  66                 	db	102	;'f'
   245  001064  00                 	db	0
   246  001065                     STR_10:
   247  001065  53                 	db	83	;'S'
   248  001066  6F                 	db	111	;'o'
   249  001067  72                 	db	114	;'r'
   250  001068  74                 	db	116	;'t'
   251  001069  69                 	db	105	;'i'
   252  00106A  6E                 	db	110	;'n'
   253  00106B  67                 	db	103	;'g'
   254  00106C  20                 	db	32
   255  00106D  53                 	db	83	;'S'
   256  00106E  74                 	db	116	;'t'
   257  00106F  61                 	db	97	;'a'
   258  001070  72                 	db	114	;'r'
   259  001071  74                 	db	116	;'t'
   260  001072  65                 	db	101	;'e'
   261  001073  64                 	db	100	;'d'
   262  001074  00                 	db	0
   263  001075                     STR_15:
   264  001075  54                 	db	84	;'T'
   265  001076  69                 	db	105	;'i'
   266  001077  6D                 	db	109	;'m'
   267  001078  65                 	db	101	;'e'
   268  001079  20                 	db	32
   269  00107A  75                 	db	117	;'u'
   270  00107B  73                 	db	115	;'s'
   271  00107C  65                 	db	101	;'e'
   272  00107D  64                 	db	100	;'d'
   273  00107E  3A                 	db	58	;':'
   274  00107F  20                 	db	32
   275  001080  25                 	db	37
   276  001081  64                 	db	100	;'d'
   277  001082  20                 	db	32
   278  001083  73                 	db	115	;'s'
   279  001084  00                 	db	0
   280  001085                     STR_6:
   281  001085  20                 	db	32
   282  001086  20                 	db	32
   283  001087  20                 	db	32
   284  001088  20                 	db	32
   285  001089  20                 	db	32
   286  00108A  20                 	db	32
   287  00108B  20                 	db	32
   288  00108C  20                 	db	32
   289  00108D  20                 	db	32
   290  00108E  20                 	db	32
   291  00108F  20                 	db	32
   292  001090  20                 	db	32
   293  001091  20                 	db	32
   294  001092  20                 	db	32
   295  001093  00                 	db	0
   296  001094                     STR_8:
   297  001094  25                 	db	37
   298  001095  30                 	db	48	;'0'
   299  001096  32                 	db	50	;'2'
   300  001097  78                 	db	120	;'x'
   301  001098  2F                 	db	47
   302  001099  25                 	db	37
   303  00109A  30                 	db	48	;'0'
   304  00109B  32                 	db	50	;'2'
   305  00109C  78                 	db	120	;'x'
   306  00109D  2F                 	db	47
   307  00109E  25                 	db	37
   308  00109F  30                 	db	48	;'0'
   309  0010A0  32                 	db	50	;'2'
   310  0010A1  78                 	db	120	;'x'
   311  0010A2  00                 	db	0
   312  0010A3                     STR_9:
   313  0010A3  25                 	db	37
   314  0010A4  30                 	db	48	;'0'
   315  0010A5  32                 	db	50	;'2'
   316  0010A6  78                 	db	120	;'x'
   317  0010A7  3A                 	db	58	;':'
   318  0010A8  25                 	db	37
   319  0010A9  30                 	db	48	;'0'
   320  0010AA  32                 	db	50	;'2'
   321  0010AB  78                 	db	120	;'x'
   322  0010AC  3A                 	db	58	;':'
   323  0010AD  25                 	db	37
   324  0010AE  30                 	db	48	;'0'
   325  0010AF  32                 	db	50	;'2'
   326  0010B0  78                 	db	120	;'x'
   327  0010B1  00                 	db	0
   328  0010B2                     STR_7:
   329  0010B2  41                 	db	65	;'A'
   330  0010B3  20                 	db	32
   331  0010B4  53                 	db	83	;'S'
   332  0010B5  6F                 	db	111	;'o'
   333  0010B6  72                 	db	114	;'r'
   334  0010B7  74                 	db	116	;'t'
   335  0010B8  69                 	db	105	;'i'
   336  0010B9  6E                 	db	110	;'n'
   337  0010BA  67                 	db	103	;'g'
   338  0010BB  00                 	db	0
   339  0010BC                     STR_2:
   340  0010BC  57                 	db	87	;'W'
   341  0010BD  65                 	db	101	;'e'
   342  0010BE  6C                 	db	108	;'l'
   343  0010BF  63                 	db	99	;'c'
   344  0010C0  6F                 	db	111	;'o'
   345  0010C1  6D                 	db	109	;'m'
   346  0010C2  65                 	db	101	;'e'
   347  0010C3  21                 	db	33
   348  0010C4  00                 	db	0
   349  0010C5                     STR_5:
   350  0010C5  31                 	db	49	;'1'
   351  0010C6  20                 	db	32
   352  0010C7  54                 	db	84	;'T'
   353  0010C8  69                 	db	105	;'i'
   354  0010C9  6D                 	db	109	;'m'
   355  0010CA  65                 	db	101	;'e'
   356  0010CB  00                 	db	0
   357  0010CC                     STR_12:
   358  0010CC  25                 	db	37
   359  0010CD  64                 	db	100	;'d'
   360  0010CE  00                 	db	0
   361  0010CF                     STR_1:
   362  0010CF  25                 	db	37
   363  0010D0  78                 	db	120	;'x'
   364  0010D1  00                 	db	0
   365  0000                     
   366                           ; #config settings
   367  0010D2  00                 	db	0	; dummy byte at the end
   368  0000                     
   369                           	psect	cinit
   370  00259E                     __pcinit:
   371                           	opt stack 0
   372  00259E                     start_initialization:
   373                           	opt stack 0
   374  00259E                     __initialization:
   375                           	opt stack 0
   376                           
   377                           ; Clear objects allocated to BANK0 (35 bytes)
   378  00259E  EE00  F080         	lfsr	0,__pbssBANK0
   379  0025A2  0E23               	movlw	35
   380  0025A4                     clear_0:
   381  0025A4  6AEE               	clrf	postinc0,c
   382  0025A6  06E8               	decf	wreg,f,c
   383  0025A8  E1FD               	bnz	clear_0
   384                           
   385                           ; Clear objects allocated to COMRAM (29 bytes)
   386  0025AA  EE00  F04C         	lfsr	0,__pbssCOMRAM
   387  0025AE  0E1D               	movlw	29
   388  0025B0                     clear_1:
   389  0025B0  6AEE               	clrf	postinc0,c
   390  0025B2  06E8               	decf	wreg,f,c
   391  0025B4  E1FD               	bnz	clear_1
   392  0025B6                     end_of_initialization:
   393                           	opt stack 0
   394  0025B6                     __end_of__initialization:
   395                           	opt stack 0
   396  0025B6  9069               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   397  0025B8  9269               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   398  0025BA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   399  0025BC  6EF8               	movwf	tblptru,c
   400  0025BE  0100               	movlb	0
   401  0025C0  EF54  F012         	goto	_main	;jump to C main() function
   402                           tblptru	equ	0xFF8
   403                           postinc0	equ	0xFEE
   404                           wreg	equ	0xFE8
   405                           
   406                           	psect	bssCOMRAM
   407  00004C                     __pbssCOMRAM:
   408                           	opt stack 0
   409  00004C                     _time:
   410                           	opt stack 0
   411  00004C                     	ds	7
   412  000053                     _total_count:
   413                           	opt stack 0
   414  000053                     	ds	2
   415  000055                     _soup_can_no_label:
   416                           	opt stack 0
   417  000055                     	ds	2
   418  000057                     _soup_can_label:
   419                           	opt stack 0
   420  000057                     	ds	2
   421  000059                     _pop_can_no_tap:
   422                           	opt stack 0
   423  000059                     	ds	2
   424  00005B                     _pop_can_tap:
   425                           	opt stack 0
   426  00005B                     	ds	2
   427  00005D                     _displayFlag:
   428                           	opt stack 0
   429  00005D                     	ds	2
   430  00005F                     _passed_time:
   431                           	opt stack 0
   432  00005F                     	ds	2
   433  000061                     _mode:
   434                           	opt stack 0
   435  000061                     	ds	1
   436  000062                     _end_time:
   437                           	opt stack 0
   438  000062                     	ds	7
   439                           tblptru	equ	0xFF8
   440                           postinc0	equ	0xFEE
   441                           wreg	equ	0xFE8
   442                           
   443                           	psect	bssBANK0
   444  000080                     __pbssBANK0:
   445                           	opt stack 0
   446  000080                     _int_start_time:
   447                           	opt stack 0
   448  000080                     	ds	14
   449  00008E                     _int_end_time:
   450                           	opt stack 0
   451  00008E                     	ds	14
   452  00009C                     _start_time:
   453                           	opt stack 0
   454  00009C                     	ds	7
   455                           tblptru	equ	0xFF8
   456                           postinc0	equ	0xFEE
   457                           wreg	equ	0xFE8
   458                           
   459                           	psect	cstackBANK0
   460  0000A3                     __pcstackBANK0:
   461                           	opt stack 0
   462  0000A3                     display_sorting_time@int_end_time:
   463                           	opt stack 0
   464                           
   465                           ; 14 bytes @ 0x0
   466  0000A3                     	ds	14
   467  0000B1                     display_sorting_time@int_start_time:
   468                           	opt stack 0
   469                           
   470                           ; 14 bytes @ 0xE
   471  0000B1                     	ds	14
   472  0000BF                     display_sorting_time@i:
   473                           	opt stack 0
   474                           
   475                           ; 2 bytes @ 0x1C
   476  0000BF                     	ds	2
   477  0000C1                     display_sorting_time@i_497:
   478                           	opt stack 0
   479                           
   480                           ; 2 bytes @ 0x1E
   481  0000C1                     	ds	2
   482                           tblptru	equ	0xFF8
   483                           postinc0	equ	0xFEE
   484                           wreg	equ	0xFE8
   485                           
   486                           	psect	cstackCOMRAM
   487  000001                     __pcstackCOMRAM:
   488                           	opt stack 0
   489  000001                     ??i2_I2C_Master_Wait:
   490  000001                     i2lcdNibble@temp:
   491                           	opt stack 0
   492                           
   493                           ; 1 bytes @ 0x0
   494  000001                     	ds	1
   495  000002                     i2I2C_Master_Read@a:
   496                           	opt stack 0
   497  000002                     i2lcdNibble@data:
   498                           	opt stack 0
   499  000002                     i2I2C_Master_Write@d:
   500                           	opt stack 0
   501                           
   502                           ; 2 bytes @ 0x1
   503  000002                     	ds	1
   504  000003                     i2I2C_Master_Read@temp:
   505                           	opt stack 0
   506  000003                     i2lcdInst@data:
   507                           	opt stack 0
   508  000003                     i2putch@data:
   509                           	opt stack 0
   510                           
   511                           ; 1 bytes @ 0x2
   512  000003                     	ds	1
   513  000004                     i2get_time@datime:
   514                           	opt stack 0
   515                           
   516                           ; 2 bytes @ 0x3
   517  000004                     	ds	2
   518  000006                     i2get_time@i:
   519                           	opt stack 0
   520                           
   521                           ; 2 bytes @ 0x5
   522  000006                     	ds	2
   523  000008                     ??_interrupt_handler:
   524                           
   525                           ; 1 bytes @ 0x7
   526  000008                     	ds	14
   527  000016                     interrupt_handler@keypress:
   528                           	opt stack 0
   529                           
   530                           ; 1 bytes @ 0x15
   531  000016                     	ds	1
   532  000017                     ??_shaker:
   533  000017                     ??_gate:
   534  000017                     ??_isdigit:
   535  000017                     ??_I2C_Master_Wait:
   536  000017                     ??_readADC:
   537  000017                     ?___wmul:
   538                           	opt stack 0
   539  000017                     ?___lwdiv:
   540                           	opt stack 0
   541  000017                     ?___lldiv:
   542                           	opt stack 0
   543  000017                     lcdNibble@temp:
   544                           	opt stack 0
   545  000017                     main_servo_control@dir:
   546                           	opt stack 0
   547  000017                     side_servo_control@dir:
   548                           	opt stack 0
   549  000017                     ___wmul@multiplier:
   550                           	opt stack 0
   551  000017                     ___lwdiv@dividend:
   552                           	opt stack 0
   553  000017                     ___lldiv@dividend:
   554                           	opt stack 0
   555                           
   556                           ; 4 bytes @ 0x16
   557  000017                     	ds	1
   558  000018                     I2C_Master_Read@a:
   559                           	opt stack 0
   560  000018                     lcdNibble@data:
   561                           	opt stack 0
   562  000018                     readADC@channel:
   563                           	opt stack 0
   564  000018                     _isdigit$1080:
   565                           	opt stack 0
   566  000018                     I2C_Master_Write@d:
   567                           	opt stack 0
   568  000018                     shaker@i:
   569                           	opt stack 0
   570                           
   571                           ; 2 bytes @ 0x17
   572  000018                     	ds	1
   573  000019                     ??_main_servo_control:
   574  000019                     ??_side_servo_control:
   575  000019                     I2C_Master_Read@temp:
   576                           	opt stack 0
   577  000019                     lcdInst@data:
   578                           	opt stack 0
   579  000019                     putch@data:
   580                           	opt stack 0
   581  000019                     isdigit@c:
   582                           	opt stack 0
   583  000019                     ___wmul@multiplicand:
   584                           	opt stack 0
   585  000019                     ___lwdiv@divisor:
   586                           	opt stack 0
   587                           
   588                           ; 2 bytes @ 0x18
   589  000019                     	ds	1
   590  00001A                     ??_initLCD:
   591  00001A                     main_servo_control@i:
   592                           	opt stack 0
   593  00001A                     side_servo_control@i:
   594                           	opt stack 0
   595  00001A                     get_time@datime:
   596                           	opt stack 0
   597                           
   598                           ; 2 bytes @ 0x19
   599  00001A                     	ds	1
   600  00001B                     ___lwdiv@counter:
   601                           	opt stack 0
   602  00001B                     ___wmul@product:
   603                           	opt stack 0
   604  00001B                     ___lldiv@divisor:
   605                           	opt stack 0
   606                           
   607                           ; 4 bytes @ 0x1A
   608  00001B                     	ds	1
   609  00001C                     ?_sense_can:
   610                           	opt stack 0
   611  00001C                     move_can@canType:
   612                           	opt stack 0
   613  00001C                     get_time@i:
   614                           	opt stack 0
   615  00001C                     ___lwdiv@quotient:
   616                           	opt stack 0
   617                           
   618                           ; 2 bytes @ 0x1B
   619  00001C                     	ds	2
   620  00001E                     ??_move_can:
   621  00001E                     ??_sense_can:
   622  00001E                     ?___lwmod:
   623                           	opt stack 0
   624  00001E                     ___lwmod@dividend:
   625                           	opt stack 0
   626                           
   627                           ; 2 bytes @ 0x1D
   628  00001E                     	ds	1
   629  00001F                     ___lldiv@quotient:
   630                           	opt stack 0
   631                           
   632                           ; 4 bytes @ 0x1E
   633  00001F                     	ds	1
   634  000020                     move_can@i:
   635                           	opt stack 0
   636  000020                     ___lwmod@divisor:
   637                           	opt stack 0
   638                           
   639                           ; 2 bytes @ 0x1F
   640  000020                     	ds	1
   641  000021                     sense_can@cansize:
   642                           	opt stack 0
   643                           
   644                           ; 2 bytes @ 0x20
   645  000021                     	ds	1
   646  000022                     ___lwmod@counter:
   647                           	opt stack 0
   648  000022                     move_can@i_639:
   649                           	opt stack 0
   650                           
   651                           ; 2 bytes @ 0x21
   652  000022                     	ds	1
   653  000023                     ?_printf:
   654                           	opt stack 0
   655  000023                     ___lldiv@counter:
   656                           	opt stack 0
   657  000023                     sense_can@conductOnFall:
   658                           	opt stack 0
   659  000023                     printf@f:
   660                           	opt stack 0
   661                           
   662                           ; 2 bytes @ 0x22
   663  000023                     	ds	1
   664  000024                     move_can@i_640:
   665                           	opt stack 0
   666  000024                     I2C_Master_Init@c:
   667                           	opt stack 0
   668                           
   669                           ; 4 bytes @ 0x23
   670  000024                     	ds	1
   671  000025                     sense_can@i:
   672                           	opt stack 0
   673                           
   674                           ; 2 bytes @ 0x24
   675  000025                     	ds	1
   676  000026                     move_can@i_641:
   677                           	opt stack 0
   678                           
   679                           ; 2 bytes @ 0x25
   680  000026                     	ds	1
   681  000027                     sense_can@i_350:
   682                           	opt stack 0
   683                           
   684                           ; 2 bytes @ 0x26
   685  000027                     	ds	1
   686  000028                     ??_I2C_Master_Init:
   687                           
   688                           ; 1 bytes @ 0x27
   689  000028                     	ds	1
   690  000029                     sense_can@i_351:
   691                           	opt stack 0
   692                           
   693                           ; 2 bytes @ 0x28
   694  000029                     	ds	2
   695  00002B                     ??_printf:
   696  00002B                     sense_can@i_352:
   697                           	opt stack 0
   698                           
   699                           ; 2 bytes @ 0x2A
   700  00002B                     	ds	1
   701  00002C                     
   702                           ; 1 bytes @ 0x2B
   703  00002C                     	ds	1
   704  00002D                     sense_can@H_max:
   705                           	opt stack 0
   706                           
   707                           ; 2 bytes @ 0x2C
   708  00002D                     	ds	2
   709  00002F                     printf@idx:
   710                           	opt stack 0
   711                           
   712                           ; 1 bytes @ 0x2E
   713  00002F                     	ds	1
   714  000030                     printf@ap:
   715                           	opt stack 0
   716                           
   717                           ; 2 bytes @ 0x2F
   718  000030                     	ds	2
   719  000032                     printf@prec:
   720                           	opt stack 0
   721                           
   722                           ; 1 bytes @ 0x31
   723  000032                     	ds	1
   724  000033                     printf@val:
   725                           	opt stack 0
   726                           
   727                           ; 2 bytes @ 0x32
   728  000033                     	ds	2
   729  000035                     printf@flag:
   730                           	opt stack 0
   731                           
   732                           ; 1 bytes @ 0x34
   733  000035                     	ds	1
   734  000036                     printf@width:
   735                           	opt stack 0
   736                           
   737                           ; 2 bytes @ 0x35
   738  000036                     	ds	2
   739  000038                     printf@c:
   740                           	opt stack 0
   741                           
   742                           ; 1 bytes @ 0x37
   743  000038                     	ds	1
   744  000039                     ??_welcome:
   745  000039                     ??_display_time:
   746  000039                     ??_display_sorting_time:
   747  000039                     ?_readLightSensor:
   748                           	opt stack 0
   749                           
   750                           ; 2 bytes @ 0x38
   751  000039                     	ds	2
   752  00003B                     ??_readLightSensor:
   753  00003B                     display_time@i:
   754                           	opt stack 0
   755                           
   756                           ; 1 bytes @ 0x3A
   757  00003B                     	ds	3
   758  00003E                     readLightSensor@i:
   759                           	opt stack 0
   760                           
   761                           ; 2 bytes @ 0x3D
   762  00003E                     	ds	2
   763  000040                     readLightSensor@H_max:
   764                           	opt stack 0
   765                           
   766                           ; 2 bytes @ 0x3F
   767  000040                     	ds	2
   768  000042                     ??_sort:
   769                           
   770                           ; 1 bytes @ 0x41
   771  000042                     	ds	2
   772  000044                     sort@tap:
   773                           	opt stack 0
   774                           
   775                           ; 2 bytes @ 0x43
   776  000044                     	ds	2
   777  000046                     sort@tin:
   778                           	opt stack 0
   779                           
   780                           ; 2 bytes @ 0x45
   781  000046                     	ds	2
   782  000048                     sort@noLabel:
   783                           	opt stack 0
   784                           
   785                           ; 2 bytes @ 0x47
   786  000048                     	ds	2
   787  00004A                     sort@can:
   788                           	opt stack 0
   789                           
   790                           ; 2 bytes @ 0x49
   791  00004A                     	ds	2
   792  00004C                     tblptru	equ	0xFF8
   793                           postinc0	equ	0xFEE
   794                           wreg	equ	0xFE8
   795                           
   796                           ; 1 bytes @ 0x4B
   797 ;;
   798 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   799 ;;
   800 ;; *************** function _main *****************
   801 ;; Defined at:
   802 ;;		line 21 in file "main.c"
   803 ;; Parameters:    Size  Location     Type
   804 ;;		None
   805 ;; Auto vars:     Size  Location     Type
   806 ;;		None
   807 ;; Return value:  Size  Location     Type
   808 ;;                  1    wreg      void 
   809 ;; Registers used:
   810 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   811 ;; Tracked objects:
   812 ;;		On entry : 0/0
   813 ;;		On exit  : 0/0
   814 ;;		Unchanged: 0/0
   815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   819 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   820 ;;Total ram usage:        0 bytes
   821 ;; Hardware stack levels required when called:    9
   822 ;; This function calls:
   823 ;;		_debug
   824 ;;		_display_sorting_time
   825 ;;		_display_time
   826 ;;		_initPIC
   827 ;;		_sort
   828 ;;		_welcome
   829 ;; This function is called by:
   830 ;;		Startup code after reset
   831 ;; This function uses a non-reentrant model
   832 ;;
   833                           
   834                           	psect	text0
   835  0024A8                     __ptext0:
   836                           	opt stack 0
   837  0024A8                     _main:
   838                           	opt stack 22
   839                           
   840                           ;main.c: 24: initPIC();
   841                           
   842                           ;incstack = 0
   843  0024A8  ECE2  F00F         	call	_initPIC	;wreg free
   844  0024AC                     l3686:
   845                           
   846                           ;main.c: 26: if (mode == 0) {
   847  0024AC  5061               	movf	_mode,w,c
   848  0024AE  A4D8               	btfss	status,2,c
   849  0024B0  D003               	goto	l3690
   850                           
   851                           ;main.c: 27: welcome();
   852  0024B2  EC6A  F010         	call	_welcome	;wreg free
   853                           
   854                           ;main.c: 29: } else if (mode == 1) {
   855  0024B6  D7FA               	goto	l3686
   856  0024B8                     l3690:
   857  0024B8  0461               	decf	_mode,w,c
   858  0024BA  A4D8               	btfss	status,2,c
   859  0024BC  D003               	goto	l3694
   860                           
   861                           ;main.c: 30: display_time();
   862  0024BE  ECBD  F00D         	call	_display_time	;wreg free
   863                           
   864                           ;main.c: 31: }
   865  0024C2  D7F4               	goto	l3686
   866  0024C4                     l3694:
   867                           
   868                           ;main.c: 33: else if (mode == 2) {
   869  0024C4  0E02               	movlw	2
   870  0024C6  1861               	xorwf	_mode,w,c
   871  0024C8  A4D8               	btfss	status,2,c
   872  0024CA  D003               	goto	l3698
   873                           
   874                           ;main.c: 34: sort();
   875  0024CC  EC43  F00D         	call	_sort	;wreg free
   876                           
   877                           ;main.c: 35: }
   878  0024D0  D7ED               	goto	l3686
   879  0024D2                     l3698:
   880                           
   881                           ;main.c: 37: else if (mode == 3) {
   882  0024D2  0E03               	movlw	3
   883  0024D4  1861               	xorwf	_mode,w,c
   884  0024D6  A4D8               	btfss	status,2,c
   885  0024D8  D003               	goto	l3702
   886                           
   887                           ;main.c: 38: display_sorting_time();
   888  0024DA  EC68  F00C         	call	_display_sorting_time	;wreg free
   889                           
   890                           ;main.c: 39: }
   891  0024DE  D7E6               	goto	l3686
   892  0024E0                     l3702:
   893                           
   894                           ;main.c: 41: else if (mode == 4) {
   895  0024E0  0E04               	movlw	4
   896  0024E2  1861               	xorwf	_mode,w,c
   897  0024E4  A4D8               	btfss	status,2,c
   898  0024E6  D7E2               	goto	l3686
   899                           
   900                           ;main.c: 42: debug();
   901  0024E8  EC2C  F012         	call	_debug	;wreg free
   902  0024EC  D7DF               	goto	l3686
   903  0024EE                     __end_of_main:
   904                           	opt stack 0
   905                           tblptru	equ	0xFF8
   906                           postinc0	equ	0xFEE
   907                           wreg	equ	0xFE8
   908                           status	equ	0xFD8
   909                           
   910 ;; *************** function _welcome *****************
   911 ;; Defined at:
   912 ;;		line 21 in file "picState.c"
   913 ;; Parameters:    Size  Location     Type
   914 ;;		None
   915 ;; Auto vars:     Size  Location     Type
   916 ;;		None
   917 ;; Return value:  Size  Location     Type
   918 ;;                  2   86[None  ] int 
   919 ;; Registers used:
   920 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   921 ;; Tracked objects:
   922 ;;		On entry : 0/0
   923 ;;		On exit  : 0/0
   924 ;;		Unchanged: 0/0
   925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   928 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   929 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   930 ;;Total ram usage:        2 bytes
   931 ;; Hardware stack levels used:    1
   932 ;; Hardware stack levels required when called:    7
   933 ;; This function calls:
   934 ;;		_lcdInst
   935 ;;		_printf
   936 ;; This function is called by:
   937 ;;		_main
   938 ;; This function uses a non-reentrant model
   939 ;;
   940                           
   941                           	psect	text1
   942  0020D4                     __ptext1:
   943                           	opt stack 0
   944  0020D4                     _welcome:
   945                           	opt stack 23
   946                           
   947                           ;picState.c: 22: lcdInst(0x01);;
   948                           
   949                           ;incstack = 0
   950  0020D4  0E01               	movlw	1
   951  0020D6  EC42  F013         	call	_lcdInst
   952                           
   953                           ;picState.c: 23: lcdInst(0b10000000);;
   954  0020DA  0E80               	movlw	128
   955  0020DC  EC42  F013         	call	_lcdInst
   956                           
   957                           ;picState.c: 24: _delay((unsigned long)((200)*(8000000/4000.0)));
   958  0020E0  0E03               	movlw	3
   959  0020E2  6E3A               	movwf	(??_welcome+1)& (0+255),c
   960  0020E4  0E08               	movlw	8
   961  0020E6  6E39               	movwf	??_welcome& (0+255),c
   962  0020E8  0E77               	movlw	119
   963  0020EA                     u3277:
   964  0020EA  2EE8               	decfsz	wreg,f,c
   965  0020EC  D7FE               	bra	u3277
   966  0020EE  2E39               	decfsz	??_welcome& (0+255),f,c
   967  0020F0  D7FC               	bra	u3277
   968  0020F2  2E3A               	decfsz	(??_welcome+1)& (0+255),f,c
   969  0020F4  D7FA               	bra	u3277
   970  0020F6  F000               	nop	
   971                           
   972                           ;picState.c: 26: printf("Welcome!");
   973  0020F8  0EBC               	movlw	low STR_2
   974  0020FA  6E23               	movwf	printf@f,c
   975  0020FC  0E10               	movlw	high STR_2
   976  0020FE  6E24               	movwf	printf@f+1,c
   977  002100  EC6A  F008         	call	_printf	;wreg free
   978                           
   979                           ;picState.c: 27: printf("            ");
   980  002104  0E87               	movlw	low (STR_6+2)
   981  002106  6E23               	movwf	printf@f,c
   982  002108  0E10               	movlw	high (STR_6+2)
   983  00210A  6E24               	movwf	printf@f+1,c
   984  00210C  EC6A  F008         	call	_printf	;wreg free
   985                           
   986                           ;picState.c: 28: printf("2 Back to start menu");
   987  002110  0E2B               	movlw	low STR_4
   988  002112  6E23               	movwf	printf@f,c
   989  002114  0E10               	movlw	high STR_4
   990  002116  6E24               	movwf	printf@f+1,c
   991  002118  EC6A  F008         	call	_printf	;wreg free
   992                           
   993                           ;picState.c: 29: lcdInst(0b11000000);;
   994  00211C  0EC0               	movlw	192
   995  00211E  EC42  F013         	call	_lcdInst
   996                           
   997                           ;picState.c: 30: printf("1 Time");
   998  002122  0EC5               	movlw	low STR_5
   999  002124  6E23               	movwf	printf@f,c
  1000  002126  0E10               	movlw	high STR_5
  1001  002128  6E24               	movwf	printf@f+1,c
  1002  00212A  EC6A  F008         	call	_printf	;wreg free
  1003                           
  1004                           ;picState.c: 31: printf("              ");
  1005  00212E  0E85               	movlw	low STR_6
  1006  002130  6E23               	movwf	printf@f,c
  1007  002132  0E10               	movlw	high STR_6
  1008  002134  6E24               	movwf	printf@f+1,c
  1009  002136  EC6A  F008         	call	_printf	;wreg free
  1010                           
  1011                           ;picState.c: 32: printf("A Sorting");
  1012  00213A  0EB2               	movlw	low STR_7
  1013  00213C  6E23               	movwf	printf@f,c
  1014  00213E  0E10               	movlw	high STR_7
  1015  002140  6E24               	movwf	printf@f+1,c
  1016  002142  EC6A  F008         	call	_printf	;wreg free
  1017                           
  1018                           ;picState.c: 33: LATDbits.LATD0 = 0;
  1019  002146  908C               	bcf	3980,0,c	;volatile
  1020                           
  1021                           ;picState.c: 34: LATCbits.LATC1 = 0;
  1022  002148  928B               	bcf	3979,1,c	;volatile
  1023  00214A                     l3554:
  1024  00214A  5061               	movf	_mode,w,c
  1025  00214C  A4D8               	btfss	status,2,c
  1026  00214E  0012               	return	
  1027  002150  D7FC               	goto	l3554
  1028  002152                     __end_of_welcome:
  1029                           	opt stack 0
  1030                           tblptru	equ	0xFF8
  1031                           postinc0	equ	0xFEE
  1032                           wreg	equ	0xFE8
  1033                           status	equ	0xFD8
  1034                           
  1035 ;; *************** function _sort *****************
  1036 ;; Defined at:
  1037 ;;		line 61 in file "picState.c"
  1038 ;; Parameters:    Size  Location     Type
  1039 ;;		None
  1040 ;; Auto vars:     Size  Location     Type
  1041 ;;  can             2   73[COMRAM] int 
  1042 ;;  noLabel         2   71[COMRAM] int 
  1043 ;;  tin             2   69[COMRAM] int 
  1044 ;;  tap             2   67[COMRAM] int 
  1045 ;; Return value:  Size  Location     Type
  1046 ;;                  2   90[None  ] int 
  1047 ;; Registers used:
  1048 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1049 ;; Tracked objects:
  1050 ;;		On entry : 0/0
  1051 ;;		On exit  : 0/0
  1052 ;;		Unchanged: 0/0
  1053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1055 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1056 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1057 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1058 ;;Total ram usage:       10 bytes
  1059 ;; Hardware stack levels used:    1
  1060 ;; Hardware stack levels required when called:    8
  1061 ;; This function calls:
  1062 ;;		_gate
  1063 ;;		_get_time
  1064 ;;		_lcdInst
  1065 ;;		_main_servo_control
  1066 ;;		_move_can
  1067 ;;		_printf
  1068 ;;		_readLightSensor
  1069 ;;		_sense_can
  1070 ;;		_shaker
  1071 ;;		_side_servo_control
  1072 ;; This function is called by:
  1073 ;;		_main
  1074 ;; This function uses a non-reentrant model
  1075 ;;
  1076                           
  1077                           	psect	text2
  1078  001A86                     __ptext2:
  1079                           	opt stack 0
  1080  001A86                     _sort:
  1081                           	opt stack 22
  1082                           
  1083                           ;picState.c: 62: int tap = 0;
  1084                           
  1085                           ;incstack = 0
  1086  001A86  0E00               	movlw	0
  1087  001A88  6E45               	movwf	sort@tap+1,c
  1088  001A8A  0E00               	movlw	0
  1089  001A8C  6E44               	movwf	sort@tap,c
  1090                           
  1091                           ;picState.c: 63: int tin = 0;
  1092  001A8E  0E00               	movlw	0
  1093  001A90  6E47               	movwf	sort@tin+1,c
  1094  001A92  0E00               	movlw	0
  1095  001A94  6E46               	movwf	sort@tin,c
  1096                           
  1097                           ;picState.c: 64: int noLabel = 0;
  1098  001A96  0E00               	movlw	0
  1099  001A98  6E49               	movwf	sort@noLabel+1,c
  1100  001A9A  0E00               	movlw	0
  1101  001A9C  6E48               	movwf	sort@noLabel,c
  1102                           
  1103                           ;picState.c: 65: lcdInst(0x01);;
  1104  001A9E  0E01               	movlw	1
  1105  001AA0  EC42  F013         	call	_lcdInst
  1106                           
  1107                           ;picState.c: 66: _delay((unsigned long)((100)*(8000000/4000.0)));
  1108  001AA4  0E02               	movlw	2
  1109  001AA6  6E43               	movwf	(??_sort+1)& (0+255),c
  1110  001AA8  0E04               	movlw	4
  1111  001AAA  6E42               	movwf	??_sort& (0+255),c
  1112  001AAC  0EBA               	movlw	186
  1113  001AAE                     u3287:
  1114  001AAE  2EE8               	decfsz	wreg,f,c
  1115  001AB0  D7FE               	bra	u3287
  1116  001AB2  2E42               	decfsz	??_sort& (0+255),f,c
  1117  001AB4  D7FC               	bra	u3287
  1118  001AB6  2E43               	decfsz	(??_sort+1)& (0+255),f,c
  1119  001AB8  D7FA               	bra	u3287
  1120  001ABA  D000               	nop2	
  1121                           
  1122                           ;picState.c: 67: printf("Sorting Started");
  1123  001ABC  0E65               	movlw	low STR_10
  1124  001ABE  6E23               	movwf	printf@f,c
  1125  001AC0  0E10               	movlw	high STR_10
  1126  001AC2  6E24               	movwf	printf@f+1,c
  1127  001AC4  EC6A  F008         	call	_printf	;wreg free
  1128                           
  1129                           ;picState.c: 68: lcdInst(0b11000000);;
  1130  001AC8  0EC0               	movlw	192
  1131  001ACA  EC42  F013         	call	_lcdInst
  1132                           
  1133                           ;picState.c: 69: printf("Press 1/2/A to stop");
  1134  001ACE  0E40               	movlw	low STR_11
  1135  001AD0  6E23               	movwf	printf@f,c
  1136  001AD2  0E10               	movlw	high STR_11
  1137  001AD4  6E24               	movwf	printf@f+1,c
  1138  001AD6  EC6A  F008         	call	_printf	;wreg free
  1139                           
  1140                           ;picState.c: 70: get_time(start_time);
  1141  001ADA  0E9C               	movlw	low _start_time
  1142  001ADC  6E1A               	movwf	get_time@datime,c
  1143  001ADE  0E00               	movlw	high _start_time
  1144  001AE0  6E1B               	movwf	get_time@datime+1,c
  1145  001AE2  ECA9  F010         	call	_get_time	;wreg free
  1146                           
  1147                           ;picState.c: 71: lcdInst(0b10000000);;
  1148  001AE6  0E80               	movlw	128
  1149  001AE8  EC42  F013         	call	_lcdInst
  1150                           
  1151                           ;picState.c: 73: while (mode == 2){
  1152  001AEC  D041               	goto	l239
  1153  001AEE                     l3610:
  1154                           
  1155                           ;picState.c: 74: main_servo_control(0);
  1156  001AEE  0E00               	movlw	0
  1157  001AF0  6E18               	movwf	main_servo_control@dir+1,c
  1158  001AF2  0E00               	movlw	0
  1159  001AF4  6E17               	movwf	main_servo_control@dir,c
  1160  001AF6  EC20  F00F         	call	_main_servo_control	;wreg free
  1161                           
  1162                           ;picState.c: 75: side_servo_control(0);
  1163  001AFA  0E00               	movlw	0
  1164  001AFC  6E18               	movwf	side_servo_control@dir+1,c
  1165  001AFE  0E00               	movlw	0
  1166  001B00  6E17               	movwf	side_servo_control@dir,c
  1167  001B02  ECAB  F00E         	call	_side_servo_control	;wreg free
  1168                           
  1169                           ;picState.c: 77: if (readLightSensor() == 1) {
  1170  001B06  EC8F  F00F         	call	_readLightSensor	;wreg free
  1171  001B0A  0439               	decf	?_readLightSensor,w,c
  1172  001B0C  103A               	iorwf	?_readLightSensor+1,w,c
  1173  001B0E  A4D8               	btfss	status,2,c
  1174  001B10  D01F               	goto	l3622
  1175                           
  1176                           ;picState.c: 79: LATDbits.LATD0 = 1;
  1177  001B12  808C               	bsf	3980,0,c	;volatile
  1178                           
  1179                           ;picState.c: 80: lcdInst(0b10000000);;
  1180  001B14  0E80               	movlw	128
  1181  001B16  EC42  F013         	call	_lcdInst
  1182                           
  1183                           ;picState.c: 81: lcdInst(0b11000000);;
  1184  001B1A  0EC0               	movlw	192
  1185  001B1C  EC42  F013         	call	_lcdInst
  1186                           
  1187                           ;picState.c: 82: int can = sense_can();
  1188  001B20  ECF0  F009         	call	_sense_can	;wreg free
  1189  001B24  C01C  F04A         	movff	?_sense_can,sort@can
  1190  001B28  C01D  F04B         	movff	?_sense_can+1,sort@can+1
  1191                           
  1192                           ;picState.c: 83: LATDbits.LATD0 = 0;
  1193  001B2C  908C               	bcf	3980,0,c	;volatile
  1194                           
  1195                           ;picState.c: 84: move_can(can);
  1196  001B2E  C04A  F01C         	movff	sort@can,move_can@canType
  1197  001B32  C04B  F01D         	movff	sort@can+1,move_can@canType+1
  1198  001B36  EC4D  F00B         	call	_move_can	;wreg free
  1199                           
  1200                           ;picState.c: 86: printf("%d", can);
  1201  001B3A  0ECC               	movlw	low STR_12
  1202  001B3C  6E23               	movwf	printf@f,c
  1203  001B3E  0E10               	movlw	high STR_12
  1204  001B40  6E24               	movwf	printf@f+1,c
  1205  001B42  C04A  F025         	movff	sort@can,?_printf+2
  1206  001B46  C04B  F026         	movff	sort@can+1,?_printf+3
  1207  001B4A  EC6A  F008         	call	_printf	;wreg free
  1208                           
  1209                           ;picState.c: 87: } else {
  1210  001B4E  D010               	goto	l239
  1211  001B50                     l3622:
  1212                           
  1213                           ;picState.c: 89: shaker();
  1214  001B50  EC25  F011         	call	_shaker	;wreg free
  1215                           
  1216                           ;picState.c: 90: LATDbits.LATD0 = 0;
  1217  001B54  908C               	bcf	3980,0,c	;volatile
  1218                           
  1219                           ;picState.c: 91: _delay((unsigned long)((500)*(8000000/4000.0)));
  1220  001B56  0E06               	movlw	6
  1221  001B58  6E43               	movwf	(??_sort+1)& (0+255),c
  1222  001B5A  0E13               	movlw	19
  1223  001B5C  6E42               	movwf	??_sort& (0+255),c
  1224  001B5E  0EAE               	movlw	174
  1225  001B60                     u3297:
  1226  001B60  2EE8               	decfsz	wreg,f,c
  1227  001B62  D7FE               	bra	u3297
  1228  001B64  2E42               	decfsz	??_sort& (0+255),f,c
  1229  001B66  D7FC               	bra	u3297
  1230  001B68  2E43               	decfsz	(??_sort+1)& (0+255),f,c
  1231  001B6A  D7FA               	bra	u3297
  1232                           
  1233                           ;picState.c: 92: gate();
  1234  001B6C  ECDA  F011         	call	_gate	;wreg free
  1235  001B70                     l239:
  1236  001B70  0E02               	movlw	2
  1237  001B72  1861               	xorwf	_mode,w,c
  1238  001B74  A4D8               	btfss	status,2,c
  1239  001B76  0012               	return	
  1240  001B78  D7BA               	goto	l3610
  1241  001B7A                     __end_of_sort:
  1242                           	opt stack 0
  1243                           tblptru	equ	0xFF8
  1244                           postinc0	equ	0xFEE
  1245                           wreg	equ	0xFE8
  1246                           status	equ	0xFD8
  1247                           
  1248 ;; *************** function _shaker *****************
  1249 ;; Defined at:
  1250 ;;		line 18 in file "motor.c"
  1251 ;; Parameters:    Size  Location     Type
  1252 ;;		None
  1253 ;; Auto vars:     Size  Location     Type
  1254 ;;  i               2   23[COMRAM] int 
  1255 ;; Return value:  Size  Location     Type
  1256 ;;                  1    wreg      void 
  1257 ;; Registers used:
  1258 ;;		wreg, status,2, status,0
  1259 ;; Tracked objects:
  1260 ;;		On entry : 0/0
  1261 ;;		On exit  : 0/0
  1262 ;;		Unchanged: 0/0
  1263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1265 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1266 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1267 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1268 ;;Total ram usage:        3 bytes
  1269 ;; Hardware stack levels used:    1
  1270 ;; Hardware stack levels required when called:    4
  1271 ;; This function calls:
  1272 ;;		Nothing
  1273 ;; This function is called by:
  1274 ;;		_sort
  1275 ;; This function uses a non-reentrant model
  1276 ;;
  1277                           
  1278                           	psect	text3
  1279  00224A                     __ptext3:
  1280                           	opt stack 0
  1281  00224A                     _shaker:
  1282                           	opt stack 25
  1283                           
  1284                           ;motor.c: 19: int i = 0;
  1285                           
  1286                           ;incstack = 0
  1287  00224A  0E00               	movlw	0
  1288  00224C  6E19               	movwf	shaker@i+1,c
  1289  00224E  0E00               	movlw	0
  1290  002250  6E18               	movwf	shaker@i,c
  1291                           
  1292                           ;motor.c: 20: for (i = 0; i<200; i++){
  1293  002252  0E00               	movlw	0
  1294  002254  6E19               	movwf	shaker@i+1,c
  1295  002256  0E00               	movlw	0
  1296  002258  6E18               	movwf	shaker@i,c
  1297  00225A                     l2872:
  1298  00225A  BE19               	btfsc	shaker@i+1,7,c
  1299  00225C  D006               	goto	l404
  1300  00225E  5019               	movf	shaker@i+1,w,c
  1301  002260  E125               	bnz	l406
  1302  002262  0EC8               	movlw	200
  1303  002264  5C18               	subwf	shaker@i,w,c
  1304  002266  B0D8               	btfsc	status,0,c
  1305  002268  0012               	return	
  1306  00226A                     l404:
  1307                           
  1308                           ;motor.c: 22: LATBbits.LATB2 = 1;
  1309  00226A  848A               	bsf	3978,2,c	;volatile
  1310                           
  1311                           ;motor.c: 23: LATCbits.LATC1 = 1;
  1312  00226C  828B               	bsf	3979,1,c	;volatile
  1313                           
  1314                           ;motor.c: 25: _delay((unsigned long)((8.5)*(8000000/4000.0)));
  1315  00226E  0E17               	movlw	23
  1316  002270  6E17               	movwf	??_shaker& (0+255),c
  1317  002272  0E12               	movlw	18
  1318  002274                     u3307:
  1319  002274  2EE8               	decfsz	wreg,f,c
  1320  002276  D7FE               	bra	u3307
  1321  002278  2E17               	decfsz	??_shaker& (0+255),f,c
  1322  00227A  D7FC               	bra	u3307
  1323  00227C  D000               	nop2	
  1324                           
  1325                           ;motor.c: 27: LATCbits.LATC1 = 1;
  1326  00227E  828B               	bsf	3979,1,c	;volatile
  1327                           
  1328                           ;motor.c: 28: LATBbits.LATB2 = 0;
  1329  002280  948A               	bcf	3978,2,c	;volatile
  1330                           
  1331                           ;motor.c: 30: _delay((unsigned long)((10)*(8000000/4000.0)));
  1332  002282  0E1A               	movlw	26
  1333  002284  6E17               	movwf	??_shaker& (0+255),c
  1334  002286  0EF8               	movlw	248
  1335  002288                     u3317:
  1336  002288  2EE8               	decfsz	wreg,f,c
  1337  00228A  D7FE               	bra	u3317
  1338  00228C  2E17               	decfsz	??_shaker& (0+255),f,c
  1339  00228E  D7FC               	bra	u3317
  1340  002290  D000               	nop2	
  1341                           
  1342                           ;motor.c: 32: LATBbits.LATB2 = 0;
  1343  002292  948A               	bcf	3978,2,c	;volatile
  1344                           
  1345                           ;motor.c: 33: LATCbits.LATC1 = 0;
  1346  002294  928B               	bcf	3979,1,c	;volatile
  1347                           
  1348                           ;motor.c: 35: _delay((unsigned long)((1.5)*(8000000/4000.0)));
  1349  002296  0E04               	movlw	4
  1350  002298  6E17               	movwf	??_shaker& (0+255),c
  1351  00229A  0EE4               	movlw	228
  1352  00229C                     u3327:
  1353  00229C  2EE8               	decfsz	wreg,f,c
  1354  00229E  D7FE               	bra	u3327
  1355  0022A0  2E17               	decfsz	??_shaker& (0+255),f,c
  1356  0022A2  D7FC               	bra	u3327
  1357  0022A4  D000               	nop2	
  1358  0022A6  4A18               	infsnz	shaker@i,f,c
  1359  0022A8  2A19               	incf	shaker@i+1,f,c
  1360  0022AA  D7D7               	goto	l2872
  1361  0022AC                     l406:
  1362  0022AC  0012               	return		;funcret
  1363  0022AE                     __end_of_shaker:
  1364                           	opt stack 0
  1365                           tblptru	equ	0xFF8
  1366                           postinc0	equ	0xFEE
  1367                           wreg	equ	0xFE8
  1368                           status	equ	0xFD8
  1369                           
  1370 ;; *************** function _sense_can *****************
  1371 ;; Defined at:
  1372 ;;		line 31 in file "adc.c"
  1373 ;; Parameters:    Size  Location     Type
  1374 ;;		None
  1375 ;; Auto vars:     Size  Location     Type
  1376 ;;  i               2   42[COMRAM] int 
  1377 ;;  i               2   40[COMRAM] int 
  1378 ;;  i               2   38[COMRAM] int 
  1379 ;;  i               2   36[COMRAM] int 
  1380 ;;  H_max           2   44[COMRAM] int 
  1381 ;;  conductOnFal    2   34[COMRAM] int 
  1382 ;;  cansize         2   32[COMRAM] int 
  1383 ;; Return value:  Size  Location     Type
  1384 ;;                  2   27[COMRAM] int 
  1385 ;; Registers used:
  1386 ;;		wreg, status,2, status,0, cstack
  1387 ;; Tracked objects:
  1388 ;;		On entry : 0/0
  1389 ;;		On exit  : 0/0
  1390 ;;		Unchanged: 0/0
  1391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1392 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1393 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1394 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1395 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1396 ;;Total ram usage:       19 bytes
  1397 ;; Hardware stack levels used:    1
  1398 ;; Hardware stack levels required when called:    5
  1399 ;; This function calls:
  1400 ;;		_main_servo_control
  1401 ;;		_readADC
  1402 ;;		_side_servo_control
  1403 ;; This function is called by:
  1404 ;;		_sort
  1405 ;; This function uses a non-reentrant model
  1406 ;;
  1407                           
  1408                           	psect	text4
  1409  0013E0                     __ptext4:
  1410                           	opt stack 0
  1411  0013E0                     _sense_can:
  1412                           	opt stack 24
  1413                           
  1414                           ;adc.c: 33: int H_max = 0;
  1415                           
  1416                           ;incstack = 0
  1417  0013E0  0E00               	movlw	0
  1418  0013E2  6E2E               	movwf	sense_can@H_max+1,c
  1419  0013E4  0E00               	movlw	0
  1420  0013E6  6E2D               	movwf	sense_can@H_max,c
  1421                           
  1422                           ;adc.c: 34: int cansize = 0;
  1423  0013E8  0E00               	movlw	0
  1424  0013EA  6E22               	movwf	sense_can@cansize+1,c
  1425  0013EC  0E00               	movlw	0
  1426  0013EE  6E21               	movwf	sense_can@cansize,c
  1427                           
  1428                           ;adc.c: 35: int conductOnFall = 0;
  1429  0013F0  0E00               	movlw	0
  1430  0013F2  6E24               	movwf	sense_can@conductOnFall+1,c
  1431  0013F4  0E00               	movlw	0
  1432  0013F6  6E23               	movwf	sense_can@conductOnFall,c
  1433                           
  1434                           ;adc.c: 41: for (int i = 0; i < 10000; i++) {
  1435  0013F8  0E00               	movlw	0
  1436  0013FA  6E26               	movwf	sense_can@i+1,c
  1437  0013FC  0E00               	movlw	0
  1438  0013FE  6E25               	movwf	sense_can@i,c
  1439  001400                     l2572:
  1440  001400  BE26               	btfsc	sense_can@i+1,7,c
  1441  001402  D006               	goto	l2576
  1442  001404  0E10               	movlw	16
  1443  001406  5C25               	subwf	sense_can@i,w,c
  1444  001408  0E27               	movlw	39
  1445  00140A  5826               	subwfb	sense_can@i+1,w,c
  1446  00140C  B0D8               	btfsc	status,0,c
  1447  00140E  D029               	goto	l2594
  1448  001410                     l2576:
  1449                           
  1450                           ;adc.c: 42: readADC(0);
  1451  001410  0E00               	movlw	0
  1452  001412  ECBB  F012         	call	_readADC
  1453                           
  1454                           ;adc.c: 43: if (ADRESH > H_max) {
  1455  001416  50C4               	movf	4036,w,c	;volatile
  1456  001418  6E1E               	movwf	??_sense_can& (0+255),c
  1457  00141A  6A1F               	clrf	(??_sense_can+1)& (0+255),c
  1458  00141C  501E               	movf	??_sense_can,w,c
  1459  00141E  5C2D               	subwf	sense_can@H_max,w,c
  1460  001420  502E               	movf	sense_can@H_max+1,w,c
  1461  001422  0A80               	xorlw	128
  1462  001424  6E20               	movwf	(??_sense_can+2)& (0+255),c
  1463  001426  501F               	movf	??_sense_can+1,w,c
  1464  001428  0A80               	xorlw	128
  1465  00142A  5820               	subwfb	(??_sense_can+2)& (0+255),w,c
  1466  00142C  B0D8               	btfsc	status,0,c
  1467  00142E  D003               	goto	l2582
  1468                           
  1469                           ;adc.c: 44: H_max = ADRESH;
  1470  001430  CFC4 F02D          	movff	4036,sense_can@H_max	;volatile
  1471  001434  6A2E               	clrf	sense_can@H_max+1,c
  1472  001436                     l2582:
  1473                           
  1474                           ;adc.c: 45: }
  1475                           ;adc.c: 47: if (ADRESH > 30){
  1476  001436  0E1E               	movlw	30
  1477  001438  64C4               	cpfsgt	4036,c	;volatile
  1478  00143A  D004               	goto	l2586
  1479                           
  1480                           ;adc.c: 48: conductOnFall = 1;
  1481  00143C  0E00               	movlw	0
  1482  00143E  6E24               	movwf	sense_can@conductOnFall+1,c
  1483  001440  0E01               	movlw	1
  1484  001442  6E23               	movwf	sense_can@conductOnFall,c
  1485  001444                     l2586:
  1486                           
  1487                           ;adc.c: 49: }
  1488                           ;adc.c: 51: if (H_max >= 0xA0) {
  1489  001444  BE2E               	btfsc	sense_can@H_max+1,7,c
  1490  001446  D00A               	goto	l2590
  1491  001448  502E               	movf	sense_can@H_max+1,w,c
  1492  00144A  E104               	bnz	u2010
  1493  00144C  0EA0               	movlw	160
  1494  00144E  5C2D               	subwf	sense_can@H_max,w,c
  1495  001450  A0D8               	btfss	status,0,c
  1496  001452  D004               	goto	l2590
  1497  001454                     u2010:
  1498                           
  1499                           ;adc.c: 52: conductOnFall = 1;
  1500  001454  0E00               	movlw	0
  1501  001456  6E24               	movwf	sense_can@conductOnFall+1,c
  1502  001458  0E01               	movlw	1
  1503  00145A  6E23               	movwf	sense_can@conductOnFall,c
  1504  00145C                     l2590:
  1505  00145C  4A25               	infsnz	sense_can@i,f,c
  1506  00145E  2A26               	incf	sense_can@i+1,f,c
  1507  001460  D7CF               	goto	l2572
  1508  001462                     l2594:
  1509                           
  1510                           ;adc.c: 53: }
  1511                           ;adc.c: 54: }
  1512                           ;adc.c: 57: _delay((unsigned long)((100)*(8000000/4000.0)));
  1513  001462  0E02               	movlw	2
  1514  001464  6E1F               	movwf	(??_sense_can+1)& (0+255),c
  1515  001466  0E04               	movlw	4
  1516  001468  6E1E               	movwf	??_sense_can& (0+255),c
  1517  00146A  0EBA               	movlw	186
  1518  00146C                     u3337:
  1519  00146C  2EE8               	decfsz	wreg,f,c
  1520  00146E  D7FE               	bra	u3337
  1521  001470  2E1E               	decfsz	??_sense_can& (0+255),f,c
  1522  001472  D7FC               	bra	u3337
  1523  001474  2E1F               	decfsz	(??_sense_can+1)& (0+255),f,c
  1524  001476  D7FA               	bra	u3337
  1525  001478  D000               	nop2	
  1526                           
  1527                           ;adc.c: 58: if (PORTBbits.RB0 == 1){
  1528  00147A  A081               	btfss	3969,0,c	;volatile
  1529  00147C  D004               	goto	l2600
  1530                           
  1531                           ;adc.c: 59: cansize = 0;
  1532  00147E  0E00               	movlw	0
  1533  001480  6E22               	movwf	sense_can@cansize+1,c
  1534  001482  0E00               	movlw	0
  1535  001484  D003               	goto	L1
  1536  001486                     l2600:
  1537                           
  1538                           ;adc.c: 61: else {
  1539                           ;adc.c: 62: cansize = 1;
  1540  001486  0E00               	movlw	0
  1541  001488  6E22               	movwf	sense_can@cansize+1,c
  1542  00148A  0E01               	movlw	1
  1543  00148C                     L1:
  1544  00148C  6E21               	movwf	sense_can@cansize,c
  1545                           
  1546                           ;adc.c: 63: }
  1547                           ;adc.c: 65: LATDbits.LATD0 = 0;
  1548  00148E  908C               	bcf	3980,0,c	;volatile
  1549                           
  1550                           ;adc.c: 66: main_servo_control(0);
  1551  001490  0E00               	movlw	0
  1552  001492  6E18               	movwf	main_servo_control@dir+1,c
  1553  001494  0E00               	movlw	0
  1554  001496  6E17               	movwf	main_servo_control@dir,c
  1555  001498  EC20  F00F         	call	_main_servo_control	;wreg free
  1556                           
  1557                           ;adc.c: 67: side_servo_control(0);
  1558  00149C  0E00               	movlw	0
  1559  00149E  6E18               	movwf	side_servo_control@dir+1,c
  1560  0014A0  0E00               	movlw	0
  1561  0014A2  6E17               	movwf	side_servo_control@dir,c
  1562  0014A4  ECAB  F00E         	call	_side_servo_control	;wreg free
  1563                           
  1564                           ;adc.c: 68: _delay((unsigned long)((500)*(8000000/4000.0)));
  1565  0014A8  0E06               	movlw	6
  1566  0014AA  6E1F               	movwf	(??_sense_can+1)& (0+255),c
  1567  0014AC  0E13               	movlw	19
  1568  0014AE  6E1E               	movwf	??_sense_can& (0+255),c
  1569  0014B0  0EAE               	movlw	174
  1570  0014B2                     u3347:
  1571  0014B2  2EE8               	decfsz	wreg,f,c
  1572  0014B4  D7FE               	bra	u3347
  1573  0014B6  2E1E               	decfsz	??_sense_can& (0+255),f,c
  1574  0014B8  D7FC               	bra	u3347
  1575  0014BA  2E1F               	decfsz	(??_sense_can+1)& (0+255),f,c
  1576  0014BC  D7FA               	bra	u3347
  1577                           
  1578                           ;adc.c: 69: main_servo_control(0);
  1579  0014BE  0E00               	movlw	0
  1580  0014C0  6E18               	movwf	main_servo_control@dir+1,c
  1581  0014C2  0E00               	movlw	0
  1582  0014C4  6E17               	movwf	main_servo_control@dir,c
  1583  0014C6  EC20  F00F         	call	_main_servo_control	;wreg free
  1584                           
  1585                           ;adc.c: 70: side_servo_control(0);
  1586  0014CA  0E00               	movlw	0
  1587  0014CC  6E18               	movwf	side_servo_control@dir+1,c
  1588  0014CE  0E00               	movlw	0
  1589  0014D0  6E17               	movwf	side_servo_control@dir,c
  1590  0014D2  ECAB  F00E         	call	_side_servo_control	;wreg free
  1591                           
  1592                           ;adc.c: 71: LATDbits.LATD0 = 1;
  1593  0014D6  808C               	bsf	3980,0,c	;volatile
  1594                           
  1595                           ;adc.c: 74: if (cansize == 0){
  1596  0014D8  5021               	movf	sense_can@cansize,w,c
  1597  0014DA  1022               	iorwf	sense_can@cansize+1,w,c
  1598  0014DC  A4D8               	btfss	status,2,c
  1599  0014DE  D045               	goto	l2658
  1600                           
  1601                           ;adc.c: 79: if (conductOnFall){
  1602  0014E0  5023               	movf	sense_can@conductOnFall,w,c
  1603  0014E2  1024               	iorwf	sense_can@conductOnFall+1,w,c
  1604  0014E4  B4D8               	btfsc	status,2,c
  1605  0014E6  D005               	goto	l2624
  1606                           
  1607                           ;adc.c: 80: return 2;
  1608  0014E8  0E00               	movlw	0
  1609  0014EA  6E1D               	movwf	?_sense_can+1,c
  1610  0014EC  0E02               	movlw	2
  1611  0014EE  6E1C               	movwf	?_sense_can,c
  1612  0014F0  0012               	return	
  1613  0014F2                     l2624:
  1614                           
  1615                           ;adc.c: 81: }
  1616                           ;adc.c: 83: for (int i = 0; i < 10000; i++) {
  1617  0014F2  0E00               	movlw	0
  1618  0014F4  6E28               	movwf	sense_can@i_350+1,c
  1619  0014F6  0E00               	movlw	0
  1620  0014F8  6E27               	movwf	sense_can@i_350,c
  1621  0014FA                     l2626:
  1622  0014FA  BE28               	btfsc	sense_can@i_350+1,7,c
  1623  0014FC  D006               	goto	l2630
  1624  0014FE  0E10               	movlw	16
  1625  001500  5C27               	subwf	sense_can@i_350,w,c
  1626  001502  0E27               	movlw	39
  1627  001504  5828               	subwfb	sense_can@i_350+1,w,c
  1628  001506  B0D8               	btfsc	status,0,c
  1629  001508  D01E               	goto	l2646
  1630  00150A                     l2630:
  1631                           
  1632                           ;adc.c: 84: readADC(0);
  1633  00150A  0E00               	movlw	0
  1634  00150C  ECBB  F012         	call	_readADC
  1635                           
  1636                           ;adc.c: 85: if (ADRESH > H_max) {
  1637  001510  50C4               	movf	4036,w,c	;volatile
  1638  001512  6E1E               	movwf	??_sense_can& (0+255),c
  1639  001514  6A1F               	clrf	(??_sense_can+1)& (0+255),c
  1640  001516  501E               	movf	??_sense_can,w,c
  1641  001518  5C2D               	subwf	sense_can@H_max,w,c
  1642  00151A  502E               	movf	sense_can@H_max+1,w,c
  1643  00151C  0A80               	xorlw	128
  1644  00151E  6E20               	movwf	(??_sense_can+2)& (0+255),c
  1645  001520  501F               	movf	??_sense_can+1,w,c
  1646  001522  0A80               	xorlw	128
  1647  001524  5820               	subwfb	(??_sense_can+2)& (0+255),w,c
  1648  001526  B0D8               	btfsc	status,0,c
  1649  001528  D003               	goto	l2636
  1650                           
  1651                           ;adc.c: 86: H_max = ADRESH;
  1652  00152A  CFC4 F02D          	movff	4036,sense_can@H_max	;volatile
  1653  00152E  6A2E               	clrf	sense_can@H_max+1,c
  1654  001530                     l2636:
  1655                           
  1656                           ;adc.c: 87: }
  1657                           ;adc.c: 89: if (ADRESH > 30){
  1658  001530  0E1E               	movlw	30
  1659  001532  64C4               	cpfsgt	4036,c	;volatile
  1660  001534  D005               	goto	l2642
  1661                           
  1662                           ;adc.c: 90: return 2;
  1663  001536  0E00               	movlw	0
  1664  001538  6E1D               	movwf	?_sense_can+1,c
  1665  00153A  0E02               	movlw	2
  1666  00153C  6E1C               	movwf	?_sense_can,c
  1667  00153E  0012               	return	
  1668  001540                     l2642:
  1669  001540  4A27               	infsnz	sense_can@i_350,f,c
  1670  001542  2A28               	incf	sense_can@i_350+1,f,c
  1671  001544  D7DA               	goto	l2626
  1672  001546                     l2646:
  1673                           
  1674                           ;adc.c: 91: }
  1675                           ;adc.c: 92: }
  1676                           ;adc.c: 94: if (H_max >= 0xA0) {
  1677  001546  BE2E               	btfsc	sense_can@H_max+1,7,c
  1678  001548  D00B               	goto	l2654
  1679  00154A  502E               	movf	sense_can@H_max+1,w,c
  1680  00154C  E104               	bnz	u2100
  1681  00154E  0EA0               	movlw	160
  1682  001550  5C2D               	subwf	sense_can@H_max,w,c
  1683  001552  A0D8               	btfss	status,0,c
  1684  001554  D005               	goto	l2654
  1685  001556                     u2100:
  1686                           
  1687                           ;adc.c: 95: return 2;
  1688  001556  0E00               	movlw	0
  1689  001558  6E1D               	movwf	?_sense_can+1,c
  1690  00155A  0E02               	movlw	2
  1691  00155C  6E1C               	movwf	?_sense_can,c
  1692                           
  1693                           ;adc.c: 96: } else {
  1694  00155E  0012               	return	
  1695  001560                     l2654:
  1696                           
  1697                           ;adc.c: 97: return 1;
  1698  001560  0E00               	movlw	0
  1699  001562  6E1D               	movwf	?_sense_can+1,c
  1700  001564  0E01               	movlw	1
  1701  001566  6E1C               	movwf	?_sense_can,c
  1702                           
  1703                           ;adc.c: 98: }
  1704                           ;adc.c: 99: }
  1705  001568  0012               	return	
  1706  00156A                     l2658:
  1707                           
  1708                           ;adc.c: 102: else{
  1709                           ;adc.c: 105: for (int i = 0; i < 10000; i++) {
  1710  00156A  0E00               	movlw	0
  1711  00156C  6E2A               	movwf	sense_can@i_351+1,c
  1712  00156E  0E00               	movlw	0
  1713  001570  6E29               	movwf	sense_can@i_351,c
  1714  001572                     l2660:
  1715  001572  BE2A               	btfsc	sense_can@i_351+1,7,c
  1716  001574  D006               	goto	l2664
  1717  001576  0E10               	movlw	16
  1718  001578  5C29               	subwf	sense_can@i_351,w,c
  1719  00157A  0E27               	movlw	39
  1720  00157C  582A               	subwfb	sense_can@i_351+1,w,c
  1721  00157E  B0D8               	btfsc	status,0,c
  1722  001580  D01E               	goto	l2680
  1723  001582                     l2664:
  1724                           
  1725                           ;adc.c: 107: readADC(1);
  1726  001582  0E01               	movlw	1
  1727  001584  ECBB  F012         	call	_readADC
  1728                           
  1729                           ;adc.c: 108: if (ADRESH > H_max) {
  1730  001588  50C4               	movf	4036,w,c	;volatile
  1731  00158A  6E1E               	movwf	??_sense_can& (0+255),c
  1732  00158C  6A1F               	clrf	(??_sense_can+1)& (0+255),c
  1733  00158E  501E               	movf	??_sense_can,w,c
  1734  001590  5C2D               	subwf	sense_can@H_max,w,c
  1735  001592  502E               	movf	sense_can@H_max+1,w,c
  1736  001594  0A80               	xorlw	128
  1737  001596  6E20               	movwf	(??_sense_can+2)& (0+255),c
  1738  001598  501F               	movf	??_sense_can+1,w,c
  1739  00159A  0A80               	xorlw	128
  1740  00159C  5820               	subwfb	(??_sense_can+2)& (0+255),w,c
  1741  00159E  B0D8               	btfsc	status,0,c
  1742  0015A0  D003               	goto	l2670
  1743                           
  1744                           ;adc.c: 109: H_max = ADRESH;
  1745  0015A2  CFC4 F02D          	movff	4036,sense_can@H_max	;volatile
  1746  0015A6  6A2E               	clrf	sense_can@H_max+1,c
  1747  0015A8                     l2670:
  1748                           
  1749                           ;adc.c: 110: }
  1750                           ;adc.c: 111: if (ADRESH > 30){
  1751  0015A8  0E1E               	movlw	30
  1752  0015AA  64C4               	cpfsgt	4036,c	;volatile
  1753  0015AC  D005               	goto	l2676
  1754                           
  1755                           ;adc.c: 112: return 4;
  1756  0015AE  0E00               	movlw	0
  1757  0015B0  6E1D               	movwf	?_sense_can+1,c
  1758  0015B2  0E04               	movlw	4
  1759  0015B4  6E1C               	movwf	?_sense_can,c
  1760  0015B6  0012               	return	
  1761  0015B8                     l2676:
  1762  0015B8  4A29               	infsnz	sense_can@i_351,f,c
  1763  0015BA  2A2A               	incf	sense_can@i_351+1,f,c
  1764  0015BC  D7DA               	goto	l2660
  1765  0015BE                     l2680:
  1766                           
  1767                           ;adc.c: 113: }
  1768                           ;adc.c: 114: }
  1769                           ;adc.c: 115: if (H_max >= 0xA0) {
  1770  0015BE  BE2E               	btfsc	sense_can@H_max+1,7,c
  1771  0015C0  D00B               	goto	l161
  1772  0015C2  502E               	movf	sense_can@H_max+1,w,c
  1773  0015C4  E104               	bnz	u2150
  1774  0015C6  0EA0               	movlw	160
  1775  0015C8  5C2D               	subwf	sense_can@H_max,w,c
  1776  0015CA  A0D8               	btfss	status,0,c
  1777  0015CC  D005               	goto	l161
  1778  0015CE                     u2150:
  1779                           
  1780                           ;adc.c: 116: return 4;
  1781  0015CE  0E00               	movlw	0
  1782  0015D0  6E1D               	movwf	?_sense_can+1,c
  1783  0015D2  0E04               	movlw	4
  1784  0015D4  6E1C               	movwf	?_sense_can,c
  1785  0015D6  0012               	return	
  1786  0015D8                     l161:
  1787                           
  1788                           ;adc.c: 117: }
  1789                           ;adc.c: 121: LATDbits.LATD0 = 0;
  1790  0015D8  908C               	bcf	3980,0,c	;volatile
  1791                           
  1792                           ;adc.c: 122: main_servo_control(0);
  1793  0015DA  0E00               	movlw	0
  1794  0015DC  6E18               	movwf	main_servo_control@dir+1,c
  1795  0015DE  0E00               	movlw	0
  1796  0015E0  6E17               	movwf	main_servo_control@dir,c
  1797  0015E2  EC20  F00F         	call	_main_servo_control	;wreg free
  1798                           
  1799                           ;adc.c: 123: side_servo_control(0);
  1800  0015E6  0E00               	movlw	0
  1801  0015E8  6E18               	movwf	side_servo_control@dir+1,c
  1802  0015EA  0E00               	movlw	0
  1803  0015EC  6E17               	movwf	side_servo_control@dir,c
  1804  0015EE  ECAB  F00E         	call	_side_servo_control	;wreg free
  1805                           
  1806                           ;adc.c: 124: _delay((unsigned long)((500)*(8000000/4000.0)));
  1807  0015F2  0E06               	movlw	6
  1808  0015F4  6E1F               	movwf	(??_sense_can+1)& (0+255),c
  1809  0015F6  0E13               	movlw	19
  1810  0015F8  6E1E               	movwf	??_sense_can& (0+255),c
  1811  0015FA  0EAE               	movlw	174
  1812  0015FC                     u3357:
  1813  0015FC  2EE8               	decfsz	wreg,f,c
  1814  0015FE  D7FE               	bra	u3357
  1815  001600  2E1E               	decfsz	??_sense_can& (0+255),f,c
  1816  001602  D7FC               	bra	u3357
  1817  001604  2E1F               	decfsz	(??_sense_can+1)& (0+255),f,c
  1818  001606  D7FA               	bra	u3357
  1819                           
  1820                           ;adc.c: 125: main_servo_control(0);
  1821  001608  0E00               	movlw	0
  1822  00160A  6E18               	movwf	main_servo_control@dir+1,c
  1823  00160C  0E00               	movlw	0
  1824  00160E  6E17               	movwf	main_servo_control@dir,c
  1825  001610  EC20  F00F         	call	_main_servo_control	;wreg free
  1826                           
  1827                           ;adc.c: 126: side_servo_control(0);
  1828  001614  0E00               	movlw	0
  1829  001616  6E18               	movwf	side_servo_control@dir+1,c
  1830  001618  0E00               	movlw	0
  1831  00161A  6E17               	movwf	side_servo_control@dir,c
  1832  00161C  ECAB  F00E         	call	_side_servo_control	;wreg free
  1833                           
  1834                           ;adc.c: 128: LATDbits.LATD0 = 1;
  1835  001620  808C               	bsf	3980,0,c	;volatile
  1836                           
  1837                           ;adc.c: 131: for (int i = 0; i < 10000; i++) {
  1838  001622  0E00               	movlw	0
  1839  001624  6E2C               	movwf	sense_can@i_352+1,c
  1840  001626  0E00               	movlw	0
  1841  001628  6E2B               	movwf	sense_can@i_352,c
  1842  00162A                     l2698:
  1843  00162A  BE2C               	btfsc	sense_can@i_352+1,7,c
  1844  00162C  D006               	goto	l2702
  1845  00162E  0E10               	movlw	16
  1846  001630  5C2B               	subwf	sense_can@i_352,w,c
  1847  001632  0E27               	movlw	39
  1848  001634  582C               	subwfb	sense_can@i_352+1,w,c
  1849  001636  B0D8               	btfsc	status,0,c
  1850  001638  D01E               	goto	l2718
  1851  00163A                     l2702:
  1852                           
  1853                           ;adc.c: 133: readADC(1);
  1854  00163A  0E01               	movlw	1
  1855  00163C  ECBB  F012         	call	_readADC
  1856                           
  1857                           ;adc.c: 134: if (ADRESH > H_max) {
  1858  001640  50C4               	movf	4036,w,c	;volatile
  1859  001642  6E1E               	movwf	??_sense_can& (0+255),c
  1860  001644  6A1F               	clrf	(??_sense_can+1)& (0+255),c
  1861  001646  501E               	movf	??_sense_can,w,c
  1862  001648  5C2D               	subwf	sense_can@H_max,w,c
  1863  00164A  502E               	movf	sense_can@H_max+1,w,c
  1864  00164C  0A80               	xorlw	128
  1865  00164E  6E20               	movwf	(??_sense_can+2)& (0+255),c
  1866  001650  501F               	movf	??_sense_can+1,w,c
  1867  001652  0A80               	xorlw	128
  1868  001654  5820               	subwfb	(??_sense_can+2)& (0+255),w,c
  1869  001656  B0D8               	btfsc	status,0,c
  1870  001658  D003               	goto	l2708
  1871                           
  1872                           ;adc.c: 135: H_max = ADRESH;
  1873  00165A  CFC4 F02D          	movff	4036,sense_can@H_max	;volatile
  1874  00165E  6A2E               	clrf	sense_can@H_max+1,c
  1875  001660                     l2708:
  1876                           
  1877                           ;adc.c: 136: }
  1878                           ;adc.c: 137: if (ADRESH > 30){
  1879  001660  0E1E               	movlw	30
  1880  001662  64C4               	cpfsgt	4036,c	;volatile
  1881  001664  D005               	goto	l2714
  1882                           
  1883                           ;adc.c: 138: return 4;
  1884  001666  0E00               	movlw	0
  1885  001668  6E1D               	movwf	?_sense_can+1,c
  1886  00166A  0E04               	movlw	4
  1887  00166C  6E1C               	movwf	?_sense_can,c
  1888  00166E  0012               	return	
  1889  001670                     l2714:
  1890  001670  4A2B               	infsnz	sense_can@i_352,f,c
  1891  001672  2A2C               	incf	sense_can@i_352+1,f,c
  1892  001674  D7DA               	goto	l2698
  1893  001676                     l2718:
  1894                           
  1895                           ;adc.c: 139: }
  1896                           ;adc.c: 140: }
  1897                           ;adc.c: 141: if (H_max >= 0xA0) {
  1898  001676  BE2E               	btfsc	sense_can@H_max+1,7,c
  1899  001678  D00B               	goto	l2726
  1900  00167A  502E               	movf	sense_can@H_max+1,w,c
  1901  00167C  E104               	bnz	u2200
  1902  00167E  0EA0               	movlw	160
  1903  001680  5C2D               	subwf	sense_can@H_max,w,c
  1904  001682  A0D8               	btfss	status,0,c
  1905  001684  D005               	goto	l2726
  1906  001686                     u2200:
  1907                           
  1908                           ;adc.c: 142: return 4;
  1909  001686  0E00               	movlw	0
  1910  001688  6E1D               	movwf	?_sense_can+1,c
  1911  00168A  0E04               	movlw	4
  1912  00168C  6E1C               	movwf	?_sense_can,c
  1913                           
  1914                           ;adc.c: 143: }
  1915  00168E  0012               	return	
  1916  001690                     l2726:
  1917                           
  1918                           ;adc.c: 146: else {
  1919                           ;adc.c: 147: return 3;
  1920  001690  0E00               	movlw	0
  1921  001692  6E1D               	movwf	?_sense_can+1,c
  1922  001694  0E03               	movlw	3
  1923  001696  6E1C               	movwf	?_sense_can,c
  1924  001698  0012               	return	
  1925  00169A                     __end_of_sense_can:
  1926                           	opt stack 0
  1927                           tblptru	equ	0xFF8
  1928                           postinc0	equ	0xFEE
  1929                           wreg	equ	0xFE8
  1930                           status	equ	0xFD8
  1931                           
  1932 ;; *************** function _readLightSensor *****************
  1933 ;; Defined at:
  1934 ;;		line 155 in file "adc.c"
  1935 ;; Parameters:    Size  Location     Type
  1936 ;;		None
  1937 ;; Auto vars:     Size  Location     Type
  1938 ;;  H_max           2   63[COMRAM] int 
  1939 ;;  i               2   61[COMRAM] int 
  1940 ;; Return value:  Size  Location     Type
  1941 ;;                  2   56[COMRAM] int 
  1942 ;; Registers used:
  1943 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1944 ;; Tracked objects:
  1945 ;;		On entry : 0/0
  1946 ;;		On exit  : 0/0
  1947 ;;		Unchanged: 0/0
  1948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1949 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1950 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1951 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1952 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1953 ;;Total ram usage:        9 bytes
  1954 ;; Hardware stack levels used:    1
  1955 ;; Hardware stack levels required when called:    7
  1956 ;; This function calls:
  1957 ;;		_lcdInst
  1958 ;;		_printf
  1959 ;;		_readADC
  1960 ;; This function is called by:
  1961 ;;		_sort
  1962 ;; This function uses a non-reentrant model
  1963 ;;
  1964                           
  1965                           	psect	text5
  1966  001F1E                     __ptext5:
  1967                           	opt stack 0
  1968  001F1E                     _readLightSensor:
  1969                           	opt stack 22
  1970                           
  1971                           ;adc.c: 156: int H_max = 0;
  1972                           
  1973                           ;incstack = 0
  1974  001F1E  0E00               	movlw	0
  1975  001F20  6E41               	movwf	readLightSensor@H_max+1,c
  1976  001F22  0E00               	movlw	0
  1977  001F24  6E40               	movwf	readLightSensor@H_max,c
  1978                           
  1979                           ;adc.c: 157: int i = 0;
  1980  001F26  0E00               	movlw	0
  1981  001F28  6E3F               	movwf	readLightSensor@i+1,c
  1982  001F2A  0E00               	movlw	0
  1983  001F2C  6E3E               	movwf	readLightSensor@i,c
  1984                           
  1985                           ;adc.c: 158: while(i < 50){
  1986  001F2E  D030               	goto	l3478
  1987  001F30                     l3460:
  1988                           
  1989                           ;adc.c: 159: lcdInst(0b10000000);;
  1990  001F30  0E80               	movlw	128
  1991  001F32  EC42  F013         	call	_lcdInst
  1992                           
  1993                           ;adc.c: 161: readADC(2);
  1994  001F36  0E02               	movlw	2
  1995  001F38  ECBB  F012         	call	_readADC
  1996                           
  1997                           ;adc.c: 162: if (ADRESH > H_max) {
  1998  001F3C  50C4               	movf	4036,w,c	;volatile
  1999  001F3E  6E3B               	movwf	??_readLightSensor& (0+255),c
  2000  001F40  6A3C               	clrf	(??_readLightSensor+1)& (0+255),c
  2001  001F42  503B               	movf	??_readLightSensor,w,c
  2002  001F44  5C40               	subwf	readLightSensor@H_max,w,c
  2003  001F46  5041               	movf	readLightSensor@H_max+1,w,c
  2004  001F48  0A80               	xorlw	128
  2005  001F4A  6E3D               	movwf	(??_readLightSensor+2)& (0+255),c
  2006  001F4C  503C               	movf	??_readLightSensor+1,w,c
  2007  001F4E  0A80               	xorlw	128
  2008  001F50  583D               	subwfb	(??_readLightSensor+2)& (0+255),w,c
  2009  001F52  B0D8               	btfsc	status,0,c
  2010  001F54  D003               	goto	l3466
  2011                           
  2012                           ;adc.c: 163: H_max = ADRESH;
  2013  001F56  CFC4 F040          	movff	4036,readLightSensor@H_max	;volatile
  2014  001F5A  6A41               	clrf	readLightSensor@H_max+1,c
  2015  001F5C                     l3466:
  2016                           
  2017                           ;adc.c: 164: }
  2018                           ;adc.c: 165: if (ADRESH < 0x20){
  2019  001F5C  0E20               	movlw	32
  2020  001F5E  60C4               	cpfslt	4036,c	;volatile
  2021  001F60  D005               	goto	l3472
  2022                           
  2023                           ;adc.c: 166: return 1;
  2024  001F62  0E00               	movlw	0
  2025  001F64  6E3A               	movwf	?_readLightSensor+1,c
  2026  001F66  0E01               	movlw	1
  2027  001F68  6E39               	movwf	?_readLightSensor,c
  2028  001F6A  0012               	return	
  2029  001F6C                     l3472:
  2030                           
  2031                           ;adc.c: 167: }
  2032                           ;adc.c: 168: printf("%x", ADRESH);
  2033  001F6C  0ECF               	movlw	low STR_1
  2034  001F6E  6E23               	movwf	printf@f,c
  2035  001F70  0E10               	movlw	high STR_1
  2036  001F72  6E24               	movwf	printf@f+1,c
  2037  001F74  CFC4 F025          	movff	4036,?_printf+2	;volatile
  2038  001F78  6A26               	clrf	?_printf+3,c
  2039  001F7A  EC6A  F008         	call	_printf	;wreg free
  2040                           
  2041                           ;adc.c: 169: _delay((unsigned long)((5)*(8000000/4000.0)));
  2042  001F7E  0E0D               	movlw	13
  2043  001F80  6E3B               	movwf	??_readLightSensor& (0+255),c
  2044  001F82  0EFC               	movlw	252
  2045  001F84                     u3367:
  2046  001F84  2EE8               	decfsz	wreg,f,c
  2047  001F86  D7FE               	bra	u3367
  2048  001F88  2E3B               	decfsz	??_readLightSensor& (0+255),f,c
  2049  001F8A  D7FC               	bra	u3367
  2050                           
  2051                           ;adc.c: 170: i++;
  2052  001F8C  4A3E               	infsnz	readLightSensor@i,f,c
  2053  001F8E  2A3F               	incf	readLightSensor@i+1,f,c
  2054  001F90                     l3478:
  2055  001F90  BE3F               	btfsc	readLightSensor@i+1,7,c
  2056  001F92  D7CE               	goto	l3460
  2057  001F94  503F               	movf	readLightSensor@i+1,w,c
  2058  001F96  E104               	bnz	l3480
  2059  001F98  0E32               	movlw	50
  2060  001F9A  5C3E               	subwf	readLightSensor@i,w,c
  2061  001F9C  A0D8               	btfss	status,0,c
  2062  001F9E  D7C8               	goto	l3460
  2063  001FA0                     l3480:
  2064                           
  2065                           ;adc.c: 171: }
  2066                           ;adc.c: 173: if(H_max >= 0x20){
  2067  001FA0  BE41               	btfsc	readLightSensor@H_max+1,7,c
  2068  001FA2  D00B               	goto	l3488
  2069  001FA4  5041               	movf	readLightSensor@H_max+1,w,c
  2070  001FA6  E104               	bnz	u3080
  2071  001FA8  0E20               	movlw	32
  2072  001FAA  5C40               	subwf	readLightSensor@H_max,w,c
  2073  001FAC  A0D8               	btfss	status,0,c
  2074  001FAE  D005               	goto	l3488
  2075  001FB0                     u3080:
  2076                           
  2077                           ;adc.c: 174: return 0;
  2078  001FB0  0E00               	movlw	0
  2079  001FB2  6E3A               	movwf	?_readLightSensor+1,c
  2080  001FB4  0E00               	movlw	0
  2081  001FB6  6E39               	movwf	?_readLightSensor,c
  2082                           
  2083                           ;adc.c: 175: }
  2084  001FB8  0012               	return	
  2085  001FBA                     l3488:
  2086                           
  2087                           ;adc.c: 176: else{
  2088                           ;adc.c: 177: return 1;
  2089  001FBA  0E00               	movlw	0
  2090  001FBC  6E3A               	movwf	?_readLightSensor+1,c
  2091  001FBE  0E01               	movlw	1
  2092  001FC0  6E39               	movwf	?_readLightSensor,c
  2093  001FC2  0012               	return	
  2094  001FC4                     __end_of_readLightSensor:
  2095                           	opt stack 0
  2096                           tblptru	equ	0xFF8
  2097                           postinc0	equ	0xFEE
  2098                           wreg	equ	0xFE8
  2099                           status	equ	0xFD8
  2100                           
  2101 ;; *************** function _readADC *****************
  2102 ;; Defined at:
  2103 ;;		line 21 in file "adc.c"
  2104 ;; Parameters:    Size  Location     Type
  2105 ;;  channel         1    wreg     unsigned char 
  2106 ;; Auto vars:     Size  Location     Type
  2107 ;;  channel         1   23[COMRAM] unsigned char 
  2108 ;; Return value:  Size  Location     Type
  2109 ;;                  1    wreg      void 
  2110 ;; Registers used:
  2111 ;;		wreg, status,2, status,0
  2112 ;; Tracked objects:
  2113 ;;		On entry : 0/0
  2114 ;;		On exit  : 0/0
  2115 ;;		Unchanged: 0/0
  2116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2118 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2119 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2120 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2121 ;;Total ram usage:        2 bytes
  2122 ;; Hardware stack levels used:    1
  2123 ;; Hardware stack levels required when called:    4
  2124 ;; This function calls:
  2125 ;;		Nothing
  2126 ;; This function is called by:
  2127 ;;		_sense_can
  2128 ;;		_readLightSensor
  2129 ;; This function uses a non-reentrant model
  2130 ;;
  2131                           
  2132                           	psect	text6
  2133  002576                     __ptext6:
  2134                           	opt stack 0
  2135  002576                     _readADC:
  2136                           	opt stack 24
  2137                           
  2138                           ;incstack = 0
  2139                           ;readADC@channel stored from wreg
  2140  002576  6E18               	movwf	readADC@channel,c
  2141                           
  2142                           ;adc.c: 22: ADCON0 = 0x00;
  2143  002578  0E00               	movlw	0
  2144  00257A  6EC2               	movwf	4034,c	;volatile
  2145                           
  2146                           ;adc.c: 23: ADCON0 = (ADCON0 & 0X3C)|((channel & 0x0F)<<2);
  2147  00257C  C018  F017         	movff	readADC@channel,??_readADC
  2148  002580  0E0F               	movlw	15
  2149  002582  1617               	andwf	??_readADC,f,c
  2150  002584  90D8               	bcf	status,0,c
  2151  002586  3617               	rlcf	??_readADC,f,c
  2152  002588  90D8               	bcf	status,0,c
  2153  00258A  3617               	rlcf	??_readADC,f,c
  2154  00258C  50C2               	movf	4034,w,c	;volatile
  2155  00258E  0B3C               	andlw	60
  2156  002590  1017               	iorwf	??_readADC,w,c
  2157  002592  6EC2               	movwf	4034,c	;volatile
  2158                           
  2159                           ;adc.c: 24: ADON = 1;
  2160  002594  80C2               	bsf	4034,0,c	;volatile
  2161                           
  2162                           ;adc.c: 25: ADCON0bits.GO = 1;
  2163  002596  82C2               	bsf	4034,1,c	;volatile
  2164  002598                     l134:
  2165  002598  A2C2               	btfss	4034,1,c	;volatile
  2166  00259A  0012               	return	
  2167  00259C  D7FD               	goto	l134
  2168  00259E                     __end_of_readADC:
  2169                           	opt stack 0
  2170                           tblptru	equ	0xFF8
  2171                           postinc0	equ	0xFEE
  2172                           wreg	equ	0xFE8
  2173                           status	equ	0xFD8
  2174                           
  2175 ;; *************** function _move_can *****************
  2176 ;; Defined at:
  2177 ;;		line 79 in file "servo.c"
  2178 ;; Parameters:    Size  Location     Type
  2179 ;;  canType         2   27[COMRAM] int 
  2180 ;; Auto vars:     Size  Location     Type
  2181 ;;  i               2   37[COMRAM] int 
  2182 ;;  i               2   35[COMRAM] int 
  2183 ;;  i               2   33[COMRAM] int 
  2184 ;;  i               2   31[COMRAM] int 
  2185 ;; Return value:  Size  Location     Type
  2186 ;;                  1    wreg      void 
  2187 ;; Registers used:
  2188 ;;		wreg, status,2, status,0, cstack
  2189 ;; Tracked objects:
  2190 ;;		On entry : 0/0
  2191 ;;		On exit  : 0/0
  2192 ;;		Unchanged: 0/0
  2193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2194 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2195 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2196 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2197 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2198 ;;Total ram usage:       12 bytes
  2199 ;; Hardware stack levels used:    1
  2200 ;; Hardware stack levels required when called:    5
  2201 ;; This function calls:
  2202 ;;		_main_servo_control
  2203 ;;		_side_servo_control
  2204 ;; This function is called by:
  2205 ;;		_sort
  2206 ;; This function uses a non-reentrant model
  2207 ;;
  2208                           
  2209                           	psect	text7
  2210  00169A                     __ptext7:
  2211                           	opt stack 0
  2212  00169A                     _move_can:
  2213                           	opt stack 24
  2214                           
  2215                           ;servo.c: 80: if(canType == 2){
  2216                           
  2217                           ;incstack = 0
  2218  00169A  0E02               	movlw	2
  2219  00169C  181C               	xorwf	move_can@canType,w,c
  2220  00169E  101D               	iorwf	move_can@canType+1,w,c
  2221  0016A0  A4D8               	btfss	status,2,c
  2222  0016A2  D042               	goto	l2804
  2223                           
  2224                           ;servo.c: 81: side_servo_control(1);
  2225  0016A4  0E00               	movlw	0
  2226  0016A6  6E18               	movwf	side_servo_control@dir+1,c
  2227  0016A8  0E01               	movlw	1
  2228  0016AA  6E17               	movwf	side_servo_control@dir,c
  2229  0016AC  ECAB  F00E         	call	_side_servo_control	;wreg free
  2230                           
  2231                           ;servo.c: 82: _delay((unsigned long)((2000)*(8000000/4000.0)));
  2232  0016B0  0E15               	movlw	21
  2233  0016B2  6E1F               	movwf	(??_move_can+1)& (0+255),c
  2234  0016B4  0E4B               	movlw	75
  2235  0016B6  6E1E               	movwf	??_move_can& (0+255),c
  2236  0016B8  0EBE               	movlw	190
  2237  0016BA                     u3377:
  2238  0016BA  2EE8               	decfsz	wreg,f,c
  2239  0016BC  D7FE               	bra	u3377
  2240  0016BE  2E1E               	decfsz	??_move_can& (0+255),f,c
  2241  0016C0  D7FC               	bra	u3377
  2242  0016C2  2E1F               	decfsz	(??_move_can+1)& (0+255),f,c
  2243  0016C4  D7FA               	bra	u3377
  2244  0016C6  D000               	nop2	
  2245                           
  2246                           ;servo.c: 84: for (int i = 0; i<5; i++){
  2247  0016C8  0E00               	movlw	0
  2248  0016CA  6E21               	movwf	move_can@i+1,c
  2249  0016CC  0E00               	movlw	0
  2250  0016CE  6E20               	movwf	move_can@i,c
  2251  0016D0                     l2790:
  2252  0016D0  BE21               	btfsc	move_can@i+1,7,c
  2253  0016D2  D006               	goto	l2794
  2254  0016D4  5021               	movf	move_can@i+1,w,c
  2255  0016D6  E11B               	bnz	l2802
  2256  0016D8  0E05               	movlw	5
  2257  0016DA  5C20               	subwf	move_can@i,w,c
  2258  0016DC  B0D8               	btfsc	status,0,c
  2259  0016DE  D017               	goto	l2802
  2260  0016E0                     l2794:
  2261                           
  2262                           ;servo.c: 85: side_servo_control(1);
  2263  0016E0  0E00               	movlw	0
  2264  0016E2  6E18               	movwf	side_servo_control@dir+1,c
  2265  0016E4  0E01               	movlw	1
  2266  0016E6  6E17               	movwf	side_servo_control@dir,c
  2267  0016E8  ECAB  F00E         	call	_side_servo_control	;wreg free
  2268                           
  2269                           ;servo.c: 86: main_servo_control(1);
  2270  0016EC  0E00               	movlw	0
  2271  0016EE  6E18               	movwf	main_servo_control@dir+1,c
  2272  0016F0  0E01               	movlw	1
  2273  0016F2  6E17               	movwf	main_servo_control@dir,c
  2274  0016F4  EC20  F00F         	call	_main_servo_control	;wreg free
  2275                           
  2276                           ;servo.c: 87: _delay((unsigned long)((10)*(8000000/4000.0)));
  2277  0016F8  0E1A               	movlw	26
  2278  0016FA  6E1E               	movwf	??_move_can& (0+255),c
  2279  0016FC  0EF8               	movlw	248
  2280  0016FE                     u3387:
  2281  0016FE  2EE8               	decfsz	wreg,f,c
  2282  001700  D7FE               	bra	u3387
  2283  001702  2E1E               	decfsz	??_move_can& (0+255),f,c
  2284  001704  D7FC               	bra	u3387
  2285  001706  D000               	nop2	
  2286  001708  4A20               	infsnz	move_can@i,f,c
  2287  00170A  2A21               	incf	move_can@i+1,f,c
  2288  00170C  D7E1               	goto	l2790
  2289  00170E                     l2802:
  2290                           
  2291                           ;servo.c: 88: }
  2292                           ;servo.c: 90: main_servo_control(0);
  2293  00170E  0E00               	movlw	0
  2294  001710  6E18               	movwf	main_servo_control@dir+1,c
  2295  001712  0E00               	movlw	0
  2296  001714  6E17               	movwf	main_servo_control@dir,c
  2297  001716  EC20  F00F         	call	_main_servo_control	;wreg free
  2298                           
  2299                           ;servo.c: 91: side_servo_control(0);
  2300  00171A  0E00               	movlw	0
  2301  00171C  6E18               	movwf	side_servo_control@dir+1,c
  2302  00171E  0E00               	movlw	0
  2303  001720  6E17               	movwf	side_servo_control@dir,c
  2304  001722  ECAB  F00E         	call	_side_servo_control	;wreg free
  2305                           
  2306                           ;servo.c: 92: }
  2307  001726  0012               	return	
  2308  001728                     l2804:
  2309                           
  2310                           ;servo.c: 93: else if(canType == 1){
  2311  001728  041C               	decf	move_can@canType,w,c
  2312  00172A  101D               	iorwf	move_can@canType+1,w,c
  2313  00172C  A4D8               	btfss	status,2,c
  2314  00172E  D042               	goto	l2826
  2315                           
  2316                           ;servo.c: 94: side_servo_control(2);
  2317  001730  0E00               	movlw	0
  2318  001732  6E18               	movwf	side_servo_control@dir+1,c
  2319  001734  0E02               	movlw	2
  2320  001736  6E17               	movwf	side_servo_control@dir,c
  2321  001738  ECAB  F00E         	call	_side_servo_control	;wreg free
  2322                           
  2323                           ;servo.c: 95: _delay((unsigned long)((2000)*(8000000/4000.0)));
  2324  00173C  0E15               	movlw	21
  2325  00173E  6E1F               	movwf	(??_move_can+1)& (0+255),c
  2326  001740  0E4B               	movlw	75
  2327  001742  6E1E               	movwf	??_move_can& (0+255),c
  2328  001744  0EBE               	movlw	190
  2329  001746                     u3397:
  2330  001746  2EE8               	decfsz	wreg,f,c
  2331  001748  D7FE               	bra	u3397
  2332  00174A  2E1E               	decfsz	??_move_can& (0+255),f,c
  2333  00174C  D7FC               	bra	u3397
  2334  00174E  2E1F               	decfsz	(??_move_can+1)& (0+255),f,c
  2335  001750  D7FA               	bra	u3397
  2336  001752  D000               	nop2	
  2337                           
  2338                           ;servo.c: 97: for (int i = 0; i<5; i++){
  2339  001754  0E00               	movlw	0
  2340  001756  6E23               	movwf	move_can@i_639+1,c
  2341  001758  0E00               	movlw	0
  2342  00175A  6E22               	movwf	move_can@i_639,c
  2343  00175C                     l2812:
  2344  00175C  BE23               	btfsc	move_can@i_639+1,7,c
  2345  00175E  D006               	goto	l2816
  2346  001760  5023               	movf	move_can@i_639+1,w,c
  2347  001762  E11B               	bnz	l2824
  2348  001764  0E05               	movlw	5
  2349  001766  5C22               	subwf	move_can@i_639,w,c
  2350  001768  B0D8               	btfsc	status,0,c
  2351  00176A  D017               	goto	l2824
  2352  00176C                     l2816:
  2353                           
  2354                           ;servo.c: 98: side_servo_control(2);
  2355  00176C  0E00               	movlw	0
  2356  00176E  6E18               	movwf	side_servo_control@dir+1,c
  2357  001770  0E02               	movlw	2
  2358  001772  6E17               	movwf	side_servo_control@dir,c
  2359  001774  ECAB  F00E         	call	_side_servo_control	;wreg free
  2360                           
  2361                           ;servo.c: 99: main_servo_control(1);
  2362  001778  0E00               	movlw	0
  2363  00177A  6E18               	movwf	main_servo_control@dir+1,c
  2364  00177C  0E01               	movlw	1
  2365  00177E  6E17               	movwf	main_servo_control@dir,c
  2366  001780  EC20  F00F         	call	_main_servo_control	;wreg free
  2367                           
  2368                           ;servo.c: 100: _delay((unsigned long)((10)*(8000000/4000.0)));
  2369  001784  0E1A               	movlw	26
  2370  001786  6E1E               	movwf	??_move_can& (0+255),c
  2371  001788  0EF8               	movlw	248
  2372  00178A                     u3407:
  2373  00178A  2EE8               	decfsz	wreg,f,c
  2374  00178C  D7FE               	bra	u3407
  2375  00178E  2E1E               	decfsz	??_move_can& (0+255),f,c
  2376  001790  D7FC               	bra	u3407
  2377  001792  D000               	nop2	
  2378  001794  4A22               	infsnz	move_can@i_639,f,c
  2379  001796  2A23               	incf	move_can@i_639+1,f,c
  2380  001798  D7E1               	goto	l2812
  2381  00179A                     l2824:
  2382                           
  2383                           ;servo.c: 101: }
  2384                           ;servo.c: 104: main_servo_control(0);
  2385  00179A  0E00               	movlw	0
  2386  00179C  6E18               	movwf	main_servo_control@dir+1,c
  2387  00179E  0E00               	movlw	0
  2388  0017A0  6E17               	movwf	main_servo_control@dir,c
  2389  0017A2  EC20  F00F         	call	_main_servo_control	;wreg free
  2390                           
  2391                           ;servo.c: 105: side_servo_control(0);
  2392  0017A6  0E00               	movlw	0
  2393  0017A8  6E18               	movwf	side_servo_control@dir+1,c
  2394  0017AA  0E00               	movlw	0
  2395  0017AC  6E17               	movwf	side_servo_control@dir,c
  2396  0017AE  ECAB  F00E         	call	_side_servo_control	;wreg free
  2397                           
  2398                           ;servo.c: 107: }
  2399  0017B2  0012               	return	
  2400  0017B4                     l2826:
  2401                           
  2402                           ;servo.c: 108: else if (canType == 3){
  2403  0017B4  0E03               	movlw	3
  2404  0017B6  181C               	xorwf	move_can@canType,w,c
  2405  0017B8  101D               	iorwf	move_can@canType+1,w,c
  2406  0017BA  A4D8               	btfss	status,2,c
  2407  0017BC  D042               	goto	l2848
  2408                           
  2409                           ;servo.c: 110: side_servo_control(2);
  2410  0017BE  0E00               	movlw	0
  2411  0017C0  6E18               	movwf	side_servo_control@dir+1,c
  2412  0017C2  0E02               	movlw	2
  2413  0017C4  6E17               	movwf	side_servo_control@dir,c
  2414  0017C6  ECAB  F00E         	call	_side_servo_control	;wreg free
  2415                           
  2416                           ;servo.c: 111: _delay((unsigned long)((2000)*(8000000/4000.0)));
  2417  0017CA  0E15               	movlw	21
  2418  0017CC  6E1F               	movwf	(??_move_can+1)& (0+255),c
  2419  0017CE  0E4B               	movlw	75
  2420  0017D0  6E1E               	movwf	??_move_can& (0+255),c
  2421  0017D2  0EBE               	movlw	190
  2422  0017D4                     u3417:
  2423  0017D4  2EE8               	decfsz	wreg,f,c
  2424  0017D6  D7FE               	bra	u3417
  2425  0017D8  2E1E               	decfsz	??_move_can& (0+255),f,c
  2426  0017DA  D7FC               	bra	u3417
  2427  0017DC  2E1F               	decfsz	(??_move_can+1)& (0+255),f,c
  2428  0017DE  D7FA               	bra	u3417
  2429  0017E0  D000               	nop2	
  2430                           
  2431                           ;servo.c: 112: for (int i = 0; i<5; i++){
  2432  0017E2  0E00               	movlw	0
  2433  0017E4  6E25               	movwf	move_can@i_640+1,c
  2434  0017E6  0E00               	movlw	0
  2435  0017E8  6E24               	movwf	move_can@i_640,c
  2436  0017EA                     l2834:
  2437  0017EA  BE25               	btfsc	move_can@i_640+1,7,c
  2438  0017EC  D006               	goto	l2838
  2439  0017EE  5025               	movf	move_can@i_640+1,w,c
  2440  0017F0  E11B               	bnz	l2846
  2441  0017F2  0E05               	movlw	5
  2442  0017F4  5C24               	subwf	move_can@i_640,w,c
  2443  0017F6  B0D8               	btfsc	status,0,c
  2444  0017F8  D017               	goto	l2846
  2445  0017FA                     l2838:
  2446                           
  2447                           ;servo.c: 113: side_servo_control(2);
  2448  0017FA  0E00               	movlw	0
  2449  0017FC  6E18               	movwf	side_servo_control@dir+1,c
  2450  0017FE  0E02               	movlw	2
  2451  001800  6E17               	movwf	side_servo_control@dir,c
  2452  001802  ECAB  F00E         	call	_side_servo_control	;wreg free
  2453                           
  2454                           ;servo.c: 114: main_servo_control(2);
  2455  001806  0E00               	movlw	0
  2456  001808  6E18               	movwf	main_servo_control@dir+1,c
  2457  00180A  0E02               	movlw	2
  2458  00180C  6E17               	movwf	main_servo_control@dir,c
  2459  00180E  EC20  F00F         	call	_main_servo_control	;wreg free
  2460                           
  2461                           ;servo.c: 115: _delay((unsigned long)((10)*(8000000/4000.0)));
  2462  001812  0E1A               	movlw	26
  2463  001814  6E1E               	movwf	??_move_can& (0+255),c
  2464  001816  0EF8               	movlw	248
  2465  001818                     u3427:
  2466  001818  2EE8               	decfsz	wreg,f,c
  2467  00181A  D7FE               	bra	u3427
  2468  00181C  2E1E               	decfsz	??_move_can& (0+255),f,c
  2469  00181E  D7FC               	bra	u3427
  2470  001820  D000               	nop2	
  2471  001822  4A24               	infsnz	move_can@i_640,f,c
  2472  001824  2A25               	incf	move_can@i_640+1,f,c
  2473  001826  D7E1               	goto	l2834
  2474  001828                     l2846:
  2475                           
  2476                           ;servo.c: 116: }
  2477                           ;servo.c: 117: main_servo_control(0);
  2478  001828  0E00               	movlw	0
  2479  00182A  6E18               	movwf	main_servo_control@dir+1,c
  2480  00182C  0E00               	movlw	0
  2481  00182E  6E17               	movwf	main_servo_control@dir,c
  2482  001830  EC20  F00F         	call	_main_servo_control	;wreg free
  2483                           
  2484                           ;servo.c: 118: side_servo_control(0);
  2485  001834  0E00               	movlw	0
  2486  001836  6E18               	movwf	side_servo_control@dir+1,c
  2487  001838  0E00               	movlw	0
  2488  00183A  6E17               	movwf	side_servo_control@dir,c
  2489  00183C  ECAB  F00E         	call	_side_servo_control	;wreg free
  2490                           
  2491                           ;servo.c: 119: }
  2492  001840  0012               	return	
  2493  001842                     l2848:
  2494                           
  2495                           ;servo.c: 120: else if(canType == 4){
  2496  001842  0E04               	movlw	4
  2497  001844  181C               	xorwf	move_can@canType,w,c
  2498  001846  101D               	iorwf	move_can@canType+1,w,c
  2499  001848  A4D8               	btfss	status,2,c
  2500  00184A  0012               	return	
  2501                           
  2502                           ;servo.c: 121: side_servo_control(1);
  2503  00184C  0E00               	movlw	0
  2504  00184E  6E18               	movwf	side_servo_control@dir+1,c
  2505  001850  0E01               	movlw	1
  2506  001852  6E17               	movwf	side_servo_control@dir,c
  2507  001854  ECAB  F00E         	call	_side_servo_control	;wreg free
  2508                           
  2509                           ;servo.c: 122: _delay((unsigned long)((2000)*(8000000/4000.0)));
  2510  001858  0E15               	movlw	21
  2511  00185A  6E1F               	movwf	(??_move_can+1)& (0+255),c
  2512  00185C  0E4B               	movlw	75
  2513  00185E  6E1E               	movwf	??_move_can& (0+255),c
  2514  001860  0EBE               	movlw	190
  2515  001862                     u3437:
  2516  001862  2EE8               	decfsz	wreg,f,c
  2517  001864  D7FE               	bra	u3437
  2518  001866  2E1E               	decfsz	??_move_can& (0+255),f,c
  2519  001868  D7FC               	bra	u3437
  2520  00186A  2E1F               	decfsz	(??_move_can+1)& (0+255),f,c
  2521  00186C  D7FA               	bra	u3437
  2522  00186E  D000               	nop2	
  2523                           
  2524                           ;servo.c: 123: for (int i = 0; i<5; i++){
  2525  001870  0E00               	movlw	0
  2526  001872  6E27               	movwf	move_can@i_641+1,c
  2527  001874  0E00               	movlw	0
  2528  001876  6E26               	movwf	move_can@i_641,c
  2529  001878                     l2856:
  2530  001878  BE27               	btfsc	move_can@i_641+1,7,c
  2531  00187A  D006               	goto	l2860
  2532  00187C  5027               	movf	move_can@i_641+1,w,c
  2533  00187E  E11B               	bnz	l2868
  2534  001880  0E05               	movlw	5
  2535  001882  5C26               	subwf	move_can@i_641,w,c
  2536  001884  B0D8               	btfsc	status,0,c
  2537  001886  D017               	goto	l2868
  2538  001888                     l2860:
  2539                           
  2540                           ;servo.c: 124: side_servo_control(1);
  2541  001888  0E00               	movlw	0
  2542  00188A  6E18               	movwf	side_servo_control@dir+1,c
  2543  00188C  0E01               	movlw	1
  2544  00188E  6E17               	movwf	side_servo_control@dir,c
  2545  001890  ECAB  F00E         	call	_side_servo_control	;wreg free
  2546                           
  2547                           ;servo.c: 125: main_servo_control(2);
  2548  001894  0E00               	movlw	0
  2549  001896  6E18               	movwf	main_servo_control@dir+1,c
  2550  001898  0E02               	movlw	2
  2551  00189A  6E17               	movwf	main_servo_control@dir,c
  2552  00189C  EC20  F00F         	call	_main_servo_control	;wreg free
  2553                           
  2554                           ;servo.c: 126: _delay((unsigned long)((10)*(8000000/4000.0)));
  2555  0018A0  0E1A               	movlw	26
  2556  0018A2  6E1E               	movwf	??_move_can& (0+255),c
  2557  0018A4  0EF8               	movlw	248
  2558  0018A6                     u3447:
  2559  0018A6  2EE8               	decfsz	wreg,f,c
  2560  0018A8  D7FE               	bra	u3447
  2561  0018AA  2E1E               	decfsz	??_move_can& (0+255),f,c
  2562  0018AC  D7FC               	bra	u3447
  2563  0018AE  D000               	nop2	
  2564  0018B0  4A26               	infsnz	move_can@i_641,f,c
  2565  0018B2  2A27               	incf	move_can@i_641+1,f,c
  2566  0018B4  D7E1               	goto	l2856
  2567  0018B6                     l2868:
  2568                           
  2569                           ;servo.c: 127: }
  2570                           ;servo.c: 128: main_servo_control(0);
  2571  0018B6  0E00               	movlw	0
  2572  0018B8  6E18               	movwf	main_servo_control@dir+1,c
  2573  0018BA  0E00               	movlw	0
  2574  0018BC  6E17               	movwf	main_servo_control@dir,c
  2575  0018BE  EC20  F00F         	call	_main_servo_control	;wreg free
  2576                           
  2577                           ;servo.c: 129: side_servo_control(0);
  2578  0018C2  0E00               	movlw	0
  2579  0018C4  6E18               	movwf	side_servo_control@dir+1,c
  2580  0018C6  0E00               	movlw	0
  2581  0018C8  6E17               	movwf	side_servo_control@dir,c
  2582  0018CA  ECAB  F00E         	call	_side_servo_control	;wreg free
  2583  0018CE  0012               	return	
  2584  0018D0                     __end_of_move_can:
  2585                           	opt stack 0
  2586                           tblptru	equ	0xFF8
  2587                           postinc0	equ	0xFEE
  2588                           wreg	equ	0xFE8
  2589                           status	equ	0xFD8
  2590                           
  2591 ;; *************** function _gate *****************
  2592 ;; Defined at:
  2593 ;;		line 133 in file "servo.c"
  2594 ;; Parameters:    Size  Location     Type
  2595 ;;		None
  2596 ;; Auto vars:     Size  Location     Type
  2597 ;;  i               2    0        int 
  2598 ;; Return value:  Size  Location     Type
  2599 ;;                  1    wreg      void 
  2600 ;; Registers used:
  2601 ;;		wreg
  2602 ;; Tracked objects:
  2603 ;;		On entry : 0/0
  2604 ;;		On exit  : 0/0
  2605 ;;		Unchanged: 0/0
  2606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2609 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2610 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2611 ;;Total ram usage:        1 bytes
  2612 ;; Hardware stack levels used:    1
  2613 ;; Hardware stack levels required when called:    4
  2614 ;; This function calls:
  2615 ;;		Nothing
  2616 ;; This function is called by:
  2617 ;;		_sort
  2618 ;; This function uses a non-reentrant model
  2619 ;;
  2620                           
  2621                           	psect	text8
  2622  0023B4                     __ptext8:
  2623                           	opt stack 0
  2624  0023B4                     _gate:
  2625                           	opt stack 25
  2626                           
  2627                           ;servo.c: 134: int i;
  2628                           ;servo.c: 135: while(PORTBbits.RB3 == 1) {
  2629                           
  2630                           ;incstack = 0
  2631  0023B4  D011               	goto	l2894
  2632  0023B6                     l320:
  2633                           
  2634                           ;servo.c: 136: LATCbits.LATC2 = 1;
  2635  0023B6  848B               	bsf	3979,2,c	;volatile
  2636                           
  2637                           ;servo.c: 137: _delay((unsigned long)((1.68)*(8000000/4000.0)));
  2638  0023B8  0E05               	movlw	5
  2639  0023BA  6E17               	movwf	??_gate& (0+255),c
  2640  0023BC  0E5C               	movlw	92
  2641  0023BE                     u3457:
  2642  0023BE  2EE8               	decfsz	wreg,f,c
  2643  0023C0  D7FE               	bra	u3457
  2644  0023C2  2E17               	decfsz	??_gate& (0+255),f,c
  2645  0023C4  D7FC               	bra	u3457
  2646                           
  2647                           ;servo.c: 138: LATCbits.LATC2 = 0;
  2648  0023C6  948B               	bcf	3979,2,c	;volatile
  2649                           
  2650                           ;servo.c: 139: _delay((unsigned long)((18.32)*(8000000/4000.0)));
  2651  0023C8  0E30               	movlw	48
  2652  0023CA  6E17               	movwf	??_gate& (0+255),c
  2653  0023CC  0E94               	movlw	148
  2654  0023CE                     u3467:
  2655  0023CE  2EE8               	decfsz	wreg,f,c
  2656  0023D0  D7FE               	bra	u3467
  2657  0023D2  2E17               	decfsz	??_gate& (0+255),f,c
  2658  0023D4  D7FC               	bra	u3467
  2659  0023D6  D000               	nop2	
  2660  0023D8                     l2894:
  2661  0023D8  A681               	btfss	3969,3,c	;volatile
  2662  0023DA  D012               	goto	l2900
  2663  0023DC  D7EC               	goto	l320
  2664  0023DE                     l323:
  2665                           
  2666                           ;servo.c: 143: LATCbits.LATC2 = 1;
  2667  0023DE  848B               	bsf	3979,2,c	;volatile
  2668                           
  2669                           ;servo.c: 144: _delay((unsigned long)((1.68)*(8000000/4000.0)));
  2670  0023E0  0E05               	movlw	5
  2671  0023E2  6E17               	movwf	??_gate& (0+255),c
  2672  0023E4  0E5C               	movlw	92
  2673  0023E6                     u3477:
  2674  0023E6  2EE8               	decfsz	wreg,f,c
  2675  0023E8  D7FE               	bra	u3477
  2676  0023EA  2E17               	decfsz	??_gate& (0+255),f,c
  2677  0023EC  D7FC               	bra	u3477
  2678                           
  2679                           ;servo.c: 146: LATCbits.LATC2 = 0;
  2680  0023EE  948B               	bcf	3979,2,c	;volatile
  2681                           
  2682                           ;servo.c: 147: _delay((unsigned long)((18.32)*(8000000/4000.0)));
  2683  0023F0  0E30               	movlw	48
  2684  0023F2  6E17               	movwf	??_gate& (0+255),c
  2685  0023F4  0E94               	movlw	148
  2686  0023F6                     u3487:
  2687  0023F6  2EE8               	decfsz	wreg,f,c
  2688  0023F8  D7FE               	bra	u3487
  2689  0023FA  2E17               	decfsz	??_gate& (0+255),f,c
  2690  0023FC  D7FC               	bra	u3487
  2691  0023FE  D000               	nop2	
  2692  002400                     l2900:
  2693  002400  B681               	btfsc	3969,3,c	;volatile
  2694  002402  0012               	return	
  2695  002404  D7EC               	goto	l323
  2696  002406                     __end_of_gate:
  2697                           	opt stack 0
  2698                           tblptru	equ	0xFF8
  2699                           postinc0	equ	0xFEE
  2700                           wreg	equ	0xFE8
  2701                           status	equ	0xFD8
  2702                           
  2703 ;; *************** function _initPIC *****************
  2704 ;; Defined at:
  2705 ;;		line 35 in file "initPic.c"
  2706 ;; Parameters:    Size  Location     Type
  2707 ;;		None
  2708 ;; Auto vars:     Size  Location     Type
  2709 ;;		None
  2710 ;; Return value:  Size  Location     Type
  2711 ;;                  2   82[None  ] int 
  2712 ;; Registers used:
  2713 ;;		wreg, status,2, status,0, cstack
  2714 ;; Tracked objects:
  2715 ;;		On entry : 0/0
  2716 ;;		On exit  : 0/0
  2717 ;;		Unchanged: 0/0
  2718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2722 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2723 ;;Total ram usage:        0 bytes
  2724 ;; Hardware stack levels used:    1
  2725 ;; Hardware stack levels required when called:    7
  2726 ;; This function calls:
  2727 ;;		_I2C_Master_Init
  2728 ;;		_I2C_Master_Start
  2729 ;;		_I2C_Master_Stop
  2730 ;;		_I2C_Master_Write
  2731 ;;		_initLCD
  2732 ;;		_main_servo_control
  2733 ;;		_side_servo_control
  2734 ;; This function is called by:
  2735 ;;		_main
  2736 ;; This function uses a non-reentrant model
  2737 ;;
  2738                           
  2739                           	psect	text9
  2740  001FC4                     __ptext9:
  2741                           	opt stack 0
  2742  001FC4                     _initPIC:
  2743                           	opt stack 23
  2744                           
  2745                           ;initPic.c: 36: TRISA = 0b11100111;
  2746                           
  2747                           ;incstack = 0
  2748  001FC4  0EE7               	movlw	231
  2749  001FC6  6E92               	movwf	3986,c	;volatile
  2750                           
  2751                           ;initPic.c: 37: TRISC = 0x11100110;
  2752  001FC8  0E10               	movlw	16
  2753  001FCA  6E94               	movwf	3988,c	;volatile
  2754                           
  2755                           ;initPic.c: 39: TRISC = 0x11100100;
  2756  001FCC  0E00               	movlw	0
  2757  001FCE  6E94               	movwf	3988,c	;volatile
  2758                           
  2759                           ;initPic.c: 40: TRISD = 0x00;
  2760  001FD0  0E00               	movlw	0
  2761  001FD2  6E95               	movwf	3989,c	;volatile
  2762                           
  2763                           ;initPic.c: 41: TRISB = 0b11111011;
  2764  001FD4  0EFB               	movlw	251
  2765  001FD6  6E93               	movwf	3987,c	;volatile
  2766                           
  2767                           ;initPic.c: 42: TRISE = 0x00;
  2768  001FD8  0E00               	movlw	0
  2769  001FDA  6E96               	movwf	3990,c	;volatile
  2770                           
  2771                           ;initPic.c: 45: LATA = 0x00;
  2772  001FDC  0E00               	movlw	0
  2773  001FDE  6E89               	movwf	3977,c	;volatile
  2774                           
  2775                           ;initPic.c: 46: LATB = 0x00;
  2776  001FE0  0E00               	movlw	0
  2777  001FE2  6E8A               	movwf	3978,c	;volatile
  2778                           
  2779                           ;initPic.c: 47: LATC = 0x00;
  2780  001FE4  0E00               	movlw	0
  2781  001FE6  6E8B               	movwf	3979,c	;volatile
  2782                           
  2783                           ;initPic.c: 48: LATD = 0x00;
  2784  001FE8  0E00               	movlw	0
  2785  001FEA  6E8C               	movwf	3980,c	;volatile
  2786                           
  2787                           ;initPic.c: 49: LATE = 0x00;
  2788  001FEC  0E00               	movlw	0
  2789  001FEE  6E8D               	movwf	3981,c	;volatile
  2790                           
  2791                           ;initPic.c: 51: ADCON0 = 0x00;
  2792  001FF0  0E00               	movlw	0
  2793  001FF2  6EC2               	movwf	4034,c	;volatile
  2794                           
  2795                           ;initPic.c: 52: ADCON1 = 0x0C;
  2796  001FF4  0E0C               	movlw	12
  2797  001FF6  6EC1               	movwf	4033,c	;volatile
  2798                           
  2799                           ;initPic.c: 55: ADCON2 = 0b00110001;
  2800  001FF8  0E31               	movlw	49
  2801  001FFA  6EC0               	movwf	4032,c	;volatile
  2802                           
  2803                           ;initPic.c: 56: INT1IE = 1;
  2804  001FFC  86F0               	bsf	intcon3,3,c	;volatile
  2805                           
  2806                           ;initPic.c: 58: initLCD();
  2807  001FFE  EC77  F012         	call	_initLCD	;wreg free
  2808                           
  2809                           ;initPic.c: 60: I2C_Master_Init(10000);
  2810  002002  0E10               	movlw	16
  2811  002004  6E24               	movwf	I2C_Master_Init@c,c
  2812  002006  0E27               	movlw	39
  2813  002008  6E25               	movwf	I2C_Master_Init@c+1,c
  2814  00200A  0E00               	movlw	0
  2815  00200C  6E26               	movwf	I2C_Master_Init@c+2,c
  2816  00200E  0E00               	movlw	0
  2817  002010  6E27               	movwf	I2C_Master_Init@c+3,c
  2818  002012  EC57  F011         	call	_I2C_Master_Init	;wreg free
  2819                           
  2820                           ;initPic.c: 61: I2C_Master_Start();
  2821  002016  EC62  F013         	call	_I2C_Master_Start	;wreg free
  2822                           
  2823                           ;initPic.c: 62: I2C_Master_Write(0b11010000);
  2824  00201A  0E00               	movlw	0
  2825  00201C  6E19               	movwf	I2C_Master_Write@d+1,c
  2826  00201E  0ED0               	movlw	208
  2827  002020  6E18               	movwf	I2C_Master_Write@d,c
  2828  002022  EC54  F013         	call	_I2C_Master_Write	;wreg free
  2829                           
  2830                           ;initPic.c: 63: I2C_Master_Write(0x00);
  2831  002026  0E00               	movlw	0
  2832  002028  6E19               	movwf	I2C_Master_Write@d+1,c
  2833  00202A  0E00               	movlw	0
  2834  00202C  6E18               	movwf	I2C_Master_Write@d,c
  2835  00202E  EC54  F013         	call	_I2C_Master_Write	;wreg free
  2836                           
  2837                           ;initPic.c: 64: I2C_Master_Stop();
  2838  002032  EC5E  F013         	call	_I2C_Master_Stop	;wreg free
  2839                           
  2840                           ;initPic.c: 66: main_servo_control(0);
  2841  002036  0E00               	movlw	0
  2842  002038  6E18               	movwf	main_servo_control@dir+1,c
  2843  00203A  0E00               	movlw	0
  2844  00203C  6E17               	movwf	main_servo_control@dir,c
  2845  00203E  EC20  F00F         	call	_main_servo_control	;wreg free
  2846                           
  2847                           ;initPic.c: 67: side_servo_control(0);
  2848  002042  0E00               	movlw	0
  2849  002044  6E18               	movwf	side_servo_control@dir+1,c
  2850  002046  0E00               	movlw	0
  2851  002048  6E17               	movwf	side_servo_control@dir,c
  2852  00204A  ECAB  F00E         	call	_side_servo_control	;wreg free
  2853                           
  2854                           ;initPic.c: 68: (INTCONbits.GIE = 1);
  2855  00204E  8EF2               	bsf	intcon,7,c	;volatile
  2856  002050  0012               	return		;funcret
  2857  002052                     __end_of_initPIC:
  2858                           	opt stack 0
  2859                           tblptru	equ	0xFF8
  2860                           intcon	equ	0xFF2
  2861                           intcon3	equ	0xFF0
  2862                           postinc0	equ	0xFEE
  2863                           wreg	equ	0xFE8
  2864                           status	equ	0xFD8
  2865                           
  2866 ;; *************** function _side_servo_control *****************
  2867 ;; Defined at:
  2868 ;;		line 48 in file "servo.c"
  2869 ;; Parameters:    Size  Location     Type
  2870 ;;  dir             2   22[COMRAM] int 
  2871 ;; Auto vars:     Size  Location     Type
  2872 ;;  i               2   25[COMRAM] int 
  2873 ;; Return value:  Size  Location     Type
  2874 ;;                  1    wreg      void 
  2875 ;; Registers used:
  2876 ;;		wreg, status,2, status,0
  2877 ;; Tracked objects:
  2878 ;;		On entry : 0/0
  2879 ;;		On exit  : 0/0
  2880 ;;		Unchanged: 0/0
  2881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2882 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2883 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2884 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2885 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2886 ;;Total ram usage:        5 bytes
  2887 ;; Hardware stack levels used:    1
  2888 ;; Hardware stack levels required when called:    4
  2889 ;; This function calls:
  2890 ;;		Nothing
  2891 ;; This function is called by:
  2892 ;;		_sense_can
  2893 ;;		_sort
  2894 ;;		_move_can
  2895 ;;		_initPIC
  2896 ;; This function uses a non-reentrant model
  2897 ;;
  2898                           
  2899                           	psect	text10
  2900  001D56                     __ptext10:
  2901                           	opt stack 0
  2902  001D56                     _side_servo_control:
  2903                           	opt stack 25
  2904                           
  2905                           ;servo.c: 49: int i;
  2906                           ;servo.c: 50: if( dir == 0){
  2907                           
  2908                           ;incstack = 0
  2909  001D56  5017               	movf	side_servo_control@dir,w,c
  2910  001D58  1018               	iorwf	side_servo_control@dir+1,w,c
  2911  001D5A  A4D8               	btfss	status,2,c
  2912  001D5C  D026               	goto	l2364
  2913                           
  2914                           ;servo.c: 51: for (i = 0; i < 10; i++) {
  2915  001D5E  0E00               	movlw	0
  2916  001D60  6E1B               	movwf	side_servo_control@i+1,c
  2917  001D62  0E00               	movlw	0
  2918  001D64  6E1A               	movwf	side_servo_control@i,c
  2919  001D66  BE1B               	btfsc	side_servo_control@i+1,7,c
  2920  001D68  D008               	goto	l288
  2921  001D6A  501B               	movf	side_servo_control@i+1,w,c
  2922  001D6C  E105               	bnz	u1610
  2923  001D6E  0E0A               	movlw	10
  2924  001D70  5C1A               	subwf	side_servo_control@i,w,c
  2925  001D72  B0D8               	btfsc	status,0,c
  2926  001D74  0012               	return	
  2927  001D76  D001               	goto	l288
  2928  001D78                     u1610:
  2929  001D78  0012               	return	
  2930  001D7A                     l288:
  2931                           
  2932                           ;servo.c: 52: LATAbits.LATA3 = 1;
  2933  001D7A  8689               	bsf	3977,3,c	;volatile
  2934                           
  2935                           ;servo.c: 53: _delay((unsigned long)((1.5)*(8000000/4000.0)));
  2936  001D7C  0E04               	movlw	4
  2937  001D7E  6E19               	movwf	??_side_servo_control& (0+255),c
  2938  001D80  0EE4               	movlw	228
  2939  001D82                     u3497:
  2940  001D82  2EE8               	decfsz	wreg,f,c
  2941  001D84  D7FE               	bra	u3497
  2942  001D86  2E19               	decfsz	??_side_servo_control& (0+255),f,c
  2943  001D88  D7FC               	bra	u3497
  2944  001D8A  D000               	nop2	
  2945                           
  2946                           ;servo.c: 55: LATAbits.LATA3 = 0;
  2947  001D8C  9689               	bcf	3977,3,c	;volatile
  2948                           
  2949                           ;servo.c: 56: _delay((unsigned long)((18.5)*(8000000/4000.0)));
  2950  001D8E  0E31               	movlw	49
  2951  001D90  6E19               	movwf	??_side_servo_control& (0+255),c
  2952  001D92  0E0C               	movlw	12
  2953  001D94                     u3507:
  2954  001D94  2EE8               	decfsz	wreg,f,c
  2955  001D96  D7FE               	bra	u3507
  2956  001D98  2E19               	decfsz	??_side_servo_control& (0+255),f,c
  2957  001D9A  D7FC               	bra	u3507
  2958  001D9C  4A1A               	infsnz	side_servo_control@i,f,c
  2959  001D9E  2A1B               	incf	side_servo_control@i+1,f,c
  2960  001DA0  BE1B               	btfsc	side_servo_control@i+1,7,c
  2961  001DA2  D7EB               	goto	l288
  2962  001DA4  501B               	movf	side_servo_control@i+1,w,c
  2963  001DA6  E14B               	bnz	l298
  2964  001DA8  D7E2               	goto	L2
  2965  001DAA                     l2364:
  2966                           
  2967                           ;servo.c: 59: else if(dir == 1){
  2968  001DAA  0417               	decf	side_servo_control@dir,w,c
  2969  001DAC  1018               	iorwf	side_servo_control@dir+1,w,c
  2970  001DAE  A4D8               	btfss	status,2,c
  2971  001DB0  D020               	goto	l2378
  2972                           
  2973                           ;servo.c: 60: for (i = 0; i < 10; i++) {
  2974  001DB2  0E00               	movlw	0
  2975  001DB4  6E1B               	movwf	side_servo_control@i+1,c
  2976  001DB6  0E00               	movlw	0
  2977  001DB8  6E1A               	movwf	side_servo_control@i,c
  2978  001DBA                     l2368:
  2979  001DBA  BE1B               	btfsc	side_servo_control@i+1,7,c
  2980  001DBC  D006               	goto	l292
  2981  001DBE  501B               	movf	side_servo_control@i+1,w,c
  2982  001DC0  E13E               	bnz	l298
  2983  001DC2  0E0A               	movlw	10
  2984  001DC4  5C1A               	subwf	side_servo_control@i,w,c
  2985  001DC6  B0D8               	btfsc	status,0,c
  2986  001DC8  0012               	return	
  2987  001DCA                     l292:
  2988                           
  2989                           ;servo.c: 61: LATAbits.LATA3 = 1;
  2990  001DCA  8689               	bsf	3977,3,c	;volatile
  2991                           
  2992                           ;servo.c: 62: _delay((unsigned long)((2)*(8000000/4000.0)));
  2993  001DCC  0E06               	movlw	6
  2994  001DCE  6E19               	movwf	??_side_servo_control& (0+255),c
  2995  001DD0  0E30               	movlw	48
  2996  001DD2                     u3517:
  2997  001DD2  2EE8               	decfsz	wreg,f,c
  2998  001DD4  D7FE               	bra	u3517
  2999  001DD6  2E19               	decfsz	??_side_servo_control& (0+255),f,c
  3000  001DD8  D7FC               	bra	u3517
  3001  001DDA  D000               	nop2	
  3002                           
  3003                           ;servo.c: 64: LATAbits.LATA3 = 0;
  3004  001DDC  9689               	bcf	3977,3,c	;volatile
  3005                           
  3006                           ;servo.c: 65: _delay((unsigned long)((18)*(8000000/4000.0)));
  3007  001DDE  0E2F               	movlw	47
  3008  001DE0  6E19               	movwf	??_side_servo_control& (0+255),c
  3009  001DE2  0EC0               	movlw	192
  3010  001DE4                     u3527:
  3011  001DE4  2EE8               	decfsz	wreg,f,c
  3012  001DE6  D7FE               	bra	u3527
  3013  001DE8  2E19               	decfsz	??_side_servo_control& (0+255),f,c
  3014  001DEA  D7FC               	bra	u3527
  3015  001DEC  4A1A               	infsnz	side_servo_control@i,f,c
  3016  001DEE  2A1B               	incf	side_servo_control@i+1,f,c
  3017  001DF0  D7E4               	goto	l2368
  3018  001DF2                     l2378:
  3019                           
  3020                           ;servo.c: 68: else if (dir == 2){
  3021  001DF2  0E02               	movlw	2
  3022  001DF4  1817               	xorwf	side_servo_control@dir,w,c
  3023  001DF6  1018               	iorwf	side_servo_control@dir+1,w,c
  3024  001DF8  A4D8               	btfss	status,2,c
  3025  001DFA  0012               	return	
  3026                           
  3027                           ;servo.c: 69: for (i = 0; i < 10; i++) {
  3028  001DFC  0E00               	movlw	0
  3029  001DFE  6E1B               	movwf	side_servo_control@i+1,c
  3030  001E00  0E00               	movlw	0
  3031  001E02  6E1A               	movwf	side_servo_control@i,c
  3032  001E04                     l2382:
  3033  001E04  BE1B               	btfsc	side_servo_control@i+1,7,c
  3034  001E06  D006               	goto	l296
  3035  001E08  501B               	movf	side_servo_control@i+1,w,c
  3036  001E0A  E119               	bnz	l298
  3037  001E0C  0E0A               	movlw	10
  3038  001E0E  5C1A               	subwf	side_servo_control@i,w,c
  3039  001E10  B0D8               	btfsc	status,0,c
  3040  001E12  0012               	return	
  3041  001E14                     l296:
  3042                           
  3043                           ;servo.c: 70: LATAbits.LATA3 = 1;
  3044  001E14  8689               	bsf	3977,3,c	;volatile
  3045                           
  3046                           ;servo.c: 71: _delay((unsigned long)((1.3)*(8000000/4000.0)));
  3047  001E16  0E04               	movlw	4
  3048  001E18  6E19               	movwf	??_side_servo_control& (0+255),c
  3049  001E1A  0E5F               	movlw	95
  3050  001E1C                     u3537:
  3051  001E1C  2EE8               	decfsz	wreg,f,c
  3052  001E1E  D7FE               	bra	u3537
  3053  001E20  2E19               	decfsz	??_side_servo_control& (0+255),f,c
  3054  001E22  D7FC               	bra	u3537
  3055  001E24  F000               	nop	
  3056                           
  3057                           ;servo.c: 73: LATAbits.LATA3 = 0;
  3058  001E26  9689               	bcf	3977,3,c	;volatile
  3059                           
  3060                           ;servo.c: 74: _delay((unsigned long)((18.7)*(8000000/4000.0)));
  3061  001E28  0E31               	movlw	49
  3062  001E2A  6E19               	movwf	??_side_servo_control& (0+255),c
  3063  001E2C  0E91               	movlw	145
  3064  001E2E                     u3547:
  3065  001E2E  2EE8               	decfsz	wreg,f,c
  3066  001E30  D7FE               	bra	u3547
  3067  001E32  2E19               	decfsz	??_side_servo_control& (0+255),f,c
  3068  001E34  D7FC               	bra	u3547
  3069  001E36  F000               	nop	
  3070  001E38  4A1A               	infsnz	side_servo_control@i,f,c
  3071  001E3A  2A1B               	incf	side_servo_control@i+1,f,c
  3072  001E3C  D7E3               	goto	l2382
  3073  001E3E                     l298:
  3074  001E3E  0012               	return		;funcret
  3075  001E40                     __end_of_side_servo_control:
  3076                           	opt stack 0
  3077                           tblptru	equ	0xFF8
  3078                           intcon	equ	0xFF2
  3079                           intcon3	equ	0xFF0
  3080                           postinc0	equ	0xFEE
  3081                           wreg	equ	0xFE8
  3082                           status	equ	0xFD8
  3083                           
  3084 ;; *************** function _main_servo_control *****************
  3085 ;; Defined at:
  3086 ;;		line 17 in file "servo.c"
  3087 ;; Parameters:    Size  Location     Type
  3088 ;;  dir             2   22[COMRAM] int 
  3089 ;; Auto vars:     Size  Location     Type
  3090 ;;  i               2   25[COMRAM] int 
  3091 ;; Return value:  Size  Location     Type
  3092 ;;                  1    wreg      void 
  3093 ;; Registers used:
  3094 ;;		wreg, status,2, status,0
  3095 ;; Tracked objects:
  3096 ;;		On entry : 0/0
  3097 ;;		On exit  : 0/0
  3098 ;;		Unchanged: 0/0
  3099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3100 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3101 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3102 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3103 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3104 ;;Total ram usage:        5 bytes
  3105 ;; Hardware stack levels used:    1
  3106 ;; Hardware stack levels required when called:    4
  3107 ;; This function calls:
  3108 ;;		Nothing
  3109 ;; This function is called by:
  3110 ;;		_sense_can
  3111 ;;		_sort
  3112 ;;		_move_can
  3113 ;;		_initPIC
  3114 ;; This function uses a non-reentrant model
  3115 ;;
  3116                           
  3117                           	psect	text11
  3118  001E40                     __ptext11:
  3119                           	opt stack 0
  3120  001E40                     _main_servo_control:
  3121                           	opt stack 24
  3122                           
  3123                           ;servo.c: 18: int i;
  3124                           ;servo.c: 19: if( dir == 0){
  3125                           
  3126                           ;incstack = 0
  3127  001E40  5017               	movf	main_servo_control@dir,w,c
  3128  001E42  1018               	iorwf	main_servo_control@dir+1,w,c
  3129  001E44  A4D8               	btfss	status,2,c
  3130  001E46  D026               	goto	l2322
  3131                           
  3132                           ;servo.c: 20: for (i = 0; i < 10; i++) {
  3133  001E48  0E00               	movlw	0
  3134  001E4A  6E1B               	movwf	main_servo_control@i+1,c
  3135  001E4C  0E00               	movlw	0
  3136  001E4E  6E1A               	movwf	main_servo_control@i,c
  3137  001E50  BE1B               	btfsc	main_servo_control@i+1,7,c
  3138  001E52  D008               	goto	l274
  3139  001E54  501B               	movf	main_servo_control@i+1,w,c
  3140  001E56  E105               	bnz	u1520
  3141  001E58  0E0A               	movlw	10
  3142  001E5A  5C1A               	subwf	main_servo_control@i,w,c
  3143  001E5C  B0D8               	btfsc	status,0,c
  3144  001E5E  0012               	return	
  3145  001E60  D001               	goto	l274
  3146  001E62                     u1520:
  3147  001E62  0012               	return	
  3148  001E64                     l274:
  3149                           
  3150                           ;servo.c: 21: LATEbits.LATE0 = 1;
  3151  001E64  808D               	bsf	3981,0,c	;volatile
  3152                           
  3153                           ;servo.c: 22: _delay((unsigned long)((1.5)*(8000000/4000.0)));
  3154  001E66  0E04               	movlw	4
  3155  001E68  6E19               	movwf	??_main_servo_control& (0+255),c
  3156  001E6A  0EE4               	movlw	228
  3157  001E6C                     u3557:
  3158  001E6C  2EE8               	decfsz	wreg,f,c
  3159  001E6E  D7FE               	bra	u3557
  3160  001E70  2E19               	decfsz	??_main_servo_control& (0+255),f,c
  3161  001E72  D7FC               	bra	u3557
  3162  001E74  D000               	nop2	
  3163                           
  3164                           ;servo.c: 24: LATEbits.LATE0 = 0;
  3165  001E76  908D               	bcf	3981,0,c	;volatile
  3166                           
  3167                           ;servo.c: 25: _delay((unsigned long)((18.5)*(8000000/4000.0)));
  3168  001E78  0E31               	movlw	49
  3169  001E7A  6E19               	movwf	??_main_servo_control& (0+255),c
  3170  001E7C  0E0C               	movlw	12
  3171  001E7E                     u3567:
  3172  001E7E  2EE8               	decfsz	wreg,f,c
  3173  001E80  D7FE               	bra	u3567
  3174  001E82  2E19               	decfsz	??_main_servo_control& (0+255),f,c
  3175  001E84  D7FC               	bra	u3567
  3176  001E86  4A1A               	infsnz	main_servo_control@i,f,c
  3177  001E88  2A1B               	incf	main_servo_control@i+1,f,c
  3178  001E8A  BE1B               	btfsc	main_servo_control@i+1,7,c
  3179  001E8C  D7EB               	goto	l274
  3180  001E8E  501B               	movf	main_servo_control@i+1,w,c
  3181  001E90  E145               	bnz	l284
  3182  001E92  D7E2               	goto	L3
  3183  001E94                     l2322:
  3184                           
  3185                           ;servo.c: 28: else if(dir == 1){
  3186  001E94  0417               	decf	main_servo_control@dir,w,c
  3187  001E96  1018               	iorwf	main_servo_control@dir+1,w,c
  3188  001E98  A4D8               	btfss	status,2,c
  3189  001E9A  D020               	goto	l2336
  3190                           
  3191                           ;servo.c: 29: for (i = 0; i < 10; i++) {
  3192  001E9C  0E00               	movlw	0
  3193  001E9E  6E1B               	movwf	main_servo_control@i+1,c
  3194  001EA0  0E00               	movlw	0
  3195  001EA2  6E1A               	movwf	main_servo_control@i,c
  3196  001EA4                     l2326:
  3197  001EA4  BE1B               	btfsc	main_servo_control@i+1,7,c
  3198  001EA6  D006               	goto	l278
  3199  001EA8  501B               	movf	main_servo_control@i+1,w,c
  3200  001EAA  E138               	bnz	l284
  3201  001EAC  0E0A               	movlw	10
  3202  001EAE  5C1A               	subwf	main_servo_control@i,w,c
  3203  001EB0  B0D8               	btfsc	status,0,c
  3204  001EB2  0012               	return	
  3205  001EB4                     l278:
  3206                           
  3207                           ;servo.c: 30: LATEbits.LATE0 = 1;
  3208  001EB4  808D               	bsf	3981,0,c	;volatile
  3209                           
  3210                           ;servo.c: 31: _delay((unsigned long)((3.5)*(8000000/4000.0)));
  3211  001EB6  0E0A               	movlw	10
  3212  001EB8  6E19               	movwf	??_main_servo_control& (0+255),c
  3213  001EBA  0E16               	movlw	22
  3214  001EBC                     u3577:
  3215  001EBC  2EE8               	decfsz	wreg,f,c
  3216  001EBE  D7FE               	bra	u3577
  3217  001EC0  2E19               	decfsz	??_main_servo_control& (0+255),f,c
  3218  001EC2  D7FC               	bra	u3577
  3219                           
  3220                           ;servo.c: 33: LATEbits.LATE0 = 0;
  3221  001EC4  908D               	bcf	3981,0,c	;volatile
  3222                           
  3223                           ;servo.c: 34: _delay((unsigned long)((16.5)*(8000000/4000.0)));
  3224  001EC6  0E2B               	movlw	43
  3225  001EC8  6E19               	movwf	??_main_servo_control& (0+255),c
  3226  001ECA  0EDA               	movlw	218
  3227  001ECC                     u3587:
  3228  001ECC  2EE8               	decfsz	wreg,f,c
  3229  001ECE  D7FE               	bra	u3587
  3230  001ED0  2E19               	decfsz	??_main_servo_control& (0+255),f,c
  3231  001ED2  D7FC               	bra	u3587
  3232  001ED4  D000               	nop2	
  3233  001ED6  4A1A               	infsnz	main_servo_control@i,f,c
  3234  001ED8  2A1B               	incf	main_servo_control@i+1,f,c
  3235  001EDA  D7E4               	goto	l2326
  3236  001EDC                     l2336:
  3237                           
  3238                           ;servo.c: 37: else if (dir == 2){
  3239  001EDC  0E02               	movlw	2
  3240  001EDE  1817               	xorwf	main_servo_control@dir,w,c
  3241  001EE0  1018               	iorwf	main_servo_control@dir+1,w,c
  3242  001EE2  A4D8               	btfss	status,2,c
  3243  001EE4  0012               	return	
  3244                           
  3245                           ;servo.c: 38: for (i = 0; i < 10; i++) {
  3246  001EE6  0E00               	movlw	0
  3247  001EE8  6E1B               	movwf	main_servo_control@i+1,c
  3248  001EEA  0E00               	movlw	0
  3249  001EEC  6E1A               	movwf	main_servo_control@i,c
  3250  001EEE                     l2340:
  3251  001EEE  BE1B               	btfsc	main_servo_control@i+1,7,c
  3252  001EF0  D006               	goto	l282
  3253  001EF2  501B               	movf	main_servo_control@i+1,w,c
  3254  001EF4  E113               	bnz	l284
  3255  001EF6  0E0A               	movlw	10
  3256  001EF8  5C1A               	subwf	main_servo_control@i,w,c
  3257  001EFA  B0D8               	btfsc	status,0,c
  3258  001EFC  0012               	return	
  3259  001EFE                     l282:
  3260                           
  3261                           ;servo.c: 39: LATEbits.LATE0 = 1;
  3262  001EFE  808D               	bsf	3981,0,c	;volatile
  3263                           
  3264                           ;servo.c: 40: _delay((unsigned long)((0.15)*(8000000/4000.0)));
  3265  001F00  0E64               	movlw	100
  3266  001F02                     u3597:
  3267  001F02  2EE8               	decfsz	wreg,f,c
  3268  001F04  D7FE               	bra	u3597
  3269                           
  3270                           ;servo.c: 42: LATEbits.LATE0 = 0;
  3271  001F06  908D               	bcf	3981,0,c	;volatile
  3272                           
  3273                           ;servo.c: 43: _delay((unsigned long)((19.85)*(8000000/4000.0)));
  3274  001F08  0E34               	movlw	52
  3275  001F0A  6E19               	movwf	??_main_servo_control& (0+255),c
  3276  001F0C  0E8E               	movlw	142
  3277  001F0E                     u3607:
  3278  001F0E  2EE8               	decfsz	wreg,f,c
  3279  001F10  D7FE               	bra	u3607
  3280  001F12  2E19               	decfsz	??_main_servo_control& (0+255),f,c
  3281  001F14  D7FC               	bra	u3607
  3282  001F16  4A1A               	infsnz	main_servo_control@i,f,c
  3283  001F18  2A1B               	incf	main_servo_control@i+1,f,c
  3284  001F1A  D7E9               	goto	l2340
  3285  001F1C                     l284:
  3286  001F1C  0012               	return		;funcret
  3287  001F1E                     __end_of_main_servo_control:
  3288                           	opt stack 0
  3289                           tblptru	equ	0xFF8
  3290                           intcon	equ	0xFF2
  3291                           intcon3	equ	0xFF0
  3292                           postinc0	equ	0xFEE
  3293                           wreg	equ	0xFE8
  3294                           status	equ	0xFD8
  3295                           
  3296 ;; *************** function _initLCD *****************
  3297 ;; Defined at:
  3298 ;;		line 14 in file "lcd.c"
  3299 ;; Parameters:    Size  Location     Type
  3300 ;;		None
  3301 ;; Auto vars:     Size  Location     Type
  3302 ;;		None
  3303 ;; Return value:  Size  Location     Type
  3304 ;;                  1    wreg      void 
  3305 ;; Registers used:
  3306 ;;		wreg, status,2, status,0, cstack
  3307 ;; Tracked objects:
  3308 ;;		On entry : 0/0
  3309 ;;		On exit  : 0/0
  3310 ;;		Unchanged: 0/0
  3311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3314 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3315 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3316 ;;Total ram usage:        1 bytes
  3317 ;; Hardware stack levels used:    1
  3318 ;; Hardware stack levels required when called:    6
  3319 ;; This function calls:
  3320 ;;		_lcdInst
  3321 ;; This function is called by:
  3322 ;;		_initPIC
  3323 ;; This function uses a non-reentrant model
  3324 ;;
  3325                           
  3326                           	psect	text12
  3327  0024EE                     __ptext12:
  3328                           	opt stack 0
  3329  0024EE                     _initLCD:
  3330                           	opt stack 23
  3331                           
  3332                           ;lcd.c: 15: _delay((unsigned long)((15)*(8000000/4000.0)));
  3333                           
  3334                           ;incstack = 0
  3335  0024EE  0E27               	movlw	39
  3336  0024F0  6E1A               	movwf	??_initLCD& (0+255),c
  3337  0024F2  0EF5               	movlw	245
  3338  0024F4                     u3617:
  3339  0024F4  2EE8               	decfsz	wreg,f,c
  3340  0024F6  D7FE               	bra	u3617
  3341  0024F8  2E1A               	decfsz	??_initLCD& (0+255),f,c
  3342  0024FA  D7FC               	bra	u3617
  3343  0024FC  F000               	nop	
  3344                           
  3345                           ;lcd.c: 16: lcdInst(0b00110011);
  3346  0024FE  0E33               	movlw	51
  3347  002500  EC42  F013         	call	_lcdInst
  3348                           
  3349                           ;lcd.c: 17: lcdInst(0b00110010);
  3350  002504  0E32               	movlw	50
  3351  002506  EC42  F013         	call	_lcdInst
  3352                           
  3353                           ;lcd.c: 18: lcdInst(0b00101000);
  3354  00250A  0E28               	movlw	40
  3355  00250C  EC42  F013         	call	_lcdInst
  3356                           
  3357                           ;lcd.c: 19: lcdInst(0b00001111);
  3358  002510  0E0F               	movlw	15
  3359  002512  EC42  F013         	call	_lcdInst
  3360                           
  3361                           ;lcd.c: 20: lcdInst(0b00000110);
  3362  002516  0E06               	movlw	6
  3363  002518  EC42  F013         	call	_lcdInst
  3364                           
  3365                           ;lcd.c: 21: lcdInst(0b00000001);
  3366  00251C  0E01               	movlw	1
  3367  00251E  EC42  F013         	call	_lcdInst
  3368                           
  3369                           ;lcd.c: 22: _delay((unsigned long)((15)*(8000000/4000.0)));
  3370  002522  0E27               	movlw	39
  3371  002524  6E1A               	movwf	??_initLCD& (0+255),c
  3372  002526  0EF5               	movlw	245
  3373  002528                     u3627:
  3374  002528  2EE8               	decfsz	wreg,f,c
  3375  00252A  D7FE               	bra	u3627
  3376  00252C  2E1A               	decfsz	??_initLCD& (0+255),f,c
  3377  00252E  D7FC               	bra	u3627
  3378  002530  F000               	nop	
  3379  002532  0012               	return		;funcret
  3380  002534                     __end_of_initLCD:
  3381                           	opt stack 0
  3382                           tblptru	equ	0xFF8
  3383                           intcon	equ	0xFF2
  3384                           intcon3	equ	0xFF0
  3385                           postinc0	equ	0xFEE
  3386                           wreg	equ	0xFE8
  3387                           status	equ	0xFD8
  3388                           
  3389 ;; *************** function _I2C_Master_Init *****************
  3390 ;; Defined at:
  3391 ;;		line 13 in file "I2C.c"
  3392 ;; Parameters:    Size  Location     Type
  3393 ;;  c               4   35[COMRAM] const unsigned long 
  3394 ;; Auto vars:     Size  Location     Type
  3395 ;;		None
  3396 ;; Return value:  Size  Location     Type
  3397 ;;                  1    wreg      void 
  3398 ;; Registers used:
  3399 ;;		wreg, status,2, status,0, cstack
  3400 ;; Tracked objects:
  3401 ;;		On entry : 0/0
  3402 ;;		On exit  : 0/0
  3403 ;;		Unchanged: 0/0
  3404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3405 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3407 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3408 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3409 ;;Total ram usage:        8 bytes
  3410 ;; Hardware stack levels used:    1
  3411 ;; Hardware stack levels required when called:    5
  3412 ;; This function calls:
  3413 ;;		___lldiv
  3414 ;; This function is called by:
  3415 ;;		_initPIC
  3416 ;; This function uses a non-reentrant model
  3417 ;;
  3418                           
  3419                           	psect	text13
  3420  0022AE                     __ptext13:
  3421                           	opt stack 0
  3422  0022AE                     _I2C_Master_Init:
  3423                           	opt stack 24
  3424                           
  3425                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  3426                           
  3427                           ;incstack = 0
  3428  0022AE  0E00               	movlw	0
  3429  0022B0  6EC7               	movwf	4039,c	;volatile
  3430                           
  3431                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  3432  0022B2  0E28               	movlw	40
  3433  0022B4  6EC6               	movwf	4038,c	;volatile
  3434                           
  3435                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  3436  0022B6  0E00               	movlw	0
  3437  0022B8  6EC5               	movwf	4037,c	;volatile
  3438                           
  3439                           ;I2C.c: 19: SSPADD = (8000000/(4*c))-1;
  3440  0022BA  0E00               	movlw	0
  3441  0022BC  6E17               	movwf	___lldiv@dividend,c
  3442  0022BE  0E12               	movlw	18
  3443  0022C0  6E18               	movwf	___lldiv@dividend+1,c
  3444  0022C2  0E7A               	movlw	122
  3445  0022C4  6E19               	movwf	___lldiv@dividend+2,c
  3446  0022C6  0E00               	movlw	0
  3447  0022C8  6E1A               	movwf	___lldiv@dividend+3,c
  3448  0022CA  C024  F028         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  3449  0022CE  C025  F029         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  3450  0022D2  C026  F02A         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  3451  0022D6  C027  F02B         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  3452  0022DA  0E02               	movlw	2
  3453  0022DC                     u1975:
  3454  0022DC  90D8               	bcf	status,0,c
  3455  0022DE  3628               	rlcf	??_I2C_Master_Init,f,c
  3456  0022E0  3629               	rlcf	??_I2C_Master_Init+1,f,c
  3457  0022E2  362A               	rlcf	??_I2C_Master_Init+2,f,c
  3458  0022E4  362B               	rlcf	??_I2C_Master_Init+3,f,c
  3459  0022E6  2EE8               	decfsz	wreg,f,c
  3460  0022E8  D7F9               	goto	u1975
  3461  0022EA  C028  F01B         	movff	??_I2C_Master_Init,___lldiv@divisor
  3462  0022EE  C029  F01C         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  3463  0022F2  C02A  F01D         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  3464  0022F6  C02B  F01E         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  3465  0022FA  EC29  F010         	call	___lldiv	;wreg free
  3466  0022FE  0417               	decf	?___lldiv,w,c
  3467  002300  6EC8               	movwf	4040,c	;volatile
  3468                           
  3469                           ;I2C.c: 20: TRISC3 = 1;
  3470  002302  8694               	bsf	3988,3,c	;volatile
  3471                           
  3472                           ;I2C.c: 21: TRISC4 = 1;
  3473  002304  8894               	bsf	3988,4,c	;volatile
  3474  002306  0012               	return		;funcret
  3475  002308                     __end_of_I2C_Master_Init:
  3476                           	opt stack 0
  3477                           tblptru	equ	0xFF8
  3478                           intcon	equ	0xFF2
  3479                           intcon3	equ	0xFF0
  3480                           postinc0	equ	0xFEE
  3481                           wreg	equ	0xFE8
  3482                           status	equ	0xFD8
  3483                           
  3484 ;; *************** function ___lldiv *****************
  3485 ;; Defined at:
  3486 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lldiv.c"
  3487 ;; Parameters:    Size  Location     Type
  3488 ;;  dividend        4   22[COMRAM] unsigned long 
  3489 ;;  divisor         4   26[COMRAM] unsigned long 
  3490 ;; Auto vars:     Size  Location     Type
  3491 ;;  quotient        4   30[COMRAM] unsigned long 
  3492 ;;  counter         1   34[COMRAM] unsigned char 
  3493 ;; Return value:  Size  Location     Type
  3494 ;;                  4   22[COMRAM] unsigned long 
  3495 ;; Registers used:
  3496 ;;		wreg, status,2, status,0
  3497 ;; Tracked objects:
  3498 ;;		On entry : 0/0
  3499 ;;		On exit  : 0/0
  3500 ;;		Unchanged: 0/0
  3501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3502 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3503 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3505 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3506 ;;Total ram usage:       13 bytes
  3507 ;; Hardware stack levels used:    1
  3508 ;; Hardware stack levels required when called:    4
  3509 ;; This function calls:
  3510 ;;		Nothing
  3511 ;; This function is called by:
  3512 ;;		_I2C_Master_Init
  3513 ;; This function uses a non-reentrant model
  3514 ;;
  3515                           
  3516                           	psect	text14
  3517  002052                     __ptext14:
  3518                           	opt stack 0
  3519  002052                     ___lldiv:
  3520                           	opt stack 24
  3521                           
  3522                           ;incstack = 0
  3523  002052  0E00               	movlw	0
  3524  002054  6E1F               	movwf	___lldiv@quotient,c
  3525  002056  0E00               	movlw	0
  3526  002058  6E20               	movwf	___lldiv@quotient+1,c
  3527  00205A  0E00               	movlw	0
  3528  00205C  6E21               	movwf	___lldiv@quotient+2,c
  3529  00205E  0E00               	movlw	0
  3530  002060  6E22               	movwf	___lldiv@quotient+3,c
  3531  002062  501B               	movf	___lldiv@divisor,w,c
  3532  002064  101C               	iorwf	___lldiv@divisor+1,w,c
  3533  002066  101D               	iorwf	___lldiv@divisor+2,w,c
  3534  002068  101E               	iorwf	___lldiv@divisor+3,w,c
  3535  00206A  B4D8               	btfsc	status,2,c
  3536  00206C  D02A               	goto	l884
  3537  00206E  0E01               	movlw	1
  3538  002070  6E23               	movwf	___lldiv@counter,c
  3539  002072  D006               	goto	l2530
  3540  002074                     l2528:
  3541  002074  90D8               	bcf	status,0,c
  3542  002076  361B               	rlcf	___lldiv@divisor,f,c
  3543  002078  361C               	rlcf	___lldiv@divisor+1,f,c
  3544  00207A  361D               	rlcf	___lldiv@divisor+2,f,c
  3545  00207C  361E               	rlcf	___lldiv@divisor+3,f,c
  3546  00207E  2A23               	incf	___lldiv@counter,f,c
  3547  002080                     l2530:
  3548  002080  AE1E               	btfss	___lldiv@divisor+3,7,c
  3549  002082  D7F8               	goto	l2528
  3550  002084                     l2532:
  3551  002084  90D8               	bcf	status,0,c
  3552  002086  361F               	rlcf	___lldiv@quotient,f,c
  3553  002088  3620               	rlcf	___lldiv@quotient+1,f,c
  3554  00208A  3621               	rlcf	___lldiv@quotient+2,f,c
  3555  00208C  3622               	rlcf	___lldiv@quotient+3,f,c
  3556  00208E  501B               	movf	___lldiv@divisor,w,c
  3557  002090  5C17               	subwf	___lldiv@dividend,w,c
  3558  002092  501C               	movf	___lldiv@divisor+1,w,c
  3559  002094  5818               	subwfb	___lldiv@dividend+1,w,c
  3560  002096  501D               	movf	___lldiv@divisor+2,w,c
  3561  002098  5819               	subwfb	___lldiv@dividend+2,w,c
  3562  00209A  501E               	movf	___lldiv@divisor+3,w,c
  3563  00209C  581A               	subwfb	___lldiv@dividend+3,w,c
  3564  00209E  A0D8               	btfss	status,0,c
  3565  0020A0  D009               	goto	l2540
  3566  0020A2  501B               	movf	___lldiv@divisor,w,c
  3567  0020A4  5E17               	subwf	___lldiv@dividend,f,c
  3568  0020A6  501C               	movf	___lldiv@divisor+1,w,c
  3569  0020A8  5A18               	subwfb	___lldiv@dividend+1,f,c
  3570  0020AA  501D               	movf	___lldiv@divisor+2,w,c
  3571  0020AC  5A19               	subwfb	___lldiv@dividend+2,f,c
  3572  0020AE  501E               	movf	___lldiv@divisor+3,w,c
  3573  0020B0  5A1A               	subwfb	___lldiv@dividend+3,f,c
  3574  0020B2  801F               	bsf	___lldiv@quotient,0,c
  3575  0020B4                     l2540:
  3576  0020B4  90D8               	bcf	status,0,c
  3577  0020B6  321E               	rrcf	___lldiv@divisor+3,f,c
  3578  0020B8  321D               	rrcf	___lldiv@divisor+2,f,c
  3579  0020BA  321C               	rrcf	___lldiv@divisor+1,f,c
  3580  0020BC  321B               	rrcf	___lldiv@divisor,f,c
  3581  0020BE  2E23               	decfsz	___lldiv@counter,f,c
  3582  0020C0  D7E1               	goto	l2532
  3583  0020C2                     l884:
  3584  0020C2  C01F  F017         	movff	___lldiv@quotient,?___lldiv
  3585  0020C6  C020  F018         	movff	___lldiv@quotient+1,?___lldiv+1
  3586  0020CA  C021  F019         	movff	___lldiv@quotient+2,?___lldiv+2
  3587  0020CE  C022  F01A         	movff	___lldiv@quotient+3,?___lldiv+3
  3588  0020D2  0012               	return		;funcret
  3589  0020D4                     __end_of___lldiv:
  3590                           	opt stack 0
  3591                           tblptru	equ	0xFF8
  3592                           intcon	equ	0xFF2
  3593                           intcon3	equ	0xFF0
  3594                           postinc0	equ	0xFEE
  3595                           wreg	equ	0xFE8
  3596                           status	equ	0xFD8
  3597                           
  3598 ;; *************** function _display_time *****************
  3599 ;; Defined at:
  3600 ;;		line 97 in file "picState.c"
  3601 ;; Parameters:    Size  Location     Type
  3602 ;;		None
  3603 ;; Auto vars:     Size  Location     Type
  3604 ;;  i               1   58[COMRAM] unsigned char 
  3605 ;; Return value:  Size  Location     Type
  3606 ;;                  2   88[None  ] int 
  3607 ;; Registers used:
  3608 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3609 ;; Tracked objects:
  3610 ;;		On entry : 0/0
  3611 ;;		On exit  : 0/0
  3612 ;;		Unchanged: 0/0
  3613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3615 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3616 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3617 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3618 ;;Total ram usage:        3 bytes
  3619 ;; Hardware stack levels used:    1
  3620 ;; Hardware stack levels required when called:    7
  3621 ;; This function calls:
  3622 ;;		_I2C_Master_Read
  3623 ;;		_I2C_Master_Start
  3624 ;;		_I2C_Master_Stop
  3625 ;;		_I2C_Master_Write
  3626 ;;		_lcdInst
  3627 ;;		_printf
  3628 ;; This function is called by:
  3629 ;;		_main
  3630 ;; This function uses a non-reentrant model
  3631 ;;
  3632                           
  3633                           	psect	text15
  3634  001B7A                     __ptext15:
  3635                           	opt stack 0
  3636  001B7A                     _display_time:
  3637                           	opt stack 23
  3638                           
  3639                           ;picState.c: 98: lcdInst(0x01);;
  3640                           
  3641                           ;incstack = 0
  3642  001B7A  0E01               	movlw	1
  3643  001B7C  EC42  F013         	call	_lcdInst
  3644                           
  3645                           ;picState.c: 99: _delay((unsigned long)((300)*(8000000/4000.0)));
  3646  001B80  0E04               	movlw	4
  3647  001B82  6E3A               	movwf	(??_display_time+1)& (0+255),c
  3648  001B84  0E0C               	movlw	12
  3649  001B86  6E39               	movwf	??_display_time& (0+255),c
  3650  001B88  0E34               	movlw	52
  3651  001B8A                     u3637:
  3652  001B8A  2EE8               	decfsz	wreg,f,c
  3653  001B8C  D7FE               	bra	u3637
  3654  001B8E  2E39               	decfsz	??_display_time& (0+255),f,c
  3655  001B90  D7FC               	bra	u3637
  3656  001B92  2E3A               	decfsz	(??_display_time+1)& (0+255),f,c
  3657  001B94  D7FA               	bra	u3637
  3658                           
  3659                           ;picState.c: 100: while (mode == 1) {
  3660  001B96  D065               	goto	l3592
  3661  001B98                     l3560:
  3662                           
  3663                           ;picState.c: 101: I2C_Master_Start();
  3664  001B98  EC62  F013         	call	_I2C_Master_Start	;wreg free
  3665                           
  3666                           ;picState.c: 102: I2C_Master_Write(0b11010001);
  3667  001B9C  0E00               	movlw	0
  3668  001B9E  6E19               	movwf	I2C_Master_Write@d+1,c
  3669  001BA0  0ED1               	movlw	209
  3670  001BA2  6E18               	movwf	I2C_Master_Write@d,c
  3671  001BA4  EC54  F013         	call	_I2C_Master_Write	;wreg free
  3672                           
  3673                           ;picState.c: 103: for (unsigned char i = 0; i < 0x06; i++) {
  3674  001BA8  0E00               	movlw	0
  3675  001BAA  6E3B               	movwf	display_time@i,c
  3676  001BAC                     l3564:
  3677  001BAC  0E05               	movlw	5
  3678  001BAE  643B               	cpfsgt	display_time@i,c
  3679  001BB0  D001               	goto	l3568
  3680  001BB2  D00E               	goto	l3574
  3681  001BB4                     l3568:
  3682                           
  3683                           ;picState.c: 104: time[i] = I2C_Master_Read(1);
  3684  001BB4  503B               	movf	display_time@i,w,c
  3685  001BB6  0D01               	mullw	1
  3686  001BB8  0E4C               	movlw	low _time
  3687  001BBA  24F3               	addwf	prodl,w,c
  3688  001BBC  6ED9               	movwf	fsr2l,c
  3689  001BBE  0E00               	movlw	high _time
  3690  001BC0  20F4               	addwfc	prodh,w,c
  3691  001BC2  6EDA               	movwf	fsr2h,c
  3692  001BC4  0E01               	movlw	1
  3693  001BC6  ECF5  F012         	call	_I2C_Master_Read
  3694  001BCA  6EDF               	movwf	indf2,c
  3695  001BCC  2A3B               	incf	display_time@i,f,c
  3696  001BCE  D7EE               	goto	l3564
  3697  001BD0                     l3574:
  3698                           
  3699                           ;picState.c: 105: }
  3700                           ;picState.c: 106: time[6] = I2C_Master_Read(0);
  3701  001BD0  0E00               	movlw	0
  3702  001BD2  ECF5  F012         	call	_I2C_Master_Read
  3703  001BD6  6E52               	movwf	_time+6,c
  3704                           
  3705                           ;picState.c: 107: I2C_Master_Stop();
  3706  001BD8  EC5E  F013         	call	_I2C_Master_Stop	;wreg free
  3707                           
  3708                           ;picState.c: 108: lcdInst(0b10000000);;
  3709  001BDC  0E80               	movlw	128
  3710  001BDE  EC42  F013         	call	_lcdInst
  3711                           
  3712                           ;picState.c: 109: printf("%02x/%02x/%02x", time[6], time[5],
  3713                           ;picState.c: 110: time[4]);
  3714  001BE2  0E94               	movlw	low STR_8
  3715  001BE4  6E23               	movwf	printf@f,c
  3716  001BE6  0E10               	movlw	high STR_8
  3717  001BE8  6E24               	movwf	printf@f+1,c
  3718  001BEA  C052  F025         	movff	_time+6,?_printf+2
  3719  001BEE  6A26               	clrf	?_printf+3,c
  3720  001BF0  C051  F027         	movff	_time+5,?_printf+4
  3721  001BF4  6A28               	clrf	?_printf+5,c
  3722  001BF6  C050  F029         	movff	_time+4,?_printf+6
  3723  001BFA  6A2A               	clrf	?_printf+7,c
  3724  001BFC  EC6A  F008         	call	_printf	;wreg free
  3725                           
  3726                           ;picState.c: 111: lcdInst(0b11000000);;
  3727  001C00  0EC0               	movlw	192
  3728  001C02  EC42  F013         	call	_lcdInst
  3729                           
  3730                           ;picState.c: 112: printf("%02x:%02x:%02x", time[2], time[1],
  3731                           ;picState.c: 113: time[0]);
  3732  001C06  0EA3               	movlw	low STR_9
  3733  001C08  6E23               	movwf	printf@f,c
  3734  001C0A  0E10               	movlw	high STR_9
  3735  001C0C  6E24               	movwf	printf@f+1,c
  3736  001C0E  C04E  F025         	movff	_time+2,?_printf+2
  3737  001C12  6A26               	clrf	?_printf+3,c
  3738  001C14  C04D  F027         	movff	_time+1,?_printf+4
  3739  001C18  6A28               	clrf	?_printf+5,c
  3740  001C1A  C04C  F029         	movff	_time,?_printf+6
  3741  001C1E  6A2A               	clrf	?_printf+7,c
  3742  001C20  EC6A  F008         	call	_printf	;wreg free
  3743                           
  3744                           ;picState.c: 115: I2C_Master_Start();
  3745  001C24  EC62  F013         	call	_I2C_Master_Start	;wreg free
  3746                           
  3747                           ;picState.c: 116: I2C_Master_Write(0b11010000);
  3748  001C28  0E00               	movlw	0
  3749  001C2A  6E19               	movwf	I2C_Master_Write@d+1,c
  3750  001C2C  0ED0               	movlw	208
  3751  001C2E  6E18               	movwf	I2C_Master_Write@d,c
  3752  001C30  EC54  F013         	call	_I2C_Master_Write	;wreg free
  3753                           
  3754                           ;picState.c: 117: I2C_Master_Write(0x00);
  3755  001C34  0E00               	movlw	0
  3756  001C36  6E19               	movwf	I2C_Master_Write@d+1,c
  3757  001C38  0E00               	movlw	0
  3758  001C3A  6E18               	movwf	I2C_Master_Write@d,c
  3759  001C3C  EC54  F013         	call	_I2C_Master_Write	;wreg free
  3760                           
  3761                           ;picState.c: 118: I2C_Master_Stop();
  3762  001C40  EC5E  F013         	call	_I2C_Master_Stop	;wreg free
  3763                           
  3764                           ;picState.c: 120: _delay((unsigned long)((990)*(8000000/4000.0)));
  3765  001C44  0E0B               	movlw	11
  3766  001C46  6E3A               	movwf	(??_display_time+1)& (0+255),c
  3767  001C48  0E0C               	movlw	12
  3768  001C4A  6E39               	movwf	??_display_time& (0+255),c
  3769  001C4C  0E64               	movlw	100
  3770  001C4E                     u3647:
  3771  001C4E  2EE8               	decfsz	wreg,f,c
  3772  001C50  D7FE               	bra	u3647
  3773  001C52  2E39               	decfsz	??_display_time& (0+255),f,c
  3774  001C54  D7FC               	bra	u3647
  3775  001C56  2E3A               	decfsz	(??_display_time+1)& (0+255),f,c
  3776  001C58  D7FA               	bra	u3647
  3777  001C5A  D000               	nop2	
  3778                           
  3779                           ;picState.c: 121: lcdInst(0b10000000);;
  3780  001C5C  0E80               	movlw	128
  3781  001C5E  EC42  F013         	call	_lcdInst
  3782  001C62                     l3592:
  3783  001C62  0461               	decf	_mode,w,c
  3784  001C64  A4D8               	btfss	status,2,c
  3785  001C66  0012               	return	
  3786  001C68  D797               	goto	l3560
  3787  001C6A                     __end_of_display_time:
  3788                           	opt stack 0
  3789                           tblptru	equ	0xFF8
  3790                           prodh	equ	0xFF4
  3791                           prodl	equ	0xFF3
  3792                           intcon	equ	0xFF2
  3793                           intcon3	equ	0xFF0
  3794                           postinc0	equ	0xFEE
  3795                           wreg	equ	0xFE8
  3796                           indf2	equ	0xFDF
  3797                           fsr2h	equ	0xFDA
  3798                           fsr2l	equ	0xFD9
  3799                           status	equ	0xFD8
  3800                           
  3801 ;; *************** function _display_sorting_time *****************
  3802 ;; Defined at:
  3803 ;;		line 125 in file "picState.c"
  3804 ;; Parameters:    Size  Location     Type
  3805 ;;		None
  3806 ;; Auto vars:     Size  Location     Type
  3807 ;;  i               2   30[BANK0 ] int 
  3808 ;;  i               2   28[BANK0 ] int 
  3809 ;;  int_start_ti   14   14[BANK0 ] int [7]
  3810 ;;  int_end_time   14    0[BANK0 ] int [7]
  3811 ;; Return value:  Size  Location     Type
  3812 ;;                  2   92[None  ] int 
  3813 ;; Registers used:
  3814 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3815 ;; Tracked objects:
  3816 ;;		On entry : 0/0
  3817 ;;		On exit  : 0/0
  3818 ;;		Unchanged: 0/0
  3819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3821 ;;      Locals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3822 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3823 ;;      Totals:         4      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3824 ;;Total ram usage:       36 bytes
  3825 ;; Hardware stack levels used:    1
  3826 ;; Hardware stack levels required when called:    7
  3827 ;; This function calls:
  3828 ;;		___wmul
  3829 ;;		_get_time
  3830 ;;		_lcdInst
  3831 ;;		_printf
  3832 ;; This function is called by:
  3833 ;;		_main
  3834 ;; This function uses a non-reentrant model
  3835 ;;
  3836                           
  3837                           	psect	text16
  3838  0018D0                     __ptext16:
  3839                           	opt stack 0
  3840  0018D0                     _display_sorting_time:
  3841                           	opt stack 23
  3842                           
  3843                           ;picState.c: 126: int int_end_time[7];
  3844                           ;picState.c: 127: int int_start_time[7];
  3845                           ;picState.c: 128: lcdInst(0x01);;
  3846                           
  3847                           ;incstack = 0
  3848  0018D0  0E01               	movlw	1
  3849  0018D2  EC42  F013         	call	_lcdInst
  3850                           
  3851                           ;picState.c: 130: get_time(end_time);
  3852  0018D6  0E62               	movlw	low _end_time
  3853  0018D8  6E1A               	movwf	get_time@datime,c
  3854  0018DA  0E00               	movlw	high _end_time
  3855  0018DC  6E1B               	movwf	get_time@datime+1,c
  3856  0018DE  ECA9  F010         	call	_get_time	;wreg free
  3857                           
  3858                           ;picState.c: 131: for(int i = 0; i < 7; i++){
  3859  0018E2  0E00               	movlw	0
  3860  0018E4  0100               	movlb	0	; () banked
  3861  0018E6  6FC0               	movwf	(display_sorting_time@i+1)& (0+255),b
  3862  0018E8  0E00               	movlw	0
  3863  0018EA  6FBF               	movwf	display_sorting_time@i& (0+255),b
  3864  0018EC                     l3636:
  3865                           
  3866                           ; BSR set to: 0
  3867  0018EC  0100               	movlb	0	; () banked
  3868  0018EE  BFC0               	btfsc	(display_sorting_time@i+1)& (0+255),7,b
  3869  0018F0  D008               	goto	l3640
  3870  0018F2  0100               	movlb	0	; () banked
  3871  0018F4  51C0               	movf	(display_sorting_time@i+1)& (0+255),w,b
  3872  0018F6  E139               	bnz	l3646
  3873  0018F8  0E07               	movlw	7
  3874  0018FA  0100               	movlb	0	; () banked
  3875  0018FC  5DBF               	subwf	display_sorting_time@i& (0+255),w,b
  3876  0018FE  B0D8               	btfsc	status,0,c
  3877  001900  D034               	goto	l3646
  3878  001902                     l3640:
  3879                           
  3880                           ; BSR set to: 0
  3881                           ;picState.c: 132: int_end_time[i] = (end_time[i] & 0x0F) + ((end_time[i] & 0xF0)>>4)*10;
  3882  001902  0E62               	movlw	low _end_time
  3883  001904  0100               	movlb	0	; () banked
  3884  001906  25BF               	addwf	display_sorting_time@i& (0+255),w,b
  3885  001908  6ED9               	movwf	fsr2l,c
  3886  00190A  0E00               	movlw	high _end_time
  3887  00190C  0100               	movlb	0	; () banked
  3888  00190E  21C0               	addwfc	(display_sorting_time@i+1)& (0+255),w,b
  3889  001910  6EDA               	movwf	fsr2h,c
  3890  001912  50DF               	movf	indf2,w,c
  3891  001914  6E39               	movwf	??_display_sorting_time& (0+255),c
  3892  001916  3A39               	swapf	??_display_sorting_time,f,c
  3893  001918  0E0F               	movlw	15
  3894  00191A  1639               	andwf	??_display_sorting_time,f,c
  3895  00191C  0E0F               	movlw	15
  3896  00191E  1639               	andwf	??_display_sorting_time,f,c
  3897  001920  5039               	movf	??_display_sorting_time,w,c
  3898  001922  0D0A               	mullw	10
  3899  001924  0E62               	movlw	low _end_time
  3900  001926  0100               	movlb	0	; () banked
  3901  001928  25BF               	addwf	display_sorting_time@i& (0+255),w,b
  3902  00192A  6ED9               	movwf	fsr2l,c
  3903  00192C  0E00               	movlw	high _end_time
  3904  00192E  0100               	movlb	0	; () banked
  3905  001930  21C0               	addwfc	(display_sorting_time@i+1)& (0+255),w,b
  3906  001932  6EDA               	movwf	fsr2h,c
  3907  001934  50DF               	movf	indf2,w,c
  3908  001936  0B0F               	andlw	15
  3909  001938  6E3A               	movwf	(??_display_sorting_time+1)& (0+255),c
  3910  00193A  6A3B               	clrf	(??_display_sorting_time+2)& (0+255),c
  3911  00193C  50F3               	movf	prodl,w,c
  3912  00193E  263A               	addwf	??_display_sorting_time+1,f,c
  3913  001940  50F4               	movf	prodh,w,c
  3914  001942  223B               	addwfc	??_display_sorting_time+2,f,c
  3915  001944  90D8               	bcf	status,0,c
  3916  001946  0100               	movlb	0	; () banked
  3917  001948  35BF               	rlcf	display_sorting_time@i& (0+255),w,b
  3918  00194A  6ED9               	movwf	fsr2l,c
  3919  00194C  0100               	movlb	0	; () banked
  3920  00194E  35C0               	rlcf	(display_sorting_time@i+1)& (0+255),w,b
  3921  001950  6EDA               	movwf	fsr2h,c
  3922  001952  0EA3               	movlw	low display_sorting_time@int_end_time
  3923  001954  26D9               	addwf	fsr2l,f,c
  3924  001956  0E00               	movlw	high display_sorting_time@int_end_time
  3925  001958  22DA               	addwfc	fsr2h,f,c
  3926  00195A  C03A  FFDE         	movff	??_display_sorting_time+1,postinc2
  3927  00195E  C03B  FFDD         	movff	??_display_sorting_time+2,postdec2
  3928                           
  3929                           ; BSR set to: 0
  3930  001962  0100               	movlb	0	; () banked
  3931  001964  4BBF               	infsnz	display_sorting_time@i& (0+255),f,b
  3932  001966  2BC0               	incf	(display_sorting_time@i+1)& (0+255),f,b
  3933  001968  D7C1               	goto	l3636
  3934  00196A                     l3646:
  3935                           
  3936                           ; BSR set to: 0
  3937                           ;picState.c: 133: }
  3938                           ;picState.c: 134: for(int i = 0; i < 7; i++){
  3939  00196A  0E00               	movlw	0
  3940  00196C  0100               	movlb	0	; () banked
  3941  00196E  6FC2               	movwf	(display_sorting_time@i_497+1)& (0+255),b
  3942  001970  0E00               	movlw	0
  3943  001972  6FC1               	movwf	display_sorting_time@i_497& (0+255),b
  3944  001974                     l3648:
  3945                           
  3946                           ; BSR set to: 0
  3947  001974  0100               	movlb	0	; () banked
  3948  001976  BFC2               	btfsc	(display_sorting_time@i_497+1)& (0+255),7,b
  3949  001978  D008               	goto	l3652
  3950  00197A  0100               	movlb	0	; () banked
  3951  00197C  51C2               	movf	(display_sorting_time@i_497+1)& (0+255),w,b
  3952  00197E  E139               	bnz	l3658
  3953  001980  0E07               	movlw	7
  3954  001982  0100               	movlb	0	; () banked
  3955  001984  5DC1               	subwf	display_sorting_time@i_497& (0+255),w,b
  3956  001986  B0D8               	btfsc	status,0,c
  3957  001988  D034               	goto	l3658
  3958  00198A                     l3652:
  3959                           
  3960                           ; BSR set to: 0
  3961                           ;picState.c: 135: int_start_time[i] = (start_time[i] & 0x0F) + ((start_time[i] & 0xF0)>>
      +                          4)*10;
  3962  00198A  0E9C               	movlw	low _start_time
  3963  00198C  0100               	movlb	0	; () banked
  3964  00198E  25C1               	addwf	display_sorting_time@i_497& (0+255),w,b
  3965  001990  6ED9               	movwf	fsr2l,c
  3966  001992  0E00               	movlw	high _start_time
  3967  001994  0100               	movlb	0	; () banked
  3968  001996  21C2               	addwfc	(display_sorting_time@i_497+1)& (0+255),w,b
  3969  001998  6EDA               	movwf	fsr2h,c
  3970  00199A  50DF               	movf	indf2,w,c
  3971  00199C  6E39               	movwf	??_display_sorting_time& (0+255),c
  3972  00199E  3A39               	swapf	??_display_sorting_time,f,c
  3973  0019A0  0E0F               	movlw	15
  3974  0019A2  1639               	andwf	??_display_sorting_time,f,c
  3975  0019A4  0E0F               	movlw	15
  3976  0019A6  1639               	andwf	??_display_sorting_time,f,c
  3977  0019A8  5039               	movf	??_display_sorting_time,w,c
  3978  0019AA  0D0A               	mullw	10
  3979  0019AC  0E9C               	movlw	low _start_time
  3980  0019AE  0100               	movlb	0	; () banked
  3981  0019B0  25C1               	addwf	display_sorting_time@i_497& (0+255),w,b
  3982  0019B2  6ED9               	movwf	fsr2l,c
  3983  0019B4  0E00               	movlw	high _start_time
  3984  0019B6  0100               	movlb	0	; () banked
  3985  0019B8  21C2               	addwfc	(display_sorting_time@i_497+1)& (0+255),w,b
  3986  0019BA  6EDA               	movwf	fsr2h,c
  3987  0019BC  50DF               	movf	indf2,w,c
  3988  0019BE  0B0F               	andlw	15
  3989  0019C0  6E3A               	movwf	(??_display_sorting_time+1)& (0+255),c
  3990  0019C2  6A3B               	clrf	(??_display_sorting_time+2)& (0+255),c
  3991  0019C4  50F3               	movf	prodl,w,c
  3992  0019C6  263A               	addwf	??_display_sorting_time+1,f,c
  3993  0019C8  50F4               	movf	prodh,w,c
  3994  0019CA  223B               	addwfc	??_display_sorting_time+2,f,c
  3995  0019CC  90D8               	bcf	status,0,c
  3996  0019CE  0100               	movlb	0	; () banked
  3997  0019D0  35C1               	rlcf	display_sorting_time@i_497& (0+255),w,b
  3998  0019D2  6ED9               	movwf	fsr2l,c
  3999  0019D4  0100               	movlb	0	; () banked
  4000  0019D6  35C2               	rlcf	(display_sorting_time@i_497+1)& (0+255),w,b
  4001  0019D8  6EDA               	movwf	fsr2h,c
  4002  0019DA  0EB1               	movlw	low display_sorting_time@int_start_time
  4003  0019DC  26D9               	addwf	fsr2l,f,c
  4004  0019DE  0E00               	movlw	high display_sorting_time@int_start_time
  4005  0019E0  22DA               	addwfc	fsr2h,f,c
  4006  0019E2  C03A  FFDE         	movff	??_display_sorting_time+1,postinc2
  4007  0019E6  C03B  FFDD         	movff	??_display_sorting_time+2,postdec2
  4008                           
  4009                           ; BSR set to: 0
  4010  0019EA  0100               	movlb	0	; () banked
  4011  0019EC  4BC1               	infsnz	display_sorting_time@i_497& (0+255),f,b
  4012  0019EE  2BC2               	incf	(display_sorting_time@i_497+1)& (0+255),f,b
  4013  0019F0  D7C1               	goto	l3648
  4014  0019F2                     l3658:
  4015                           
  4016                           ; BSR set to: 0
  4017                           ;picState.c: 136: }
  4018                           ;picState.c: 137: if(displayFlag == 0){
  4019  0019F2  505D               	movf	_displayFlag,w,c
  4020  0019F4  105E               	iorwf	_displayFlag+1,w,c
  4021  0019F6  A4D8               	btfss	status,2,c
  4022  0019F8  D02E               	goto	l3664
  4023                           
  4024                           ; BSR set to: 0
  4025                           ;picState.c: 138: passed_time = (int_end_time[1] - int_start_time[1]) * 60 + (int_end_ti
      +                          me[0] - int_start_time[0]);
  4026  0019FA  C0B1  F039         	movff	display_sorting_time@int_start_time,??_display_sorting_time
  4027  0019FE  C0B2  F03A         	movff	display_sorting_time@int_start_time+1,??_display_sorting_time+1
  4028  001A02  1E39               	comf	??_display_sorting_time,f,c
  4029  001A04  1E3A               	comf	??_display_sorting_time+1,f,c
  4030  001A06  4A39               	infsnz	??_display_sorting_time,f,c
  4031  001A08  2A3A               	incf	??_display_sorting_time+1,f,c
  4032  001A0A  EE20  F0B3         	lfsr	2,display_sorting_time@int_start_time+2
  4033  001A0E  CFDE F03B          	movff	postinc2,??_display_sorting_time+2
  4034  001A12  CFDD F03C          	movff	postdec2,??_display_sorting_time+3
  4035  001A16  1E3B               	comf	??_display_sorting_time+2,f,c
  4036  001A18  1E3C               	comf	??_display_sorting_time+3,f,c
  4037  001A1A  4A3B               	infsnz	??_display_sorting_time+2,f,c
  4038  001A1C  2A3C               	incf	??_display_sorting_time+3,f,c
  4039  001A1E  0100               	movlb	0	; () banked
  4040  001A20  51A5               	movf	(display_sorting_time@int_end_time+2)& (0+255),w,b
  4041  001A22  243B               	addwf	??_display_sorting_time+2,w,c
  4042  001A24  6E17               	movwf	___wmul@multiplier,c
  4043  001A26  0100               	movlb	0	; () banked
  4044  001A28  51A6               	movf	(display_sorting_time@int_end_time+3)& (0+255),w,b
  4045  001A2A  203C               	addwfc	??_display_sorting_time+3,w,c
  4046  001A2C  6E18               	movwf	___wmul@multiplier+1,c
  4047  001A2E  0E00               	movlw	0
  4048  001A30  6E1A               	movwf	___wmul@multiplicand+1,c
  4049  001A32  0E3C               	movlw	60
  4050  001A34  6E19               	movwf	___wmul@multiplicand,c
  4051  001A36  ECE2  F012         	call	___wmul	;wreg free
  4052  001A3A  5039               	movf	??_display_sorting_time,w,c
  4053  001A3C  2617               	addwf	?___wmul,f,c
  4054  001A3E  503A               	movf	??_display_sorting_time+1,w,c
  4055  001A40  2218               	addwfc	?___wmul+1,f,c
  4056  001A42  0100               	movlb	0	; () banked
  4057  001A44  51A3               	movf	display_sorting_time@int_end_time& (0+255),w,b
  4058  001A46  2417               	addwf	?___wmul,w,c
  4059  001A48  6E5F               	movwf	_passed_time,c
  4060  001A4A  0100               	movlb	0	; () banked
  4061  001A4C  51A4               	movf	(display_sorting_time@int_end_time+1)& (0+255),w,b
  4062  001A4E  2018               	addwfc	?___wmul+1,w,c
  4063  001A50  6E60               	movwf	_passed_time+1,c
  4064                           
  4065                           ; BSR set to: 0
  4066                           ;picState.c: 139: displayFlag++;
  4067  001A52  4A5D               	infsnz	_displayFlag,f,c
  4068  001A54  2A5E               	incf	_displayFlag+1,f,c
  4069  001A56                     l3664:
  4070                           
  4071                           ; BSR set to: 0
  4072                           ;picState.c: 140: }
  4073                           ;picState.c: 142: LATCbits.LATC1 = 0;
  4074  001A56  928B               	bcf	3979,1,c	;volatile
  4075                           
  4076                           ; BSR set to: 0
  4077                           ;picState.c: 143: printf("Time used: %d s", passed_time);
  4078  001A58  0E75               	movlw	low STR_15
  4079  001A5A  6E23               	movwf	printf@f,c
  4080  001A5C  0E10               	movlw	high STR_15
  4081  001A5E  6E24               	movwf	printf@f+1,c
  4082  001A60  C05F  F025         	movff	_passed_time,?_printf+2
  4083  001A64  C060  F026         	movff	_passed_time+1,?_printf+3
  4084  001A68  EC6A  F008         	call	_printf	;wreg free
  4085                           
  4086                           ;picState.c: 144: _delay((unsigned long)((500)*(8000000/4000.0)));
  4087  001A6C  0E06               	movlw	6
  4088  001A6E  6E3A               	movwf	(??_display_sorting_time+1)& (0+255),c
  4089  001A70  0E13               	movlw	19
  4090  001A72  6E39               	movwf	??_display_sorting_time& (0+255),c
  4091  001A74  0EAE               	movlw	174
  4092  001A76                     u3657:
  4093  001A76  2EE8               	decfsz	wreg,f,c
  4094  001A78  D7FE               	bra	u3657
  4095  001A7A  2E39               	decfsz	??_display_sorting_time& (0+255),f,c
  4096  001A7C  D7FC               	bra	u3657
  4097  001A7E  2E3A               	decfsz	(??_display_sorting_time+1)& (0+255),f,c
  4098  001A80  D7FA               	bra	u3657
  4099                           
  4100                           ;picState.c: 145: LATDbits.LATD0 = 0;
  4101  001A82  908C               	bcf	3980,0,c	;volatile
  4102  001A84  0012               	return		;funcret
  4103  001A86                     __end_of_display_sorting_time:
  4104                           	opt stack 0
  4105                           tblptru	equ	0xFF8
  4106                           prodh	equ	0xFF4
  4107                           prodl	equ	0xFF3
  4108                           intcon	equ	0xFF2
  4109                           intcon3	equ	0xFF0
  4110                           postinc0	equ	0xFEE
  4111                           wreg	equ	0xFE8
  4112                           indf2	equ	0xFDF
  4113                           postinc2	equ	0xFDE
  4114                           postdec2	equ	0xFDD
  4115                           fsr2h	equ	0xFDA
  4116                           fsr2l	equ	0xFD9
  4117                           status	equ	0xFD8
  4118                           
  4119 ;; *************** function _debug *****************
  4120 ;; Defined at:
  4121 ;;		line 43 in file "picState.c"
  4122 ;; Parameters:    Size  Location     Type
  4123 ;;		None
  4124 ;; Auto vars:     Size  Location     Type
  4125 ;;		None
  4126 ;; Return value:  Size  Location     Type
  4127 ;;                  2   94[None  ] int 
  4128 ;; Registers used:
  4129 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4130 ;; Tracked objects:
  4131 ;;		On entry : 0/0
  4132 ;;		On exit  : 0/0
  4133 ;;		Unchanged: 0/0
  4134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4138 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4139 ;;Total ram usage:        0 bytes
  4140 ;; Hardware stack levels used:    1
  4141 ;; Hardware stack levels required when called:    7
  4142 ;; This function calls:
  4143 ;;		_get_time
  4144 ;;		_lcdInst
  4145 ;;		_printf
  4146 ;; This function is called by:
  4147 ;;		_main
  4148 ;; This function uses a non-reentrant model
  4149 ;;
  4150                           
  4151                           	psect	text17
  4152  002458                     __ptext17:
  4153                           	opt stack 0
  4154  002458                     _debug:
  4155                           	opt stack 23
  4156                           
  4157                           ;picState.c: 53: get_time(end_time);
  4158                           
  4159                           ;incstack = 0
  4160  002458  0E62               	movlw	low _end_time
  4161  00245A  6E1A               	movwf	get_time@datime,c
  4162  00245C  0E00               	movlw	high _end_time
  4163  00245E  6E1B               	movwf	get_time@datime+1,c
  4164  002460  ECA9  F010         	call	_get_time	;wreg free
  4165                           
  4166                           ;picState.c: 54: printf("%02x/%02x/%02x", end_time[6], end_time[5],
  4167                           ;picState.c: 55: end_time[4]);
  4168  002464  0E94               	movlw	low STR_8
  4169  002466  6E23               	movwf	printf@f,c
  4170  002468  0E10               	movlw	high STR_8
  4171  00246A  6E24               	movwf	printf@f+1,c
  4172  00246C  C068  F025         	movff	_end_time+6,?_printf+2
  4173  002470  6A26               	clrf	?_printf+3,c
  4174  002472  C067  F027         	movff	_end_time+5,?_printf+4
  4175  002476  6A28               	clrf	?_printf+5,c
  4176  002478  C066  F029         	movff	_end_time+4,?_printf+6
  4177  00247C  6A2A               	clrf	?_printf+7,c
  4178  00247E  EC6A  F008         	call	_printf	;wreg free
  4179                           
  4180                           ;picState.c: 56: lcdInst(0b11000000);;
  4181  002482  0EC0               	movlw	192
  4182  002484  EC42  F013         	call	_lcdInst
  4183                           
  4184                           ;picState.c: 57: printf("%02x:%02x:%02x", end_time[2], end_time[1],
  4185                           ;picState.c: 58: end_time[0]);
  4186  002488  0EA3               	movlw	low STR_9
  4187  00248A  6E23               	movwf	printf@f,c
  4188  00248C  0E10               	movlw	high STR_9
  4189  00248E  6E24               	movwf	printf@f+1,c
  4190  002490  C064  F025         	movff	_end_time+2,?_printf+2
  4191  002494  6A26               	clrf	?_printf+3,c
  4192  002496  C063  F027         	movff	_end_time+1,?_printf+4
  4193  00249A  6A28               	clrf	?_printf+5,c
  4194  00249C  C062  F029         	movff	_end_time,?_printf+6
  4195  0024A0  6A2A               	clrf	?_printf+7,c
  4196  0024A2  EC6A  F008         	call	_printf	;wreg free
  4197  0024A6  0012               	return		;funcret
  4198  0024A8                     __end_of_debug:
  4199                           	opt stack 0
  4200                           tblptru	equ	0xFF8
  4201                           prodh	equ	0xFF4
  4202                           prodl	equ	0xFF3
  4203                           intcon	equ	0xFF2
  4204                           intcon3	equ	0xFF0
  4205                           postinc0	equ	0xFEE
  4206                           wreg	equ	0xFE8
  4207                           indf2	equ	0xFDF
  4208                           postinc2	equ	0xFDE
  4209                           postdec2	equ	0xFDD
  4210                           fsr2h	equ	0xFDA
  4211                           fsr2l	equ	0xFD9
  4212                           status	equ	0xFD8
  4213                           
  4214 ;; *************** function _printf *****************
  4215 ;; Defined at:
  4216 ;;		line 464 in file "/Applications/microchip/xc8/v1.41/sources/common/doprnt.c"
  4217 ;; Parameters:    Size  Location     Type
  4218 ;;  f               2   34[COMRAM] PTR const unsigned char 
  4219 ;;		 -> STR_15(16), STR_14(15), STR_13(15), STR_12(3), 
  4220 ;;		 -> STR_11(20), STR_10(16), STR_9(15), STR_8(15), 
  4221 ;;		 -> STR_7(10), STR_6(15), STR_5(7), STR_4(21), 
  4222 ;;		 -> STR_3(13), STR_2(9), STR_1(3), 
  4223 ;; Auto vars:     Size  Location     Type
  4224 ;;  idx             1   46[COMRAM] unsigned char 
  4225 ;;  tmpval          4    0        struct .
  4226 ;;  cp              3    0        PTR const unsigned char 
  4227 ;;  width           2   53[COMRAM] int 
  4228 ;;  val             2   50[COMRAM] unsigned int 
  4229 ;;  ap              2   47[COMRAM] PTR void [1]
  4230 ;;		 -> ?_printf(2), 
  4231 ;;  len             2    0        unsigned int 
  4232 ;;  c               1   55[COMRAM] char 
  4233 ;;  flag            1   52[COMRAM] unsigned char 
  4234 ;;  prec            1   49[COMRAM] char 
  4235 ;; Return value:  Size  Location     Type
  4236 ;;                  2   34[COMRAM] int 
  4237 ;; Registers used:
  4238 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4239 ;; Tracked objects:
  4240 ;;		On entry : 0/0
  4241 ;;		On exit  : 0/0
  4242 ;;		Unchanged: 0/0
  4243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4244 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4245 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4246 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4247 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4248 ;;Total ram usage:       22 bytes
  4249 ;; Hardware stack levels used:    1
  4250 ;; Hardware stack levels required when called:    6
  4251 ;; This function calls:
  4252 ;;		___lwdiv
  4253 ;;		___lwmod
  4254 ;;		___wmul
  4255 ;;		_isdigit
  4256 ;;		_putch
  4257 ;; This function is called by:
  4258 ;;		_readLightSensor
  4259 ;;		_welcome
  4260 ;;		_debug
  4261 ;;		_sort
  4262 ;;		_display_time
  4263 ;;		_display_sorting_time
  4264 ;; This function uses a non-reentrant model
  4265 ;;
  4266                           
  4267                           	psect	text18
  4268  0010D4                     __ptext18:
  4269                           	opt stack 0
  4270  0010D4                     _printf:
  4271                           	opt stack 23
  4272                           
  4273                           ;doprnt.c: 466: va_list ap;
  4274                           ;doprnt.c: 499: signed char c;
  4275                           ;doprnt.c: 501: int width;
  4276                           ;doprnt.c: 506: signed char prec;
  4277                           ;doprnt.c: 508: unsigned char flag;
  4278                           ;doprnt.c: 523: union {
  4279                           ;doprnt.c: 524: unsigned long vd;
  4280                           ;doprnt.c: 525: double integ;
  4281                           ;doprnt.c: 526: } tmpval;
  4282                           ;doprnt.c: 528: unsigned int val;
  4283                           ;doprnt.c: 529: unsigned len;
  4284                           ;doprnt.c: 530: const char * cp;
  4285                           ;doprnt.c: 533: *ap = __va_start();
  4286                           
  4287                           ;incstack = 0
  4288  0010D4  0E25               	movlw	low (?_printf+2)
  4289  0010D6  6E30               	movwf	printf@ap,c
  4290  0010D8  0E00               	movlw	high (?_printf+2)
  4291  0010DA  6E31               	movwf	printf@ap+1,c
  4292                           
  4293                           ;doprnt.c: 536: while(c = *f++) {
  4294  0010DC  D174               	goto	l3442
  4295  0010DE                     l3316:
  4296                           
  4297                           ;doprnt.c: 538: if(c != '%')
  4298  0010DE  0E25               	movlw	37
  4299  0010E0  1838               	xorwf	printf@c,w,c
  4300  0010E2  B4D8               	btfsc	status,2,c
  4301  0010E4  D004               	goto	l3320
  4302                           
  4303                           ;doprnt.c: 540: {
  4304                           ;doprnt.c: 541: (putch(c) );
  4305  0010E6  5038               	movf	printf@c,w,c
  4306  0010E8  EC3C  F013         	call	_putch
  4307                           
  4308                           ;doprnt.c: 542: continue;
  4309  0010EC  D16C               	goto	l3442
  4310  0010EE                     l3320:
  4311                           
  4312                           ;doprnt.c: 543: }
  4313                           ;doprnt.c: 546: width = 0;
  4314  0010EE  0E00               	movlw	0
  4315  0010F0  6E37               	movwf	printf@width+1,c
  4316  0010F2  0E00               	movlw	0
  4317  0010F4  6E36               	movwf	printf@width,c
  4318                           
  4319                           ;doprnt.c: 548: flag = 0;
  4320  0010F6  0E00               	movlw	0
  4321  0010F8  6E35               	movwf	printf@flag,c
  4322                           
  4323                           ;doprnt.c: 551: switch(*f) {
  4324                           
  4325                           ;doprnt.c: 550: for(;;) {
  4326  0010FA  D003               	goto	l3326
  4327  0010FC                     l3322:
  4328                           
  4329                           ;doprnt.c: 580: flag |= 0x04;
  4330  0010FC  8435               	bsf	printf@flag,2,c
  4331                           
  4332                           ;doprnt.c: 581: f++;
  4333  0010FE  4A23               	infsnz	printf@f,f,c
  4334  001100  2A24               	incf	printf@f+1,f,c
  4335  001102                     l3326:
  4336  001102  C023  FFF6         	movff	printf@f,tblptrl
  4337  001106  C024  FFF7         	movff	printf@f+1,tblptrh
  4338  00110A                     	if	0	;tblptru may be non-zero
  4339  00110A                     	endif
  4340  00110A                     	if	0	;tblptru may be non-zero
  4341  00110A                     	endif
  4342  00110A  0008               	tblrd		*
  4343  00110C  50F5               	movf	tablat,w,c
  4344                           
  4345                           ; Switch size 1, requested type "space"
  4346                           ; Number of cases is 1, Range of values is 48 to 48
  4347                           ; switch strategies available:
  4348                           ; Name         Instructions Cycles
  4349                           ; simple_byte            4     3 (average)
  4350                           ;	Chosen strategy is simple_byte
  4351  00110E  0A30               	xorlw	48	; case 48
  4352  001110  B4D8               	btfsc	status,2,c
  4353  001112  D7F4               	goto	l3322
  4354                           
  4355                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4356                           
  4357                           ;doprnt.c: 586: }
  4358                           
  4359                           ;doprnt.c: 585: break;
  4360  001114  C023  FFF6         	movff	printf@f,tblptrl
  4361  001118  C024  FFF7         	movff	printf@f+1,tblptrh
  4362  00111C                     	if	0	;tblptru may be non-zero
  4363  00111C                     	endif
  4364  00111C                     	if	0	;tblptru may be non-zero
  4365  00111C                     	endif
  4366  00111C  0008               	tblrd		*
  4367  00111E  50F5               	movf	tablat,w,c
  4368  001120  EC1B  F013         	call	_isdigit
  4369  001124  A0D8               	btfss	status,0,c
  4370  001126  D035               	goto	l3344
  4371                           
  4372                           ;doprnt.c: 598: width = 0;
  4373  001128  0E00               	movlw	0
  4374  00112A  6E37               	movwf	printf@width+1,c
  4375  00112C  0E00               	movlw	0
  4376  00112E  6E36               	movwf	printf@width,c
  4377  001130                     l3332:
  4378                           
  4379                           ;doprnt.c: 600: width *= 10;
  4380  001130  C036  F017         	movff	printf@width,___wmul@multiplier
  4381  001134  C037  F018         	movff	printf@width+1,___wmul@multiplier+1
  4382  001138  0E00               	movlw	0
  4383  00113A  6E1A               	movwf	___wmul@multiplicand+1,c
  4384  00113C  0E0A               	movlw	10
  4385  00113E  6E19               	movwf	___wmul@multiplicand,c
  4386  001140  ECE2  F012         	call	___wmul	;wreg free
  4387  001144  C017  F036         	movff	?___wmul,printf@width
  4388  001148  C018  F037         	movff	?___wmul+1,printf@width+1
  4389                           
  4390                           ;doprnt.c: 601: width += *f++ - '0';
  4391  00114C  0ED0               	movlw	208
  4392  00114E  6E2B               	movwf	??_printf& (0+255),c
  4393  001150  0EFF               	movlw	255
  4394  001152  6E2C               	movwf	(??_printf+1)& (0+255),c
  4395  001154  C023  FFF6         	movff	printf@f,tblptrl
  4396  001158  C024  FFF7         	movff	printf@f+1,tblptrh
  4397  00115C                     	if	0	;tblptru may be non-zero
  4398  00115C                     	endif
  4399  00115C                     	if	0	;tblptru may be non-zero
  4400  00115C                     	endif
  4401  00115C  0008               	tblrd		*
  4402  00115E  50F5               	movf	tablat,w,c
  4403  001160  6E2D               	movwf	(??_printf+2)& (0+255),c
  4404  001162  6A2E               	clrf	(??_printf+3)& (0+255),c
  4405  001164  502B               	movf	??_printf,w,c
  4406  001166  262D               	addwf	??_printf+2,f,c
  4407  001168  502C               	movf	??_printf+1,w,c
  4408  00116A  222E               	addwfc	??_printf+3,f,c
  4409  00116C  502D               	movf	??_printf+2,w,c
  4410  00116E  2636               	addwf	printf@width,f,c
  4411  001170  502E               	movf	??_printf+3,w,c
  4412  001172  2237               	addwfc	printf@width+1,f,c
  4413  001174  4A23               	infsnz	printf@f,f,c
  4414  001176  2A24               	incf	printf@f+1,f,c
  4415                           
  4416                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4417  001178  C023  FFF6         	movff	printf@f,tblptrl
  4418  00117C  C024  FFF7         	movff	printf@f+1,tblptrh
  4419  001180                     	if	0	;tblptru may be non-zero
  4420  001180                     	endif
  4421  001180                     	if	0	;tblptru may be non-zero
  4422  001180                     	endif
  4423  001180  0008               	tblrd		*
  4424  001182  50F5               	movf	tablat,w,c
  4425  001184  EC1B  F013         	call	_isdigit
  4426  001188  A0D8               	btfss	status,0,c
  4427  00118A  D003               	goto	l3344
  4428  00118C  D7D1               	goto	l3332
  4429  00118E                     l3340:
  4430                           
  4431                           ;doprnt.c: 721: flag |= 0x80;
  4432  00118E  8E35               	bsf	printf@flag,7,c
  4433                           
  4434                           ;doprnt.c: 723: break;
  4435  001190  D017               	goto	l492
  4436  001192                     l3344:
  4437  001192  C023  FFF6         	movff	printf@f,tblptrl
  4438  001196  C024  FFF7         	movff	printf@f+1,tblptrh
  4439  00119A  4A23               	infsnz	printf@f,f,c
  4440  00119C  2A24               	incf	printf@f+1,f,c
  4441  00119E                     	if	0	;tblptru may be non-zero
  4442  00119E                     	endif
  4443  00119E                     	if	0	;tblptru may be non-zero
  4444  00119E                     	endif
  4445  00119E  0008               	tblrd		*
  4446  0011A0  CFF5 F038          	movff	tablat,printf@c
  4447  0011A4  5038               	movf	printf@c,w,c
  4448                           
  4449                           ; Switch size 1, requested type "space"
  4450                           ; Number of cases is 4, Range of values is 0 to 120
  4451                           ; switch strategies available:
  4452                           ; Name         Instructions Cycles
  4453                           ; simple_byte           13     7 (average)
  4454                           ;	Chosen strategy is simple_byte
  4455  0011A6  0A00               	xorlw	0	; case 0
  4456  0011A8  B4D8               	btfsc	status,2,c
  4457  0011AA  0012               	return	
  4458  0011AC  0A64               	xorlw	100	; case 100
  4459  0011AE  B4D8               	btfsc	status,2,c
  4460  0011B0  D007               	goto	l492
  4461  0011B2  0A0D               	xorlw	13	; case 105
  4462  0011B4  B4D8               	btfsc	status,2,c
  4463  0011B6  D004               	goto	l492
  4464  0011B8  0A11               	xorlw	17	; case 120
  4465  0011BA  B4D8               	btfsc	status,2,c
  4466  0011BC  D7E8               	goto	l3340
  4467  0011BE  D103               	goto	l3442
  4468  0011C0                     l492:
  4469                           
  4470                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  4471  0011C0  BE35               	btfsc	printf@flag,7,c
  4472  0011C2  D015               	goto	l3356
  4473                           
  4474                           ;doprnt.c: 1253: {
  4475                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4476  0011C4  C030  FFD9         	movff	printf@ap,fsr2l
  4477  0011C8  C031  FFDA         	movff	printf@ap+1,fsr2h
  4478  0011CC  CFDE F033          	movff	postinc2,printf@val
  4479  0011D0  CFDD F034          	movff	postdec2,printf@val+1
  4480  0011D4  0E02               	movlw	2
  4481  0011D6  2630               	addwf	printf@ap,f,c
  4482  0011D8  0E00               	movlw	0
  4483  0011DA  2231               	addwfc	printf@ap+1,f,c
  4484                           
  4485                           ;doprnt.c: 1261: if((int)val < 0) {
  4486  0011DC  AE34               	btfss	printf@val+1,7,c
  4487  0011DE  D044               	goto	l3390
  4488                           
  4489                           ;doprnt.c: 1262: flag |= 0x03;
  4490  0011E0  0E03               	movlw	3
  4491  0011E2  1235               	iorwf	printf@flag,f,c
  4492                           
  4493                           ;doprnt.c: 1263: val = -val;
  4494  0011E4  6C33               	negf	printf@val,c
  4495  0011E6  1E34               	comf	printf@val+1,f,c
  4496  0011E8  B0D8               	btfsc	status,0,c
  4497  0011EA  2A34               	incf	printf@val+1,f,c
  4498                           
  4499                           ;doprnt.c: 1264: }
  4500                           ;doprnt.c: 1266: }
  4501  0011EC  D03D               	goto	l3390
  4502  0011EE                     l3356:
  4503                           
  4504                           ;doprnt.c: 1268: else
  4505                           ;doprnt.c: 1273: {
  4506                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4507  0011EE  C030  FFD9         	movff	printf@ap,fsr2l
  4508  0011F2  C031  FFDA         	movff	printf@ap+1,fsr2h
  4509  0011F6  CFDE F033          	movff	postinc2,printf@val
  4510  0011FA  CFDD F034          	movff	postdec2,printf@val+1
  4511  0011FE  0E02               	movlw	2
  4512  001200  2630               	addwf	printf@ap,f,c
  4513  001202  0E00               	movlw	0
  4514  001204  2231               	addwfc	printf@ap+1,f,c
  4515                           
  4516                           ;doprnt.c: 1287: }
  4517                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  4518  001206  D030               	goto	l3390
  4519  001208                     l3360:
  4520                           
  4521                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4522  001208  0E01               	movlw	1
  4523  00120A  6E38               	movwf	printf@c,c
  4524  00120C                     l3362:
  4525  00120C  0E05               	movlw	5
  4526  00120E  1838               	xorwf	printf@c,w,c
  4527  001210  B4D8               	btfsc	status,2,c
  4528  001212  D032               	goto	l3392
  4529                           
  4530                           ;doprnt.c: 1306: if(val < dpowers[c])
  4531  001214  5038               	movf	printf@c,w,c
  4532  001216  0D02               	mullw	2
  4533  001218  0E12               	movlw	low _dpowers
  4534  00121A  24F3               	addwf	prodl,w,c
  4535  00121C  6EF6               	movwf	tblptrl,c
  4536  00121E  0E10               	movlw	high _dpowers
  4537  001220  20F4               	addwfc	prodh,w,c
  4538  001222  6EF7               	movwf	tblptrh,c
  4539  001224                     	if	0	;There are less than 3 active tblptr bytes
  4540  001224                     	endif
  4541  001224  0009               	tblrd		*+
  4542  001226  50F5               	movf	tablat,w,c
  4543  001228  5C33               	subwf	printf@val,w,c
  4544  00122A  0009               	tblrd		*+
  4545  00122C  50F5               	movf	tablat,w,c
  4546  00122E  5834               	subwfb	printf@val+1,w,c
  4547  001230  A0D8               	btfss	status,0,c
  4548  001232  D022               	goto	l3392
  4549                           
  4550                           ;doprnt.c: 1307: break;
  4551  001234  2A38               	incf	printf@c,f,c
  4552  001236  D7EA               	goto	l3362
  4553  001238                     l3374:
  4554                           
  4555                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4556  001238  0E01               	movlw	1
  4557  00123A  6E38               	movwf	printf@c,c
  4558  00123C                     l3376:
  4559  00123C  0E04               	movlw	4
  4560  00123E  1838               	xorwf	printf@c,w,c
  4561  001240  B4D8               	btfsc	status,2,c
  4562  001242  D01A               	goto	l3392
  4563                           
  4564                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4565  001244  5038               	movf	printf@c,w,c
  4566  001246  0D02               	mullw	2
  4567  001248  0E1C               	movlw	low _hexpowers
  4568  00124A  24F3               	addwf	prodl,w,c
  4569  00124C  6EF6               	movwf	tblptrl,c
  4570  00124E  0E10               	movlw	high _hexpowers
  4571  001250  20F4               	addwfc	prodh,w,c
  4572  001252  6EF7               	movwf	tblptrh,c
  4573  001254                     	if	0	;There are less than 3 active tblptr bytes
  4574  001254                     	endif
  4575  001254  0009               	tblrd		*+
  4576  001256  50F5               	movf	tablat,w,c
  4577  001258  5C33               	subwf	printf@val,w,c
  4578  00125A  0009               	tblrd		*+
  4579  00125C  50F5               	movf	tablat,w,c
  4580  00125E  5834               	subwfb	printf@val+1,w,c
  4581  001260  A0D8               	btfss	status,0,c
  4582  001262  D00A               	goto	l3392
  4583                           
  4584                           ;doprnt.c: 1318: break;
  4585  001264  2A38               	incf	printf@c,f,c
  4586  001266  D7EA               	goto	l3376
  4587  001268                     l3390:
  4588  001268  5035               	movf	printf@flag,w,c
  4589  00126A  0B80               	andlw	128
  4590                           
  4591                           ; Switch size 1, requested type "space"
  4592                           ; Number of cases is 2, Range of values is 0 to 128
  4593                           ; switch strategies available:
  4594                           ; Name         Instructions Cycles
  4595                           ; simple_byte            7     4 (average)
  4596                           ;	Chosen strategy is simple_byte
  4597  00126C  0A00               	xorlw	0	; case 0
  4598  00126E  B4D8               	btfsc	status,2,c
  4599  001270  D7CB               	goto	l3360
  4600  001272  0A80               	xorlw	128	; case 128
  4601  001274  B4D8               	btfsc	status,2,c
  4602  001276  D7E0               	goto	l3374
  4603  001278                     l3392:
  4604                           
  4605                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4606  001278  5036               	movf	printf@width,w,c
  4607  00127A  1037               	iorwf	printf@width+1,w,c
  4608  00127C  B4D8               	btfsc	status,2,c
  4609  00127E  D009               	goto	l3398
  4610  001280  C035  F02B         	movff	printf@flag,??_printf
  4611  001284  0E03               	movlw	3
  4612  001286  162B               	andwf	??_printf,f,c
  4613  001288  B4D8               	btfsc	status,2,c
  4614  00128A  D003               	goto	l3398
  4615                           
  4616                           ;doprnt.c: 1346: width--;
  4617  00128C  0636               	decf	printf@width,f,c
  4618  00128E  A0D8               	btfss	status,0,c
  4619  001290  0637               	decf	printf@width+1,f,c
  4620  001292                     l3398:
  4621                           
  4622                           ;doprnt.c: 1381: if(width > c)
  4623  001292  0E80               	movlw	128
  4624  001294  BE38               	btfsc	printf@c,7,c
  4625  001296  0E7F               	movlw	127
  4626  001298  6E2B               	movwf	??_printf& (0+255),c
  4627  00129A  5036               	movf	printf@width,w,c
  4628  00129C  5C38               	subwf	printf@c,w,c
  4629  00129E  5037               	movf	printf@width+1,w,c
  4630  0012A0  0A80               	xorlw	128
  4631  0012A2  582B               	subwfb	??_printf& (0+255),w,c
  4632  0012A4  B0D8               	btfsc	status,0,c
  4633  0012A6  D007               	goto	l3402
  4634                           
  4635                           ;doprnt.c: 1382: width -= c;
  4636  0012A8  5038               	movf	printf@c,w,c
  4637  0012AA  5E36               	subwf	printf@width,f,c
  4638  0012AC  0E00               	movlw	0
  4639  0012AE  BE38               	btfsc	printf@c,7,c
  4640  0012B0  0EFF               	movlw	255
  4641  0012B2  5A37               	subwfb	printf@width+1,f,c
  4642  0012B4  D004               	goto	l3404
  4643  0012B6                     l3402:
  4644                           
  4645                           ;doprnt.c: 1383: else
  4646                           ;doprnt.c: 1384: width = 0;
  4647  0012B6  0E00               	movlw	0
  4648  0012B8  6E37               	movwf	printf@width+1,c
  4649  0012BA  0E00               	movlw	0
  4650  0012BC  6E36               	movwf	printf@width,c
  4651  0012BE                     l3404:
  4652                           
  4653                           ;doprnt.c: 1387: if(flag & 0x04) {
  4654  0012BE  A435               	btfss	printf@flag,2,c
  4655  0012C0  D014               	goto	l3416
  4656                           
  4657                           ;doprnt.c: 1392: if(flag & 0x03)
  4658  0012C2  C035  F02B         	movff	printf@flag,??_printf
  4659  0012C6  0E03               	movlw	3
  4660  0012C8  162B               	andwf	??_printf,f,c
  4661  0012CA  B4D8               	btfsc	status,2,c
  4662  0012CC  D003               	goto	l3410
  4663                           
  4664                           ;doprnt.c: 1393: (putch('-') );
  4665  0012CE  0E2D               	movlw	45
  4666  0012D0  EC3C  F013         	call	_putch
  4667  0012D4                     l3410:
  4668                           
  4669                           ;doprnt.c: 1415: if(width)
  4670  0012D4  5036               	movf	printf@width,w,c
  4671  0012D6  1037               	iorwf	printf@width+1,w,c
  4672  0012D8  B4D8               	btfsc	status,2,c
  4673  0012DA  D01E               	goto	l3426
  4674                           
  4675                           ;doprnt.c: 1417: (putch('0') );
  4676                           
  4677                           ;doprnt.c: 1416: do
  4678  0012DC  0E30               	movlw	48
  4679  0012DE  EC3C  F013         	call	_putch
  4680                           
  4681                           ;doprnt.c: 1418: while(--width);
  4682  0012E2  0636               	decf	printf@width,f,c
  4683  0012E4  A0D8               	btfss	status,0,c
  4684  0012E6  0637               	decf	printf@width+1,f,c
  4685  0012E8  D7F5               	goto	l3410
  4686  0012EA                     l3416:
  4687                           
  4688                           ;doprnt.c: 1422: {
  4689                           ;doprnt.c: 1424: if(width
  4690                           ;doprnt.c: 1428: )
  4691  0012EA  5036               	movf	printf@width,w,c
  4692  0012EC  1037               	iorwf	printf@width+1,w,c
  4693  0012EE  B4D8               	btfsc	status,2,c
  4694  0012F0  D00A               	goto	l3422
  4695  0012F2                     l3418:
  4696                           
  4697                           ;doprnt.c: 1430: (putch(' ') );
  4698  0012F2  0E20               	movlw	32
  4699  0012F4  EC3C  F013         	call	_putch
  4700                           
  4701                           ;doprnt.c: 1431: while(--width);
  4702  0012F8  0636               	decf	printf@width,f,c
  4703  0012FA  A0D8               	btfss	status,0,c
  4704  0012FC  0637               	decf	printf@width+1,f,c
  4705  0012FE  5036               	movf	printf@width,w,c
  4706  001300  1037               	iorwf	printf@width+1,w,c
  4707  001302  A4D8               	btfss	status,2,c
  4708  001304  D7F6               	goto	l3418
  4709  001306                     l3422:
  4710                           
  4711                           ;doprnt.c: 1438: if(flag & 0x03)
  4712  001306  C035  F02B         	movff	printf@flag,??_printf
  4713  00130A  0E03               	movlw	3
  4714  00130C  162B               	andwf	??_printf,f,c
  4715  00130E  B4D8               	btfsc	status,2,c
  4716  001310  D003               	goto	l3426
  4717                           
  4718                           ;doprnt.c: 1439: (putch('-') );
  4719  001312  0E2D               	movlw	45
  4720  001314  EC3C  F013         	call	_putch
  4721  001318                     l3426:
  4722                           
  4723                           ;doprnt.c: 1469: }
  4724                           ;doprnt.c: 1472: prec = c;
  4725  001318  C038  F032         	movff	printf@c,printf@prec
  4726                           
  4727                           ;doprnt.c: 1474: while(prec--) {
  4728  00131C  D050               	goto	l3440
  4729  00131E                     l3428:
  4730                           
  4731                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4732  00131E  5032               	movf	printf@prec,w,c
  4733  001320  0D02               	mullw	2
  4734  001322  0E12               	movlw	low _dpowers
  4735  001324  24F3               	addwf	prodl,w,c
  4736  001326  6EF6               	movwf	tblptrl,c
  4737  001328  0E10               	movlw	high _dpowers
  4738  00132A  20F4               	addwfc	prodh,w,c
  4739  00132C  6EF7               	movwf	tblptrh,c
  4740  00132E                     	if	0	;There are less than 3 active tblptr bytes
  4741  00132E                     	endif
  4742  00132E  0009               	tblrd		*+
  4743  001330  CFF5 F019          	movff	tablat,___lwdiv@divisor
  4744  001334  000A               	tblrd		*-
  4745  001336  CFF5 F01A          	movff	tablat,___lwdiv@divisor+1
  4746  00133A  C033  F017         	movff	printf@val,___lwdiv@dividend
  4747  00133E  C034  F018         	movff	printf@val+1,___lwdiv@dividend+1
  4748  001342  EC03  F012         	call	___lwdiv	;wreg free
  4749  001346  C017  F01E         	movff	?___lwdiv,___lwmod@dividend
  4750  00134A  C018  F01F         	movff	?___lwdiv+1,___lwmod@dividend+1
  4751  00134E  0E00               	movlw	0
  4752  001350  6E21               	movwf	___lwmod@divisor+1,c
  4753  001352  0E0A               	movlw	10
  4754  001354  6E20               	movwf	___lwmod@divisor,c
  4755  001356  EC9A  F012         	call	___lwmod	;wreg free
  4756  00135A  501E               	movf	?___lwmod,w,c
  4757  00135C  0F30               	addlw	48
  4758  00135E  6E38               	movwf	printf@c,c
  4759                           
  4760                           ;doprnt.c: 1491: break;
  4761  001360  D02B               	goto	l3438
  4762  001362                     l3430:
  4763                           
  4764                           ;doprnt.c: 1499: {
  4765                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4766  001362  C033  F017         	movff	printf@val,___lwdiv@dividend
  4767  001366  C034  F018         	movff	printf@val+1,___lwdiv@dividend+1
  4768  00136A  5032               	movf	printf@prec,w,c
  4769  00136C  0D02               	mullw	2
  4770  00136E  0E1C               	movlw	low _hexpowers
  4771  001370  24F3               	addwf	prodl,w,c
  4772  001372  6EF6               	movwf	tblptrl,c
  4773  001374  0E10               	movlw	high _hexpowers
  4774  001376  20F4               	addwfc	prodh,w,c
  4775  001378  6EF7               	movwf	tblptrh,c
  4776  00137A                     	if	0	;There are less than 3 active tblptr bytes
  4777  00137A                     	endif
  4778  00137A  0009               	tblrd		*+
  4779  00137C  CFF5 F019          	movff	tablat,___lwdiv@divisor
  4780  001380  000A               	tblrd		*-
  4781  001382  CFF5 F01A          	movff	tablat,___lwdiv@divisor+1
  4782  001386  EC03  F012         	call	___lwdiv	;wreg free
  4783  00138A  5017               	movf	?___lwdiv,w,c
  4784  00138C  0B0F               	andlw	15
  4785  00138E  6E2F               	movwf	printf@idx,c
  4786                           
  4787                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4788  001390  502F               	movf	printf@idx,w,c
  4789  001392  0D01               	mullw	1
  4790  001394  0E54               	movlw	low STR_16
  4791  001396  24F3               	addwf	prodl,w,c
  4792  001398  6EF6               	movwf	tblptrl,c
  4793  00139A  0E10               	movlw	high STR_16
  4794  00139C  20F4               	addwfc	prodh,w,c
  4795  00139E  6EF7               	movwf	tblptrh,c
  4796  0013A0                     	if	0	;There are less than 3 active tblptr bytes
  4797  0013A0                     	endif
  4798  0013A0  0008               	tblrd		*
  4799  0013A2  CFF5 F038          	movff	tablat,printf@c
  4800                           
  4801                           ;doprnt.c: 1523: }
  4802                           
  4803                           ;doprnt.c: 1508: }
  4804                           ;doprnt.c: 1510: break;
  4805  0013A6  D008               	goto	l3438
  4806  0013A8                     l3436:
  4807  0013A8  5035               	movf	printf@flag,w,c
  4808  0013AA  0B80               	andlw	128
  4809                           
  4810                           ; Switch size 1, requested type "space"
  4811                           ; Number of cases is 2, Range of values is 0 to 128
  4812                           ; switch strategies available:
  4813                           ; Name         Instructions Cycles
  4814                           ; simple_byte            7     4 (average)
  4815                           ;	Chosen strategy is simple_byte
  4816  0013AC  0A00               	xorlw	0	; case 0
  4817  0013AE  B4D8               	btfsc	status,2,c
  4818  0013B0  D7B6               	goto	l3428
  4819  0013B2  0A80               	xorlw	128	; case 128
  4820  0013B4  B4D8               	btfsc	status,2,c
  4821  0013B6  D7D5               	goto	l3430
  4822  0013B8                     l3438:
  4823                           
  4824                           ;doprnt.c: 1524: (putch(c) );
  4825  0013B8  5038               	movf	printf@c,w,c
  4826  0013BA  EC3C  F013         	call	_putch
  4827  0013BE                     l3440:
  4828  0013BE  0632               	decf	printf@prec,f,c
  4829  0013C0  2832               	incf	printf@prec,w,c
  4830  0013C2  A4D8               	btfss	status,2,c
  4831  0013C4  D7F1               	goto	l3436
  4832  0013C6                     l3442:
  4833  0013C6  C023  FFF6         	movff	printf@f,tblptrl
  4834  0013CA  C024  FFF7         	movff	printf@f+1,tblptrh
  4835  0013CE  4A23               	infsnz	printf@f,f,c
  4836  0013D0  2A24               	incf	printf@f+1,f,c
  4837  0013D2                     	if	0	;tblptru may be non-zero
  4838  0013D2                     	endif
  4839  0013D2                     	if	0	;tblptru may be non-zero
  4840  0013D2                     	endif
  4841  0013D2  0008               	tblrd		*
  4842  0013D4  CFF5 F038          	movff	tablat,printf@c
  4843  0013D8  5038               	movf	printf@c,w,c
  4844  0013DA  B4D8               	btfsc	status,2,c
  4845  0013DC  0012               	return	
  4846  0013DE  D67F               	goto	l3316
  4847  0013E0                     __end_of_printf:
  4848                           	opt stack 0
  4849                           tblptru	equ	0xFF8
  4850                           tblptrh	equ	0xFF7
  4851                           tblptrl	equ	0xFF6
  4852                           tablat	equ	0xFF5
  4853                           prodh	equ	0xFF4
  4854                           prodl	equ	0xFF3
  4855                           intcon	equ	0xFF2
  4856                           intcon3	equ	0xFF0
  4857                           postinc0	equ	0xFEE
  4858                           wreg	equ	0xFE8
  4859                           indf2	equ	0xFDF
  4860                           postinc2	equ	0xFDE
  4861                           postdec2	equ	0xFDD
  4862                           fsr2h	equ	0xFDA
  4863                           fsr2l	equ	0xFD9
  4864                           status	equ	0xFD8
  4865                           
  4866 ;; *************** function _putch *****************
  4867 ;; Defined at:
  4868 ;;		line 30 in file "lcd.c"
  4869 ;; Parameters:    Size  Location     Type
  4870 ;;  data            1    wreg     unsigned char 
  4871 ;; Auto vars:     Size  Location     Type
  4872 ;;  data            1   24[COMRAM] unsigned char 
  4873 ;; Return value:  Size  Location     Type
  4874 ;;                  1    wreg      void 
  4875 ;; Registers used:
  4876 ;;		wreg, status,2, status,0, cstack
  4877 ;; Tracked objects:
  4878 ;;		On entry : 0/0
  4879 ;;		On exit  : 0/0
  4880 ;;		Unchanged: 0/0
  4881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4883 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4885 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4886 ;;Total ram usage:        1 bytes
  4887 ;; Hardware stack levels used:    1
  4888 ;; Hardware stack levels required when called:    5
  4889 ;; This function calls:
  4890 ;;		_lcdNibble
  4891 ;; This function is called by:
  4892 ;;		_printf
  4893 ;; This function uses a non-reentrant model
  4894 ;;
  4895                           
  4896                           	psect	text19
  4897  002678                     __ptext19:
  4898                           	opt stack 0
  4899  002678                     _putch:
  4900                           	opt stack 23
  4901                           
  4902                           ;incstack = 0
  4903                           ;putch@data stored from wreg
  4904  002678  6E19               	movwf	putch@data,c
  4905                           
  4906                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  4907  00267A  848C               	bsf	3980,2,c	;volatile
  4908                           
  4909                           ;lcd.c: 32: lcdNibble(data);
  4910  00267C  5019               	movf	putch@data,w,c
  4911  00267E  EC84  F011         	call	_lcdNibble
  4912  002682  0012               	return		;funcret
  4913  002684                     __end_of_putch:
  4914                           	opt stack 0
  4915                           tblptru	equ	0xFF8
  4916                           tblptrh	equ	0xFF7
  4917                           tblptrl	equ	0xFF6
  4918                           tablat	equ	0xFF5
  4919                           prodh	equ	0xFF4
  4920                           prodl	equ	0xFF3
  4921                           intcon	equ	0xFF2
  4922                           intcon3	equ	0xFF0
  4923                           postinc0	equ	0xFEE
  4924                           wreg	equ	0xFE8
  4925                           indf2	equ	0xFDF
  4926                           postinc2	equ	0xFDE
  4927                           postdec2	equ	0xFDD
  4928                           fsr2h	equ	0xFDA
  4929                           fsr2l	equ	0xFD9
  4930                           status	equ	0xFD8
  4931                           
  4932 ;; *************** function _isdigit *****************
  4933 ;; Defined at:
  4934 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/isdigit.c"
  4935 ;; Parameters:    Size  Location     Type
  4936 ;;  c               1    wreg     unsigned char 
  4937 ;; Auto vars:     Size  Location     Type
  4938 ;;  c               1   24[COMRAM] unsigned char 
  4939 ;; Return value:  Size  Location     Type
  4940 ;;		None               void
  4941 ;; Registers used:
  4942 ;;		wreg, status,2, status,0
  4943 ;; Tracked objects:
  4944 ;;		On entry : 0/0
  4945 ;;		On exit  : 0/0
  4946 ;;		Unchanged: 0/0
  4947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4949 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4950 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4951 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4952 ;;Total ram usage:        3 bytes
  4953 ;; Hardware stack levels used:    1
  4954 ;; Hardware stack levels required when called:    4
  4955 ;; This function calls:
  4956 ;;		Nothing
  4957 ;; This function is called by:
  4958 ;;		_printf
  4959 ;; This function uses a non-reentrant model
  4960 ;;
  4961                           
  4962                           	psect	text20
  4963  002636                     __ptext20:
  4964                           	opt stack 0
  4965  002636                     _isdigit:
  4966                           	opt stack 24
  4967                           
  4968                           ;incstack = 0
  4969                           ;isdigit@c stored from wreg
  4970  002636  6E19               	movwf	isdigit@c,c
  4971  002638  0E00               	movlw	0
  4972  00263A  6E18               	movwf	_isdigit$1080,c
  4973  00263C  0E3A               	movlw	58
  4974  00263E  6019               	cpfslt	isdigit@c,c
  4975  002640  D005               	goto	l3236
  4976  002642  0E2F               	movlw	47
  4977  002644  6419               	cpfsgt	isdigit@c,c
  4978  002646  D002               	goto	l3236
  4979  002648  0E01               	movlw	1
  4980  00264A  6E18               	movwf	_isdigit$1080,c
  4981  00264C                     l3236:
  4982  00264C  C018  F017         	movff	_isdigit$1080,??_isdigit
  4983  002650  3017               	rrcf	??_isdigit,w,c
  4984  002652  0012               	return	
  4985  002654                     __end_of_isdigit:
  4986                           	opt stack 0
  4987                           tblptru	equ	0xFF8
  4988                           tblptrh	equ	0xFF7
  4989                           tblptrl	equ	0xFF6
  4990                           tablat	equ	0xFF5
  4991                           prodh	equ	0xFF4
  4992                           prodl	equ	0xFF3
  4993                           intcon	equ	0xFF2
  4994                           intcon3	equ	0xFF0
  4995                           postinc0	equ	0xFEE
  4996                           wreg	equ	0xFE8
  4997                           indf2	equ	0xFDF
  4998                           postinc2	equ	0xFDE
  4999                           postdec2	equ	0xFDD
  5000                           fsr2h	equ	0xFDA
  5001                           fsr2l	equ	0xFD9
  5002                           status	equ	0xFD8
  5003                           
  5004 ;; *************** function ___wmul *****************
  5005 ;; Defined at:
  5006 ;;		line 15 in file "/Applications/microchip/xc8/v1.41/sources/common/Umul16.c"
  5007 ;; Parameters:    Size  Location     Type
  5008 ;;  multiplier      2   22[COMRAM] unsigned int 
  5009 ;;  multiplicand    2   24[COMRAM] unsigned int 
  5010 ;; Auto vars:     Size  Location     Type
  5011 ;;  product         2   26[COMRAM] unsigned int 
  5012 ;; Return value:  Size  Location     Type
  5013 ;;                  2   22[COMRAM] unsigned int 
  5014 ;; Registers used:
  5015 ;;		wreg, status,2, status,0, prodl, prodh
  5016 ;; Tracked objects:
  5017 ;;		On entry : 0/0
  5018 ;;		On exit  : 0/0
  5019 ;;		Unchanged: 0/0
  5020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5021 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5022 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5024 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5025 ;;Total ram usage:        6 bytes
  5026 ;; Hardware stack levels used:    1
  5027 ;; Hardware stack levels required when called:    4
  5028 ;; This function calls:
  5029 ;;		Nothing
  5030 ;; This function is called by:
  5031 ;;		_display_sorting_time
  5032 ;;		_printf
  5033 ;; This function uses a non-reentrant model
  5034 ;;
  5035                           
  5036                           	psect	text21
  5037  0025C4                     __ptext21:
  5038                           	opt stack 0
  5039  0025C4                     ___wmul:
  5040                           	opt stack 24
  5041                           
  5042                           ;incstack = 0
  5043  0025C4  5017               	movf	___wmul@multiplier,w,c
  5044  0025C6  0219               	mulwf	___wmul@multiplicand,c
  5045  0025C8  CFF3 F01B          	movff	prodl,___wmul@product
  5046  0025CC  CFF4 F01C          	movff	prodh,___wmul@product+1
  5047  0025D0  5017               	movf	___wmul@multiplier,w,c
  5048  0025D2  021A               	mulwf	___wmul@multiplicand+1,c
  5049  0025D4  50F3               	movf	prodl,w,c
  5050  0025D6  261C               	addwf	___wmul@product+1,f,c
  5051  0025D8  5018               	movf	___wmul@multiplier+1,w,c
  5052  0025DA  0219               	mulwf	___wmul@multiplicand,c
  5053  0025DC  50F3               	movf	prodl,w,c
  5054  0025DE  261C               	addwf	___wmul@product+1,f,c
  5055  0025E0  C01B  F017         	movff	___wmul@product,?___wmul
  5056  0025E4  C01C  F018         	movff	___wmul@product+1,?___wmul+1
  5057  0025E8  0012               	return	
  5058  0025EA                     __end_of___wmul:
  5059                           	opt stack 0
  5060                           tblptru	equ	0xFF8
  5061                           tblptrh	equ	0xFF7
  5062                           tblptrl	equ	0xFF6
  5063                           tablat	equ	0xFF5
  5064                           prodh	equ	0xFF4
  5065                           prodl	equ	0xFF3
  5066                           intcon	equ	0xFF2
  5067                           intcon3	equ	0xFF0
  5068                           postinc0	equ	0xFEE
  5069                           wreg	equ	0xFE8
  5070                           indf2	equ	0xFDF
  5071                           postinc2	equ	0xFDE
  5072                           postdec2	equ	0xFDD
  5073                           fsr2h	equ	0xFDA
  5074                           fsr2l	equ	0xFD9
  5075                           status	equ	0xFD8
  5076                           
  5077 ;; *************** function ___lwmod *****************
  5078 ;; Defined at:
  5079 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwmod.c"
  5080 ;; Parameters:    Size  Location     Type
  5081 ;;  dividend        2   29[COMRAM] unsigned int 
  5082 ;;  divisor         2   31[COMRAM] unsigned int 
  5083 ;; Auto vars:     Size  Location     Type
  5084 ;;  counter         1   33[COMRAM] unsigned char 
  5085 ;; Return value:  Size  Location     Type
  5086 ;;                  2   29[COMRAM] unsigned int 
  5087 ;; Registers used:
  5088 ;;		wreg, status,2, status,0
  5089 ;; Tracked objects:
  5090 ;;		On entry : 0/0
  5091 ;;		On exit  : 0/0
  5092 ;;		Unchanged: 0/0
  5093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5094 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5095 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5097 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5098 ;;Total ram usage:        5 bytes
  5099 ;; Hardware stack levels used:    1
  5100 ;; Hardware stack levels required when called:    4
  5101 ;; This function calls:
  5102 ;;		Nothing
  5103 ;; This function is called by:
  5104 ;;		_printf
  5105 ;; This function uses a non-reentrant model
  5106 ;;
  5107                           
  5108                           	psect	text22
  5109  002534                     __ptext22:
  5110                           	opt stack 0
  5111  002534                     ___lwmod:
  5112                           	opt stack 24
  5113                           
  5114                           ;incstack = 0
  5115  002534  5020               	movf	___lwmod@divisor,w,c
  5116  002536  1021               	iorwf	___lwmod@divisor+1,w,c
  5117  002538  B4D8               	btfsc	status,2,c
  5118  00253A  D018               	goto	l947
  5119  00253C  0E01               	movlw	1
  5120  00253E  6E22               	movwf	___lwmod@counter,c
  5121  002540  D004               	goto	l3274
  5122  002542                     l3272:
  5123  002542  90D8               	bcf	status,0,c
  5124  002544  3620               	rlcf	___lwmod@divisor,f,c
  5125  002546  3621               	rlcf	___lwmod@divisor+1,f,c
  5126  002548  2A22               	incf	___lwmod@counter,f,c
  5127  00254A                     l3274:
  5128  00254A  AE21               	btfss	___lwmod@divisor+1,7,c
  5129  00254C  D7FA               	goto	l3272
  5130  00254E                     l3276:
  5131  00254E  5020               	movf	___lwmod@divisor,w,c
  5132  002550  5C1E               	subwf	___lwmod@dividend,w,c
  5133  002552  5021               	movf	___lwmod@divisor+1,w,c
  5134  002554  581F               	subwfb	___lwmod@dividend+1,w,c
  5135  002556  A0D8               	btfss	status,0,c
  5136  002558  D004               	goto	l3280
  5137  00255A  5020               	movf	___lwmod@divisor,w,c
  5138  00255C  5E1E               	subwf	___lwmod@dividend,f,c
  5139  00255E  5021               	movf	___lwmod@divisor+1,w,c
  5140  002560  5A1F               	subwfb	___lwmod@dividend+1,f,c
  5141  002562                     l3280:
  5142  002562  90D8               	bcf	status,0,c
  5143  002564  3221               	rrcf	___lwmod@divisor+1,f,c
  5144  002566  3220               	rrcf	___lwmod@divisor,f,c
  5145  002568  2E22               	decfsz	___lwmod@counter,f,c
  5146  00256A  D7F1               	goto	l3276
  5147  00256C                     l947:
  5148  00256C  C01E  F01E         	movff	___lwmod@dividend,?___lwmod
  5149  002570  C01F  F01F         	movff	___lwmod@dividend+1,?___lwmod+1
  5150  002574  0012               	return		;funcret
  5151  002576                     __end_of___lwmod:
  5152                           	opt stack 0
  5153                           tblptru	equ	0xFF8
  5154                           tblptrh	equ	0xFF7
  5155                           tblptrl	equ	0xFF6
  5156                           tablat	equ	0xFF5
  5157                           prodh	equ	0xFF4
  5158                           prodl	equ	0xFF3
  5159                           intcon	equ	0xFF2
  5160                           intcon3	equ	0xFF0
  5161                           postinc0	equ	0xFEE
  5162                           wreg	equ	0xFE8
  5163                           indf2	equ	0xFDF
  5164                           postinc2	equ	0xFDE
  5165                           postdec2	equ	0xFDD
  5166                           fsr2h	equ	0xFDA
  5167                           fsr2l	equ	0xFD9
  5168                           status	equ	0xFD8
  5169                           
  5170 ;; *************** function ___lwdiv *****************
  5171 ;; Defined at:
  5172 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwdiv.c"
  5173 ;; Parameters:    Size  Location     Type
  5174 ;;  dividend        2   22[COMRAM] unsigned int 
  5175 ;;  divisor         2   24[COMRAM] unsigned int 
  5176 ;; Auto vars:     Size  Location     Type
  5177 ;;  quotient        2   27[COMRAM] unsigned int 
  5178 ;;  counter         1   26[COMRAM] unsigned char 
  5179 ;; Return value:  Size  Location     Type
  5180 ;;                  2   22[COMRAM] unsigned int 
  5181 ;; Registers used:
  5182 ;;		wreg, status,2, status,0
  5183 ;; Tracked objects:
  5184 ;;		On entry : 0/0
  5185 ;;		On exit  : 0/0
  5186 ;;		Unchanged: 0/0
  5187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5188 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5189 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5191 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5192 ;;Total ram usage:        7 bytes
  5193 ;; Hardware stack levels used:    1
  5194 ;; Hardware stack levels required when called:    4
  5195 ;; This function calls:
  5196 ;;		Nothing
  5197 ;; This function is called by:
  5198 ;;		_printf
  5199 ;; This function uses a non-reentrant model
  5200 ;;
  5201                           
  5202                           	psect	text23
  5203  002406                     __ptext23:
  5204                           	opt stack 0
  5205  002406                     ___lwdiv:
  5206                           	opt stack 24
  5207                           
  5208                           ;incstack = 0
  5209  002406  0E00               	movlw	0
  5210  002408  6E1D               	movwf	___lwdiv@quotient+1,c
  5211  00240A  0E00               	movlw	0
  5212  00240C  6E1C               	movwf	___lwdiv@quotient,c
  5213  00240E  5019               	movf	___lwdiv@divisor,w,c
  5214  002410  101A               	iorwf	___lwdiv@divisor+1,w,c
  5215  002412  B4D8               	btfsc	status,2,c
  5216  002414  D01C               	goto	l937
  5217  002416  0E01               	movlw	1
  5218  002418  6E1B               	movwf	___lwdiv@counter,c
  5219  00241A  D004               	goto	l3254
  5220  00241C                     l3252:
  5221  00241C  90D8               	bcf	status,0,c
  5222  00241E  3619               	rlcf	___lwdiv@divisor,f,c
  5223  002420  361A               	rlcf	___lwdiv@divisor+1,f,c
  5224  002422  2A1B               	incf	___lwdiv@counter,f,c
  5225  002424                     l3254:
  5226  002424  AE1A               	btfss	___lwdiv@divisor+1,7,c
  5227  002426  D7FA               	goto	l3252
  5228  002428                     l3256:
  5229  002428  90D8               	bcf	status,0,c
  5230  00242A  361C               	rlcf	___lwdiv@quotient,f,c
  5231  00242C  361D               	rlcf	___lwdiv@quotient+1,f,c
  5232  00242E  5019               	movf	___lwdiv@divisor,w,c
  5233  002430  5C17               	subwf	___lwdiv@dividend,w,c
  5234  002432  501A               	movf	___lwdiv@divisor+1,w,c
  5235  002434  5818               	subwfb	___lwdiv@dividend+1,w,c
  5236  002436  A0D8               	btfss	status,0,c
  5237  002438  D005               	goto	l3264
  5238  00243A  5019               	movf	___lwdiv@divisor,w,c
  5239  00243C  5E17               	subwf	___lwdiv@dividend,f,c
  5240  00243E  501A               	movf	___lwdiv@divisor+1,w,c
  5241  002440  5A18               	subwfb	___lwdiv@dividend+1,f,c
  5242  002442  801C               	bsf	___lwdiv@quotient,0,c
  5243  002444                     l3264:
  5244  002444  90D8               	bcf	status,0,c
  5245  002446  321A               	rrcf	___lwdiv@divisor+1,f,c
  5246  002448  3219               	rrcf	___lwdiv@divisor,f,c
  5247  00244A  2E1B               	decfsz	___lwdiv@counter,f,c
  5248  00244C  D7ED               	goto	l3256
  5249  00244E                     l937:
  5250  00244E  C01C  F017         	movff	___lwdiv@quotient,?___lwdiv
  5251  002452  C01D  F018         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5252  002456  0012               	return		;funcret
  5253  002458                     __end_of___lwdiv:
  5254                           	opt stack 0
  5255                           tblptru	equ	0xFF8
  5256                           tblptrh	equ	0xFF7
  5257                           tblptrl	equ	0xFF6
  5258                           tablat	equ	0xFF5
  5259                           prodh	equ	0xFF4
  5260                           prodl	equ	0xFF3
  5261                           intcon	equ	0xFF2
  5262                           intcon3	equ	0xFF0
  5263                           postinc0	equ	0xFEE
  5264                           wreg	equ	0xFE8
  5265                           indf2	equ	0xFDF
  5266                           postinc2	equ	0xFDE
  5267                           postdec2	equ	0xFDD
  5268                           fsr2h	equ	0xFDA
  5269                           fsr2l	equ	0xFD9
  5270                           status	equ	0xFD8
  5271                           
  5272 ;; *************** function _lcdInst *****************
  5273 ;; Defined at:
  5274 ;;		line 25 in file "lcd.c"
  5275 ;; Parameters:    Size  Location     Type
  5276 ;;  data            1    wreg     unsigned char 
  5277 ;; Auto vars:     Size  Location     Type
  5278 ;;  data            1   24[COMRAM] unsigned char 
  5279 ;; Return value:  Size  Location     Type
  5280 ;;                  1    wreg      void 
  5281 ;; Registers used:
  5282 ;;		wreg, status,2, status,0, cstack
  5283 ;; Tracked objects:
  5284 ;;		On entry : 0/0
  5285 ;;		On exit  : 0/0
  5286 ;;		Unchanged: 0/0
  5287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5289 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5291 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5292 ;;Total ram usage:        1 bytes
  5293 ;; Hardware stack levels used:    1
  5294 ;; Hardware stack levels required when called:    5
  5295 ;; This function calls:
  5296 ;;		_lcdNibble
  5297 ;; This function is called by:
  5298 ;;		_initLCD
  5299 ;;		_readLightSensor
  5300 ;;		_welcome
  5301 ;;		_debug
  5302 ;;		_sort
  5303 ;;		_display_time
  5304 ;;		_display_sorting_time
  5305 ;; This function uses a non-reentrant model
  5306 ;;
  5307                           
  5308                           	psect	text24
  5309  002684                     __ptext24:
  5310                           	opt stack 0
  5311  002684                     _lcdInst:
  5312                           	opt stack 24
  5313                           
  5314                           ;incstack = 0
  5315                           ;lcdInst@data stored from wreg
  5316  002684  6E19               	movwf	lcdInst@data,c
  5317                           
  5318                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  5319  002686  948C               	bcf	3980,2,c	;volatile
  5320                           
  5321                           ;lcd.c: 27: lcdNibble(data);
  5322  002688  5019               	movf	lcdInst@data,w,c
  5323  00268A  EC84  F011         	call	_lcdNibble
  5324  00268E  0012               	return		;funcret
  5325  002690                     __end_of_lcdInst:
  5326                           	opt stack 0
  5327                           tblptru	equ	0xFF8
  5328                           tblptrh	equ	0xFF7
  5329                           tblptrl	equ	0xFF6
  5330                           tablat	equ	0xFF5
  5331                           prodh	equ	0xFF4
  5332                           prodl	equ	0xFF3
  5333                           intcon	equ	0xFF2
  5334                           intcon3	equ	0xFF0
  5335                           postinc0	equ	0xFEE
  5336                           wreg	equ	0xFE8
  5337                           indf2	equ	0xFDF
  5338                           postinc2	equ	0xFDE
  5339                           postdec2	equ	0xFDD
  5340                           fsr2h	equ	0xFDA
  5341                           fsr2l	equ	0xFD9
  5342                           status	equ	0xFD8
  5343                           
  5344 ;; *************** function _lcdNibble *****************
  5345 ;; Defined at:
  5346 ;;		line 35 in file "lcd.c"
  5347 ;; Parameters:    Size  Location     Type
  5348 ;;  data            1    wreg     unsigned char 
  5349 ;; Auto vars:     Size  Location     Type
  5350 ;;  data            1   23[COMRAM] unsigned char 
  5351 ;;  temp            1   22[COMRAM] unsigned char 
  5352 ;; Return value:  Size  Location     Type
  5353 ;;                  1    wreg      void 
  5354 ;; Registers used:
  5355 ;;		wreg, status,2, status,0
  5356 ;; Tracked objects:
  5357 ;;		On entry : 0/0
  5358 ;;		On exit  : 0/0
  5359 ;;		Unchanged: 0/0
  5360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5362 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5364 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5365 ;;Total ram usage:        2 bytes
  5366 ;; Hardware stack levels used:    1
  5367 ;; Hardware stack levels required when called:    4
  5368 ;; This function calls:
  5369 ;;		Nothing
  5370 ;; This function is called by:
  5371 ;;		_lcdInst
  5372 ;;		_putch
  5373 ;; This function uses a non-reentrant model
  5374 ;;
  5375                           
  5376                           	psect	text25
  5377  002308                     __ptext25:
  5378                           	opt stack 0
  5379  002308                     _lcdNibble:
  5380                           	opt stack 23
  5381                           
  5382                           ;incstack = 0
  5383                           ;lcdNibble@data stored from wreg
  5384  002308  6E18               	movwf	lcdNibble@data,c
  5385                           
  5386                           ;lcd.c: 37: char temp = data & 0xF0;
  5387  00230A  5018               	movf	lcdNibble@data,w,c
  5388  00230C  0BF0               	andlw	240
  5389  00230E  6E17               	movwf	lcdNibble@temp,c
  5390                           
  5391                           ;lcd.c: 38: LATD = LATD & 0x0F;
  5392  002310  508C               	movf	3980,w,c	;volatile
  5393  002312  0B0F               	andlw	15
  5394  002314  6E8C               	movwf	3980,c	;volatile
  5395                           
  5396                           ;lcd.c: 39: LATD = temp | LATD;
  5397  002316  5017               	movf	lcdNibble@temp,w,c
  5398  002318  108C               	iorwf	3980,w,c	;volatile
  5399  00231A  6E8C               	movwf	3980,c	;volatile
  5400                           
  5401                           ;lcd.c: 41: LATDbits.LATD3 = 0;
  5402  00231C  968C               	bcf	3980,3,c	;volatile
  5403                           
  5404                           ;lcd.c: 42: _delay((unsigned long)((25)*(8000000/4000000.0)));
  5405  00231E  0E10               	movlw	16
  5406  002320                     u3667:
  5407  002320  2EE8               	decfsz	wreg,f,c
  5408  002322  D7FE               	bra	u3667
  5409  002324  D000               	nop2	
  5410                           
  5411                           ;lcd.c: 43: LATDbits.LATD3 = 1;
  5412  002326  868C               	bsf	3980,3,c	;volatile
  5413                           
  5414                           ;lcd.c: 44: _delay((unsigned long)((25)*(8000000/4000000.0)));
  5415  002328  0E10               	movlw	16
  5416  00232A                     u3677:
  5417  00232A  2EE8               	decfsz	wreg,f,c
  5418  00232C  D7FE               	bra	u3677
  5419  00232E  D000               	nop2	
  5420                           
  5421                           ;lcd.c: 46: data = data << 4;
  5422  002330  3818               	swapf	lcdNibble@data,w,c
  5423  002332  0BF0               	andlw	240
  5424  002334  6E18               	movwf	lcdNibble@data,c
  5425                           
  5426                           ;lcd.c: 48: temp = data & 0xF0;
  5427  002336  5018               	movf	lcdNibble@data,w,c
  5428  002338  0BF0               	andlw	240
  5429  00233A  6E17               	movwf	lcdNibble@temp,c
  5430                           
  5431                           ;lcd.c: 49: LATD = LATD & 0x0F;
  5432  00233C  508C               	movf	3980,w,c	;volatile
  5433  00233E  0B0F               	andlw	15
  5434  002340  6E8C               	movwf	3980,c	;volatile
  5435                           
  5436                           ;lcd.c: 50: LATD = temp | LATD;
  5437  002342  5017               	movf	lcdNibble@temp,w,c
  5438  002344  108C               	iorwf	3980,w,c	;volatile
  5439  002346  6E8C               	movwf	3980,c	;volatile
  5440                           
  5441                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  5442  002348  968C               	bcf	3980,3,c	;volatile
  5443                           
  5444                           ;lcd.c: 53: _delay((unsigned long)((25)*(8000000/4000000.0)));
  5445  00234A  0E10               	movlw	16
  5446  00234C                     u3687:
  5447  00234C  2EE8               	decfsz	wreg,f,c
  5448  00234E  D7FE               	bra	u3687
  5449  002350  D000               	nop2	
  5450                           
  5451                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  5452  002352  868C               	bsf	3980,3,c	;volatile
  5453                           
  5454                           ;lcd.c: 55: _delay((unsigned long)((25)*(8000000/4000000.0)));
  5455  002354  0E10               	movlw	16
  5456  002356                     u3697:
  5457  002356  2EE8               	decfsz	wreg,f,c
  5458  002358  D7FE               	bra	u3697
  5459  00235A  D000               	nop2	
  5460  00235C  0012               	return		;funcret
  5461  00235E                     __end_of_lcdNibble:
  5462                           	opt stack 0
  5463                           tblptru	equ	0xFF8
  5464                           tblptrh	equ	0xFF7
  5465                           tblptrl	equ	0xFF6
  5466                           tablat	equ	0xFF5
  5467                           prodh	equ	0xFF4
  5468                           prodl	equ	0xFF3
  5469                           intcon	equ	0xFF2
  5470                           intcon3	equ	0xFF0
  5471                           postinc0	equ	0xFEE
  5472                           wreg	equ	0xFE8
  5473                           indf2	equ	0xFDF
  5474                           postinc2	equ	0xFDE
  5475                           postdec2	equ	0xFDD
  5476                           fsr2h	equ	0xFDA
  5477                           fsr2l	equ	0xFD9
  5478                           status	equ	0xFD8
  5479                           
  5480 ;; *************** function _get_time *****************
  5481 ;; Defined at:
  5482 ;;		line 27 in file "time.c"
  5483 ;; Parameters:    Size  Location     Type
  5484 ;;  datime          2   25[COMRAM] PTR unsigned char 
  5485 ;;		 -> start_time(7), end_time(7), 
  5486 ;; Auto vars:     Size  Location     Type
  5487 ;;  i               2   27[COMRAM] int 
  5488 ;; Return value:  Size  Location     Type
  5489 ;;                  1    wreg      void 
  5490 ;; Registers used:
  5491 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5492 ;; Tracked objects:
  5493 ;;		On entry : 0/0
  5494 ;;		On exit  : 0/0
  5495 ;;		Unchanged: 0/0
  5496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5497 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5498 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5500 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5501 ;;Total ram usage:        4 bytes
  5502 ;; Hardware stack levels used:    1
  5503 ;; Hardware stack levels required when called:    6
  5504 ;; This function calls:
  5505 ;;		_I2C_Master_Read
  5506 ;;		_I2C_Master_Start
  5507 ;;		_I2C_Master_Stop
  5508 ;;		_I2C_Master_Write
  5509 ;; This function is called by:
  5510 ;;		_debug
  5511 ;;		_sort
  5512 ;;		_display_sorting_time
  5513 ;; This function uses a non-reentrant model
  5514 ;;
  5515                           
  5516                           	psect	text26
  5517  002152                     __ptext26:
  5518                           	opt stack 0
  5519  002152                     _get_time:
  5520                           	opt stack 23
  5521                           
  5522                           ;time.c: 28: I2C_Master_Start();
  5523                           
  5524                           ;incstack = 0
  5525  002152  EC62  F013         	call	_I2C_Master_Start	;wreg free
  5526                           
  5527                           ;time.c: 29: I2C_Master_Write(0b11010000);
  5528  002156  0E00               	movlw	0
  5529  002158  6E19               	movwf	I2C_Master_Write@d+1,c
  5530  00215A  0ED0               	movlw	208
  5531  00215C  6E18               	movwf	I2C_Master_Write@d,c
  5532  00215E  EC54  F013         	call	_I2C_Master_Write	;wreg free
  5533                           
  5534                           ;time.c: 30: I2C_Master_Write(0x00);
  5535  002162  0E00               	movlw	0
  5536  002164  6E19               	movwf	I2C_Master_Write@d+1,c
  5537  002166  0E00               	movlw	0
  5538  002168  6E18               	movwf	I2C_Master_Write@d,c
  5539  00216A  EC54  F013         	call	_I2C_Master_Write	;wreg free
  5540                           
  5541                           ;time.c: 31: I2C_Master_Stop();
  5542  00216E  EC5E  F013         	call	_I2C_Master_Stop	;wreg free
  5543                           
  5544                           ;time.c: 34: I2C_Master_Start();
  5545  002172  EC62  F013         	call	_I2C_Master_Start	;wreg free
  5546                           
  5547                           ;time.c: 35: I2C_Master_Write(0b11010001);
  5548  002176  0E00               	movlw	0
  5549  002178  6E19               	movwf	I2C_Master_Write@d+1,c
  5550  00217A  0ED1               	movlw	209
  5551  00217C  6E18               	movwf	I2C_Master_Write@d,c
  5552  00217E  EC54  F013         	call	_I2C_Master_Write	;wreg free
  5553                           
  5554                           ;time.c: 36: for(int i = 0; i < 6; i++){
  5555  002182  0E00               	movlw	0
  5556  002184  6E1D               	movwf	get_time@i+1,c
  5557  002186  0E00               	movlw	0
  5558  002188  6E1C               	movwf	get_time@i,c
  5559  00218A                     l3496:
  5560  00218A  BE1D               	btfsc	get_time@i+1,7,c
  5561  00218C  D006               	goto	l3500
  5562  00218E  501D               	movf	get_time@i+1,w,c
  5563  002190  E111               	bnz	l3506
  5564  002192  0E06               	movlw	6
  5565  002194  5C1C               	subwf	get_time@i,w,c
  5566  002196  B0D8               	btfsc	status,0,c
  5567  002198  D00D               	goto	l3506
  5568  00219A                     l3500:
  5569                           
  5570                           ;time.c: 37: datime[i] = I2C_Master_Read(1);
  5571  00219A  501C               	movf	get_time@i,w,c
  5572  00219C  241A               	addwf	get_time@datime,w,c
  5573  00219E  6ED9               	movwf	fsr2l,c
  5574  0021A0  501D               	movf	get_time@i+1,w,c
  5575  0021A2  201B               	addwfc	get_time@datime+1,w,c
  5576  0021A4  6EDA               	movwf	fsr2h,c
  5577  0021A6  0E01               	movlw	1
  5578  0021A8  ECF5  F012         	call	_I2C_Master_Read
  5579  0021AC  6EDF               	movwf	indf2,c
  5580  0021AE  4A1C               	infsnz	get_time@i,f,c
  5581  0021B0  2A1D               	incf	get_time@i+1,f,c
  5582  0021B2  D7EB               	goto	l3496
  5583  0021B4                     l3506:
  5584                           
  5585                           ;time.c: 38: }
  5586                           ;time.c: 39: datime[6] = I2C_Master_Read(0);
  5587  0021B4  EE20 F006          	lfsr	2,6
  5588  0021B8  501A               	movf	get_time@datime,w,c
  5589  0021BA  26D9               	addwf	fsr2l,f,c
  5590  0021BC  501B               	movf	get_time@datime+1,w,c
  5591  0021BE  22DA               	addwfc	fsr2h,f,c
  5592  0021C0  0E00               	movlw	0
  5593  0021C2  ECF5  F012         	call	_I2C_Master_Read
  5594  0021C6  6EDF               	movwf	indf2,c
  5595                           
  5596                           ;time.c: 40: I2C_Master_Stop();
  5597  0021C8  EC5E  F013         	call	_I2C_Master_Stop	;wreg free
  5598  0021CC  0012               	return		;funcret
  5599  0021CE                     __end_of_get_time:
  5600                           	opt stack 0
  5601                           tblptru	equ	0xFF8
  5602                           tblptrh	equ	0xFF7
  5603                           tblptrl	equ	0xFF6
  5604                           tablat	equ	0xFF5
  5605                           prodh	equ	0xFF4
  5606                           prodl	equ	0xFF3
  5607                           intcon	equ	0xFF2
  5608                           intcon3	equ	0xFF0
  5609                           postinc0	equ	0xFEE
  5610                           wreg	equ	0xFE8
  5611                           indf2	equ	0xFDF
  5612                           postinc2	equ	0xFDE
  5613                           postdec2	equ	0xFDD
  5614                           fsr2h	equ	0xFDA
  5615                           fsr2l	equ	0xFD9
  5616                           status	equ	0xFD8
  5617                           
  5618 ;; *************** function _I2C_Master_Write *****************
  5619 ;; Defined at:
  5620 ;;		line 47 in file "I2C.c"
  5621 ;; Parameters:    Size  Location     Type
  5622 ;;  d               2   23[COMRAM] unsigned int 
  5623 ;; Auto vars:     Size  Location     Type
  5624 ;;		None
  5625 ;; Return value:  Size  Location     Type
  5626 ;;                  1    wreg      void 
  5627 ;; Registers used:
  5628 ;;		wreg, status,2, status,0, cstack
  5629 ;; Tracked objects:
  5630 ;;		On entry : 0/0
  5631 ;;		On exit  : 0/0
  5632 ;;		Unchanged: 0/0
  5633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5634 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5637 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5638 ;;Total ram usage:        2 bytes
  5639 ;; Hardware stack levels used:    1
  5640 ;; Hardware stack levels required when called:    5
  5641 ;; This function calls:
  5642 ;;		_I2C_Master_Wait
  5643 ;; This function is called by:
  5644 ;;		_display_time
  5645 ;;		_initPIC
  5646 ;;		_get_time
  5647 ;; This function uses a non-reentrant model
  5648 ;;
  5649                           
  5650                           	psect	text27
  5651  0026A8                     __ptext27:
  5652                           	opt stack 0
  5653  0026A8                     _I2C_Master_Write:
  5654                           	opt stack 23
  5655                           
  5656                           ;I2C.c: 49: I2C_Master_Wait();
  5657                           
  5658                           ;incstack = 0
  5659  0026A8  EC2A  F013         	call	_I2C_Master_Wait	;wreg free
  5660                           
  5661                           ;I2C.c: 50: SSPBUF = d;
  5662  0026AC  C018  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  5663  0026B0  0012               	return		;funcret
  5664  0026B2                     __end_of_I2C_Master_Write:
  5665                           	opt stack 0
  5666                           tblptru	equ	0xFF8
  5667                           tblptrh	equ	0xFF7
  5668                           tblptrl	equ	0xFF6
  5669                           tablat	equ	0xFF5
  5670                           prodh	equ	0xFF4
  5671                           prodl	equ	0xFF3
  5672                           intcon	equ	0xFF2
  5673                           intcon3	equ	0xFF0
  5674                           postinc0	equ	0xFEE
  5675                           wreg	equ	0xFE8
  5676                           indf2	equ	0xFDF
  5677                           postinc2	equ	0xFDE
  5678                           postdec2	equ	0xFDD
  5679                           fsr2h	equ	0xFDA
  5680                           fsr2l	equ	0xFD9
  5681                           status	equ	0xFD8
  5682                           
  5683 ;; *************** function _I2C_Master_Stop *****************
  5684 ;; Defined at:
  5685 ;;		line 41 in file "I2C.c"
  5686 ;; Parameters:    Size  Location     Type
  5687 ;;		None
  5688 ;; Auto vars:     Size  Location     Type
  5689 ;;		None
  5690 ;; Return value:  Size  Location     Type
  5691 ;;                  1    wreg      void 
  5692 ;; Registers used:
  5693 ;;		wreg, status,2, status,0, cstack
  5694 ;; Tracked objects:
  5695 ;;		On entry : 0/0
  5696 ;;		On exit  : 0/0
  5697 ;;		Unchanged: 0/0
  5698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5702 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5703 ;;Total ram usage:        0 bytes
  5704 ;; Hardware stack levels used:    1
  5705 ;; Hardware stack levels required when called:    5
  5706 ;; This function calls:
  5707 ;;		_I2C_Master_Wait
  5708 ;; This function is called by:
  5709 ;;		_display_time
  5710 ;;		_initPIC
  5711 ;;		_get_time
  5712 ;; This function uses a non-reentrant model
  5713 ;;
  5714                           
  5715                           	psect	text28
  5716  0026BC                     __ptext28:
  5717                           	opt stack 0
  5718  0026BC                     _I2C_Master_Stop:
  5719                           	opt stack 23
  5720                           
  5721                           ;I2C.c: 43: I2C_Master_Wait();
  5722                           
  5723                           ;incstack = 0
  5724  0026BC  EC2A  F013         	call	_I2C_Master_Wait	;wreg free
  5725                           
  5726                           ;I2C.c: 44: PEN = 1;
  5727  0026C0  84C5               	bsf	4037,2,c	;volatile
  5728  0026C2  0012               	return		;funcret
  5729  0026C4                     __end_of_I2C_Master_Stop:
  5730                           	opt stack 0
  5731                           tblptru	equ	0xFF8
  5732                           tblptrh	equ	0xFF7
  5733                           tblptrl	equ	0xFF6
  5734                           tablat	equ	0xFF5
  5735                           prodh	equ	0xFF4
  5736                           prodl	equ	0xFF3
  5737                           intcon	equ	0xFF2
  5738                           intcon3	equ	0xFF0
  5739                           postinc0	equ	0xFEE
  5740                           wreg	equ	0xFE8
  5741                           indf2	equ	0xFDF
  5742                           postinc2	equ	0xFDE
  5743                           postdec2	equ	0xFDD
  5744                           fsr2h	equ	0xFDA
  5745                           fsr2l	equ	0xFD9
  5746                           status	equ	0xFD8
  5747                           
  5748 ;; *************** function _I2C_Master_Start *****************
  5749 ;; Defined at:
  5750 ;;		line 29 in file "I2C.c"
  5751 ;; Parameters:    Size  Location     Type
  5752 ;;		None
  5753 ;; Auto vars:     Size  Location     Type
  5754 ;;		None
  5755 ;; Return value:  Size  Location     Type
  5756 ;;                  1    wreg      void 
  5757 ;; Registers used:
  5758 ;;		wreg, status,2, status,0, cstack
  5759 ;; Tracked objects:
  5760 ;;		On entry : 0/0
  5761 ;;		On exit  : 0/0
  5762 ;;		Unchanged: 0/0
  5763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5767 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5768 ;;Total ram usage:        0 bytes
  5769 ;; Hardware stack levels used:    1
  5770 ;; Hardware stack levels required when called:    5
  5771 ;; This function calls:
  5772 ;;		_I2C_Master_Wait
  5773 ;; This function is called by:
  5774 ;;		_display_time
  5775 ;;		_initPIC
  5776 ;;		_get_time
  5777 ;; This function uses a non-reentrant model
  5778 ;;
  5779                           
  5780                           	psect	text29
  5781  0026C4                     __ptext29:
  5782                           	opt stack 0
  5783  0026C4                     _I2C_Master_Start:
  5784                           	opt stack 23
  5785                           
  5786                           ;I2C.c: 31: I2C_Master_Wait();
  5787                           
  5788                           ;incstack = 0
  5789  0026C4  EC2A  F013         	call	_I2C_Master_Wait	;wreg free
  5790                           
  5791                           ;I2C.c: 32: SEN = 1;
  5792  0026C8  80C5               	bsf	4037,0,c	;volatile
  5793  0026CA  0012               	return		;funcret
  5794  0026CC                     __end_of_I2C_Master_Start:
  5795                           	opt stack 0
  5796                           tblptru	equ	0xFF8
  5797                           tblptrh	equ	0xFF7
  5798                           tblptrl	equ	0xFF6
  5799                           tablat	equ	0xFF5
  5800                           prodh	equ	0xFF4
  5801                           prodl	equ	0xFF3
  5802                           intcon	equ	0xFF2
  5803                           intcon3	equ	0xFF0
  5804                           postinc0	equ	0xFEE
  5805                           wreg	equ	0xFE8
  5806                           indf2	equ	0xFDF
  5807                           postinc2	equ	0xFDE
  5808                           postdec2	equ	0xFDD
  5809                           fsr2h	equ	0xFDA
  5810                           fsr2l	equ	0xFD9
  5811                           status	equ	0xFD8
  5812                           
  5813 ;; *************** function _I2C_Master_Read *****************
  5814 ;; Defined at:
  5815 ;;		line 53 in file "I2C.c"
  5816 ;; Parameters:    Size  Location     Type
  5817 ;;  a               1    wreg     unsigned char 
  5818 ;; Auto vars:     Size  Location     Type
  5819 ;;  a               1   23[COMRAM] unsigned char 
  5820 ;;  temp            1   24[COMRAM] unsigned char 
  5821 ;; Return value:  Size  Location     Type
  5822 ;;                  1    wreg      unsigned char 
  5823 ;; Registers used:
  5824 ;;		wreg, status,2, status,0, cstack
  5825 ;; Tracked objects:
  5826 ;;		On entry : 0/0
  5827 ;;		On exit  : 0/0
  5828 ;;		Unchanged: 0/0
  5829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5831 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5833 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5834 ;;Total ram usage:        2 bytes
  5835 ;; Hardware stack levels used:    1
  5836 ;; Hardware stack levels required when called:    5
  5837 ;; This function calls:
  5838 ;;		_I2C_Master_Wait
  5839 ;; This function is called by:
  5840 ;;		_display_time
  5841 ;;		_get_time
  5842 ;; This function uses a non-reentrant model
  5843 ;;
  5844                           
  5845                           	psect	text30
  5846  0025EA                     __ptext30:
  5847                           	opt stack 0
  5848  0025EA                     _I2C_Master_Read:
  5849                           	opt stack 23
  5850                           
  5851                           ;incstack = 0
  5852                           ;I2C_Master_Read@a stored from wreg
  5853  0025EA  6E18               	movwf	I2C_Master_Read@a,c
  5854                           
  5855                           ;I2C.c: 55: unsigned char temp;
  5856                           ;I2C.c: 56: I2C_Master_Wait();
  5857  0025EC  EC2A  F013         	call	_I2C_Master_Wait	;wreg free
  5858                           
  5859                           ;I2C.c: 57: RCEN = 1;
  5860  0025F0  86C5               	bsf	4037,3,c	;volatile
  5861                           
  5862                           ;I2C.c: 58: I2C_Master_Wait();
  5863  0025F2  EC2A  F013         	call	_I2C_Master_Wait	;wreg free
  5864                           
  5865                           ;I2C.c: 59: temp = SSPBUF;
  5866  0025F6  CFC9 F019          	movff	4041,I2C_Master_Read@temp	;volatile
  5867                           
  5868                           ;I2C.c: 60: I2C_Master_Wait();
  5869  0025FA  EC2A  F013         	call	_I2C_Master_Wait	;wreg free
  5870                           
  5871                           ;I2C.c: 61: ACKDT = (a)?0:1;
  5872  0025FE  5018               	movf	I2C_Master_Read@a,w,c
  5873  002600  A4D8               	btfss	status,2,c
  5874  002602  D002               	goto	u2800
  5875  002604  8AC5               	bsf	4037,5,c	;volatile
  5876  002606  D001               	goto	l3304
  5877  002608                     u2800:
  5878  002608  9AC5               	bcf	4037,5,c	;volatile
  5879  00260A                     l3304:
  5880                           
  5881                           ;I2C.c: 62: ACKEN = 1;
  5882  00260A  88C5               	bsf	4037,4,c	;volatile
  5883                           
  5884                           ;I2C.c: 63: return temp;
  5885  00260C  5019               	movf	I2C_Master_Read@temp,w,c
  5886  00260E  0012               	return	
  5887  002610                     __end_of_I2C_Master_Read:
  5888                           	opt stack 0
  5889                           tblptru	equ	0xFF8
  5890                           tblptrh	equ	0xFF7
  5891                           tblptrl	equ	0xFF6
  5892                           tablat	equ	0xFF5
  5893                           prodh	equ	0xFF4
  5894                           prodl	equ	0xFF3
  5895                           intcon	equ	0xFF2
  5896                           intcon3	equ	0xFF0
  5897                           postinc0	equ	0xFEE
  5898                           wreg	equ	0xFE8
  5899                           indf2	equ	0xFDF
  5900                           postinc2	equ	0xFDE
  5901                           postdec2	equ	0xFDD
  5902                           fsr2h	equ	0xFDA
  5903                           fsr2l	equ	0xFD9
  5904                           status	equ	0xFD8
  5905                           
  5906 ;; *************** function _I2C_Master_Wait *****************
  5907 ;; Defined at:
  5908 ;;		line 24 in file "I2C.c"
  5909 ;; Parameters:    Size  Location     Type
  5910 ;;		None
  5911 ;; Auto vars:     Size  Location     Type
  5912 ;;		None
  5913 ;; Return value:  Size  Location     Type
  5914 ;;                  1    wreg      void 
  5915 ;; Registers used:
  5916 ;;		wreg, status,2, status,0
  5917 ;; Tracked objects:
  5918 ;;		On entry : 0/0
  5919 ;;		On exit  : 0/0
  5920 ;;		Unchanged: 0/0
  5921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5924 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5925 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5926 ;;Total ram usage:        1 bytes
  5927 ;; Hardware stack levels used:    1
  5928 ;; Hardware stack levels required when called:    4
  5929 ;; This function calls:
  5930 ;;		Nothing
  5931 ;; This function is called by:
  5932 ;;		_I2C_Master_Start
  5933 ;;		_I2C_Master_Stop
  5934 ;;		_I2C_Master_Write
  5935 ;;		_I2C_Master_Read
  5936 ;;		_I2C_Master_RepeatedStart
  5937 ;; This function uses a non-reentrant model
  5938 ;;
  5939                           
  5940                           	psect	text31
  5941  002654                     __ptext31:
  5942                           	opt stack 0
  5943  002654                     _I2C_Master_Wait:
  5944                           	opt stack 23
  5945  002654                     l34:
  5946  002654  B4C7               	btfsc	4039,2,c	;volatile
  5947  002656  D7FE               	goto	l34
  5948  002658  CFC5 F017          	movff	4037,??_I2C_Master_Wait	;volatile
  5949  00265C  0E1F               	movlw	31
  5950  00265E  1617               	andwf	??_I2C_Master_Wait,f,c
  5951  002660  B4D8               	btfsc	status,2,c
  5952  002662  0012               	return	
  5953  002664  D7F7               	goto	l34
  5954  002666                     __end_of_I2C_Master_Wait:
  5955                           	opt stack 0
  5956                           tblptru	equ	0xFF8
  5957                           tblptrh	equ	0xFF7
  5958                           tblptrl	equ	0xFF6
  5959                           tablat	equ	0xFF5
  5960                           prodh	equ	0xFF4
  5961                           prodl	equ	0xFF3
  5962                           intcon	equ	0xFF2
  5963                           intcon3	equ	0xFF0
  5964                           postinc0	equ	0xFEE
  5965                           wreg	equ	0xFE8
  5966                           indf2	equ	0xFDF
  5967                           postinc2	equ	0xFDE
  5968                           postdec2	equ	0xFDD
  5969                           fsr2h	equ	0xFDA
  5970                           fsr2l	equ	0xFD9
  5971                           status	equ	0xFD8
  5972                           
  5973 ;; *************** function _interrupt_handler *****************
  5974 ;; Defined at:
  5975 ;;		line 24 in file "interrupt.c"
  5976 ;; Parameters:    Size  Location     Type
  5977 ;;		None
  5978 ;; Auto vars:     Size  Location     Type
  5979 ;;  keypress        1   21[COMRAM] unsigned char 
  5980 ;; Return value:  Size  Location     Type
  5981 ;;                  1    wreg      void 
  5982 ;; Registers used:
  5983 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5984 ;; Tracked objects:
  5985 ;;		On entry : 0/0
  5986 ;;		On exit  : 0/0
  5987 ;;		Unchanged: 0/0
  5988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5990 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5991 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5992 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5993 ;;Total ram usage:       15 bytes
  5994 ;; Hardware stack levels used:    1
  5995 ;; Hardware stack levels required when called:    3
  5996 ;; This function calls:
  5997 ;;		i2_get_time
  5998 ;;		i2_lcdInst
  5999 ;;		i2_putch
  6000 ;; This function is called by:
  6001 ;;		Interrupt level 2
  6002 ;; This function uses a non-reentrant model
  6003 ;;
  6004                           
  6005                           	psect	intcode
  6006  000008                     __pintcode:
  6007                           	opt stack 0
  6008  000008                     _interrupt_handler:
  6009                           	opt stack 22
  6010                           
  6011                           ;incstack = 0
  6012  000008  8269               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6013  00000A  ED35  F00E         	call	int_func,f	;refresh shadow registers
  6014                           tblptru	equ	0xFF8
  6015                           tblptrh	equ	0xFF7
  6016                           tblptrl	equ	0xFF6
  6017                           tablat	equ	0xFF5
  6018                           prodh	equ	0xFF4
  6019                           prodl	equ	0xFF3
  6020                           intcon	equ	0xFF2
  6021                           intcon3	equ	0xFF0
  6022                           postinc0	equ	0xFEE
  6023                           wreg	equ	0xFE8
  6024                           indf2	equ	0xFDF
  6025                           postinc2	equ	0xFDE
  6026                           postdec2	equ	0xFDD
  6027                           fsr2h	equ	0xFDA
  6028                           fsr2l	equ	0xFD9
  6029                           status	equ	0xFD8
  6030                           
  6031                           	psect	intcode_body
  6032  001C6A                     __pintcode_body:
  6033                           	opt stack 22
  6034  001C6A                     int_func:
  6035                           	opt stack 22
  6036  001C6A  0006               	pop		; remove dummy address from shadow register refresh
  6037  001C6C  CFFA F008          	movff	pclath,??_interrupt_handler
  6038  001C70  CFFB F009          	movff	pclatu,??_interrupt_handler+1
  6039  001C74  CFE9 F00A          	movff	fsr0l,??_interrupt_handler+2
  6040  001C78  CFEA F00B          	movff	fsr0h,??_interrupt_handler+3
  6041  001C7C  CFE1 F00C          	movff	fsr1l,??_interrupt_handler+4
  6042  001C80  CFE2 F00D          	movff	fsr1h,??_interrupt_handler+5
  6043  001C84  CFD9 F00E          	movff	fsr2l,??_interrupt_handler+6
  6044  001C88  CFDA F00F          	movff	fsr2h,??_interrupt_handler+7
  6045  001C8C  CFF3 F010          	movff	prodl,??_interrupt_handler+8
  6046  001C90  CFF4 F011          	movff	prodh,??_interrupt_handler+9
  6047  001C94  CFF6 F012          	movff	tblptrl,??_interrupt_handler+10
  6048  001C98  CFF7 F013          	movff	tblptrh,??_interrupt_handler+11
  6049  001C9C  CFF8 F014          	movff	tblptru,??_interrupt_handler+12
  6050  001CA0  CFF5 F015          	movff	tablat,??_interrupt_handler+13
  6051                           
  6052                           ;interrupt.c: 31: if (INT1IF) {
  6053  001CA4  A0F0               	btfss	intcon3,0,c	;volatile
  6054  001CA6  D038               	goto	i2l3200
  6055                           
  6056                           ;interrupt.c: 32: lcdInst(0b11000000);;
  6057  001CA8  0EC0               	movlw	192
  6058  001CAA  EC4E  F013         	call	i2_lcdInst
  6059                           
  6060                           ;interrupt.c: 33: unsigned char keypress = (PORTB & 0xF0) >> 4;
  6061  001CAE  3881               	swapf	3969,w,c	;volatile
  6062  001CB0  0B0F               	andlw	15
  6063  001CB2  0B0F               	andlw	15
  6064  001CB4  6E16               	movwf	interrupt_handler@keypress,c
  6065                           
  6066                           ;interrupt.c: 34: putch(keys[keypress]);
  6067  001CB6  5016               	movf	interrupt_handler@keypress,w,c
  6068  001CB8  0D01               	mullw	1
  6069  001CBA  0E01               	movlw	low _keys
  6070  001CBC  24F3               	addwf	prodl,w,c
  6071  001CBE  6EF6               	movwf	tblptrl,c
  6072  001CC0  0E10               	movlw	high _keys
  6073  001CC2  20F4               	addwfc	prodh,w,c
  6074  001CC4  6EF7               	movwf	tblptrh,c
  6075  001CC6                     	if	0	;There are less than 3 active tblptr bytes
  6076  001CC6                     	endif
  6077  001CC6  0008               	tblrd		*
  6078  001CC8  50F5               	movf	tablat,w,c
  6079  001CCA  EC48  F013         	call	i2_putch
  6080                           
  6081                           ;interrupt.c: 41: if (mode == 2) {
  6082  001CCE  0E02               	movlw	2
  6083  001CD0  1861               	xorwf	_mode,w,c
  6084  001CD2  A4D8               	btfss	status,2,c
  6085  001CD4  D002               	goto	i2l3180
  6086                           
  6087                           ;interrupt.c: 42: mode = 3;
  6088  001CD6  0E03               	movlw	3
  6089  001CD8  D01E               	goto	L7
  6090  001CDA                     i2l3180:
  6091  001CDA  5016               	movf	interrupt_handler@keypress,w,c
  6092  001CDC  A4D8               	btfss	status,2,c
  6093  001CDE  D005               	goto	i2l3186
  6094                           
  6095                           ;interrupt.c: 44: if (mode == 0) {
  6096  001CE0  5061               	movf	_mode,w,c
  6097  001CE2  A4D8               	btfss	status,2,c
  6098  001CE4  D019               	goto	i2l3200
  6099                           
  6100                           ;interrupt.c: 45: mode = 1;
  6101  001CE6  0E01               	movlw	1
  6102  001CE8  D016               	goto	L7
  6103  001CEA                     i2l3186:
  6104  001CEA  0E03               	movlw	3
  6105  001CEC  1816               	xorwf	interrupt_handler@keypress,w,c
  6106  001CEE  A4D8               	btfss	status,2,c
  6107  001CF0  D008               	goto	i2l3192
  6108                           
  6109                           ;interrupt.c: 48: get_time(start_time);
  6110  001CF2  0E9C               	movlw	low _start_time
  6111  001CF4  6E04               	movwf	i2get_time@datime,c
  6112  001CF6  0E00               	movlw	high _start_time
  6113  001CF8  6E05               	movwf	i2get_time@datime+1,c
  6114  001CFA  ECE7  F010         	call	i2_get_time	;wreg free
  6115                           
  6116                           ;interrupt.c: 49: mode = 2;
  6117  001CFE  0E02               	movlw	2
  6118  001D00  D00A               	goto	L7
  6119  001D02                     i2l3192:
  6120                           
  6121                           ;interrupt.c: 51: else if (keypress == 0x1) {
  6122  001D02  0416               	decf	interrupt_handler@keypress,w,c
  6123  001D04  A4D8               	btfss	status,2,c
  6124  001D06  D002               	goto	i2l3196
  6125                           
  6126                           ;interrupt.c: 52: mode = 0;
  6127  001D08  0E00               	movlw	0
  6128  001D0A  D005               	goto	L7
  6129  001D0C                     i2l3196:
  6130  001D0C  0E02               	movlw	2
  6131  001D0E  1816               	xorwf	interrupt_handler@keypress,w,c
  6132  001D10  A4D8               	btfss	status,2,c
  6133  001D12  D002               	goto	i2l3200
  6134                           
  6135                           ;interrupt.c: 54: mode = 4;
  6136  001D14  0E04               	movlw	4
  6137  001D16                     L7:
  6138  001D16  6E61               	movwf	_mode,c
  6139  001D18                     i2l3200:
  6140                           
  6141                           ;interrupt.c: 55: }
  6142                           ;interrupt.c: 58: }
  6143                           ;interrupt.c: 59: INT1IF = 0;
  6144  001D18  90F0               	bcf	intcon3,0,c	;volatile
  6145  001D1A  C015  FFF5         	movff	??_interrupt_handler+13,tablat
  6146  001D1E  C014  FFF8         	movff	??_interrupt_handler+12,tblptru
  6147  001D22  C013  FFF7         	movff	??_interrupt_handler+11,tblptrh
  6148  001D26  C012  FFF6         	movff	??_interrupt_handler+10,tblptrl
  6149  001D2A  C011  FFF4         	movff	??_interrupt_handler+9,prodh
  6150  001D2E  C010  FFF3         	movff	??_interrupt_handler+8,prodl
  6151  001D32  C00F  FFDA         	movff	??_interrupt_handler+7,fsr2h
  6152  001D36  C00E  FFD9         	movff	??_interrupt_handler+6,fsr2l
  6153  001D3A  C00D  FFE2         	movff	??_interrupt_handler+5,fsr1h
  6154  001D3E  C00C  FFE1         	movff	??_interrupt_handler+4,fsr1l
  6155  001D42  C00B  FFEA         	movff	??_interrupt_handler+3,fsr0h
  6156  001D46  C00A  FFE9         	movff	??_interrupt_handler+2,fsr0l
  6157  001D4A  C009  FFFB         	movff	??_interrupt_handler+1,pclatu
  6158  001D4E  C008  FFFA         	movff	??_interrupt_handler,pclath
  6159  001D52  9269               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6160  001D54  0011               	retfie		f
  6161  001D56                     __end_of_interrupt_handler:
  6162                           	opt stack 0
  6163                           pclatu	equ	0xFFB
  6164                           pclath	equ	0xFFA
  6165                           tblptru	equ	0xFF8
  6166                           tblptrh	equ	0xFF7
  6167                           tblptrl	equ	0xFF6
  6168                           tablat	equ	0xFF5
  6169                           prodh	equ	0xFF4
  6170                           prodl	equ	0xFF3
  6171                           intcon	equ	0xFF2
  6172                           intcon3	equ	0xFF0
  6173                           postinc0	equ	0xFEE
  6174                           fsr0h	equ	0xFEA
  6175                           fsr0l	equ	0xFE9
  6176                           wreg	equ	0xFE8
  6177                           fsr1h	equ	0xFE2
  6178                           fsr1l	equ	0xFE1
  6179                           indf2	equ	0xFDF
  6180                           postinc2	equ	0xFDE
  6181                           postdec2	equ	0xFDD
  6182                           fsr2h	equ	0xFDA
  6183                           fsr2l	equ	0xFD9
  6184                           status	equ	0xFD8
  6185                           
  6186 ;; *************** function i2_putch *****************
  6187 ;; Defined at:
  6188 ;;		line 30 in file "lcd.c"
  6189 ;; Parameters:    Size  Location     Type
  6190 ;;  data            1    wreg     unsigned char 
  6191 ;; Auto vars:     Size  Location     Type
  6192 ;;  data            1    2[COMRAM] unsigned char 
  6193 ;; Return value:  Size  Location     Type
  6194 ;;                  1    wreg      void 
  6195 ;; Registers used:
  6196 ;;		wreg, status,2, status,0, cstack
  6197 ;; Tracked objects:
  6198 ;;		On entry : 0/0
  6199 ;;		On exit  : 0/0
  6200 ;;		Unchanged: 0/0
  6201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6203 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6205 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6206 ;;Total ram usage:        1 bytes
  6207 ;; Hardware stack levels used:    1
  6208 ;; Hardware stack levels required when called:    1
  6209 ;; This function calls:
  6210 ;;		i2_lcdNibble
  6211 ;; This function is called by:
  6212 ;;		_interrupt_handler
  6213 ;; This function uses a non-reentrant model
  6214 ;;
  6215                           
  6216                           	psect	text33
  6217  002690                     __ptext33:
  6218                           	opt stack 0
  6219  002690                     i2_putch:
  6220                           	opt stack 23
  6221                           
  6222                           ;incstack = 0
  6223                           ;i2putch@data stored from wreg
  6224  002690  6E03               	movwf	i2putch@data,c
  6225                           
  6226                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  6227  002692  848C               	bsf	3980,2,c	;volatile
  6228                           
  6229                           ;lcd.c: 32: lcdNibble(data);
  6230  002694  5003               	movf	i2putch@data,w,c
  6231  002696  ECAF  F011         	call	i2_lcdNibble
  6232  00269A  0012               	return		;funcret
  6233  00269C                     __end_ofi2_putch:
  6234                           	opt stack 0
  6235                           pclatu	equ	0xFFB
  6236                           pclath	equ	0xFFA
  6237                           tblptru	equ	0xFF8
  6238                           tblptrh	equ	0xFF7
  6239                           tblptrl	equ	0xFF6
  6240                           tablat	equ	0xFF5
  6241                           prodh	equ	0xFF4
  6242                           prodl	equ	0xFF3
  6243                           intcon	equ	0xFF2
  6244                           intcon3	equ	0xFF0
  6245                           postinc0	equ	0xFEE
  6246                           fsr0h	equ	0xFEA
  6247                           fsr0l	equ	0xFE9
  6248                           wreg	equ	0xFE8
  6249                           fsr1h	equ	0xFE2
  6250                           fsr1l	equ	0xFE1
  6251                           indf2	equ	0xFDF
  6252                           postinc2	equ	0xFDE
  6253                           postdec2	equ	0xFDD
  6254                           fsr2h	equ	0xFDA
  6255                           fsr2l	equ	0xFD9
  6256                           status	equ	0xFD8
  6257                           
  6258 ;; *************** function i2_lcdInst *****************
  6259 ;; Defined at:
  6260 ;;		line 25 in file "lcd.c"
  6261 ;; Parameters:    Size  Location     Type
  6262 ;;  data            1    wreg     unsigned char 
  6263 ;; Auto vars:     Size  Location     Type
  6264 ;;  data            1    2[COMRAM] unsigned char 
  6265 ;; Return value:  Size  Location     Type
  6266 ;;                  1    wreg      void 
  6267 ;; Registers used:
  6268 ;;		wreg, status,2, status,0, cstack
  6269 ;; Tracked objects:
  6270 ;;		On entry : 0/0
  6271 ;;		On exit  : 0/0
  6272 ;;		Unchanged: 0/0
  6273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6275 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6277 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6278 ;;Total ram usage:        1 bytes
  6279 ;; Hardware stack levels used:    1
  6280 ;; Hardware stack levels required when called:    1
  6281 ;; This function calls:
  6282 ;;		i2_lcdNibble
  6283 ;; This function is called by:
  6284 ;;		_interrupt_handler
  6285 ;; This function uses a non-reentrant model
  6286 ;;
  6287                           
  6288                           	psect	text34
  6289  00269C                     __ptext34:
  6290                           	opt stack 0
  6291  00269C                     i2_lcdInst:
  6292                           	opt stack 23
  6293                           
  6294                           ;incstack = 0
  6295                           ;i2lcdInst@data stored from wreg
  6296  00269C  6E03               	movwf	i2lcdInst@data,c
  6297                           
  6298                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  6299  00269E  948C               	bcf	3980,2,c	;volatile
  6300                           
  6301                           ;lcd.c: 27: lcdNibble(data);
  6302  0026A0  5003               	movf	i2lcdInst@data,w,c
  6303  0026A2  ECAF  F011         	call	i2_lcdNibble
  6304  0026A6  0012               	return		;funcret
  6305  0026A8                     __end_ofi2_lcdInst:
  6306                           	opt stack 0
  6307                           pclatu	equ	0xFFB
  6308                           pclath	equ	0xFFA
  6309                           tblptru	equ	0xFF8
  6310                           tblptrh	equ	0xFF7
  6311                           tblptrl	equ	0xFF6
  6312                           tablat	equ	0xFF5
  6313                           prodh	equ	0xFF4
  6314                           prodl	equ	0xFF3
  6315                           intcon	equ	0xFF2
  6316                           intcon3	equ	0xFF0
  6317                           postinc0	equ	0xFEE
  6318                           fsr0h	equ	0xFEA
  6319                           fsr0l	equ	0xFE9
  6320                           wreg	equ	0xFE8
  6321                           fsr1h	equ	0xFE2
  6322                           fsr1l	equ	0xFE1
  6323                           indf2	equ	0xFDF
  6324                           postinc2	equ	0xFDE
  6325                           postdec2	equ	0xFDD
  6326                           fsr2h	equ	0xFDA
  6327                           fsr2l	equ	0xFD9
  6328                           status	equ	0xFD8
  6329                           
  6330 ;; *************** function i2_lcdNibble *****************
  6331 ;; Defined at:
  6332 ;;		line 35 in file "lcd.c"
  6333 ;; Parameters:    Size  Location     Type
  6334 ;;  data            1    wreg     unsigned char 
  6335 ;; Auto vars:     Size  Location     Type
  6336 ;;  data            1    1[COMRAM] unsigned char 
  6337 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  6338 ;; Return value:  Size  Location     Type
  6339 ;;                  1    wreg      void 
  6340 ;; Registers used:
  6341 ;;		wreg, status,2, status,0
  6342 ;; Tracked objects:
  6343 ;;		On entry : 0/0
  6344 ;;		On exit  : 0/0
  6345 ;;		Unchanged: 0/0
  6346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6348 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6350 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6351 ;;Total ram usage:        2 bytes
  6352 ;; Hardware stack levels used:    1
  6353 ;; This function calls:
  6354 ;;		Nothing
  6355 ;; This function is called by:
  6356 ;;		i2_lcdInst
  6357 ;;		i2_putch
  6358 ;; This function uses a non-reentrant model
  6359 ;;
  6360                           
  6361                           	psect	text35
  6362  00235E                     __ptext35:
  6363                           	opt stack 0
  6364  00235E                     i2_lcdNibble:
  6365                           	opt stack 23
  6366                           
  6367                           ;incstack = 0
  6368                           ;i2lcdNibble@data stored from wreg
  6369  00235E  6E02               	movwf	i2lcdNibble@data,c
  6370                           
  6371                           ;lcd.c: 37: char temp = data & 0xF0;
  6372  002360  5002               	movf	i2lcdNibble@data,w,c
  6373  002362  0BF0               	andlw	240
  6374  002364  6E01               	movwf	i2lcdNibble@temp,c
  6375                           
  6376                           ;lcd.c: 38: LATD = LATD & 0x0F;
  6377  002366  508C               	movf	3980,w,c	;volatile
  6378  002368  0B0F               	andlw	15
  6379  00236A  6E8C               	movwf	3980,c	;volatile
  6380                           
  6381                           ;lcd.c: 39: LATD = temp | LATD;
  6382  00236C  5001               	movf	i2lcdNibble@temp,w,c
  6383  00236E  108C               	iorwf	3980,w,c	;volatile
  6384  002370  6E8C               	movwf	3980,c	;volatile
  6385                           
  6386                           ;lcd.c: 41: LATDbits.LATD3 = 0;
  6387  002372  968C               	bcf	3980,3,c	;volatile
  6388                           
  6389                           ;lcd.c: 42: _delay((unsigned long)((25)*(8000000/4000000.0)));
  6390  002374  0E10               	movlw	16
  6391  002376                     i2u370_47:
  6392  002376  2EE8               	decfsz	wreg,f,c
  6393  002378  D7FE               	bra	i2u370_47
  6394  00237A  D000               	nop2	
  6395                           
  6396                           ;lcd.c: 43: LATDbits.LATD3 = 1;
  6397  00237C  868C               	bsf	3980,3,c	;volatile
  6398                           
  6399                           ;lcd.c: 44: _delay((unsigned long)((25)*(8000000/4000000.0)));
  6400  00237E  0E10               	movlw	16
  6401  002380                     i2u371_47:
  6402  002380  2EE8               	decfsz	wreg,f,c
  6403  002382  D7FE               	bra	i2u371_47
  6404  002384  D000               	nop2	
  6405                           
  6406                           ;lcd.c: 46: data = data << 4;
  6407  002386  3802               	swapf	i2lcdNibble@data,w,c
  6408  002388  0BF0               	andlw	240
  6409  00238A  6E02               	movwf	i2lcdNibble@data,c
  6410                           
  6411                           ;lcd.c: 48: temp = data & 0xF0;
  6412  00238C  5002               	movf	i2lcdNibble@data,w,c
  6413  00238E  0BF0               	andlw	240
  6414  002390  6E01               	movwf	i2lcdNibble@temp,c
  6415                           
  6416                           ;lcd.c: 49: LATD = LATD & 0x0F;
  6417  002392  508C               	movf	3980,w,c	;volatile
  6418  002394  0B0F               	andlw	15
  6419  002396  6E8C               	movwf	3980,c	;volatile
  6420                           
  6421                           ;lcd.c: 50: LATD = temp | LATD;
  6422  002398  5001               	movf	i2lcdNibble@temp,w,c
  6423  00239A  108C               	iorwf	3980,w,c	;volatile
  6424  00239C  6E8C               	movwf	3980,c	;volatile
  6425                           
  6426                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  6427  00239E  968C               	bcf	3980,3,c	;volatile
  6428                           
  6429                           ;lcd.c: 53: _delay((unsigned long)((25)*(8000000/4000000.0)));
  6430  0023A0  0E10               	movlw	16
  6431  0023A2                     i2u372_47:
  6432  0023A2  2EE8               	decfsz	wreg,f,c
  6433  0023A4  D7FE               	bra	i2u372_47
  6434  0023A6  D000               	nop2	
  6435                           
  6436                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  6437  0023A8  868C               	bsf	3980,3,c	;volatile
  6438                           
  6439                           ;lcd.c: 55: _delay((unsigned long)((25)*(8000000/4000000.0)));
  6440  0023AA  0E10               	movlw	16
  6441  0023AC                     i2u373_47:
  6442  0023AC  2EE8               	decfsz	wreg,f,c
  6443  0023AE  D7FE               	bra	i2u373_47
  6444  0023B0  D000               	nop2	
  6445  0023B2  0012               	return		;funcret
  6446  0023B4                     __end_ofi2_lcdNibble:
  6447                           	opt stack 0
  6448                           pclatu	equ	0xFFB
  6449                           pclath	equ	0xFFA
  6450                           tblptru	equ	0xFF8
  6451                           tblptrh	equ	0xFF7
  6452                           tblptrl	equ	0xFF6
  6453                           tablat	equ	0xFF5
  6454                           prodh	equ	0xFF4
  6455                           prodl	equ	0xFF3
  6456                           intcon	equ	0xFF2
  6457                           intcon3	equ	0xFF0
  6458                           postinc0	equ	0xFEE
  6459                           fsr0h	equ	0xFEA
  6460                           fsr0l	equ	0xFE9
  6461                           wreg	equ	0xFE8
  6462                           fsr1h	equ	0xFE2
  6463                           fsr1l	equ	0xFE1
  6464                           indf2	equ	0xFDF
  6465                           postinc2	equ	0xFDE
  6466                           postdec2	equ	0xFDD
  6467                           fsr2h	equ	0xFDA
  6468                           fsr2l	equ	0xFD9
  6469                           status	equ	0xFD8
  6470                           
  6471 ;; *************** function i2_get_time *****************
  6472 ;; Defined at:
  6473 ;;		line 27 in file "time.c"
  6474 ;; Parameters:    Size  Location     Type
  6475 ;;  datime          2    3[COMRAM] PTR unsigned char 
  6476 ;;		 -> start_time(7), end_time(7), 
  6477 ;; Auto vars:     Size  Location     Type
  6478 ;;  get_time        2    5[COMRAM] int 
  6479 ;; Return value:  Size  Location     Type
  6480 ;;                  1    wreg      void 
  6481 ;; Registers used:
  6482 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6483 ;; Tracked objects:
  6484 ;;		On entry : 0/0
  6485 ;;		On exit  : 0/0
  6486 ;;		Unchanged: 0/0
  6487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6488 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6489 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6491 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6492 ;;Total ram usage:        4 bytes
  6493 ;; Hardware stack levels used:    1
  6494 ;; Hardware stack levels required when called:    2
  6495 ;; This function calls:
  6496 ;;		i2_I2C_Master_Read
  6497 ;;		i2_I2C_Master_Start
  6498 ;;		i2_I2C_Master_Stop
  6499 ;;		i2_I2C_Master_Write
  6500 ;; This function is called by:
  6501 ;;		_interrupt_handler
  6502 ;; This function uses a non-reentrant model
  6503 ;;
  6504                           
  6505                           	psect	text36
  6506  0021CE                     __ptext36:
  6507                           	opt stack 0
  6508  0021CE                     i2_get_time:
  6509                           	opt stack 22
  6510                           
  6511                           ;time.c: 28: I2C_Master_Start();
  6512                           
  6513                           ;incstack = 0
  6514  0021CE  EC6A  F013         	call	i2_I2C_Master_Start	;wreg free
  6515                           
  6516                           ;time.c: 29: I2C_Master_Write(0b11010000);
  6517  0021D2  0E00               	movlw	0
  6518  0021D4  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6519  0021D6  0ED0               	movlw	208
  6520  0021D8  6E02               	movwf	i2I2C_Master_Write@d,c
  6521  0021DA  EC59  F013         	call	i2_I2C_Master_Write	;wreg free
  6522                           
  6523                           ;time.c: 30: I2C_Master_Write(0x00);
  6524  0021DE  0E00               	movlw	0
  6525  0021E0  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6526  0021E2  0E00               	movlw	0
  6527  0021E4  6E02               	movwf	i2I2C_Master_Write@d,c
  6528  0021E6  EC59  F013         	call	i2_I2C_Master_Write	;wreg free
  6529                           
  6530                           ;time.c: 31: I2C_Master_Stop();
  6531  0021EA  EC66  F013         	call	i2_I2C_Master_Stop	;wreg free
  6532                           
  6533                           ;time.c: 34: I2C_Master_Start();
  6534  0021EE  EC6A  F013         	call	i2_I2C_Master_Start	;wreg free
  6535                           
  6536                           ;time.c: 35: I2C_Master_Write(0b11010001);
  6537  0021F2  0E00               	movlw	0
  6538  0021F4  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6539  0021F6  0ED1               	movlw	209
  6540  0021F8  6E02               	movwf	i2I2C_Master_Write@d,c
  6541  0021FA  EC59  F013         	call	i2_I2C_Master_Write	;wreg free
  6542                           
  6543                           ;time.c: 36: for(int i = 0; i < 6; i++){
  6544  0021FE  0E00               	movlw	0
  6545  002200  6E07               	movwf	i2get_time@i+1,c
  6546  002202  0E00               	movlw	0
  6547  002204  6E06               	movwf	i2get_time@i,c
  6548  002206                     i2l3128:
  6549  002206  BE07               	btfsc	i2get_time@i+1,7,c
  6550  002208  D006               	goto	i2l3132
  6551  00220A  5007               	movf	i2get_time@i+1,w,c
  6552  00220C  E111               	bnz	i2l3138
  6553  00220E  0E06               	movlw	6
  6554  002210  5C06               	subwf	i2get_time@i,w,c
  6555  002212  B0D8               	btfsc	status,0,c
  6556  002214  D00D               	goto	i2l3138
  6557  002216                     i2l3132:
  6558                           
  6559                           ;time.c: 37: datime[i] = I2C_Master_Read(1);
  6560  002216  5006               	movf	i2get_time@i,w,c
  6561  002218  2404               	addwf	i2get_time@datime,w,c
  6562  00221A  6ED9               	movwf	fsr2l,c
  6563  00221C  5007               	movf	i2get_time@i+1,w,c
  6564  00221E  2005               	addwfc	i2get_time@datime+1,w,c
  6565  002220  6EDA               	movwf	fsr2h,c
  6566  002222  0E01               	movlw	1
  6567  002224  EC08  F013         	call	i2_I2C_Master_Read
  6568  002228  6EDF               	movwf	indf2,c
  6569  00222A  4A06               	infsnz	i2get_time@i,f,c
  6570  00222C  2A07               	incf	i2get_time@i+1,f,c
  6571  00222E  D7EB               	goto	i2l3128
  6572  002230                     i2l3138:
  6573                           
  6574                           ;time.c: 38: }
  6575                           ;time.c: 39: datime[6] = I2C_Master_Read(0);
  6576  002230  EE20 F006          	lfsr	2,6
  6577  002234  5004               	movf	i2get_time@datime,w,c
  6578  002236  26D9               	addwf	fsr2l,f,c
  6579  002238  5005               	movf	i2get_time@datime+1,w,c
  6580  00223A  22DA               	addwfc	fsr2h,f,c
  6581  00223C  0E00               	movlw	0
  6582  00223E  EC08  F013         	call	i2_I2C_Master_Read
  6583  002242  6EDF               	movwf	indf2,c
  6584                           
  6585                           ;time.c: 40: I2C_Master_Stop();
  6586  002244  EC66  F013         	call	i2_I2C_Master_Stop	;wreg free
  6587  002248  0012               	return		;funcret
  6588  00224A                     __end_ofi2_get_time:
  6589                           	opt stack 0
  6590                           pclatu	equ	0xFFB
  6591                           pclath	equ	0xFFA
  6592                           tblptru	equ	0xFF8
  6593                           tblptrh	equ	0xFF7
  6594                           tblptrl	equ	0xFF6
  6595                           tablat	equ	0xFF5
  6596                           prodh	equ	0xFF4
  6597                           prodl	equ	0xFF3
  6598                           intcon	equ	0xFF2
  6599                           intcon3	equ	0xFF0
  6600                           postinc0	equ	0xFEE
  6601                           fsr0h	equ	0xFEA
  6602                           fsr0l	equ	0xFE9
  6603                           wreg	equ	0xFE8
  6604                           fsr1h	equ	0xFE2
  6605                           fsr1l	equ	0xFE1
  6606                           indf2	equ	0xFDF
  6607                           postinc2	equ	0xFDE
  6608                           postdec2	equ	0xFDD
  6609                           fsr2h	equ	0xFDA
  6610                           fsr2l	equ	0xFD9
  6611                           status	equ	0xFD8
  6612                           
  6613 ;; *************** function i2_I2C_Master_Write *****************
  6614 ;; Defined at:
  6615 ;;		line 47 in file "I2C.c"
  6616 ;; Parameters:    Size  Location     Type
  6617 ;;  d               2    1[COMRAM] unsigned int 
  6618 ;; Auto vars:     Size  Location     Type
  6619 ;;		None
  6620 ;; Return value:  Size  Location     Type
  6621 ;;                  1    wreg      void 
  6622 ;; Registers used:
  6623 ;;		wreg, status,2, status,0, cstack
  6624 ;; Tracked objects:
  6625 ;;		On entry : 0/0
  6626 ;;		On exit  : 0/0
  6627 ;;		Unchanged: 0/0
  6628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6629 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6632 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6633 ;;Total ram usage:        2 bytes
  6634 ;; Hardware stack levels used:    1
  6635 ;; Hardware stack levels required when called:    1
  6636 ;; This function calls:
  6637 ;;		i2_I2C_Master_Wait
  6638 ;; This function is called by:
  6639 ;;		i2_get_time
  6640 ;; This function uses a non-reentrant model
  6641 ;;
  6642                           
  6643                           	psect	text37
  6644  0026B2                     __ptext37:
  6645                           	opt stack 0
  6646  0026B2                     i2_I2C_Master_Write:
  6647                           	opt stack 22
  6648                           
  6649                           ;I2C.c: 49: I2C_Master_Wait();
  6650                           
  6651                           ;incstack = 0
  6652  0026B2  EC33  F013         	call	i2_I2C_Master_Wait	;wreg free
  6653                           
  6654                           ;I2C.c: 50: SSPBUF = d;
  6655  0026B6  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
  6656  0026BA  0012               	return		;funcret
  6657  0026BC                     __end_ofi2_I2C_Master_Write:
  6658                           	opt stack 0
  6659                           pclatu	equ	0xFFB
  6660                           pclath	equ	0xFFA
  6661                           tblptru	equ	0xFF8
  6662                           tblptrh	equ	0xFF7
  6663                           tblptrl	equ	0xFF6
  6664                           tablat	equ	0xFF5
  6665                           prodh	equ	0xFF4
  6666                           prodl	equ	0xFF3
  6667                           intcon	equ	0xFF2
  6668                           intcon3	equ	0xFF0
  6669                           postinc0	equ	0xFEE
  6670                           fsr0h	equ	0xFEA
  6671                           fsr0l	equ	0xFE9
  6672                           wreg	equ	0xFE8
  6673                           fsr1h	equ	0xFE2
  6674                           fsr1l	equ	0xFE1
  6675                           indf2	equ	0xFDF
  6676                           postinc2	equ	0xFDE
  6677                           postdec2	equ	0xFDD
  6678                           fsr2h	equ	0xFDA
  6679                           fsr2l	equ	0xFD9
  6680                           status	equ	0xFD8
  6681                           
  6682 ;; *************** function i2_I2C_Master_Stop *****************
  6683 ;; Defined at:
  6684 ;;		line 41 in file "I2C.c"
  6685 ;; Parameters:    Size  Location     Type
  6686 ;;		None
  6687 ;; Auto vars:     Size  Location     Type
  6688 ;;		None
  6689 ;; Return value:  Size  Location     Type
  6690 ;;                  1    wreg      void 
  6691 ;; Registers used:
  6692 ;;		wreg, status,2, status,0, cstack
  6693 ;; Tracked objects:
  6694 ;;		On entry : 0/0
  6695 ;;		On exit  : 0/0
  6696 ;;		Unchanged: 0/0
  6697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6701 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6702 ;;Total ram usage:        0 bytes
  6703 ;; Hardware stack levels used:    1
  6704 ;; Hardware stack levels required when called:    1
  6705 ;; This function calls:
  6706 ;;		i2_I2C_Master_Wait
  6707 ;; This function is called by:
  6708 ;;		i2_get_time
  6709 ;; This function uses a non-reentrant model
  6710 ;;
  6711                           
  6712                           	psect	text38
  6713  0026CC                     __ptext38:
  6714                           	opt stack 0
  6715  0026CC                     i2_I2C_Master_Stop:
  6716                           	opt stack 22
  6717                           
  6718                           ;I2C.c: 43: I2C_Master_Wait();
  6719                           
  6720                           ;incstack = 0
  6721  0026CC  EC33  F013         	call	i2_I2C_Master_Wait	;wreg free
  6722                           
  6723                           ;I2C.c: 44: PEN = 1;
  6724  0026D0  84C5               	bsf	4037,2,c	;volatile
  6725  0026D2  0012               	return		;funcret
  6726  0026D4                     __end_ofi2_I2C_Master_Stop:
  6727                           	opt stack 0
  6728                           pclatu	equ	0xFFB
  6729                           pclath	equ	0xFFA
  6730                           tblptru	equ	0xFF8
  6731                           tblptrh	equ	0xFF7
  6732                           tblptrl	equ	0xFF6
  6733                           tablat	equ	0xFF5
  6734                           prodh	equ	0xFF4
  6735                           prodl	equ	0xFF3
  6736                           intcon	equ	0xFF2
  6737                           intcon3	equ	0xFF0
  6738                           postinc0	equ	0xFEE
  6739                           fsr0h	equ	0xFEA
  6740                           fsr0l	equ	0xFE9
  6741                           wreg	equ	0xFE8
  6742                           fsr1h	equ	0xFE2
  6743                           fsr1l	equ	0xFE1
  6744                           indf2	equ	0xFDF
  6745                           postinc2	equ	0xFDE
  6746                           postdec2	equ	0xFDD
  6747                           fsr2h	equ	0xFDA
  6748                           fsr2l	equ	0xFD9
  6749                           status	equ	0xFD8
  6750                           
  6751 ;; *************** function i2_I2C_Master_Start *****************
  6752 ;; Defined at:
  6753 ;;		line 29 in file "I2C.c"
  6754 ;; Parameters:    Size  Location     Type
  6755 ;;		None
  6756 ;; Auto vars:     Size  Location     Type
  6757 ;;		None
  6758 ;; Return value:  Size  Location     Type
  6759 ;;                  1    wreg      void 
  6760 ;; Registers used:
  6761 ;;		wreg, status,2, status,0, cstack
  6762 ;; Tracked objects:
  6763 ;;		On entry : 0/0
  6764 ;;		On exit  : 0/0
  6765 ;;		Unchanged: 0/0
  6766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6770 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6771 ;;Total ram usage:        0 bytes
  6772 ;; Hardware stack levels used:    1
  6773 ;; Hardware stack levels required when called:    1
  6774 ;; This function calls:
  6775 ;;		i2_I2C_Master_Wait
  6776 ;; This function is called by:
  6777 ;;		i2_get_time
  6778 ;; This function uses a non-reentrant model
  6779 ;;
  6780                           
  6781                           	psect	text39
  6782  0026D4                     __ptext39:
  6783                           	opt stack 0
  6784  0026D4                     i2_I2C_Master_Start:
  6785                           	opt stack 22
  6786                           
  6787                           ;I2C.c: 31: I2C_Master_Wait();
  6788                           
  6789                           ;incstack = 0
  6790  0026D4  EC33  F013         	call	i2_I2C_Master_Wait	;wreg free
  6791                           
  6792                           ;I2C.c: 32: SEN = 1;
  6793  0026D8  80C5               	bsf	4037,0,c	;volatile
  6794  0026DA  0012               	return		;funcret
  6795  0026DC                     __end_ofi2_I2C_Master_Start:
  6796                           	opt stack 0
  6797                           pclatu	equ	0xFFB
  6798                           pclath	equ	0xFFA
  6799                           tblptru	equ	0xFF8
  6800                           tblptrh	equ	0xFF7
  6801                           tblptrl	equ	0xFF6
  6802                           tablat	equ	0xFF5
  6803                           prodh	equ	0xFF4
  6804                           prodl	equ	0xFF3
  6805                           intcon	equ	0xFF2
  6806                           intcon3	equ	0xFF0
  6807                           postinc0	equ	0xFEE
  6808                           fsr0h	equ	0xFEA
  6809                           fsr0l	equ	0xFE9
  6810                           wreg	equ	0xFE8
  6811                           fsr1h	equ	0xFE2
  6812                           fsr1l	equ	0xFE1
  6813                           indf2	equ	0xFDF
  6814                           postinc2	equ	0xFDE
  6815                           postdec2	equ	0xFDD
  6816                           fsr2h	equ	0xFDA
  6817                           fsr2l	equ	0xFD9
  6818                           status	equ	0xFD8
  6819                           
  6820 ;; *************** function i2_I2C_Master_Read *****************
  6821 ;; Defined at:
  6822 ;;		line 53 in file "I2C.c"
  6823 ;; Parameters:    Size  Location     Type
  6824 ;;  a               1    wreg     unsigned char 
  6825 ;; Auto vars:     Size  Location     Type
  6826 ;;  a               1    1[COMRAM] unsigned char 
  6827 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
  6828 ;; Return value:  Size  Location     Type
  6829 ;;                  1    wreg      unsigned char 
  6830 ;; Registers used:
  6831 ;;		wreg, status,2, status,0, cstack
  6832 ;; Tracked objects:
  6833 ;;		On entry : 0/0
  6834 ;;		On exit  : 0/0
  6835 ;;		Unchanged: 0/0
  6836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6838 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6840 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6841 ;;Total ram usage:        2 bytes
  6842 ;; Hardware stack levels used:    1
  6843 ;; Hardware stack levels required when called:    1
  6844 ;; This function calls:
  6845 ;;		i2_I2C_Master_Wait
  6846 ;; This function is called by:
  6847 ;;		i2_get_time
  6848 ;; This function uses a non-reentrant model
  6849 ;;
  6850                           
  6851                           	psect	text40
  6852  002610                     __ptext40:
  6853                           	opt stack 0
  6854  002610                     i2_I2C_Master_Read:
  6855                           	opt stack 22
  6856                           
  6857                           ;incstack = 0
  6858                           ;i2I2C_Master_Read@a stored from wreg
  6859  002610  6E02               	movwf	i2I2C_Master_Read@a,c
  6860                           
  6861                           ;I2C.c: 55: unsigned char temp;
  6862                           ;I2C.c: 56: I2C_Master_Wait();
  6863  002612  EC33  F013         	call	i2_I2C_Master_Wait	;wreg free
  6864                           
  6865                           ;I2C.c: 57: RCEN = 1;
  6866  002616  86C5               	bsf	4037,3,c	;volatile
  6867                           
  6868                           ;I2C.c: 58: I2C_Master_Wait();
  6869  002618  EC33  F013         	call	i2_I2C_Master_Wait	;wreg free
  6870                           
  6871                           ;I2C.c: 59: temp = SSPBUF;
  6872  00261C  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
  6873                           
  6874                           ;I2C.c: 60: I2C_Master_Wait();
  6875  002620  EC33  F013         	call	i2_I2C_Master_Wait	;wreg free
  6876                           
  6877                           ;I2C.c: 61: ACKDT = (a)?0:1;
  6878  002624  5002               	movf	i2I2C_Master_Read@a,w,c
  6879  002626  A4D8               	btfss	status,2,c
  6880  002628  D002               	goto	i2u243_40
  6881  00262A  8AC5               	bsf	4037,5,c	;volatile
  6882  00262C  D001               	goto	i2l2922
  6883  00262E                     i2u243_40:
  6884  00262E  9AC5               	bcf	4037,5,c	;volatile
  6885  002630                     i2l2922:
  6886                           
  6887                           ;I2C.c: 62: ACKEN = 1;
  6888  002630  88C5               	bsf	4037,4,c	;volatile
  6889                           
  6890                           ;I2C.c: 63: return temp;
  6891  002632  5003               	movf	i2I2C_Master_Read@temp,w,c
  6892  002634  0012               	return	
  6893  002636                     __end_ofi2_I2C_Master_Read:
  6894                           	opt stack 0
  6895                           pclatu	equ	0xFFB
  6896                           pclath	equ	0xFFA
  6897                           tblptru	equ	0xFF8
  6898                           tblptrh	equ	0xFF7
  6899                           tblptrl	equ	0xFF6
  6900                           tablat	equ	0xFF5
  6901                           prodh	equ	0xFF4
  6902                           prodl	equ	0xFF3
  6903                           intcon	equ	0xFF2
  6904                           intcon3	equ	0xFF0
  6905                           postinc0	equ	0xFEE
  6906                           fsr0h	equ	0xFEA
  6907                           fsr0l	equ	0xFE9
  6908                           wreg	equ	0xFE8
  6909                           fsr1h	equ	0xFE2
  6910                           fsr1l	equ	0xFE1
  6911                           indf2	equ	0xFDF
  6912                           postinc2	equ	0xFDE
  6913                           postdec2	equ	0xFDD
  6914                           fsr2h	equ	0xFDA
  6915                           fsr2l	equ	0xFD9
  6916                           status	equ	0xFD8
  6917                           
  6918 ;; *************** function i2_I2C_Master_Wait *****************
  6919 ;; Defined at:
  6920 ;;		line 24 in file "I2C.c"
  6921 ;; Parameters:    Size  Location     Type
  6922 ;;		None
  6923 ;; Auto vars:     Size  Location     Type
  6924 ;;		None
  6925 ;; Return value:  Size  Location     Type
  6926 ;;                  1    wreg      void 
  6927 ;; Registers used:
  6928 ;;		wreg, status,2, status,0
  6929 ;; Tracked objects:
  6930 ;;		On entry : 0/0
  6931 ;;		On exit  : 0/0
  6932 ;;		Unchanged: 0/0
  6933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6936 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6937 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6938 ;;Total ram usage:        1 bytes
  6939 ;; Hardware stack levels used:    1
  6940 ;; This function calls:
  6941 ;;		Nothing
  6942 ;; This function is called by:
  6943 ;;		i2_I2C_Master_Start
  6944 ;;		i2_I2C_Master_Stop
  6945 ;;		i2_I2C_Master_Write
  6946 ;;		i2_I2C_Master_Read
  6947 ;; This function uses a non-reentrant model
  6948 ;;
  6949                           
  6950                           	psect	text41
  6951  002666                     __ptext41:
  6952                           	opt stack 0
  6953  002666                     i2_I2C_Master_Wait:
  6954                           	opt stack 22
  6955  002666                     i2l34:
  6956  002666  B4C7               	btfsc	4039,2,c	;volatile
  6957  002668  D7FE               	goto	i2l34
  6958  00266A  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
  6959  00266E  0E1F               	movlw	31
  6960  002670  1601               	andwf	??i2_I2C_Master_Wait,f,c
  6961  002672  B4D8               	btfsc	status,2,c
  6962  002674  0012               	return	
  6963  002676  D7F7               	goto	i2l34
  6964  002678                     __end_ofi2_I2C_Master_Wait:
  6965                           	opt stack 0
  6966                           pclatu	equ	0xFFB
  6967                           pclath	equ	0xFFA
  6968                           tblptru	equ	0xFF8
  6969                           tblptrh	equ	0xFF7
  6970                           tblptrl	equ	0xFF6
  6971                           tablat	equ	0xFF5
  6972                           prodh	equ	0xFF4
  6973                           prodl	equ	0xFF3
  6974                           intcon	equ	0xFF2
  6975                           intcon3	equ	0xFF0
  6976                           postinc0	equ	0xFEE
  6977                           fsr0h	equ	0xFEA
  6978                           fsr0l	equ	0xFE9
  6979                           wreg	equ	0xFE8
  6980                           fsr1h	equ	0xFE2
  6981                           fsr1l	equ	0xFE1
  6982                           indf2	equ	0xFDF
  6983                           postinc2	equ	0xFDE
  6984                           postdec2	equ	0xFDD
  6985                           fsr2h	equ	0xFDA
  6986                           fsr2l	equ	0xFD9
  6987                           status	equ	0xFD8
  6988                           pclatu	equ	0xFFB
  6989                           pclath	equ	0xFFA
  6990                           tblptru	equ	0xFF8
  6991                           tblptrh	equ	0xFF7
  6992                           tblptrl	equ	0xFF6
  6993                           tablat	equ	0xFF5
  6994                           prodh	equ	0xFF4
  6995                           prodl	equ	0xFF3
  6996                           intcon	equ	0xFF2
  6997                           intcon3	equ	0xFF0
  6998                           postinc0	equ	0xFEE
  6999                           fsr0h	equ	0xFEA
  7000                           fsr0l	equ	0xFE9
  7001                           wreg	equ	0xFE8
  7002                           fsr1h	equ	0xFE2
  7003                           fsr1l	equ	0xFE1
  7004                           indf2	equ	0xFDF
  7005                           postinc2	equ	0xFDE
  7006                           postdec2	equ	0xFDD
  7007                           fsr2h	equ	0xFDA
  7008                           fsr2l	equ	0xFD9
  7009                           status	equ	0xFD8
  7010                           
  7011                           	psect	rparam
  7012  0000                     pclatu	equ	0xFFB
  7013                           pclath	equ	0xFFA
  7014                           tblptru	equ	0xFF8
  7015                           tblptrh	equ	0xFF7
  7016                           tblptrl	equ	0xFF6
  7017                           tablat	equ	0xFF5
  7018                           prodh	equ	0xFF4
  7019                           prodl	equ	0xFF3
  7020                           intcon	equ	0xFF2
  7021                           intcon3	equ	0xFF0
  7022                           postinc0	equ	0xFEE
  7023                           fsr0h	equ	0xFEA
  7024                           fsr0l	equ	0xFE9
  7025                           wreg	equ	0xFE8
  7026                           fsr1h	equ	0xFE2
  7027                           fsr1l	equ	0xFE1
  7028                           indf2	equ	0xFDF
  7029                           postinc2	equ	0xFDE
  7030                           postdec2	equ	0xFDD
  7031                           fsr2h	equ	0xFDA
  7032                           fsr2l	equ	0xFD9
  7033                           status	equ	0xFD8
  7034                           
  7035                           	psect	temp
  7036  000069                     btemp:
  7037                           	opt stack 0
  7038  000069                     	ds	1
  7039  0000                     int$flags	set	btemp
  7040                           pclatu	equ	0xFFB
  7041                           pclath	equ	0xFFA
  7042                           tblptru	equ	0xFF8
  7043                           tblptrh	equ	0xFF7
  7044                           tblptrl	equ	0xFF6
  7045                           tablat	equ	0xFF5
  7046                           prodh	equ	0xFF4
  7047                           prodl	equ	0xFF3
  7048                           intcon	equ	0xFF2
  7049                           intcon3	equ	0xFF0
  7050                           postinc0	equ	0xFEE
  7051                           fsr0h	equ	0xFEA
  7052                           fsr0l	equ	0xFE9
  7053                           wreg	equ	0xFE8
  7054                           fsr1h	equ	0xFE2
  7055                           fsr1l	equ	0xFE1
  7056                           indf2	equ	0xFDF
  7057                           postinc2	equ	0xFDE
  7058                           postdec2	equ	0xFDD
  7059                           fsr2h	equ	0xFDA
  7060                           fsr2l	equ	0xFD9
  7061                           status	equ	0xFD8


Data Sizes:
    Strings     167
    Constant    42
    Data        0
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     75     104
    BANK0           128     32      67
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_15(CODE[16]), STR_14(CODE[15]), STR_13(CODE[15]), STR_12(CODE[3]), 
		 -> STR_11(CODE[20]), STR_10(CODE[16]), STR_9(CODE[15]), STR_8(CODE[15]), 
		 -> STR_7(CODE[10]), STR_6(CODE[15]), STR_5(CODE[7]), STR_4(CODE[21]), 
		 -> STR_3(CODE[13]), STR_2(CODE[9]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    get_time@datime	PTR unsigned char  size(2) Largest target is 7
		 -> start_time(BANK0[7]), end_time(COMRAM[7]), 


Critical Paths under _main in COMRAM

    _main->_sort
    _welcome->_printf
    _sort->_readLightSensor
    _sense_can->_main_servo_control
    _sense_can->_side_servo_control
    _readLightSensor->_printf
    _move_can->_main_servo_control
    _move_can->_side_servo_control
    _initPIC->_I2C_Master_Init
    _initLCD->_lcdInst
    _I2C_Master_Init->___lldiv
    _display_time->_printf
    _display_sorting_time->_printf
    _debug->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _get_time->_I2C_Master_Read
    _get_time->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait

Critical Paths under _interrupt_handler in COMRAM

    _interrupt_handler->i2_get_time
    i2_putch->i2_lcdNibble
    i2_lcdInst->i2_lcdNibble
    i2_get_time->i2_I2C_Master_Read
    i2_get_time->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_display_sorting_time

Critical Paths under _interrupt_handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interrupt_handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interrupt_handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interrupt_handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interrupt_handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interrupt_handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interrupt_handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interrupt_handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interrupt_handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interrupt_handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interrupt_handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   44798
                              _debug
               _display_sorting_time
                       _display_time
                            _initPIC
                               _sort
                            _welcome
 ---------------------------------------------------------------------------------
 (1) _welcome                                              2     2      0    4570
                                             56 COMRAM     2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _sort                                                10    10      0   18675
                                             65 COMRAM    10    10      0
                               _gate
                           _get_time
                            _lcdInst
                 _main_servo_control
                           _move_can
                             _printf
                    _readLightSensor
                          _sense_can
                             _shaker
                 _side_servo_control
 ---------------------------------------------------------------------------------
 (2) _shaker                                               3     3      0      47
                                             22 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _sense_can                                           19    17      2    2893
                                             27 COMRAM    19    17      2
                 _main_servo_control
                            _readADC
                 _side_servo_control
 ---------------------------------------------------------------------------------
 (2) _readLightSensor                                      9     7      2    4697
                                             56 COMRAM     9     7      2
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _readADC                                              2     2      0      22
                                             22 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _move_can                                            12    10      2    2792
                                             27 COMRAM    12    10      2
                 _main_servo_control
                 _side_servo_control
 ---------------------------------------------------------------------------------
 (2) _gate                                                 3     3      0       0
                                             22 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initPIC                                              0     0      0    3674
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                 _main_servo_control
                 _side_servo_control
 ---------------------------------------------------------------------------------
 (2) _side_servo_control                                   5     3      2    1356
                                             22 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (3) _main_servo_control                                   5     3      2    1100
                                             22 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     195
                                             25 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     376
                                             35 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     290
                                             22 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _display_time                                         3     3      0    5381
                                             56 COMRAM     3     3      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _display_sorting_time                                36    36      0    6782
                                             56 COMRAM     4     4      0
                                              0 BANK0     32    32      0
                             ___wmul
                           _get_time
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _debug                                                0     0      0    5716
                           _get_time
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    4375
                                             34 COMRAM    22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     195
                                             24 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             22 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     540
                                             22 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                             29 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     549
                                             22 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     195
                                             24 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     164
                                             22 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _get_time                                             4     2      2    1146
                                             25 COMRAM     4     2      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2     647
                                             23 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      65
                                             23 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                             22 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _interrupt_handler                                   15    15      0     664
                                              7 COMRAM    15    15      0
                         i2_get_time
                          i2_lcdInst
                            i2_putch
 ---------------------------------------------------------------------------------
 (7) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) i2_get_time                                           4     2      2     283
                                              3 COMRAM     4     2      2
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Write                                   2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _debug
     _get_time
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _display_sorting_time
     ___wmul
     _get_time
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _display_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _initPIC
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _initLCD
       _lcdInst
         _lcdNibble
     _main_servo_control
     _side_servo_control
   _sort
     _gate
     _get_time
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _main_servo_control
     _move_can
       _main_servo_control
       _side_servo_control
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _readLightSensor
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _readADC
     _sense_can
       _main_servo_control
       _readADC
       _side_servo_control
     _shaker
     _side_servo_control
   _welcome
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble

 _interrupt_handler (ROOT)
   i2_get_time
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait
   i2_lcdInst
     i2_lcdNibble
   i2_putch
     i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     20      43       5       52.3%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     4B      68       1       82.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AB      34        0.0%
DATA                 0      0      AB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Apr 10 06:40:14 2017

                i2_I2C_Master_Start 26D4                  i2_I2C_Master_Write 26B2  
                                l34 2654                 ___wmul@multiplicand 0019  
                       __CFG_BORV$3 000000                        __CFG_CP0$OFF 000000  
                      __CFG_CP1$OFF 000000                        __CFG_CP2$OFF 000000  
                      __CFG_CP3$OFF 000000                         __CFG_OSC$HS 000000  
                   _readLightSensor 1F1E                                 l134 2598  
                               l320 23B6                                 l161 15D8  
                               l323 23DE                                 l404 226A  
                               l406 22AC                                 l239 1B70  
                               l282 1EFE                                 l274 1E64  
                               l284 1F1C                                 l292 1DCA  
                               l278 1EB4                  _side_servo_control 1D56  
                               l296 1E14                                 l288 1D7A  
                               l298 1E3E                                 l492 11C0  
                               l937 244E                                 l947 256C  
                               l884 20C2                        __CFG_CPB$OFF 000000  
                               _PEN 007E2A                        __CFG_CPD$OFF 000000  
                               _SEN 007E28                       ?_display_time 0001  
               ?i2_I2C_Master_Start 0001                 ?i2_I2C_Master_Write 0002  
      __end_of_display_sorting_time 1A86                                 prod 000FF3  
                               wreg 000FE8                    sense_can@cansize 0021  
                       _total_count 0053                 ?_side_servo_control 0017  
                      __CFG_LVP$OFF 000000                        __CFG_WDT$OFF 000000  
                              l2322 1E94                                l2340 1EEE  
                              l2326 1EA4                                l3304 260A  
                              l3320 10EE                                l2336 1EDC  
                              l2600 1486                                l3410 12D4  
                              l3402 12B6                                l3322 10FC  
                              l2530 2080                                l3500 219A  
                              l3252 241C                                l3236 264C  
                              l3404 12BE                                l3340 118E  
                              l3332 1130                                l3316 10DE  
                              l2540 20B4                                l2532 2084  
                              l2364 1DAA                                l3254 2424  
                              l3430 1362                                l3422 1306  
                              l3326 1102                                l2382 1E04  
                              l2702 163A                                l2630 150A  
                              l3264 2444                                l3256 2428  
                              l3280 2562                                l3272 2542  
                              l3440 13BE                                l3416 12EA  
                              l3360 1208                                l3344 1192  
                              l2528 2074                                l2368 1DBA  
                              l2624 14F2                                l3506 21B4  
                              l3274 254A                                l3418 12F2  
                              l3426 1318                                l3362 120C  
                              l3442 13C6                                l2378 1DF2  
                              l2802 170E                                l2714 1670  
                              l2642 1540                                l2626 14FA  
                              l3610 1AEE                                l3276 254E  
                              l3428 131E                                l3436 13A8  
                              l3356 11EE                                l2900 2400  
                              l2812 175C                                l2804 1728  
                              l3460 1F30                                l2708 1660  
                              l2660 1572                                l2636 1530  
                              l2572 1400                                l3438 13B8  
                              l3374 1238                                l3390 1268  
                              l2726 1690                                l2718 1676  
                              l2670 15A8                                l2654 1560  
                              l2646 1546                                l2590 145C  
                              l2582 1436                                l3622 1B50  
                              l3702 24E0                                l3376 123C  
                              l3392 1278                                l3640 1902  
                              l3560 1B98                                l2824 179A  
                              l2816 176C                                l3480 1FA0  
                              l3472 1F6C                                l2680 15BE  
                              l2664 1582                                l2576 1410  
                              l2834 17EA                                l2826 17B4  
                              l3466 1F5C                                l2658 156A  
                              l2586 1444                                l2594 1462  
                              l3554 214A                                l3652 198A  
                              l3636 18EC                                l3564 1BAC  
                              l2860 1888                                l2676 15B8  
                        i2_get_time 21CE                                l3398 1292  
                              l3646 196A                                l3574 1BD0  
                              l2846 1828                                l2838 17FA  
                              l2790 16D0                                l3478 1F90  
                              l3496 218A                                l3664 1A56  
                              l3648 1974                                l3568 1BB4  
                              l3592 1C62                                l2856 1878  
                              l2848 1842                                l3488 1FBA  
                              l2872 225A                                l3658 19F2  
                              l2794 16E0                                l2698 162A  
                              l3690 24B8                                l2868 18B6  
                              l2894 23D8                                l3694 24C4  
                              l3686 24AC                                l3698 24D2  
                              _ADON 007E10                                STR_1 10CF  
                              STR_2 10BC                                STR_3 1087  
                              STR_4 102B                                STR_5 10C5  
                              STR_6 1085                                STR_7 10B2  
                              STR_8 1094                                STR_9 10A3  
                              u2010 1454                                u2100 1556  
                              u2200 1686                                _LATA 000F89  
                              u2150 15CE                                _LATB 000F8A  
                              _LATC 000F8B                                u1520 1E62  
                              _LATD 000F8C                                _LATE 000F8D  
                              u1610 1D78                                u3080 1FB0  
                              u3307 2274                                u3317 2288  
                              u3407 178A                                u3327 229C  
                              u2800 2608                                u3417 17D4  
                              u3337 146C                                u3507 1D94  
                              u3427 1818                                u3347 14B2  
                              u3517 1DD2                                u3437 1862  
                              u3357 15FC                                u3277 20EA  
                              u3607 1F0E                                u3527 1DE4  
                              u3447 18A6                                u3367 1F84  
                              u3287 1AAE                                u3617 24F4  
                              u3537 1E1C                                u3457 23BE  
                              u3377 16BA                                u3297 1B60  
                              u3627 2528                                u3547 1E2E  
                              u3467 23CE                                u3387 16FE  
                              u3637 1B8A                                u3557 1E6C  
                              u3477 23E6                                u3397 1746  
                              u3647 1C4E                                u1975 22DC  
                              u3567 1E7E                                u3487 23F6  
                              u3657 1A76                                u3577 1EBC  
                              u3497 1D82                                u3667 2320  
                              u3587 1ECC                                _RCEN 007E2B  
                              u3677 232A                                u3597 1F02  
                              u3687 234C                                u3697 2356  
                              i2l34 2666                                _RSEN 007E29  
                              _gate 23B4                                _main 24A8  
                              _mode 0061                                _keys 1001  
                              _time 004C                                fsr0h 000FEA  
                              fsr1h 000FE2                                fsr2h 000FDA  
                              fsr0l 000FE9                                indf2 000FDF  
                              fsr1l 000FE1                                fsr2l 000FD9  
                              _sort 1A86                                btemp 0069  
              ??i2_I2C_Master_Start 0002                ??i2_I2C_Master_Write 0004  
                              prodh 000FF4                                prodl 000FF3  
                              start 000E                       __CFG_IESO$OFF 000000  
                   __end_ofi2_putch 269C                       __CFG_MCLRE$ON 000000  
                      ___param_bank 000000                ??_side_servo_control 0019  
                       i2_lcdNibble 235E                    ?_I2C_Master_Init 0024  
                  ?_I2C_Master_Read 0001                    ?_I2C_Master_Wait 0001  
                  ?_I2C_Master_Stop 0001                               ?_gate 0001  
                             ?_main 0001                               _ACKEN 007E2C  
                             _ACKDT 007E2D                      ??_display_time 0039  
                             STR_10 1065                               STR_11 1040  
                             STR_12 10CC                               STR_13 1094  
                             STR_14 10A3                               STR_15 1075  
                             STR_16 1054                               ?_sort 0001  
                   __end_of___lldiv 20D4                     __end_of___lwdiv 2458  
                   __end_of___lwmod 2576                               _PORTB 000F81  
                             _TRISA 000F92                               _TRISB 000F93  
                             _TRISC 000F94                               _TRISD 000F95  
                             _TRISE 000F96                       __CFG_PWRT$OFF 000000  
                     __CFG_WRT0$OFF 000000                       __CFG_WRT1$OFF 000000  
                     __CFG_WRT2$OFF 000000                       __CFG_WRT3$OFF 000000  
                   __end_of_lcdInst 2690                      __CFG_EBTR0$OFF 000000  
                    __CFG_FCMEN$OFF 000000                      __CFG_EBTR1$OFF 000000  
                    __CFG_EBTR2$OFF 000000                      __CFG_EBTR3$OFF 000000  
                     __CFG_WRTB$OFF 000000                       __CFG_WRTC$OFF 000000  
                     __CFG_WRTD$OFF 000000                     __end_of_readADC 259E  
                   __end_of_initLCD 2534                      __CFG_EBTRB$OFF 000000  
                             _debug 2458                     __end_of_initPIC 2052  
                   __end_of_dpowers 101C                     __end_of_isdigit 2654  
                             _putch 2678                               pclath 000FFA  
                             tablat 000FF5                     __end_of_welcome 2152  
                             status 000FD8                      __CFG_PBADEN$ON 000000  
                   __initialization 259E                        __end_of_gate 2406  
                __size_ofi2_lcdInst 000C             __end_of_readLightSensor 1FC4  
                      __end_of_main 24EE                        __end_of_keys 1012  
                      __end_of_sort 1B7A  display_sorting_time@int_start_time 00B1  
             main_servo_control@dir 0017                              ??_gate 0017  
                            ??_main 004C                              ??_sort 0042  
                     __activetblptr 000002                         i2get_time@i 0006  
                 ?_I2C_Master_Start 0001                   ?_I2C_Master_Write 0018  
                            ?_debug 0001                  ??_I2C_Master_Start 0018  
                            _ADCON0 000FC2                              _ADCON1 000FC1  
                ??_I2C_Master_Write 001A                              _ADCON2 000FC0  
                            _ADRESH 000FC4                     i2lcdNibble@data 0002  
                       ?i2_get_time 0004                              ?_putch 0001  
                   i2lcdNibble@temp 0001                              _INT1IE 007F83  
                            _INT1IF 007F80                              i2l3200 1D18  
                            i2l3132 2216                              i2l3128 2206  
                            i2l3138 2230                              i2l3180 1CDA  
                            i2l3192 1D02                              i2l3186 1CEA  
                            i2l3196 1D0C                              i2l2922 2630  
                         ??i2_putch 0003                    i2get_time@datime 0004  
                            _SSPADD 000FC8                              _TRISC3 007CA3  
                            _TRISC4 007CA4                              _SSPBUF 000FC9  
                    __CFG_XINST$OFF 000000                _display_sorting_time 18D0  
                  __end_of_get_time 21CE                              ___wmul 25C4  
                    __CFG_STVREN$ON 000000          __end_of_main_servo_control 1F1E  
                         ??___lldiv 001F                           ??___lwdiv 001B  
                         ??___lwmod 0022                              clear_0 25A4  
                            clear_1 25B0                              _shaker 224A  
                         ??_lcdInst 0019                              _printf 10D4  
                         ??_readADC 0017                           ??_initLCD 001A  
                         ??_initPIC 002C                    __end_of_move_can 18D0  
                         ??_isdigit 0017                        __mediumconst 0000  
                            tblptrh 000FF7                              tblptrl 000FF6  
                            tblptru 000FF8                           ??_welcome 0039  
                     display_time@i 003B                   __end_ofi2_lcdInst 26A8  
                  readLightSensor@i 003E                          __accesstop 0080  
           __end_of__initialization 25B6                __end_of_display_time 1C6A  
                     ___rparam_used 000001               ?_display_sorting_time 0001  
                    __pcstackCOMRAM 0001                    ?_readLightSensor 0039  
                     __end_of_debug 24A8                       __end_of_putch 2684  
               __size_ofi2_get_time 007C              sense_can@conductOnFall 0023  
               main_servo_control@i 001A                  __size_of_lcdNibble 0056  
                       i2putch@data 0003                             ??_debug 0039  
                           ??_putch 0019                          __pbssBANK0 0080  
                    _soup_can_label 0057                        ?i2_lcdNibble 0001  
                           ?___wmul 0017                      get_time@datime 001A  
                           ?_shaker 0001                             ?_printf 0023  
                __size_of_sense_can 02BA                 side_servo_control@i 001A  
                           _SSPCON1 000FC6                             _SSPCON2 000FC5  
                           _SSPSTAT 000FC7                           ?_get_time 001A  
                           i2_putch 2690              ??_display_sorting_time 0039  
       __size_ofi2_I2C_Master_Start 0008                   __end_of_lcdNibble 235E  
       __size_ofi2_I2C_Master_Write 000A                             __Hparam 0000  
                         ?_move_can 001C                             __Lparam 0000  
       __size_of_side_servo_control 00EA                             ___lldiv 2052  
                   __size_of___wmul 0026                             ___lwdiv 2406  
                           ___lwmod 2534                        __psmallconst 1000  
                           __pcinit 259E                             __ramtop 1000  
                   __size_of_shaker 0064                             _lcdInst 2684  
                           __ptext0 24A8                             __ptext1 20D4  
                           __ptext2 1A86                             __ptext3 224A  
                           __ptext4 13E0                             __ptext5 1F1E  
                           __ptext6 2576                             __ptext7 169A  
                           __ptext8 23B4                             __ptext9 1FC4  
                   __size_of_printf 030C                             _readADC 2576  
                           _initLCD 24EE                   __end_of_hexpowers 1024  
                           _initPIC 1FC4                             _dpowers 1012  
                           _isdigit 2636            __size_of_I2C_Master_Init 005A  
          __size_of_I2C_Master_Read 0026            __size_of_I2C_Master_Wait 0012  
          __size_of_I2C_Master_Stop 0008                             _welcome 20D4  
                      ??i2_get_time 0006                          ??_get_time 001C  
                    __pintcode_body 1C6A               __size_of_display_time 00F0  
              end_of_initialization 25B6                     move_can@canType 001C  
                     __Lmediumconst 0000                             int_func 1C6A  
                 __end_of_sense_can 169A                             shaker@i 0018  
         __size_of_I2C_Master_Start 0008           __size_of_I2C_Master_Write 000A  
                   ___lldiv@divisor 001B                     ___lldiv@counter 0023  
                        ??_move_can 001E                             printf@c 0038  
                           printf@f 0023                    I2C_Master_Init@c 0024  
                  I2C_Master_Read@a 0018                             postdec2 000FDD  
                        _timeSetter 1024                             postinc0 000FEE  
                           postinc2 000FDE                             sort@can 004A  
                           sort@tap 0044                             sort@tin 0046  
                __end_ofi2_get_time 224A                           _PORTBbits 000F81  
             side_servo_control@dir 0017                        _display_time 1B7A  
         display_sorting_time@i_497 00C1                      sense_can@H_max 002D  
                _main_servo_control 1E40                      sense_can@i_350 0027  
                    sense_can@i_351 0029                      sense_can@i_352 002B  
                 i2_I2C_Master_Read 2610                   i2_I2C_Master_Wait 2666  
                 i2_I2C_Master_Stop 26CC                      _pop_can_no_tap 0059  
                ?i2_I2C_Master_Read 0001                  ?i2_I2C_Master_Wait 0001  
                ?i2_I2C_Master_Stop 0001                          _start_time 009C  
               ?_main_servo_control 0017                           i2_lcdInst 269C  
                       printf@width 0036                 ??i2_I2C_Master_Read 0002  
               ??i2_I2C_Master_Wait 0001                 ??i2_I2C_Master_Stop 0002  
                    __end_of___wmul 25EA                __size_ofi2_lcdNibble 0056  
              ??_main_servo_control 0019                       i2lcdInst@data 0003  
                    __end_of_shaker 22AE                      __end_of_printf 13E0  
         __end_ofi2_I2C_Master_Read 2636           __end_ofi2_I2C_Master_Wait 2678  
               start_initialization 259E           __end_ofi2_I2C_Master_Stop 26D4  
             i2I2C_Master_Read@temp 0003                   ??_I2C_Master_Init 0028  
                 ??_I2C_Master_Read 0018                         sort@noLabel 0048  
                 ??_I2C_Master_Wait 0017                          ?i2_lcdInst 0001  
                 ??_I2C_Master_Stop 0018                            ??___wmul 001B  
                     move_can@i_640 0024                       move_can@i_641 0026  
                     move_can@i_639 0022                    __CFG_LPT1OSC$OFF 000000  
                          ??_shaker 0017                            ??_printf 002B  
                 _soup_can_no_label 0055            __size_of_readLightSensor 00A6  
                       __pbssCOMRAM 004C                       __pcstackBANK0 00A3  
                      _isdigit$1080 0018                            ?i2_putch 0001  
                 __size_of_get_time 007C                    _I2C_Master_Start 26C4  
               i2I2C_Master_Write@d 0002                    _I2C_Master_Write 26A8  
                  ___lwdiv@dividend 0017                   __CFG_CCP2MX$PORTC 000000  
                         __pintcode 0008           interrupt_handler@keypress 0016  
                      _int_end_time 008E                           _lcdNibble 2308  
                 __size_of_move_can 0236                            ?___lldiv 0017  
                          ?___lwdiv 0017                            ?___lwmod 001E  
                          ?_lcdInst 0001                   _interrupt_handler 0008  
                          ?_readADC 0001                            ?_initLCD 0001  
                          ?_initPIC 0001                         __smallconst 1000  
                          ?_isdigit 0001          __size_ofi2_I2C_Master_Read 0026  
        __size_ofi2_I2C_Master_Wait 0012          __size_ofi2_I2C_Master_Stop 0008  
                ?_interrupt_handler 0001                            ?_welcome 0001  
                         _hexpowers 101C                    ___lwdiv@quotient 001C  
                    __size_of_debug 0050                      __size_of_putch 000C  
               ??_interrupt_handler 0008          __end_ofi2_I2C_Master_Start 26DC  
        __end_ofi2_I2C_Master_Write 26BC                         ??i2_lcdInst 0003  
                        sense_can@i 0025                      ___wmul@product 001B  
                          _LATAbits 000F89                            _LATBbits 000F8A  
                          _LATCbits 000F8B                            _LATDbits 000F8C  
                          _LATEbits 000F8D          __end_of_side_servo_control 1E40  
     __size_of_display_sorting_time 01B6                            i2u243_40 262E  
                          i2u370_47 2376                            i2u371_47 2380  
                          i2u372_47 23A2                            i2u373_47 23AC  
                         _sense_can 13E0                    __CFG_WDTPS$32768 000000  
                        ?_lcdNibble 0001                         _displayFlag 005D  
         __end_of_interrupt_handler 1D56                          _ADCON0bits 000FC2  
                 ___wmul@multiplier 0017                       lcdNibble@data 0018  
                        printf@flag 0035                       lcdNibble@temp 0017  
                        printf@prec 0032                           get_time@i 001C  
               I2C_Master_Read@temp 0019                   ??_readLightSensor 003B  
                  __size_ofi2_putch 000C                            __Hrparam 0000  
                          __Lrparam 0000                          ?_sense_can 001C  
                __CFG_BOREN$SBORDIS 000000                    __size_of___lldiv 0082  
                  __size_of___lwdiv 0052                    __size_of___lwmod 0042  
                    readADC@channel 0018                  i2I2C_Master_Read@a 0002  
                  __size_of_lcdInst 000C                     _I2C_Master_Init 22AE  
                  __size_of_readADC 0028                     _I2C_Master_Read 25EA  
                  __size_of_initLCD 0046                    __size_of_initPIC 008E  
                   _I2C_Master_Wait 2654                     _I2C_Master_Stop 26BC  
                  __size_of_isdigit 001E                     ___lwdiv@divisor 0019  
                   ___lwdiv@counter 001B                            __ptext10 1D56  
                          __ptext11 1E40                            __ptext20 2636  
                          __ptext12 24EE                            __ptext21 25C4  
                          __ptext13 22AE                            __ptext30 25EA  
                          __ptext22 2534                            __ptext14 2052  
                          __ptext31 2654                            __ptext23 2406  
                          __ptext15 1B7A                            __ptext40 2610  
                          __ptext24 2684                            __ptext16 18D0  
                          __ptext41 2666                            __ptext33 2690  
                          __ptext25 2308                            __ptext17 2458  
                          __ptext34 269C                            __ptext26 2152  
                          __ptext18 10D4                            __ptext35 235E  
                          __ptext27 26A8                            __ptext19 2678  
                          __ptext36 21CE                            __ptext28 26BC  
                          __ptext37 26B2                            __ptext29 26C4  
                          __ptext38 26CC                            __ptext39 26D4  
                    _int_start_time 0080                            _end_time 0062  
                  __size_of_welcome 007E                            _get_time 2152  
                         move_can@i 0020                       __size_of_gate 0052  
                     __size_of_main 0046                readLightSensor@H_max 0040  
                     __size_of_sort 00F4                            _move_can 169A  
                     ??i2_lcdNibble 0001                         ??_lcdNibble 0017  
                          int$flags 0069                         _passed_time 005F  
                         printf@idx 002F                           printf@val 0033  
        __size_of_interrupt_handler 1D4E         __size_of_main_servo_control 00DE  
                         putch@data 0019            __end_of_I2C_Master_Start 26CC  
          __end_of_I2C_Master_Write 26B2                          _INTCONbits 000FF2  
                          isdigit@c 0019                            intlevel2 0000  
                __end_of_timeSetter 102B                    ___lwmod@dividend 001E  
                  ___lldiv@dividend 0017               display_sorting_time@i 00BF  
                       ??_sense_can 001E                         _pop_can_tap 005B  
                          printf@ap 0030             __end_of_I2C_Master_Init 2308  
           __end_of_I2C_Master_Read 2610             __end_of_I2C_Master_Wait 2666  
           __end_of_I2C_Master_Stop 26C4                         lcdInst@data 0019  
  display_sorting_time@int_end_time 00A3                 __end_ofi2_lcdNibble 23B4  
                  ___lldiv@quotient 001F                   I2C_Master_Write@d 0018  
                   ___lwmod@divisor 0020                     ___lwmod@counter 0022  
