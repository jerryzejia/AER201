

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sun Apr  9 03:59:46 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1
    40                           	psect	text30,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    53                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    54                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    55  0000                     
    56                           ; Version 1.41
    57                           ; Generated 25/01/2017 GMT
    58                           ; 
    59                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    60                           ; All rights reserved.
    61                           ; 
    62                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    63                           ; 
    64                           ; Redistribution and use in source and binary forms, with or without modification, are
    65                           ; permitted provided that the following conditions are met:
    66                           ; 
    67                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    68                           ;        conditions and the following disclaimer.
    69                           ; 
    70                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    71                           ;        of conditions and the following disclaimer in the documentation and/or other
    72                           ;        materials provided with the distribution.
    73                           ; 
    74                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    75                           ;        software without specific prior written permission.
    76                           ; 
    77                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    78                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    79                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    80                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    81                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    82                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    83                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    84                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    85                           ; 
    86                           ; 
    87                           ; Code-generator required, PIC18F4620 Definitions
    88                           ; 
    89                           ; SFR Addresses
    90  0000                     
    91                           	psect	smallconst
    92  001000                     __psmallconst:
    93                           	opt stack 0
    94  001000  00                 	db	0
    95  001001                     _keys:
    96                           	opt stack 0
    97  001001  31                 	db	49
    98  001002  32                 	db	50
    99  001003  33                 	db	51
   100  001004  41                 	db	65
   101  001005  34                 	db	52
   102  001006  35                 	db	53
   103  001007  36                 	db	54
   104  001008  42                 	db	66
   105  001009  37                 	db	55
   106  00100A  38                 	db	56
   107  00100B  39                 	db	57
   108  00100C  43                 	db	67
   109  00100D  2A                 	db	42
   110  00100E  30                 	db	48
   111  00100F  23                 	db	35
   112  001010  44                 	db	68
   113  001011  00                 	db	0
   114  001012                     __end_of_keys:
   115                           	opt stack 0
   116  001012                     _dpowers:
   117                           	opt stack 0
   118  001012  0001               	dw	1
   119  001014  000A               	dw	10
   120  001016  0064               	dw	100
   121  001018  03E8               	dw	1000
   122  00101A  2710               	dw	10000
   123  00101C                     __end_of_dpowers:
   124                           	opt stack 0
   125  00101C                     _hexpowers:
   126                           	opt stack 0
   127  00101C  0001               	dw	1
   128  00101E  0010               	dw	16
   129  001020  0100               	dw	256
   130  001022  1000               	dw	4096
   131  001024                     __end_of_hexpowers:
   132                           	opt stack 0
   133  001024                     _timeSetter:
   134                           	opt stack 0
   135  001024  00                 	db	0
   136  001025  19                 	db	25
   137  001026  15                 	db	21
   138  001027  04                 	db	4
   139  001028  25                 	db	37
   140  001029  01                 	db	1
   141  00102A  17                 	db	23
   142  00102B                     __end_of_timeSetter:
   143                           	opt stack 0
   144  0000                     _PORTB	set	3969
   145  0000                     _LATBbits	set	3978
   146  0000                     _INTCONbits	set	4082
   147  0000                     _ADCON2	set	4032
   148  0000                     _ADCON1	set	4033
   149  0000                     _LATE	set	3981
   150  0000                     _LATC	set	3979
   151  0000                     _LATB	set	3978
   152  0000                     _LATA	set	3977
   153  0000                     _TRISE	set	3990
   154  0000                     _TRISB	set	3987
   155  0000                     _TRISD	set	3989
   156  0000                     _TRISC	set	3988
   157  0000                     _TRISA	set	3986
   158  0000                     _PORTBbits	set	3969
   159  0000                     _LATAbits	set	3977
   160  0000                     _LATEbits	set	3981
   161  0000                     _ADRESL	set	4035
   162  0000                     _LATCbits	set	3979
   163  0000                     _ADRESH	set	4036
   164  0000                     _ADCON0bits	set	4034
   165  0000                     _ADCON0	set	4034
   166  0000                     _LATD	set	3980
   167  0000                     _LATDbits	set	3980
   168  0000                     _SSPBUF	set	4041
   169  0000                     _SSPADD	set	4040
   170  0000                     _SSPCON2	set	4037
   171  0000                     _SSPCON1	set	4038
   172  0000                     _SSPSTAT	set	4039
   173  0000                     _INT1IF	set	32640
   174  0000                     _INT1IE	set	32643
   175  0000                     _ADON	set	32272
   176  0000                     _ACKEN	set	32300
   177  0000                     _ACKDT	set	32301
   178  0000                     _RCEN	set	32299
   179  0000                     _PEN	set	32298
   180  0000                     _RSEN	set	32297
   181  0000                     _SEN	set	32296
   182  0000                     _TRISC4	set	31908
   183  0000                     _TRISC3	set	31907
   184  00102B                     STR_4:
   185  00102B  32                 	db	50	;'2'
   186  00102C  20                 	db	32
   187  00102D  42                 	db	66	;'B'
   188  00102E  61                 	db	97	;'a'
   189  00102F  63                 	db	99	;'c'
   190  001030  6B                 	db	107	;'k'
   191  001031  20                 	db	32
   192  001032  74                 	db	116	;'t'
   193  001033  6F                 	db	111	;'o'
   194  001034  20                 	db	32
   195  001035  73                 	db	115	;'s'
   196  001036  74                 	db	116	;'t'
   197  001037  61                 	db	97	;'a'
   198  001038  72                 	db	114	;'r'
   199  001039  74                 	db	116	;'t'
   200  00103A  20                 	db	32
   201  00103B  6D                 	db	109	;'m'
   202  00103C  65                 	db	101	;'e'
   203  00103D  6E                 	db	110	;'n'
   204  00103E  75                 	db	117	;'u'
   205  00103F  00                 	db	0
   206  001040                     STR_10:
   207  001040  50                 	db	80	;'P'
   208  001041  72                 	db	114	;'r'
   209  001042  65                 	db	101	;'e'
   210  001043  73                 	db	115	;'s'
   211  001044  73                 	db	115	;'s'
   212  001045  20                 	db	32
   213  001046  31                 	db	49	;'1'
   214  001047  2F                 	db	47
   215  001048  32                 	db	50	;'2'
   216  001049  2F                 	db	47
   217  00104A  41                 	db	65	;'A'
   218  00104B  20                 	db	32
   219  00104C  74                 	db	116	;'t'
   220  00104D  6F                 	db	111	;'o'
   221  00104E  20                 	db	32
   222  00104F  73                 	db	115	;'s'
   223  001050  74                 	db	116	;'t'
   224  001051  6F                 	db	111	;'o'
   225  001052  70                 	db	112	;'p'
   226  001053  00                 	db	0
   227  001054                     STR_15:
   228  001054  30                 	db	48	;'0'
   229  001055  31                 	db	49	;'1'
   230  001056  32                 	db	50	;'2'
   231  001057  33                 	db	51	;'3'
   232  001058  34                 	db	52	;'4'
   233  001059  35                 	db	53	;'5'
   234  00105A  36                 	db	54	;'6'
   235  00105B  37                 	db	55	;'7'
   236  00105C  38                 	db	56	;'8'
   237  00105D  39                 	db	57	;'9'
   238  00105E  61                 	db	97	;'a'
   239  00105F  62                 	db	98	;'b'
   240  001060  63                 	db	99	;'c'
   241  001061  64                 	db	100	;'d'
   242  001062  65                 	db	101	;'e'
   243  001063  66                 	db	102	;'f'
   244  001064  00                 	db	0
   245  001065                     STR_9:
   246  001065  53                 	db	83	;'S'
   247  001066  6F                 	db	111	;'o'
   248  001067  72                 	db	114	;'r'
   249  001068  74                 	db	116	;'t'
   250  001069  69                 	db	105	;'i'
   251  00106A  6E                 	db	110	;'n'
   252  00106B  67                 	db	103	;'g'
   253  00106C  20                 	db	32
   254  00106D  53                 	db	83	;'S'
   255  00106E  74                 	db	116	;'t'
   256  00106F  61                 	db	97	;'a'
   257  001070  72                 	db	114	;'r'
   258  001071  74                 	db	116	;'t'
   259  001072  65                 	db	101	;'e'
   260  001073  64                 	db	100	;'d'
   261  001074  00                 	db	0
   262  001075                     STR_14:
   263  001075  54                 	db	84	;'T'
   264  001076  69                 	db	105	;'i'
   265  001077  6D                 	db	109	;'m'
   266  001078  65                 	db	101	;'e'
   267  001079  20                 	db	32
   268  00107A  75                 	db	117	;'u'
   269  00107B  73                 	db	115	;'s'
   270  00107C  65                 	db	101	;'e'
   271  00107D  64                 	db	100	;'d'
   272  00107E  3A                 	db	58	;':'
   273  00107F  20                 	db	32
   274  001080  25                 	db	37
   275  001081  64                 	db	100	;'d'
   276  001082  20                 	db	32
   277  001083  73                 	db	115	;'s'
   278  001084  00                 	db	0
   279  001085                     STR_6:
   280  001085  20                 	db	32
   281  001086  20                 	db	32
   282  001087  20                 	db	32
   283  001088  20                 	db	32
   284  001089  20                 	db	32
   285  00108A  20                 	db	32
   286  00108B  20                 	db	32
   287  00108C  20                 	db	32
   288  00108D  20                 	db	32
   289  00108E  20                 	db	32
   290  00108F  20                 	db	32
   291  001090  20                 	db	32
   292  001091  20                 	db	32
   293  001092  20                 	db	32
   294  001093  00                 	db	0
   295  001094                     STR_12:
   296  001094  25                 	db	37
   297  001095  30                 	db	48	;'0'
   298  001096  32                 	db	50	;'2'
   299  001097  78                 	db	120	;'x'
   300  001098  2F                 	db	47
   301  001099  25                 	db	37
   302  00109A  30                 	db	48	;'0'
   303  00109B  32                 	db	50	;'2'
   304  00109C  78                 	db	120	;'x'
   305  00109D  2F                 	db	47
   306  00109E  25                 	db	37
   307  00109F  30                 	db	48	;'0'
   308  0010A0  32                 	db	50	;'2'
   309  0010A1  78                 	db	120	;'x'
   310  0010A2  00                 	db	0
   311  0010A3                     STR_13:
   312  0010A3  25                 	db	37
   313  0010A4  30                 	db	48	;'0'
   314  0010A5  32                 	db	50	;'2'
   315  0010A6  78                 	db	120	;'x'
   316  0010A7  3A                 	db	58	;':'
   317  0010A8  25                 	db	37
   318  0010A9  30                 	db	48	;'0'
   319  0010AA  32                 	db	50	;'2'
   320  0010AB  78                 	db	120	;'x'
   321  0010AC  3A                 	db	58	;':'
   322  0010AD  25                 	db	37
   323  0010AE  30                 	db	48	;'0'
   324  0010AF  32                 	db	50	;'2'
   325  0010B0  78                 	db	120	;'x'
   326  0010B1  00                 	db	0
   327  0010B2                     STR_7:
   328  0010B2  41                 	db	65	;'A'
   329  0010B3  20                 	db	32
   330  0010B4  53                 	db	83	;'S'
   331  0010B5  6F                 	db	111	;'o'
   332  0010B6  72                 	db	114	;'r'
   333  0010B7  74                 	db	116	;'t'
   334  0010B8  69                 	db	105	;'i'
   335  0010B9  6E                 	db	110	;'n'
   336  0010BA  67                 	db	103	;'g'
   337  0010BB  00                 	db	0
   338  0010BC                     STR_2:
   339  0010BC  57                 	db	87	;'W'
   340  0010BD  65                 	db	101	;'e'
   341  0010BE  6C                 	db	108	;'l'
   342  0010BF  63                 	db	99	;'c'
   343  0010C0  6F                 	db	111	;'o'
   344  0010C1  6D                 	db	109	;'m'
   345  0010C2  65                 	db	101	;'e'
   346  0010C3  21                 	db	33
   347  0010C4  00                 	db	0
   348  0010C5                     STR_5:
   349  0010C5  31                 	db	49	;'1'
   350  0010C6  20                 	db	32
   351  0010C7  54                 	db	84	;'T'
   352  0010C8  69                 	db	105	;'i'
   353  0010C9  6D                 	db	109	;'m'
   354  0010CA  65                 	db	101	;'e'
   355  0010CB  00                 	db	0
   356  0010CC                     STR_8:
   357  0010CC  25                 	db	37
   358  0010CD  78                 	db	120	;'x'
   359  0010CE  20                 	db	32
   360  0010CF  25                 	db	37
   361  0010D0  78                 	db	120	;'x'
   362  0010D1  00                 	db	0
   363  0010D2                     STR_11:
   364  0010D2  25                 	db	37
   365  0010D3  64                 	db	100	;'d'
   366  0010D4  00                 	db	0
   367  0000                     
   368                           ; #config settings
   369  0010D5  00                 	db	0	; dummy byte at the end
   370  0000                     
   371                           	psect	cinit
   372  00219A                     __pcinit:
   373                           	opt stack 0
   374  00219A                     start_initialization:
   375                           	opt stack 0
   376  00219A                     __initialization:
   377                           	opt stack 0
   378                           
   379                           ; Clear objects allocated to COMRAM (35 bytes)
   380  00219A  EE00  F044         	lfsr	0,__pbssCOMRAM
   381  00219E  0E23               	movlw	35
   382  0021A0                     clear_0:
   383  0021A0  6AEE               	clrf	postinc0,c
   384  0021A2  06E8               	decf	wreg,f,c
   385  0021A4  E1FD               	bnz	clear_0
   386  0021A6                     end_of_initialization:
   387                           	opt stack 0
   388  0021A6                     __end_of__initialization:
   389                           	opt stack 0
   390  0021A6  9067               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   391  0021A8  9267               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   392  0021AA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   393  0021AC  6EF8               	movwf	tblptru,c
   394  0021AE  0100               	movlb	0
   395  0021B0  EFEA  F00F         	goto	_main	;jump to C main() function
   396                           tblptru	equ	0xFF8
   397                           postinc0	equ	0xFEE
   398                           wreg	equ	0xFE8
   399                           
   400                           	psect	bssCOMRAM
   401  000044                     __pbssCOMRAM:
   402                           	opt stack 0
   403  000044                     _time:
   404                           	opt stack 0
   405  000044                     	ds	7
   406  00004B                     _total_count:
   407                           	opt stack 0
   408  00004B                     	ds	2
   409  00004D                     _soup_can_no_label:
   410                           	opt stack 0
   411  00004D                     	ds	2
   412  00004F                     _soup_can_label:
   413                           	opt stack 0
   414  00004F                     	ds	2
   415  000051                     _pop_can_no_tap:
   416                           	opt stack 0
   417  000051                     	ds	2
   418  000053                     _pop_can_tap:
   419                           	opt stack 0
   420  000053                     	ds	2
   421  000055                     _flag:
   422                           	opt stack 0
   423  000055                     	ds	2
   424  000057                     _passed_time:
   425                           	opt stack 0
   426  000057                     	ds	1
   427  000058                     _mode:
   428                           	opt stack 0
   429  000058                     	ds	1
   430  000059                     _end_time:
   431                           	opt stack 0
   432  000059                     	ds	7
   433  000060                     _start_time:
   434                           	opt stack 0
   435  000060                     	ds	7
   436                           tblptru	equ	0xFF8
   437                           postinc0	equ	0xFEE
   438                           wreg	equ	0xFE8
   439                           
   440                           	psect	cstackBANK0
   441  000080                     __pcstackBANK0:
   442                           	opt stack 0
   443  000080                     ??_sort:
   444                           
   445                           ; 1 bytes @ 0x0
   446  000080                     	ds	2
   447  000082                     sort@tap:
   448                           	opt stack 0
   449                           
   450                           ; 2 bytes @ 0x2
   451  000082                     	ds	2
   452  000084                     sort@tin:
   453                           	opt stack 0
   454                           
   455                           ; 2 bytes @ 0x4
   456  000084                     	ds	2
   457  000086                     sort@noLabel:
   458                           	opt stack 0
   459                           
   460                           ; 2 bytes @ 0x6
   461  000086                     	ds	2
   462  000088                     sort@can:
   463                           	opt stack 0
   464                           
   465                           ; 2 bytes @ 0x8
   466  000088                     	ds	2
   467  00008A                     sort@x:
   468                           	opt stack 0
   469                           
   470                           ; 2 bytes @ 0xA
   471  00008A                     	ds	2
   472                           tblptru	equ	0xFF8
   473                           postinc0	equ	0xFEE
   474                           wreg	equ	0xFE8
   475                           
   476                           	psect	cstackCOMRAM
   477  000001                     __pcstackCOMRAM:
   478                           	opt stack 0
   479  000001                     ??i2_I2C_Master_Wait:
   480  000001                     i2lcdNibble@temp:
   481                           	opt stack 0
   482                           
   483                           ; 1 bytes @ 0x0
   484  000001                     	ds	1
   485  000002                     i2I2C_Master_Read@a:
   486                           	opt stack 0
   487  000002                     i2lcdNibble@data:
   488                           	opt stack 0
   489  000002                     i2I2C_Master_Write@d:
   490                           	opt stack 0
   491                           
   492                           ; 2 bytes @ 0x1
   493  000002                     	ds	1
   494  000003                     i2I2C_Master_Read@temp:
   495                           	opt stack 0
   496  000003                     i2lcdInst@data:
   497                           	opt stack 0
   498  000003                     i2putch@data:
   499                           	opt stack 0
   500                           
   501                           ; 1 bytes @ 0x2
   502  000003                     	ds	1
   503  000004                     i2get_time@datime:
   504                           	opt stack 0
   505                           
   506                           ; 2 bytes @ 0x3
   507  000004                     	ds	2
   508  000006                     ??i2_get_time:
   509                           
   510                           ; 1 bytes @ 0x5
   511  000006                     	ds	1
   512  000007                     i2get_time@i:
   513                           	opt stack 0
   514                           
   515                           ; 2 bytes @ 0x6
   516  000007                     	ds	2
   517  000009                     ??_interrupt_handler:
   518                           
   519                           ; 1 bytes @ 0x8
   520  000009                     	ds	15
   521  000018                     interrupt_handler@keypress:
   522                           	opt stack 0
   523                           
   524                           ; 1 bytes @ 0x17
   525  000018                     	ds	1
   526  000019                     ??_shaker:
   527  000019                     ??_gate:
   528  000019                     ??_isdigit:
   529  000019                     ??_I2C_Master_Wait:
   530  000019                     ??_readADC:
   531  000019                     ?___wmul:
   532                           	opt stack 0
   533  000019                     ?___lwdiv:
   534                           	opt stack 0
   535  000019                     ?___lldiv:
   536                           	opt stack 0
   537  000019                     lcdNibble@temp:
   538                           	opt stack 0
   539  000019                     main_servo_control@dir:
   540                           	opt stack 0
   541  000019                     side_servo_control@dir:
   542                           	opt stack 0
   543  000019                     ___wmul@multiplier:
   544                           	opt stack 0
   545  000019                     ___lwdiv@dividend:
   546                           	opt stack 0
   547  000019                     ___lldiv@dividend:
   548                           	opt stack 0
   549                           
   550                           ; 4 bytes @ 0x18
   551  000019                     	ds	1
   552  00001A                     I2C_Master_Read@a:
   553                           	opt stack 0
   554  00001A                     lcdNibble@data:
   555                           	opt stack 0
   556  00001A                     readADC@channel:
   557                           	opt stack 0
   558  00001A                     _isdigit$1039:
   559                           	opt stack 0
   560  00001A                     I2C_Master_Write@d:
   561                           	opt stack 0
   562  00001A                     shaker@i:
   563                           	opt stack 0
   564                           
   565                           ; 2 bytes @ 0x19
   566  00001A                     	ds	1
   567  00001B                     ??_main_servo_control:
   568  00001B                     ??_side_servo_control:
   569  00001B                     ?_sense_can:
   570                           	opt stack 0
   571  00001B                     I2C_Master_Read@temp:
   572                           	opt stack 0
   573  00001B                     lcdInst@data:
   574                           	opt stack 0
   575  00001B                     putch@data:
   576                           	opt stack 0
   577  00001B                     isdigit@c:
   578                           	opt stack 0
   579  00001B                     ___wmul@multiplicand:
   580                           	opt stack 0
   581  00001B                     ___lwdiv@divisor:
   582                           	opt stack 0
   583                           
   584                           ; 2 bytes @ 0x1A
   585  00001B                     	ds	1
   586  00001C                     ??_initLCD:
   587  00001C                     main_servo_control@i:
   588                           	opt stack 0
   589  00001C                     get_time@datime:
   590                           	opt stack 0
   591                           
   592                           ; 2 bytes @ 0x1B
   593  00001C                     	ds	1
   594  00001D                     ??_sense_can:
   595  00001D                     ___lwdiv@counter:
   596                           	opt stack 0
   597  00001D                     side_servo_control@i:
   598                           	opt stack 0
   599  00001D                     ___wmul@product:
   600                           	opt stack 0
   601  00001D                     ___lldiv@divisor:
   602                           	opt stack 0
   603                           
   604                           ; 4 bytes @ 0x1C
   605  00001D                     	ds	1
   606  00001E                     ??_get_time:
   607  00001E                     ___lwdiv@quotient:
   608                           	opt stack 0
   609                           
   610                           ; 2 bytes @ 0x1D
   611  00001E                     	ds	1
   612  00001F                     get_time@i:
   613                           	opt stack 0
   614                           
   615                           ; 2 bytes @ 0x1E
   616  00001F                     	ds	1
   617  000020                     ?___lwmod:
   618                           	opt stack 0
   619  000020                     sense_can@H_max:
   620                           	opt stack 0
   621  000020                     ___lwmod@dividend:
   622                           	opt stack 0
   623                           
   624                           ; 2 bytes @ 0x1F
   625  000020                     	ds	1
   626  000021                     ___lldiv@quotient:
   627                           	opt stack 0
   628                           
   629                           ; 4 bytes @ 0x20
   630  000021                     	ds	1
   631  000022                     sense_can@i:
   632                           	opt stack 0
   633  000022                     ___lwmod@divisor:
   634                           	opt stack 0
   635                           
   636                           ; 2 bytes @ 0x21
   637  000022                     	ds	2
   638  000024                     ___lwmod@counter:
   639                           	opt stack 0
   640                           
   641                           ; 1 bytes @ 0x23
   642  000024                     	ds	1
   643  000025                     ?_printf:
   644                           	opt stack 0
   645  000025                     ___lldiv@counter:
   646                           	opt stack 0
   647  000025                     printf@f:
   648                           	opt stack 0
   649                           
   650                           ; 2 bytes @ 0x24
   651  000025                     	ds	1
   652  000026                     I2C_Master_Init@c:
   653                           	opt stack 0
   654                           
   655                           ; 4 bytes @ 0x25
   656  000026                     	ds	4
   657  00002A                     ??_I2C_Master_Init:
   658                           
   659                           ; 1 bytes @ 0x29
   660  00002A                     	ds	3
   661  00002D                     ??_printf:
   662                           
   663                           ; 1 bytes @ 0x2C
   664  00002D                     	ds	1
   665  00002E                     
   666                           ; 1 bytes @ 0x2D
   667  00002E                     	ds	3
   668  000031                     printf@idx:
   669                           	opt stack 0
   670                           
   671                           ; 1 bytes @ 0x30
   672  000031                     	ds	1
   673  000032                     printf@ap:
   674                           	opt stack 0
   675                           
   676                           ; 2 bytes @ 0x31
   677  000032                     	ds	2
   678  000034                     printf@prec:
   679                           	opt stack 0
   680                           
   681                           ; 1 bytes @ 0x33
   682  000034                     	ds	1
   683  000035                     printf@val:
   684                           	opt stack 0
   685                           
   686                           ; 2 bytes @ 0x34
   687  000035                     	ds	2
   688  000037                     printf@flag:
   689                           	opt stack 0
   690                           
   691                           ; 1 bytes @ 0x36
   692  000037                     	ds	1
   693  000038                     printf@width:
   694                           	opt stack 0
   695                           
   696                           ; 2 bytes @ 0x37
   697  000038                     	ds	2
   698  00003A                     printf@c:
   699                           	opt stack 0
   700                           
   701                           ; 1 bytes @ 0x39
   702  00003A                     	ds	1
   703  00003B                     ??_welcome:
   704  00003B                     ??_display_time:
   705  00003B                     ??_display_sorting_time:
   706  00003B                     ??_debug:
   707  00003B                     ?_readLightSensor:
   708                           	opt stack 0
   709                           
   710                           ; 2 bytes @ 0x3A
   711  00003B                     	ds	1
   712  00003C                     debug@i:
   713                           	opt stack 0
   714                           
   715                           ; 2 bytes @ 0x3B
   716  00003C                     	ds	1
   717  00003D                     ??_readLightSensor:
   718  00003D                     display_time@i:
   719                           	opt stack 0
   720  00003D                     display_sorting_time@i:
   721                           	opt stack 0
   722                           
   723                           ; 2 bytes @ 0x3C
   724  00003D                     	ds	3
   725  000040                     readLightSensor@i:
   726                           	opt stack 0
   727                           
   728                           ; 2 bytes @ 0x3F
   729  000040                     	ds	2
   730  000042                     readLightSensor@H_max:
   731                           	opt stack 0
   732                           
   733                           ; 2 bytes @ 0x41
   734  000042                     	ds	2
   735  000044                     tblptru	equ	0xFF8
   736                           postinc0	equ	0xFEE
   737                           wreg	equ	0xFE8
   738                           
   739                           ; 1 bytes @ 0x43
   740 ;;
   741 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   742 ;;
   743 ;; *************** function _main *****************
   744 ;; Defined at:
   745 ;;		line 21 in file "main.c"
   746 ;; Parameters:    Size  Location     Type
   747 ;;		None
   748 ;; Auto vars:     Size  Location     Type
   749 ;;		None
   750 ;; Return value:  Size  Location     Type
   751 ;;                  1    wreg      void 
   752 ;; Registers used:
   753 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   754 ;; Tracked objects:
   755 ;;		On entry : 0/0
   756 ;;		On exit  : 0/0
   757 ;;		Unchanged: 0/0
   758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   762 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   763 ;;Total ram usage:        0 bytes
   764 ;; Hardware stack levels required when called:    9
   765 ;; This function calls:
   766 ;;		_debug
   767 ;;		_display_sorting_time
   768 ;;		_display_time
   769 ;;		_initPIC
   770 ;;		_sort
   771 ;;		_welcome
   772 ;; This function is called by:
   773 ;;		Startup code after reset
   774 ;; This function uses a non-reentrant model
   775 ;;
   776                           
   777                           	psect	text0
   778  001FD4                     __ptext0:
   779                           	opt stack 0
   780  001FD4                     _main:
   781                           	opt stack 22
   782                           
   783                           ;main.c: 22: initPIC();
   784                           
   785                           ;incstack = 0
   786  001FD4  ECAF  F00D         	call	_initPIC	;wreg free
   787  001FD8                     l3451:
   788                           
   789                           ;main.c: 24: if (mode == 0) {
   790  001FD8  5058               	movf	_mode,w,c
   791  001FDA  A4D8               	btfss	status,2,c
   792  001FDC  D003               	goto	l3455
   793                           
   794                           ;main.c: 25: welcome();
   795  001FDE  EC77  F00E         	call	_welcome	;wreg free
   796                           
   797                           ;main.c: 27: } else if (mode == 1) {
   798  001FE2  D7FA               	goto	l3451
   799  001FE4                     l3455:
   800  001FE4  0458               	decf	_mode,w,c
   801  001FE6  A4D8               	btfss	status,2,c
   802  001FE8  D003               	goto	l3459
   803                           
   804                           ;main.c: 28: display_time();
   805  001FEA  ECA5  F00B         	call	_display_time	;wreg free
   806                           
   807                           ;main.c: 29: }
   808  001FEE  D7F4               	goto	l3451
   809  001FF0                     l3459:
   810                           
   811                           ;main.c: 31: else if (mode == 2) {
   812  001FF0  0E02               	movlw	2
   813  001FF2  1858               	xorwf	_mode,w,c
   814  001FF4  A4D8               	btfss	status,2,c
   815  001FF6  D003               	goto	l3463
   816                           
   817                           ;main.c: 32: sort();
   818  001FF8  ECF1  F009         	call	_sort	;wreg free
   819                           
   820                           ;main.c: 33: }
   821  001FFC  D7ED               	goto	l3451
   822  001FFE                     l3463:
   823                           
   824                           ;main.c: 35: else if (mode == 3) {
   825  001FFE  0E03               	movlw	3
   826  002000  1858               	xorwf	_mode,w,c
   827  002002  A4D8               	btfss	status,2,c
   828  002004  D003               	goto	l3467
   829                           
   830                           ;main.c: 36: display_sorting_time();
   831  002006  EC15  F00F         	call	_display_sorting_time	;wreg free
   832                           
   833                           ;main.c: 37: }
   834  00200A  D7E6               	goto	l3451
   835  00200C                     l3467:
   836                           
   837                           ;main.c: 39: else if (mode == 99) {
   838  00200C  0E63               	movlw	99
   839  00200E  1858               	xorwf	_mode,w,c
   840  002010  A4D8               	btfss	status,2,c
   841  002012  D7E2               	goto	l3451
   842                           
   843                           ;main.c: 40: debug();
   844  002014  EC51  F010         	call	_debug	;wreg free
   845  002018  D7DF               	goto	l3451
   846  00201A                     __end_of_main:
   847                           	opt stack 0
   848                           tblptru	equ	0xFF8
   849                           postinc0	equ	0xFEE
   850                           wreg	equ	0xFE8
   851                           status	equ	0xFD8
   852                           
   853 ;; *************** function _welcome *****************
   854 ;; Defined at:
   855 ;;		line 20 in file "picState.c"
   856 ;; Parameters:    Size  Location     Type
   857 ;;		None
   858 ;; Auto vars:     Size  Location     Type
   859 ;;		None
   860 ;; Return value:  Size  Location     Type
   861 ;;                  2   86[None  ] int 
   862 ;; Registers used:
   863 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   864 ;; Tracked objects:
   865 ;;		On entry : 0/0
   866 ;;		On exit  : 0/0
   867 ;;		Unchanged: 0/0
   868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   871 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   872 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   873 ;;Total ram usage:        2 bytes
   874 ;; Hardware stack levels used:    1
   875 ;; Hardware stack levels required when called:    7
   876 ;; This function calls:
   877 ;;		_lcdInst
   878 ;;		_printf
   879 ;; This function is called by:
   880 ;;		_main
   881 ;; This function uses a non-reentrant model
   882 ;;
   883                           
   884                           	psect	text1
   885  001CEE                     __ptext1:
   886                           	opt stack 0
   887  001CEE                     _welcome:
   888                           	opt stack 23
   889                           
   890                           ;picState.c: 21: lcdInst(0x01);;
   891                           
   892                           ;incstack = 0
   893  001CEE  0E01               	movlw	1
   894  001CF0  ECF2  F010         	call	_lcdInst
   895                           
   896                           ;picState.c: 22: lcdInst(0b10000000);;
   897  001CF4  0E80               	movlw	128
   898  001CF6  ECF2  F010         	call	_lcdInst
   899                           
   900                           ;picState.c: 23: _delay((unsigned long)((200)*(8000000/4000.0)));
   901  001CFA  0E03               	movlw	3
   902  001CFC  6E3C               	movwf	(??_welcome+1)& (0+255),c
   903  001CFE  0E08               	movlw	8
   904  001D00  6E3B               	movwf	??_welcome& (0+255),c
   905  001D02  0E77               	movlw	119
   906  001D04                     u2937:
   907  001D04  2EE8               	decfsz	wreg,f,c
   908  001D06  D7FE               	bra	u2937
   909  001D08  2E3B               	decfsz	??_welcome& (0+255),f,c
   910  001D0A  D7FC               	bra	u2937
   911  001D0C  2E3C               	decfsz	(??_welcome+1)& (0+255),f,c
   912  001D0E  D7FA               	bra	u2937
   913  001D10  F000               	nop	
   914                           
   915                           ;picState.c: 25: printf("Welcome!");
   916  001D12  0EBC               	movlw	low STR_2
   917  001D14  6E25               	movwf	printf@f,c
   918  001D16  0E10               	movlw	high STR_2
   919  001D18  6E26               	movwf	printf@f+1,c
   920  001D1A  EC6B  F008         	call	_printf	;wreg free
   921                           
   922                           ;picState.c: 26: printf("            ");
   923  001D1E  0E87               	movlw	low (STR_6+2)
   924  001D20  6E25               	movwf	printf@f,c
   925  001D22  0E10               	movlw	high (STR_6+2)
   926  001D24  6E26               	movwf	printf@f+1,c
   927  001D26  EC6B  F008         	call	_printf	;wreg free
   928                           
   929                           ;picState.c: 27: printf("2 Back to start menu");
   930  001D2A  0E2B               	movlw	low STR_4
   931  001D2C  6E25               	movwf	printf@f,c
   932  001D2E  0E10               	movlw	high STR_4
   933  001D30  6E26               	movwf	printf@f+1,c
   934  001D32  EC6B  F008         	call	_printf	;wreg free
   935                           
   936                           ;picState.c: 28: lcdInst(0b11000000);;
   937  001D36  0EC0               	movlw	192
   938  001D38  ECF2  F010         	call	_lcdInst
   939                           
   940                           ;picState.c: 29: printf("1 Time");
   941  001D3C  0EC5               	movlw	low STR_5
   942  001D3E  6E25               	movwf	printf@f,c
   943  001D40  0E10               	movlw	high STR_5
   944  001D42  6E26               	movwf	printf@f+1,c
   945  001D44  EC6B  F008         	call	_printf	;wreg free
   946                           
   947                           ;picState.c: 30: printf("              ");
   948  001D48  0E85               	movlw	low STR_6
   949  001D4A  6E25               	movwf	printf@f,c
   950  001D4C  0E10               	movlw	high STR_6
   951  001D4E  6E26               	movwf	printf@f+1,c
   952  001D50  EC6B  F008         	call	_printf	;wreg free
   953                           
   954                           ;picState.c: 31: printf("A Sorting");
   955  001D54  0EB2               	movlw	low STR_7
   956  001D56  6E25               	movwf	printf@f,c
   957  001D58  0E10               	movlw	high STR_7
   958  001D5A  6E26               	movwf	printf@f+1,c
   959  001D5C  EC6B  F008         	call	_printf	;wreg free
   960                           
   961                           ;picState.c: 32: LATDbits.LATD0 = 0;
   962  001D60  908C               	bcf	3980,0,c	;volatile
   963                           
   964                           ;picState.c: 33: LATCbits.LATC1 = 0;
   965  001D62  928B               	bcf	3979,1,c	;volatile
   966  001D64                     l3319:
   967  001D64  5058               	movf	_mode,w,c
   968  001D66  A4D8               	btfss	status,2,c
   969  001D68  0012               	return	
   970  001D6A  D7FC               	goto	l3319
   971  001D6C                     __end_of_welcome:
   972                           	opt stack 0
   973                           tblptru	equ	0xFF8
   974                           postinc0	equ	0xFEE
   975                           wreg	equ	0xFE8
   976                           status	equ	0xFD8
   977                           
   978 ;; *************** function _sort *****************
   979 ;; Defined at:
   980 ;;		line 86 in file "picState.c"
   981 ;; Parameters:    Size  Location     Type
   982 ;;		None
   983 ;; Auto vars:     Size  Location     Type
   984 ;;  x               2   10[BANK0 ] int 
   985 ;;  can             2    8[BANK0 ] int 
   986 ;;  noLabel         2    6[BANK0 ] int 
   987 ;;  tin             2    4[BANK0 ] int 
   988 ;;  tap             2    2[BANK0 ] int 
   989 ;; Return value:  Size  Location     Type
   990 ;;                  2   90[None  ] int 
   991 ;; Registers used:
   992 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   993 ;; Tracked objects:
   994 ;;		On entry : 0/0
   995 ;;		On exit  : 0/0
   996 ;;		Unchanged: 0/0
   997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   999 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1000 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1001 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1002 ;;Total ram usage:       12 bytes
  1003 ;; Hardware stack levels used:    1
  1004 ;; Hardware stack levels required when called:    8
  1005 ;; This function calls:
  1006 ;;		_gate
  1007 ;;		_get_time
  1008 ;;		_lcdInst
  1009 ;;		_main_servo_control
  1010 ;;		_printf
  1011 ;;		_readLightSensor
  1012 ;;		_sense_can
  1013 ;;		_shaker
  1014 ;;		_side_servo_control
  1015 ;; This function is called by:
  1016 ;;		_main
  1017 ;; This function uses a non-reentrant model
  1018 ;;
  1019                           
  1020                           	psect	text2
  1021  0013E2                     __ptext2:
  1022                           	opt stack 0
  1023  0013E2                     _sort:
  1024                           	opt stack 22
  1025                           
  1026                           ;picState.c: 88: int tap = 0;
  1027                           
  1028                           ;incstack = 0
  1029  0013E2  0E00               	movlw	0
  1030  0013E4  0100               	movlb	0	; () banked
  1031  0013E6  6F83               	movwf	(sort@tap+1)& (0+255),b
  1032  0013E8  0E00               	movlw	0
  1033  0013EA  6F82               	movwf	sort@tap& (0+255),b
  1034                           
  1035                           ;picState.c: 89: int tin = 0;
  1036  0013EC  0E00               	movlw	0
  1037  0013EE  0100               	movlb	0	; () banked
  1038  0013F0  6F85               	movwf	(sort@tin+1)& (0+255),b
  1039  0013F2  0E00               	movlw	0
  1040  0013F4  6F84               	movwf	sort@tin& (0+255),b
  1041                           
  1042                           ;picState.c: 90: int noLabel = 0;
  1043  0013F6  0E00               	movlw	0
  1044  0013F8  0100               	movlb	0	; () banked
  1045  0013FA  6F87               	movwf	(sort@noLabel+1)& (0+255),b
  1046  0013FC  0E00               	movlw	0
  1047  0013FE  6F86               	movwf	sort@noLabel& (0+255),b
  1048                           
  1049                           ; BSR set to: 0
  1050                           ;picState.c: 92: lcdInst(0x01);;
  1051  001400  0E01               	movlw	1
  1052  001402  ECF2  F010         	call	_lcdInst
  1053                           
  1054                           ;picState.c: 93: _delay((unsigned long)((100)*(8000000/4000.0)));
  1055  001406  0E02               	movlw	2
  1056  001408  0100               	movlb	0	; () banked
  1057  00140A  6F81               	movwf	(??_sort+1)& (0+255),b
  1058  00140C  0E04               	movlw	4
  1059  00140E  0100               	movlb	0	; () banked
  1060  001410  6F80               	movwf	??_sort& (0+255),b
  1061  001412  0EBA               	movlw	186
  1062  001414                     u2947:
  1063  001414  2EE8               	decfsz	wreg,f,c
  1064  001416  D7FE               	bra	u2947
  1065  001418  2F80               	decfsz	??_sort& (0+255),f,b
  1066  00141A  D7FC               	bra	u2947
  1067  00141C  2F81               	decfsz	(??_sort+1)& (0+255),f,b
  1068  00141E  D7FA               	bra	u2947
  1069  001420  F000               	nop	
  1070                           
  1071                           ;picState.c: 94: printf("Sorting Started");
  1072  001422  0E65               	movlw	low STR_9
  1073  001424  6E25               	movwf	printf@f,c
  1074  001426  0E10               	movlw	high STR_9
  1075  001428  6E26               	movwf	printf@f+1,c
  1076  00142A  EC6B  F008         	call	_printf	;wreg free
  1077                           
  1078                           ;picState.c: 95: lcdInst(0b11000000);;
  1079  00142E  0EC0               	movlw	192
  1080  001430  ECF2  F010         	call	_lcdInst
  1081                           
  1082                           ;picState.c: 96: printf("Press 1/2/A to stop");
  1083  001434  0E40               	movlw	low STR_10
  1084  001436  6E25               	movwf	printf@f,c
  1085  001438  0E10               	movlw	high STR_10
  1086  00143A  6E26               	movwf	printf@f+1,c
  1087  00143C  EC6B  F008         	call	_printf	;wreg free
  1088                           
  1089                           ;picState.c: 97: get_time(start_time);
  1090  001440  0E60               	movlw	low _start_time
  1091  001442  6E1C               	movwf	get_time@datime,c
  1092  001444  0E00               	movlw	high _start_time
  1093  001446  6E1D               	movwf	get_time@datime+1,c
  1094  001448  EC8C  F00C         	call	_get_time	;wreg free
  1095                           
  1096                           ;picState.c: 98: lcdInst(0b10000000);;
  1097  00144C  0E80               	movlw	128
  1098  00144E  ECF2  F010         	call	_lcdInst
  1099                           
  1100                           ;picState.c: 100: while (mode == 2){
  1101  001452  D072               	goto	l3413
  1102  001454                     l3375:
  1103                           
  1104                           ;picState.c: 101: main_servo_control(0);
  1105  001454  0E00               	movlw	0
  1106  001456  6E1A               	movwf	main_servo_control@dir+1,c
  1107  001458  0E00               	movlw	0
  1108  00145A  6E19               	movwf	main_servo_control@dir,c
  1109  00145C  EC1D  F00C         	call	_main_servo_control	;wreg free
  1110                           
  1111                           ;picState.c: 102: side_servo_control(0);
  1112  001460  0E00               	movlw	0
  1113  001462  6E1A               	movwf	side_servo_control@dir+1,c
  1114  001464  0E00               	movlw	0
  1115  001466  6E19               	movwf	side_servo_control@dir,c
  1116  001468  EC2B  F00B         	call	_side_servo_control	;wreg free
  1117                           
  1118                           ;picState.c: 104: if (readLightSensor() == 1) {
  1119  00146C  EC5C  F00D         	call	_readLightSensor	;wreg free
  1120  001470  043B               	decf	?_readLightSensor,w,c
  1121  001472  103C               	iorwf	?_readLightSensor+1,w,c
  1122  001474  A4D8               	btfss	status,2,c
  1123  001476  D049               	goto	l3403
  1124                           
  1125                           ;picState.c: 106: LATDbits.LATD0 = 1;
  1126  001478  808C               	bsf	3980,0,c	;volatile
  1127                           
  1128                           ;picState.c: 109: lcdInst(0b10000000);;
  1129  00147A  0E80               	movlw	128
  1130  00147C  ECF2  F010         	call	_lcdInst
  1131                           
  1132                           ;picState.c: 110: lcdInst(0b11000000);;
  1133  001480  0EC0               	movlw	192
  1134  001482  ECF2  F010         	call	_lcdInst
  1135                           
  1136                           ;picState.c: 111: int can = sense_can();
  1137  001486  EC37  F00E         	call	_sense_can	;wreg free
  1138  00148A  C01B  F088         	movff	?_sense_can,sort@can
  1139  00148E  C01C  F089         	movff	?_sense_can+1,sort@can+1
  1140                           
  1141                           ;picState.c: 114: LATDbits.LATD0 = 0;
  1142  001492  908C               	bcf	3980,0,c	;volatile
  1143                           
  1144                           ;picState.c: 117: for (int x = 0; x< 10; x++){
  1145  001494  0E00               	movlw	0
  1146  001496  0100               	movlb	0	; () banked
  1147  001498  6F8B               	movwf	(sort@x+1)& (0+255),b
  1148  00149A  0E00               	movlw	0
  1149  00149C  6F8A               	movwf	sort@x& (0+255),b
  1150  00149E                     l3387:
  1151                           
  1152                           ; BSR set to: 0
  1153  00149E  0100               	movlb	0	; () banked
  1154  0014A0  BF8B               	btfsc	(sort@x+1)& (0+255),7,b
  1155  0014A2  D008               	goto	l3391
  1156  0014A4  0100               	movlb	0	; () banked
  1157  0014A6  518B               	movf	(sort@x+1)& (0+255),w,b
  1158  0014A8  E123               	bnz	l3399
  1159  0014AA  0E0A               	movlw	10
  1160  0014AC  0100               	movlb	0	; () banked
  1161  0014AE  5D8A               	subwf	sort@x& (0+255),w,b
  1162  0014B0  B0D8               	btfsc	status,0,c
  1163  0014B2  D01E               	goto	l3399
  1164  0014B4                     l3391:
  1165                           
  1166                           ; BSR set to: 0
  1167                           ;picState.c: 118: main_servo_control(0);
  1168  0014B4  0E00               	movlw	0
  1169  0014B6  6E1A               	movwf	main_servo_control@dir+1,c
  1170  0014B8  0E00               	movlw	0
  1171  0014BA  6E19               	movwf	main_servo_control@dir,c
  1172  0014BC  EC1D  F00C         	call	_main_servo_control	;wreg free
  1173                           
  1174                           ;picState.c: 119: side_servo_control(0);
  1175  0014C0  0E00               	movlw	0
  1176  0014C2  6E1A               	movwf	side_servo_control@dir+1,c
  1177  0014C4  0E00               	movlw	0
  1178  0014C6  6E19               	movwf	side_servo_control@dir,c
  1179  0014C8  EC2B  F00B         	call	_side_servo_control	;wreg free
  1180                           
  1181                           ;picState.c: 120: _delay((unsigned long)((100)*(8000000/4000.0)));
  1182  0014CC  0E02               	movlw	2
  1183  0014CE  0100               	movlb	0	; () banked
  1184  0014D0  6F81               	movwf	(??_sort+1)& (0+255),b
  1185  0014D2  0E04               	movlw	4
  1186  0014D4  0100               	movlb	0	; () banked
  1187  0014D6  6F80               	movwf	??_sort& (0+255),b
  1188  0014D8  0EBA               	movlw	186
  1189  0014DA                     u2957:
  1190  0014DA  2EE8               	decfsz	wreg,f,c
  1191  0014DC  D7FE               	bra	u2957
  1192  0014DE  2F80               	decfsz	??_sort& (0+255),f,b
  1193  0014E0  D7FC               	bra	u2957
  1194  0014E2  2F81               	decfsz	(??_sort+1)& (0+255),f,b
  1195  0014E4  D7FA               	bra	u2957
  1196  0014E6  F000               	nop	
  1197  0014E8  0100               	movlb	0	; () banked
  1198  0014EA  4B8A               	infsnz	sort@x& (0+255),f,b
  1199  0014EC  2B8B               	incf	(sort@x+1)& (0+255),f,b
  1200  0014EE  D7D7               	goto	l3387
  1201  0014F0                     l3399:
  1202                           
  1203                           ; BSR set to: 0
  1204                           ;picState.c: 121: }
  1205                           ;picState.c: 123: printf("%d", can);
  1206  0014F0  0ED2               	movlw	low STR_11
  1207  0014F2  6E25               	movwf	printf@f,c
  1208  0014F4  0E10               	movlw	high STR_11
  1209  0014F6  6E26               	movwf	printf@f+1,c
  1210  0014F8  C088  F027         	movff	sort@can,?_printf+2
  1211  0014FC  C089  F028         	movff	sort@can+1,?_printf+3
  1212  001500  EC6B  F008         	call	_printf	;wreg free
  1213                           
  1214                           ;picState.c: 124: flag++;
  1215  001504  4A55               	infsnz	_flag,f,c
  1216  001506  2A56               	incf	_flag+1,f,c
  1217                           
  1218                           ;picState.c: 125: } else {
  1219  001508  D017               	goto	l3413
  1220  00150A                     l3403:
  1221                           
  1222                           ;picState.c: 127: shaker();
  1223  00150A  ECB6  F00E         	call	_shaker	;wreg free
  1224                           
  1225                           ;picState.c: 128: LATDbits.LATD0 = 0;
  1226  00150E  908C               	bcf	3980,0,c	;volatile
  1227                           
  1228                           ;picState.c: 129: _delay((unsigned long)((500)*(8000000/4000.0)));
  1229  001510  0E06               	movlw	6
  1230  001512  0100               	movlb	0	; () banked
  1231  001514  6F81               	movwf	(??_sort+1)& (0+255),b
  1232  001516  0E13               	movlw	19
  1233  001518  0100               	movlb	0	; () banked
  1234  00151A  6F80               	movwf	??_sort& (0+255),b
  1235  00151C  0EAD               	movlw	173
  1236  00151E                     u2967:
  1237  00151E  2EE8               	decfsz	wreg,f,c
  1238  001520  D7FE               	bra	u2967
  1239  001522  2F80               	decfsz	??_sort& (0+255),f,b
  1240  001524  D7FC               	bra	u2967
  1241  001526  2F81               	decfsz	(??_sort+1)& (0+255),f,b
  1242  001528  D7FA               	bra	u2967
  1243  00152A  D000               	nop2	
  1244                           
  1245                           ;picState.c: 130: gate();
  1246  00152C  EC98  F00F         	call	_gate	;wreg free
  1247                           
  1248                           ;picState.c: 131: flag = 0;
  1249  001530  0E00               	movlw	0
  1250  001532  6E56               	movwf	_flag+1,c
  1251  001534  0E00               	movlw	0
  1252  001536  6E55               	movwf	_flag,c
  1253  001538                     l3413:
  1254  001538  0E02               	movlw	2
  1255  00153A  1858               	xorwf	_mode,w,c
  1256  00153C  A4D8               	btfss	status,2,c
  1257  00153E  0012               	return	
  1258  001540  D789               	goto	l3375
  1259  001542                     __end_of_sort:
  1260                           	opt stack 0
  1261                           tblptru	equ	0xFF8
  1262                           postinc0	equ	0xFEE
  1263                           wreg	equ	0xFE8
  1264                           status	equ	0xFD8
  1265                           
  1266 ;; *************** function _shaker *****************
  1267 ;; Defined at:
  1268 ;;		line 18 in file "motor.c"
  1269 ;; Parameters:    Size  Location     Type
  1270 ;;		None
  1271 ;; Auto vars:     Size  Location     Type
  1272 ;;  i               2   25[COMRAM] int 
  1273 ;; Return value:  Size  Location     Type
  1274 ;;                  1    wreg      void 
  1275 ;; Registers used:
  1276 ;;		wreg, status,2, status,0
  1277 ;; Tracked objects:
  1278 ;;		On entry : 0/0
  1279 ;;		On exit  : 0/0
  1280 ;;		Unchanged: 0/0
  1281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1283 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1284 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1285 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1286 ;;Total ram usage:        3 bytes
  1287 ;; Hardware stack levels used:    1
  1288 ;; Hardware stack levels required when called:    4
  1289 ;; This function calls:
  1290 ;;		Nothing
  1291 ;; This function is called by:
  1292 ;;		_sort
  1293 ;; This function uses a non-reentrant model
  1294 ;;
  1295                           
  1296                           	psect	text3
  1297  001D6C                     __ptext3:
  1298                           	opt stack 0
  1299  001D6C                     _shaker:
  1300                           	opt stack 25
  1301                           
  1302                           ;motor.c: 19: int i = 0;
  1303                           
  1304                           ;incstack = 0
  1305  001D6C  0E00               	movlw	0
  1306  001D6E  6E1B               	movwf	shaker@i+1,c
  1307  001D70  0E00               	movlw	0
  1308  001D72  6E1A               	movwf	shaker@i,c
  1309                           
  1310                           ;motor.c: 20: for (i = 0; i<200; i++){
  1311  001D74  0E00               	movlw	0
  1312  001D76  6E1B               	movwf	shaker@i+1,c
  1313  001D78  0E00               	movlw	0
  1314  001D7A  6E1A               	movwf	shaker@i,c
  1315  001D7C                     l3245:
  1316  001D7C  BE1B               	btfsc	shaker@i+1,7,c
  1317  001D7E  D006               	goto	l381
  1318  001D80  501B               	movf	shaker@i+1,w,c
  1319  001D82  E125               	bnz	l383
  1320  001D84  0EC8               	movlw	200
  1321  001D86  5C1A               	subwf	shaker@i,w,c
  1322  001D88  B0D8               	btfsc	status,0,c
  1323  001D8A  0012               	return	
  1324  001D8C                     l381:
  1325                           
  1326                           ;motor.c: 22: LATBbits.LATB2 = 1;
  1327  001D8C  848A               	bsf	3978,2,c	;volatile
  1328                           
  1329                           ;motor.c: 23: LATCbits.LATC1 = 1;
  1330  001D8E  828B               	bsf	3979,1,c	;volatile
  1331                           
  1332                           ;motor.c: 25: _delay((unsigned long)((8.5)*(8000000/4000.0)));
  1333  001D90  0E17               	movlw	23
  1334  001D92  6E19               	movwf	??_shaker& (0+255),c
  1335  001D94  0E12               	movlw	18
  1336  001D96                     u2977:
  1337  001D96  2EE8               	decfsz	wreg,f,c
  1338  001D98  D7FE               	bra	u2977
  1339  001D9A  2E19               	decfsz	??_shaker& (0+255),f,c
  1340  001D9C  D7FC               	bra	u2977
  1341  001D9E  D000               	nop2	
  1342                           
  1343                           ;motor.c: 27: LATCbits.LATC1 = 1;
  1344  001DA0  828B               	bsf	3979,1,c	;volatile
  1345                           
  1346                           ;motor.c: 28: LATBbits.LATB2 = 0;
  1347  001DA2  948A               	bcf	3978,2,c	;volatile
  1348                           
  1349                           ;motor.c: 30: _delay((unsigned long)((10)*(8000000/4000.0)));
  1350  001DA4  0E1A               	movlw	26
  1351  001DA6  6E19               	movwf	??_shaker& (0+255),c
  1352  001DA8  0EF8               	movlw	248
  1353  001DAA                     u2987:
  1354  001DAA  2EE8               	decfsz	wreg,f,c
  1355  001DAC  D7FE               	bra	u2987
  1356  001DAE  2E19               	decfsz	??_shaker& (0+255),f,c
  1357  001DB0  D7FC               	bra	u2987
  1358  001DB2  D000               	nop2	
  1359                           
  1360                           ;motor.c: 32: LATBbits.LATB2 = 0;
  1361  001DB4  948A               	bcf	3978,2,c	;volatile
  1362                           
  1363                           ;motor.c: 33: LATCbits.LATC1 = 0;
  1364  001DB6  928B               	bcf	3979,1,c	;volatile
  1365                           
  1366                           ;motor.c: 35: _delay((unsigned long)((1.5)*(8000000/4000.0)));
  1367  001DB8  0E04               	movlw	4
  1368  001DBA  6E19               	movwf	??_shaker& (0+255),c
  1369  001DBC  0EE4               	movlw	228
  1370  001DBE                     u2997:
  1371  001DBE  2EE8               	decfsz	wreg,f,c
  1372  001DC0  D7FE               	bra	u2997
  1373  001DC2  2E19               	decfsz	??_shaker& (0+255),f,c
  1374  001DC4  D7FC               	bra	u2997
  1375  001DC6  D000               	nop2	
  1376  001DC8  4A1A               	infsnz	shaker@i,f,c
  1377  001DCA  2A1B               	incf	shaker@i+1,f,c
  1378  001DCC  D7D7               	goto	l3245
  1379  001DCE                     l383:
  1380  001DCE  0012               	return		;funcret
  1381  001DD0                     __end_of_shaker:
  1382                           	opt stack 0
  1383                           tblptru	equ	0xFF8
  1384                           postinc0	equ	0xFEE
  1385                           wreg	equ	0xFE8
  1386                           status	equ	0xFD8
  1387                           
  1388 ;; *************** function _sense_can *****************
  1389 ;; Defined at:
  1390 ;;		line 31 in file "adc.c"
  1391 ;; Parameters:    Size  Location     Type
  1392 ;;		None
  1393 ;; Auto vars:     Size  Location     Type
  1394 ;;  i               2   33[COMRAM] int 
  1395 ;;  H_max           2   31[COMRAM] int 
  1396 ;; Return value:  Size  Location     Type
  1397 ;;                  2   26[COMRAM] int 
  1398 ;; Registers used:
  1399 ;;		wreg, status,2, status,0, cstack
  1400 ;; Tracked objects:
  1401 ;;		On entry : 0/0
  1402 ;;		On exit  : 0/0
  1403 ;;		Unchanged: 0/0
  1404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1405 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1406 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1407 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1408 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1409 ;;Total ram usage:        9 bytes
  1410 ;; Hardware stack levels used:    1
  1411 ;; Hardware stack levels required when called:    5
  1412 ;; This function calls:
  1413 ;;		_readADC
  1414 ;; This function is called by:
  1415 ;;		_sort
  1416 ;; This function uses a non-reentrant model
  1417 ;;
  1418                           
  1419                           	psect	text4
  1420  001C6E                     __ptext4:
  1421                           	opt stack 0
  1422  001C6E                     _sense_can:
  1423                           	opt stack 24
  1424                           
  1425                           ;adc.c: 59: if (0 == 0) {
  1426                           
  1427                           ;incstack = 0
  1428  001C6E  0E00               	movlw	0
  1429  001C70  6E21               	movwf	sense_can@H_max+1,c
  1430  001C72  0E00               	movlw	0
  1431  001C74  6E20               	movwf	sense_can@H_max,c
  1432                           
  1433                           ;adc.c: 60: for (int i = 0; i < 10000; i++) {
  1434  001C76  0E00               	movlw	0
  1435  001C78  6E23               	movwf	sense_can@i+1,c
  1436  001C7A  0E00               	movlw	0
  1437  001C7C  6E22               	movwf	sense_can@i,c
  1438  001C7E                     l3067:
  1439  001C7E  BE23               	btfsc	sense_can@i+1,7,c
  1440  001C80  D006               	goto	l3071
  1441  001C82  0E10               	movlw	16
  1442  001C84  5C22               	subwf	sense_can@i,w,c
  1443  001C86  0E27               	movlw	39
  1444  001C88  5823               	subwfb	sense_can@i+1,w,c
  1445  001C8A  B0D8               	btfsc	status,0,c
  1446  001C8C  D01E               	goto	l3087
  1447  001C8E                     l3071:
  1448                           
  1449                           ;adc.c: 62: readADC(1);
  1450  001C8E  0E01               	movlw	1
  1451  001C90  EC71  F010         	call	_readADC
  1452                           
  1453                           ;adc.c: 63: if (ADRESH > H_max) {
  1454  001C94  50C4               	movf	4036,w,c	;volatile
  1455  001C96  6E1D               	movwf	??_sense_can& (0+255),c
  1456  001C98  6A1E               	clrf	(??_sense_can+1)& (0+255),c
  1457  001C9A  501D               	movf	??_sense_can,w,c
  1458  001C9C  5C20               	subwf	sense_can@H_max,w,c
  1459  001C9E  5021               	movf	sense_can@H_max+1,w,c
  1460  001CA0  0A80               	xorlw	128
  1461  001CA2  6E1F               	movwf	(??_sense_can+2)& (0+255),c
  1462  001CA4  501E               	movf	??_sense_can+1,w,c
  1463  001CA6  0A80               	xorlw	128
  1464  001CA8  581F               	subwfb	(??_sense_can+2)& (0+255),w,c
  1465  001CAA  B0D8               	btfsc	status,0,c
  1466  001CAC  D003               	goto	l3077
  1467                           
  1468                           ;adc.c: 64: H_max = ADRESH;
  1469  001CAE  CFC4 F020          	movff	4036,sense_can@H_max	;volatile
  1470  001CB2  6A21               	clrf	sense_can@H_max+1,c
  1471  001CB4                     l3077:
  1472                           
  1473                           ;adc.c: 65: }
  1474                           ;adc.c: 66: if (ADRESH > 30){
  1475  001CB4  0E1E               	movlw	30
  1476  001CB6  64C4               	cpfsgt	4036,c	;volatile
  1477  001CB8  D005               	goto	l3083
  1478                           
  1479                           ;adc.c: 67: return 3;
  1480  001CBA  0E00               	movlw	0
  1481  001CBC  6E1C               	movwf	?_sense_can+1,c
  1482  001CBE  0E03               	movlw	3
  1483  001CC0  6E1B               	movwf	?_sense_can,c
  1484  001CC2  0012               	return	
  1485  001CC4                     l3083:
  1486  001CC4  4A22               	infsnz	sense_can@i,f,c
  1487  001CC6  2A23               	incf	sense_can@i+1,f,c
  1488  001CC8  D7DA               	goto	l3067
  1489  001CCA                     l3087:
  1490                           
  1491                           ;adc.c: 68: }
  1492                           ;adc.c: 69: }
  1493                           ;adc.c: 70: if (H_max >= 0xA0) {
  1494  001CCA  BE21               	btfsc	sense_can@H_max+1,7,c
  1495  001CCC  D00B               	goto	l3095
  1496  001CCE  5021               	movf	sense_can@H_max+1,w,c
  1497  001CD0  E104               	bnz	u2450
  1498  001CD2  0EA0               	movlw	160
  1499  001CD4  5C20               	subwf	sense_can@H_max,w,c
  1500  001CD6  A0D8               	btfss	status,0,c
  1501  001CD8  D005               	goto	l3095
  1502  001CDA                     u2450:
  1503                           
  1504                           ;adc.c: 71: return 3;
  1505  001CDA  0E00               	movlw	0
  1506  001CDC  6E1C               	movwf	?_sense_can+1,c
  1507  001CDE  0E03               	movlw	3
  1508  001CE0  6E1B               	movwf	?_sense_can,c
  1509                           
  1510                           ;adc.c: 72: } else {
  1511  001CE2  0012               	return	
  1512  001CE4                     l3095:
  1513                           
  1514                           ;adc.c: 73: return 4;
  1515  001CE4  0E00               	movlw	0
  1516  001CE6  6E1C               	movwf	?_sense_can+1,c
  1517  001CE8  0E04               	movlw	4
  1518  001CEA  6E1B               	movwf	?_sense_can,c
  1519  001CEC  0012               	return	
  1520  001CEE                     __end_of_sense_can:
  1521                           	opt stack 0
  1522                           tblptru	equ	0xFF8
  1523                           postinc0	equ	0xFEE
  1524                           wreg	equ	0xFE8
  1525                           status	equ	0xFD8
  1526                           
  1527 ;; *************** function _readLightSensor *****************
  1528 ;; Defined at:
  1529 ;;		line 80 in file "adc.c"
  1530 ;; Parameters:    Size  Location     Type
  1531 ;;		None
  1532 ;; Auto vars:     Size  Location     Type
  1533 ;;  H_max           2   65[COMRAM] int 
  1534 ;;  i               2   63[COMRAM] int 
  1535 ;; Return value:  Size  Location     Type
  1536 ;;                  2   58[COMRAM] int 
  1537 ;; Registers used:
  1538 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1539 ;; Tracked objects:
  1540 ;;		On entry : 0/0
  1541 ;;		On exit  : 0/0
  1542 ;;		Unchanged: 0/0
  1543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1544 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1545 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1546 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1547 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1548 ;;Total ram usage:        9 bytes
  1549 ;; Hardware stack levels used:    1
  1550 ;; Hardware stack levels required when called:    7
  1551 ;; This function calls:
  1552 ;;		_lcdInst
  1553 ;;		_printf
  1554 ;;		_readADC
  1555 ;; This function is called by:
  1556 ;;		_sort
  1557 ;; This function uses a non-reentrant model
  1558 ;;
  1559                           
  1560                           	psect	text5
  1561  001AB8                     __ptext5:
  1562                           	opt stack 0
  1563  001AB8                     _readLightSensor:
  1564                           	opt stack 22
  1565                           
  1566                           ;adc.c: 81: int H_max = 0;
  1567                           
  1568                           ;incstack = 0
  1569  001AB8  0E00               	movlw	0
  1570  001ABA  6E43               	movwf	readLightSensor@H_max+1,c
  1571  001ABC  0E00               	movlw	0
  1572  001ABE  6E42               	movwf	readLightSensor@H_max,c
  1573                           
  1574                           ;adc.c: 82: int i = 0;
  1575  001AC0  0E00               	movlw	0
  1576  001AC2  6E41               	movwf	readLightSensor@i+1,c
  1577  001AC4  0E00               	movlw	0
  1578  001AC6  6E40               	movwf	readLightSensor@i,c
  1579                           
  1580                           ;adc.c: 83: while(i < 50){
  1581  001AC8  D030               	goto	l3119
  1582  001ACA                     l3101:
  1583                           
  1584                           ;adc.c: 84: lcdInst(0b10000000);;
  1585  001ACA  0E80               	movlw	128
  1586  001ACC  ECF2  F010         	call	_lcdInst
  1587                           
  1588                           ;adc.c: 86: readADC(2);
  1589  001AD0  0E02               	movlw	2
  1590  001AD2  EC71  F010         	call	_readADC
  1591                           
  1592                           ;adc.c: 87: if (ADRESH > H_max) {
  1593  001AD6  50C4               	movf	4036,w,c	;volatile
  1594  001AD8  6E3D               	movwf	??_readLightSensor& (0+255),c
  1595  001ADA  6A3E               	clrf	(??_readLightSensor+1)& (0+255),c
  1596  001ADC  503D               	movf	??_readLightSensor,w,c
  1597  001ADE  5C42               	subwf	readLightSensor@H_max,w,c
  1598  001AE0  5043               	movf	readLightSensor@H_max+1,w,c
  1599  001AE2  0A80               	xorlw	128
  1600  001AE4  6E3F               	movwf	(??_readLightSensor+2)& (0+255),c
  1601  001AE6  503E               	movf	??_readLightSensor+1,w,c
  1602  001AE8  0A80               	xorlw	128
  1603  001AEA  583F               	subwfb	(??_readLightSensor+2)& (0+255),w,c
  1604  001AEC  B0D8               	btfsc	status,0,c
  1605  001AEE  D003               	goto	l3107
  1606                           
  1607                           ;adc.c: 88: H_max = ADRESH;
  1608  001AF0  CFC4 F042          	movff	4036,readLightSensor@H_max	;volatile
  1609  001AF4  6A43               	clrf	readLightSensor@H_max+1,c
  1610  001AF6                     l3107:
  1611                           
  1612                           ;adc.c: 89: }
  1613                           ;adc.c: 90: if (ADRESH < 0x20){
  1614  001AF6  0E20               	movlw	32
  1615  001AF8  60C4               	cpfslt	4036,c	;volatile
  1616  001AFA  D005               	goto	l3113
  1617                           
  1618                           ;adc.c: 91: return 1;
  1619  001AFC  0E00               	movlw	0
  1620  001AFE  6E3C               	movwf	?_readLightSensor+1,c
  1621  001B00  0E01               	movlw	1
  1622  001B02  6E3B               	movwf	?_readLightSensor,c
  1623  001B04  0012               	return	
  1624  001B06                     l3113:
  1625                           
  1626                           ;adc.c: 92: }
  1627                           ;adc.c: 93: printf("%x", ADRESH);
  1628  001B06  0ECF               	movlw	low (STR_8+3)
  1629  001B08  6E25               	movwf	printf@f,c
  1630  001B0A  0E10               	movlw	high (STR_8+3)
  1631  001B0C  6E26               	movwf	printf@f+1,c
  1632  001B0E  CFC4 F027          	movff	4036,?_printf+2	;volatile
  1633  001B12  6A28               	clrf	?_printf+3,c
  1634  001B14  EC6B  F008         	call	_printf	;wreg free
  1635                           
  1636                           ;adc.c: 94: _delay((unsigned long)((5)*(8000000/4000.0)));
  1637  001B18  0E0D               	movlw	13
  1638  001B1A  6E3D               	movwf	??_readLightSensor& (0+255),c
  1639  001B1C  0EFC               	movlw	252
  1640  001B1E                     u3007:
  1641  001B1E  2EE8               	decfsz	wreg,f,c
  1642  001B20  D7FE               	bra	u3007
  1643  001B22  2E3D               	decfsz	??_readLightSensor& (0+255),f,c
  1644  001B24  D7FC               	bra	u3007
  1645                           
  1646                           ;adc.c: 95: i++;
  1647  001B26  4A40               	infsnz	readLightSensor@i,f,c
  1648  001B28  2A41               	incf	readLightSensor@i+1,f,c
  1649  001B2A                     l3119:
  1650  001B2A  BE41               	btfsc	readLightSensor@i+1,7,c
  1651  001B2C  D7CE               	goto	l3101
  1652  001B2E  5041               	movf	readLightSensor@i+1,w,c
  1653  001B30  E104               	bnz	l3121
  1654  001B32  0E32               	movlw	50
  1655  001B34  5C40               	subwf	readLightSensor@i,w,c
  1656  001B36  A0D8               	btfss	status,0,c
  1657  001B38  D7C8               	goto	l3101
  1658  001B3A                     l3121:
  1659                           
  1660                           ;adc.c: 96: }
  1661                           ;adc.c: 98: if(H_max >= 0x20){
  1662  001B3A  BE43               	btfsc	readLightSensor@H_max+1,7,c
  1663  001B3C  D00B               	goto	l3129
  1664  001B3E  5043               	movf	readLightSensor@H_max+1,w,c
  1665  001B40  E104               	bnz	u2490
  1666  001B42  0E20               	movlw	32
  1667  001B44  5C42               	subwf	readLightSensor@H_max,w,c
  1668  001B46  A0D8               	btfss	status,0,c
  1669  001B48  D005               	goto	l3129
  1670  001B4A                     u2490:
  1671                           
  1672                           ;adc.c: 99: return 0;
  1673  001B4A  0E00               	movlw	0
  1674  001B4C  6E3C               	movwf	?_readLightSensor+1,c
  1675  001B4E  0E00               	movlw	0
  1676  001B50  6E3B               	movwf	?_readLightSensor,c
  1677                           
  1678                           ;adc.c: 100: }
  1679  001B52  0012               	return	
  1680  001B54                     l3129:
  1681                           
  1682                           ;adc.c: 101: else{
  1683                           ;adc.c: 102: return 1;
  1684  001B54  0E00               	movlw	0
  1685  001B56  6E3C               	movwf	?_readLightSensor+1,c
  1686  001B58  0E01               	movlw	1
  1687  001B5A  6E3B               	movwf	?_readLightSensor,c
  1688  001B5C  0012               	return	
  1689  001B5E                     __end_of_readLightSensor:
  1690                           	opt stack 0
  1691                           tblptru	equ	0xFF8
  1692                           postinc0	equ	0xFEE
  1693                           wreg	equ	0xFE8
  1694                           status	equ	0xFD8
  1695                           
  1696 ;; *************** function _get_time *****************
  1697 ;; Defined at:
  1698 ;;		line 39 in file "time.c"
  1699 ;; Parameters:    Size  Location     Type
  1700 ;;  datime          2   27[COMRAM] PTR unsigned char 
  1701 ;;		 -> end_time(7), start_time(7), 
  1702 ;; Auto vars:     Size  Location     Type
  1703 ;;  i               2   30[COMRAM] int 
  1704 ;; Return value:  Size  Location     Type
  1705 ;;                  1    wreg      void 
  1706 ;; Registers used:
  1707 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1708 ;; Tracked objects:
  1709 ;;		On entry : 0/0
  1710 ;;		On exit  : 0/0
  1711 ;;		Unchanged: 0/0
  1712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1713 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1714 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1715 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1716 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1717 ;;Total ram usage:        5 bytes
  1718 ;; Hardware stack levels used:    1
  1719 ;; Hardware stack levels required when called:    6
  1720 ;; This function calls:
  1721 ;;		_I2C_Master_Read
  1722 ;;		_I2C_Master_Start
  1723 ;;		_I2C_Master_Stop
  1724 ;;		_I2C_Master_Write
  1725 ;; This function is called by:
  1726 ;;		_sort
  1727 ;; This function uses a non-reentrant model
  1728 ;;
  1729                           
  1730                           	psect	text6
  1731  001918                     __ptext6:
  1732                           	opt stack 0
  1733  001918                     _get_time:
  1734                           	opt stack 23
  1735                           
  1736                           ;time.c: 40: I2C_Master_Start();
  1737                           
  1738                           ;incstack = 0
  1739  001918  EC12  F011         	call	_I2C_Master_Start	;wreg free
  1740                           
  1741                           ;time.c: 41: I2C_Master_Write(0b11010000);
  1742  00191C  0E00               	movlw	0
  1743  00191E  6E1B               	movwf	I2C_Master_Write@d+1,c
  1744  001920  0ED0               	movlw	208
  1745  001922  6E1A               	movwf	I2C_Master_Write@d,c
  1746  001924  EC04  F011         	call	_I2C_Master_Write	;wreg free
  1747                           
  1748                           ;time.c: 42: I2C_Master_Write(0x00);
  1749  001928  0E00               	movlw	0
  1750  00192A  6E1B               	movwf	I2C_Master_Write@d+1,c
  1751  00192C  0E00               	movlw	0
  1752  00192E  6E1A               	movwf	I2C_Master_Write@d,c
  1753  001930  EC04  F011         	call	_I2C_Master_Write	;wreg free
  1754                           
  1755                           ;time.c: 43: I2C_Master_Stop();
  1756  001934  EC0E  F011         	call	_I2C_Master_Stop	;wreg free
  1757                           
  1758                           ;time.c: 46: I2C_Master_Start();
  1759  001938  EC12  F011         	call	_I2C_Master_Start	;wreg free
  1760                           
  1761                           ;time.c: 47: I2C_Master_Write(0b11010001);
  1762  00193C  0E00               	movlw	0
  1763  00193E  6E1B               	movwf	I2C_Master_Write@d+1,c
  1764  001940  0ED1               	movlw	209
  1765  001942  6E1A               	movwf	I2C_Master_Write@d,c
  1766  001944  EC04  F011         	call	_I2C_Master_Write	;wreg free
  1767                           
  1768                           ;time.c: 48: for(int i = 0; i < 6; i++){
  1769  001948  0E00               	movlw	0
  1770  00194A  6E20               	movwf	get_time@i+1,c
  1771  00194C  0E00               	movlw	0
  1772  00194E  6E1F               	movwf	get_time@i,c
  1773  001950                     l3137:
  1774  001950  BE20               	btfsc	get_time@i+1,7,c
  1775  001952  D006               	goto	l3141
  1776  001954  5020               	movf	get_time@i+1,w,c
  1777  001956  E12D               	bnz	l3149
  1778  001958  0E06               	movlw	6
  1779  00195A  5C1F               	subwf	get_time@i,w,c
  1780  00195C  B0D8               	btfsc	status,0,c
  1781  00195E  D029               	goto	l3149
  1782  001960                     l3141:
  1783                           
  1784                           ;time.c: 49: datime[i] = I2C_Master_Read(1);
  1785  001960  501F               	movf	get_time@i,w,c
  1786  001962  241C               	addwf	get_time@datime,w,c
  1787  001964  6ED9               	movwf	fsr2l,c
  1788  001966  5020               	movf	get_time@i+1,w,c
  1789  001968  201D               	addwfc	get_time@datime+1,w,c
  1790  00196A  6EDA               	movwf	fsr2h,c
  1791  00196C  0E01               	movlw	1
  1792  00196E  EC85  F010         	call	_I2C_Master_Read
  1793  001972  6EDF               	movwf	indf2,c
  1794                           
  1795                           ;time.c: 50: datime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  1796  001974  501F               	movf	get_time@i,w,c
  1797  001976  241C               	addwf	get_time@datime,w,c
  1798  001978  6ED9               	movwf	fsr2l,c
  1799  00197A  5020               	movf	get_time@i+1,w,c
  1800  00197C  201D               	addwfc	get_time@datime+1,w,c
  1801  00197E  6EDA               	movwf	fsr2h,c
  1802  001980  0E44               	movlw	low _time
  1803  001982  241F               	addwf	get_time@i,w,c
  1804  001984  6EE1               	movwf	fsr1l,c
  1805  001986  0E00               	movlw	high _time
  1806  001988  2020               	addwfc	get_time@i+1,w,c
  1807  00198A  6EE2               	movwf	fsr1h,c
  1808  00198C  50E7               	movf	indf1,w,c
  1809  00198E  6E1E               	movwf	??_get_time& (0+255),c
  1810  001990  381E               	swapf	??_get_time,w,c
  1811  001992  0B0F               	andlw	15
  1812  001994  0B0F               	andlw	15
  1813  001996  0D0A               	mullw	10
  1814  001998  0E44               	movlw	low _time
  1815  00199A  241F               	addwf	get_time@i,w,c
  1816  00199C  6EE1               	movwf	fsr1l,c
  1817  00199E  0E00               	movlw	high _time
  1818  0019A0  2020               	addwfc	get_time@i+1,w,c
  1819  0019A2  6EE2               	movwf	fsr1h,c
  1820  0019A4  50E7               	movf	indf1,w,c
  1821  0019A6  0B0F               	andlw	15
  1822  0019A8  24F3               	addwf	prodl,w,c
  1823  0019AA  6EDF               	movwf	indf2,c
  1824  0019AC  4A1F               	infsnz	get_time@i,f,c
  1825  0019AE  2A20               	incf	get_time@i+1,f,c
  1826  0019B0  D7CF               	goto	l3137
  1827  0019B2                     l3149:
  1828                           
  1829                           ;time.c: 52: }
  1830                           ;time.c: 53: datime[6] = I2C_Master_Read(0);
  1831  0019B2  EE20 F006          	lfsr	2,6
  1832  0019B6  501C               	movf	get_time@datime,w,c
  1833  0019B8  26D9               	addwf	fsr2l,f,c
  1834  0019BA  501D               	movf	get_time@datime+1,w,c
  1835  0019BC  22DA               	addwfc	fsr2h,f,c
  1836  0019BE  0E00               	movlw	0
  1837  0019C0  EC85  F010         	call	_I2C_Master_Read
  1838  0019C4  6EDF               	movwf	indf2,c
  1839                           
  1840                           ;time.c: 54: I2C_Master_Stop();
  1841  0019C6  EC0E  F011         	call	_I2C_Master_Stop	;wreg free
  1842                           
  1843                           ;time.c: 55: I2C_Master_Write(0b11010000);
  1844  0019CA  0E00               	movlw	0
  1845  0019CC  6E1B               	movwf	I2C_Master_Write@d+1,c
  1846  0019CE  0ED0               	movlw	208
  1847  0019D0  6E1A               	movwf	I2C_Master_Write@d,c
  1848  0019D2  EC04  F011         	call	_I2C_Master_Write	;wreg free
  1849                           
  1850                           ;time.c: 56: I2C_Master_Write(0x00);
  1851  0019D6  0E00               	movlw	0
  1852  0019D8  6E1B               	movwf	I2C_Master_Write@d+1,c
  1853  0019DA  0E00               	movlw	0
  1854  0019DC  6E1A               	movwf	I2C_Master_Write@d,c
  1855  0019DE  EC04  F011         	call	_I2C_Master_Write	;wreg free
  1856                           
  1857                           ;time.c: 57: I2C_Master_Stop();
  1858  0019E2  EC0E  F011         	call	_I2C_Master_Stop	;wreg free
  1859  0019E6  0012               	return		;funcret
  1860  0019E8                     __end_of_get_time:
  1861                           	opt stack 0
  1862                           tblptru	equ	0xFF8
  1863                           prodl	equ	0xFF3
  1864                           postinc0	equ	0xFEE
  1865                           wreg	equ	0xFE8
  1866                           indf1	equ	0xFE7
  1867                           fsr1h	equ	0xFE2
  1868                           fsr1l	equ	0xFE1
  1869                           indf2	equ	0xFDF
  1870                           fsr2h	equ	0xFDA
  1871                           fsr2l	equ	0xFD9
  1872                           status	equ	0xFD8
  1873                           
  1874 ;; *************** function _gate *****************
  1875 ;; Defined at:
  1876 ;;		line 117 in file "servo.c"
  1877 ;; Parameters:    Size  Location     Type
  1878 ;;		None
  1879 ;; Auto vars:     Size  Location     Type
  1880 ;;  i               2    0        int 
  1881 ;; Return value:  Size  Location     Type
  1882 ;;                  1    wreg      void 
  1883 ;; Registers used:
  1884 ;;		wreg
  1885 ;; Tracked objects:
  1886 ;;		On entry : 0/0
  1887 ;;		On exit  : 0/0
  1888 ;;		Unchanged: 0/0
  1889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1892 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1893 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1894 ;;Total ram usage:        1 bytes
  1895 ;; Hardware stack levels used:    1
  1896 ;; Hardware stack levels required when called:    4
  1897 ;; This function calls:
  1898 ;;		Nothing
  1899 ;; This function is called by:
  1900 ;;		_sort
  1901 ;; This function uses a non-reentrant model
  1902 ;;
  1903                           
  1904                           	psect	text7
  1905  001F30                     __ptext7:
  1906                           	opt stack 0
  1907  001F30                     _gate:
  1908                           	opt stack 25
  1909                           
  1910                           ;servo.c: 118: int i;
  1911                           ;servo.c: 119: while(PORTBbits.RB3 == 1) {
  1912                           
  1913                           ;incstack = 0
  1914  001F30  D011               	goto	l3267
  1915  001F32                     l282:
  1916                           
  1917                           ;servo.c: 120: LATCbits.LATC2 = 1;
  1918  001F32  848B               	bsf	3979,2,c	;volatile
  1919                           
  1920                           ;servo.c: 121: _delay((unsigned long)((1.68)*(8000000/4000.0)));
  1921  001F34  0E05               	movlw	5
  1922  001F36  6E19               	movwf	??_gate& (0+255),c
  1923  001F38  0E5C               	movlw	92
  1924  001F3A                     u3017:
  1925  001F3A  2EE8               	decfsz	wreg,f,c
  1926  001F3C  D7FE               	bra	u3017
  1927  001F3E  2E19               	decfsz	??_gate& (0+255),f,c
  1928  001F40  D7FC               	bra	u3017
  1929                           
  1930                           ;servo.c: 122: LATCbits.LATC2 = 0;
  1931  001F42  948B               	bcf	3979,2,c	;volatile
  1932                           
  1933                           ;servo.c: 123: _delay((unsigned long)((18.32)*(8000000/4000.0)));
  1934  001F44  0E30               	movlw	48
  1935  001F46  6E19               	movwf	??_gate& (0+255),c
  1936  001F48  0E94               	movlw	148
  1937  001F4A                     u3027:
  1938  001F4A  2EE8               	decfsz	wreg,f,c
  1939  001F4C  D7FE               	bra	u3027
  1940  001F4E  2E19               	decfsz	??_gate& (0+255),f,c
  1941  001F50  D7FC               	bra	u3027
  1942  001F52  D000               	nop2	
  1943  001F54                     l3267:
  1944  001F54  A681               	btfss	3969,3,c	;volatile
  1945  001F56  D012               	goto	l3273
  1946  001F58  D7EC               	goto	l282
  1947  001F5A                     l285:
  1948                           
  1949                           ;servo.c: 127: LATCbits.LATC2 = 1;
  1950  001F5A  848B               	bsf	3979,2,c	;volatile
  1951                           
  1952                           ;servo.c: 128: _delay((unsigned long)((1.68)*(8000000/4000.0)));
  1953  001F5C  0E05               	movlw	5
  1954  001F5E  6E19               	movwf	??_gate& (0+255),c
  1955  001F60  0E5C               	movlw	92
  1956  001F62                     u3037:
  1957  001F62  2EE8               	decfsz	wreg,f,c
  1958  001F64  D7FE               	bra	u3037
  1959  001F66  2E19               	decfsz	??_gate& (0+255),f,c
  1960  001F68  D7FC               	bra	u3037
  1961                           
  1962                           ;servo.c: 130: LATCbits.LATC2 = 0;
  1963  001F6A  948B               	bcf	3979,2,c	;volatile
  1964                           
  1965                           ;servo.c: 131: _delay((unsigned long)((18.32)*(8000000/4000.0)));
  1966  001F6C  0E30               	movlw	48
  1967  001F6E  6E19               	movwf	??_gate& (0+255),c
  1968  001F70  0E94               	movlw	148
  1969  001F72                     u3047:
  1970  001F72  2EE8               	decfsz	wreg,f,c
  1971  001F74  D7FE               	bra	u3047
  1972  001F76  2E19               	decfsz	??_gate& (0+255),f,c
  1973  001F78  D7FC               	bra	u3047
  1974  001F7A  D000               	nop2	
  1975  001F7C                     l3273:
  1976  001F7C  B681               	btfsc	3969,3,c	;volatile
  1977  001F7E  0012               	return	
  1978  001F80  D7EC               	goto	l285
  1979  001F82                     __end_of_gate:
  1980                           	opt stack 0
  1981                           tblptru	equ	0xFF8
  1982                           prodl	equ	0xFF3
  1983                           postinc0	equ	0xFEE
  1984                           wreg	equ	0xFE8
  1985                           indf1	equ	0xFE7
  1986                           fsr1h	equ	0xFE2
  1987                           fsr1l	equ	0xFE1
  1988                           indf2	equ	0xFDF
  1989                           fsr2h	equ	0xFDA
  1990                           fsr2l	equ	0xFD9
  1991                           status	equ	0xFD8
  1992                           
  1993 ;; *************** function _initPIC *****************
  1994 ;; Defined at:
  1995 ;;		line 33 in file "initPic.c"
  1996 ;; Parameters:    Size  Location     Type
  1997 ;;		None
  1998 ;; Auto vars:     Size  Location     Type
  1999 ;;		None
  2000 ;; Return value:  Size  Location     Type
  2001 ;;                  2   82[None  ] int 
  2002 ;; Registers used:
  2003 ;;		wreg, status,2, status,0, cstack
  2004 ;; Tracked objects:
  2005 ;;		On entry : 0/0
  2006 ;;		On exit  : 0/0
  2007 ;;		Unchanged: 0/0
  2008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2012 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2013 ;;Total ram usage:        0 bytes
  2014 ;; Hardware stack levels used:    1
  2015 ;; Hardware stack levels required when called:    7
  2016 ;; This function calls:
  2017 ;;		_I2C_Master_Init
  2018 ;;		_I2C_Master_Start
  2019 ;;		_I2C_Master_Stop
  2020 ;;		_I2C_Master_Write
  2021 ;;		_initLCD
  2022 ;;		_main_servo_control
  2023 ;;		_side_servo_control
  2024 ;; This function is called by:
  2025 ;;		_main
  2026 ;; This function uses a non-reentrant model
  2027 ;;
  2028                           
  2029                           	psect	text8
  2030  001B5E                     __ptext8:
  2031                           	opt stack 0
  2032  001B5E                     _initPIC:
  2033                           	opt stack 23
  2034                           
  2035                           ;initPic.c: 34: TRISA = 0b11100111;
  2036                           
  2037                           ;incstack = 0
  2038  001B5E  0EE7               	movlw	231
  2039  001B60  6E92               	movwf	3986,c	;volatile
  2040                           
  2041                           ;initPic.c: 35: TRISC = 0x11100110;
  2042  001B62  0E10               	movlw	16
  2043  001B64  6E94               	movwf	3988,c	;volatile
  2044                           
  2045                           ;initPic.c: 37: TRISC = 0x11100100;
  2046  001B66  0E00               	movlw	0
  2047  001B68  6E94               	movwf	3988,c	;volatile
  2048                           
  2049                           ;initPic.c: 38: TRISD = 0x00;
  2050  001B6A  0E00               	movlw	0
  2051  001B6C  6E95               	movwf	3989,c	;volatile
  2052                           
  2053                           ;initPic.c: 39: TRISB = 0b11111011;
  2054  001B6E  0EFB               	movlw	251
  2055  001B70  6E93               	movwf	3987,c	;volatile
  2056                           
  2057                           ;initPic.c: 40: TRISE = 0x00;
  2058  001B72  0E00               	movlw	0
  2059  001B74  6E96               	movwf	3990,c	;volatile
  2060                           
  2061                           ;initPic.c: 43: LATA = 0x00;
  2062  001B76  0E00               	movlw	0
  2063  001B78  6E89               	movwf	3977,c	;volatile
  2064                           
  2065                           ;initPic.c: 44: LATB = 0x00;
  2066  001B7A  0E00               	movlw	0
  2067  001B7C  6E8A               	movwf	3978,c	;volatile
  2068                           
  2069                           ;initPic.c: 45: LATC = 0x00;
  2070  001B7E  0E00               	movlw	0
  2071  001B80  6E8B               	movwf	3979,c	;volatile
  2072                           
  2073                           ;initPic.c: 46: LATD = 0x00;
  2074  001B82  0E00               	movlw	0
  2075  001B84  6E8C               	movwf	3980,c	;volatile
  2076                           
  2077                           ;initPic.c: 47: LATE = 0x00;
  2078  001B86  0E00               	movlw	0
  2079  001B88  6E8D               	movwf	3981,c	;volatile
  2080                           
  2081                           ;initPic.c: 49: ADCON0 = 0x00;
  2082  001B8A  0E00               	movlw	0
  2083  001B8C  6EC2               	movwf	4034,c	;volatile
  2084                           
  2085                           ;initPic.c: 50: ADCON1 = 0x0C;
  2086  001B8E  0E0C               	movlw	12
  2087  001B90  6EC1               	movwf	4033,c	;volatile
  2088                           
  2089                           ;initPic.c: 53: ADCON2 = 0b00110001;
  2090  001B92  0E31               	movlw	49
  2091  001B94  6EC0               	movwf	4032,c	;volatile
  2092                           
  2093                           ;initPic.c: 54: INT1IE = 1;
  2094  001B96  86F0               	bsf	intcon3,3,c	;volatile
  2095                           
  2096                           ;initPic.c: 56: initLCD();
  2097  001B98  EC0D  F010         	call	_initLCD	;wreg free
  2098                           
  2099                           ;initPic.c: 58: I2C_Master_Init(10000);
  2100  001B9C  0E10               	movlw	16
  2101  001B9E  6E26               	movwf	I2C_Master_Init@c,c
  2102  001BA0  0E27               	movlw	39
  2103  001BA2  6E27               	movwf	I2C_Master_Init@c+1,c
  2104  001BA4  0E00               	movlw	0
  2105  001BA6  6E28               	movwf	I2C_Master_Init@c+2,c
  2106  001BA8  0E00               	movlw	0
  2107  001BAA  6E29               	movwf	I2C_Master_Init@c+3,c
  2108  001BAC  ECE8  F00E         	call	_I2C_Master_Init	;wreg free
  2109                           
  2110                           ;initPic.c: 59: I2C_Master_Start();
  2111  001BB0  EC12  F011         	call	_I2C_Master_Start	;wreg free
  2112                           
  2113                           ;initPic.c: 60: I2C_Master_Write(0b11010000);
  2114  001BB4  0E00               	movlw	0
  2115  001BB6  6E1B               	movwf	I2C_Master_Write@d+1,c
  2116  001BB8  0ED0               	movlw	208
  2117  001BBA  6E1A               	movwf	I2C_Master_Write@d,c
  2118  001BBC  EC04  F011         	call	_I2C_Master_Write	;wreg free
  2119                           
  2120                           ;initPic.c: 61: I2C_Master_Write(0x00);
  2121  001BC0  0E00               	movlw	0
  2122  001BC2  6E1B               	movwf	I2C_Master_Write@d+1,c
  2123  001BC4  0E00               	movlw	0
  2124  001BC6  6E1A               	movwf	I2C_Master_Write@d,c
  2125  001BC8  EC04  F011         	call	_I2C_Master_Write	;wreg free
  2126                           
  2127                           ;initPic.c: 62: I2C_Master_Stop();
  2128  001BCC  EC0E  F011         	call	_I2C_Master_Stop	;wreg free
  2129                           
  2130                           ;initPic.c: 63: main_servo_control(0);
  2131  001BD0  0E00               	movlw	0
  2132  001BD2  6E1A               	movwf	main_servo_control@dir+1,c
  2133  001BD4  0E00               	movlw	0
  2134  001BD6  6E19               	movwf	main_servo_control@dir,c
  2135  001BD8  EC1D  F00C         	call	_main_servo_control	;wreg free
  2136                           
  2137                           ;initPic.c: 64: side_servo_control(0);
  2138  001BDC  0E00               	movlw	0
  2139  001BDE  6E1A               	movwf	side_servo_control@dir+1,c
  2140  001BE0  0E00               	movlw	0
  2141  001BE2  6E19               	movwf	side_servo_control@dir,c
  2142  001BE4  EC2B  F00B         	call	_side_servo_control	;wreg free
  2143                           
  2144                           ;initPic.c: 67: (INTCONbits.GIE = 1);
  2145  001BE8  8EF2               	bsf	intcon,7,c	;volatile
  2146  001BEA  0012               	return		;funcret
  2147  001BEC                     __end_of_initPIC:
  2148                           	opt stack 0
  2149                           tblptru	equ	0xFF8
  2150                           prodl	equ	0xFF3
  2151                           intcon	equ	0xFF2
  2152                           intcon3	equ	0xFF0
  2153                           postinc0	equ	0xFEE
  2154                           wreg	equ	0xFE8
  2155                           indf1	equ	0xFE7
  2156                           fsr1h	equ	0xFE2
  2157                           fsr1l	equ	0xFE1
  2158                           indf2	equ	0xFDF
  2159                           fsr2h	equ	0xFDA
  2160                           fsr2l	equ	0xFD9
  2161                           status	equ	0xFD8
  2162                           
  2163 ;; *************** function _side_servo_control *****************
  2164 ;; Defined at:
  2165 ;;		line 48 in file "servo.c"
  2166 ;; Parameters:    Size  Location     Type
  2167 ;;  dir             2   24[COMRAM] int 
  2168 ;; Auto vars:     Size  Location     Type
  2169 ;;  i               2   28[COMRAM] int 
  2170 ;; Return value:  Size  Location     Type
  2171 ;;                  1    wreg      void 
  2172 ;; Registers used:
  2173 ;;		wreg, status,2, status,0
  2174 ;; Tracked objects:
  2175 ;;		On entry : 0/0
  2176 ;;		On exit  : 0/0
  2177 ;;		Unchanged: 0/0
  2178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2179 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2180 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2181 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2182 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2183 ;;Total ram usage:        6 bytes
  2184 ;; Hardware stack levels used:    1
  2185 ;; Hardware stack levels required when called:    4
  2186 ;; This function calls:
  2187 ;;		Nothing
  2188 ;; This function is called by:
  2189 ;;		_sort
  2190 ;;		_initPIC
  2191 ;;		_move_can
  2192 ;; This function uses a non-reentrant model
  2193 ;;
  2194                           
  2195                           	psect	text9
  2196  001656                     __ptext9:
  2197                           	opt stack 0
  2198  001656                     _side_servo_control:
  2199                           	opt stack 25
  2200                           
  2201                           ;servo.c: 49: int i;
  2202                           ;servo.c: 50: if( dir == 0){
  2203                           
  2204                           ;incstack = 0
  2205  001656  5019               	movf	side_servo_control@dir,w,c
  2206  001658  101A               	iorwf	side_servo_control@dir+1,w,c
  2207  00165A  A4D8               	btfss	status,2,c
  2208  00165C  D026               	goto	l3215
  2209                           
  2210                           ;servo.c: 51: for (i = 0; i < 10; i++) {
  2211  00165E  0E00               	movlw	0
  2212  001660  6E1E               	movwf	side_servo_control@i+1,c
  2213  001662  0E00               	movlw	0
  2214  001664  6E1D               	movwf	side_servo_control@i,c
  2215  001666  BE1E               	btfsc	side_servo_control@i+1,7,c
  2216  001668  D008               	goto	l258
  2217  00166A  501E               	movf	side_servo_control@i+1,w,c
  2218  00166C  E105               	bnz	u2620
  2219  00166E  0E0A               	movlw	10
  2220  001670  5C1D               	subwf	side_servo_control@i,w,c
  2221  001672  B0D8               	btfsc	status,0,c
  2222  001674  0012               	return	
  2223  001676  D001               	goto	l258
  2224  001678                     u2620:
  2225  001678  0012               	return	
  2226  00167A                     l258:
  2227                           
  2228                           ;servo.c: 52: LATAbits.LATA3 = 1;
  2229  00167A  8689               	bsf	3977,3,c	;volatile
  2230                           
  2231                           ;servo.c: 53: _delay((unsigned long)((1.5)*(8000000/4000.0)));
  2232  00167C  0E04               	movlw	4
  2233  00167E  6E1B               	movwf	??_side_servo_control& (0+255),c
  2234  001680  0EE4               	movlw	228
  2235  001682                     u3057:
  2236  001682  2EE8               	decfsz	wreg,f,c
  2237  001684  D7FE               	bra	u3057
  2238  001686  2E1B               	decfsz	??_side_servo_control& (0+255),f,c
  2239  001688  D7FC               	bra	u3057
  2240  00168A  D000               	nop2	
  2241                           
  2242                           ;servo.c: 55: LATAbits.LATA3 = 0;
  2243  00168C  9689               	bcf	3977,3,c	;volatile
  2244                           
  2245                           ;servo.c: 56: _delay((unsigned long)((18.5)*(8000000/4000.0)));
  2246  00168E  0E31               	movlw	49
  2247  001690  6E1B               	movwf	??_side_servo_control& (0+255),c
  2248  001692  0E0C               	movlw	12
  2249  001694                     u3067:
  2250  001694  2EE8               	decfsz	wreg,f,c
  2251  001696  D7FE               	bra	u3067
  2252  001698  2E1B               	decfsz	??_side_servo_control& (0+255),f,c
  2253  00169A  D7FC               	bra	u3067
  2254  00169C  4A1D               	infsnz	side_servo_control@i,f,c
  2255  00169E  2A1E               	incf	side_servo_control@i+1,f,c
  2256  0016A0  BE1E               	btfsc	side_servo_control@i+1,7,c
  2257  0016A2  D7EB               	goto	l258
  2258  0016A4  501E               	movf	side_servo_control@i+1,w,c
  2259  0016A6  E150               	bnz	l268
  2260  0016A8  D7E2               	goto	L1
  2261  0016AA                     l3215:
  2262                           
  2263                           ;servo.c: 59: else if(dir == 1){
  2264  0016AA  0419               	decf	side_servo_control@dir,w,c
  2265  0016AC  101A               	iorwf	side_servo_control@dir+1,w,c
  2266  0016AE  A4D8               	btfss	status,2,c
  2267  0016B0  D025               	goto	l3229
  2268                           
  2269                           ;servo.c: 60: for (i = 0; i < 10; i++) {
  2270  0016B2  0E00               	movlw	0
  2271  0016B4  6E1E               	movwf	side_servo_control@i+1,c
  2272  0016B6  0E00               	movlw	0
  2273  0016B8  6E1D               	movwf	side_servo_control@i,c
  2274  0016BA                     l3219:
  2275  0016BA  BE1E               	btfsc	side_servo_control@i+1,7,c
  2276  0016BC  D006               	goto	l262
  2277  0016BE  501E               	movf	side_servo_control@i+1,w,c
  2278  0016C0  E143               	bnz	l268
  2279  0016C2  0E0A               	movlw	10
  2280  0016C4  5C1D               	subwf	side_servo_control@i,w,c
  2281  0016C6  B0D8               	btfsc	status,0,c
  2282  0016C8  0012               	return	
  2283  0016CA                     l262:
  2284                           
  2285                           ;servo.c: 61: LATAbits.LATA3 = 1;
  2286  0016CA  8689               	bsf	3977,3,c	;volatile
  2287                           
  2288                           ;servo.c: 62: _delay((unsigned long)((2)*(8000000/4000.0)));
  2289  0016CC  0E06               	movlw	6
  2290  0016CE  6E1B               	movwf	??_side_servo_control& (0+255),c
  2291  0016D0  0E30               	movlw	48
  2292  0016D2                     u3077:
  2293  0016D2  2EE8               	decfsz	wreg,f,c
  2294  0016D4  D7FE               	bra	u3077
  2295  0016D6  2E1B               	decfsz	??_side_servo_control& (0+255),f,c
  2296  0016D8  D7FC               	bra	u3077
  2297  0016DA  D000               	nop2	
  2298                           
  2299                           ;servo.c: 64: LATAbits.LATA3 = 0;
  2300  0016DC  9689               	bcf	3977,3,c	;volatile
  2301                           
  2302                           ;servo.c: 65: _delay((unsigned long)((118)*(8000000/4000.0)));
  2303  0016DE  0E02               	movlw	2
  2304  0016E0  6E1C               	movwf	(??_side_servo_control+1)& (0+255),c
  2305  0016E2  0E33               	movlw	51
  2306  0016E4  6E1B               	movwf	??_side_servo_control& (0+255),c
  2307  0016E6  0E7B               	movlw	123
  2308  0016E8                     u3087:
  2309  0016E8  2EE8               	decfsz	wreg,f,c
  2310  0016EA  D7FE               	bra	u3087
  2311  0016EC  2E1B               	decfsz	??_side_servo_control& (0+255),f,c
  2312  0016EE  D7FC               	bra	u3087
  2313  0016F0  2E1C               	decfsz	(??_side_servo_control+1)& (0+255),f,c
  2314  0016F2  D7FA               	bra	u3087
  2315  0016F4  F000               	nop	
  2316  0016F6  4A1D               	infsnz	side_servo_control@i,f,c
  2317  0016F8  2A1E               	incf	side_servo_control@i+1,f,c
  2318  0016FA  D7DF               	goto	l3219
  2319  0016FC                     l3229:
  2320                           
  2321                           ;servo.c: 68: else if (dir == 2){
  2322  0016FC  0E02               	movlw	2
  2323  0016FE  1819               	xorwf	side_servo_control@dir,w,c
  2324  001700  101A               	iorwf	side_servo_control@dir+1,w,c
  2325  001702  A4D8               	btfss	status,2,c
  2326  001704  0012               	return	
  2327                           
  2328                           ;servo.c: 69: for (i = 0; i < 10; i++) {
  2329  001706  0E00               	movlw	0
  2330  001708  6E1E               	movwf	side_servo_control@i+1,c
  2331  00170A  0E00               	movlw	0
  2332  00170C  6E1D               	movwf	side_servo_control@i,c
  2333  00170E                     l3233:
  2334  00170E  BE1E               	btfsc	side_servo_control@i+1,7,c
  2335  001710  D006               	goto	l266
  2336  001712  501E               	movf	side_servo_control@i+1,w,c
  2337  001714  E119               	bnz	l268
  2338  001716  0E0A               	movlw	10
  2339  001718  5C1D               	subwf	side_servo_control@i,w,c
  2340  00171A  B0D8               	btfsc	status,0,c
  2341  00171C  0012               	return	
  2342  00171E                     l266:
  2343                           
  2344                           ;servo.c: 70: LATAbits.LATA3 = 1;
  2345  00171E  8689               	bsf	3977,3,c	;volatile
  2346                           
  2347                           ;servo.c: 71: _delay((unsigned long)((1.3)*(8000000/4000.0)));
  2348  001720  0E04               	movlw	4
  2349  001722  6E1B               	movwf	??_side_servo_control& (0+255),c
  2350  001724  0E5F               	movlw	95
  2351  001726                     u3097:
  2352  001726  2EE8               	decfsz	wreg,f,c
  2353  001728  D7FE               	bra	u3097
  2354  00172A  2E1B               	decfsz	??_side_servo_control& (0+255),f,c
  2355  00172C  D7FC               	bra	u3097
  2356  00172E  F000               	nop	
  2357                           
  2358                           ;servo.c: 73: LATAbits.LATA3 = 0;
  2359  001730  9689               	bcf	3977,3,c	;volatile
  2360                           
  2361                           ;servo.c: 74: _delay((unsigned long)((18.7)*(8000000/4000.0)));
  2362  001732  0E31               	movlw	49
  2363  001734  6E1B               	movwf	??_side_servo_control& (0+255),c
  2364  001736  0E91               	movlw	145
  2365  001738                     u3107:
  2366  001738  2EE8               	decfsz	wreg,f,c
  2367  00173A  D7FE               	bra	u3107
  2368  00173C  2E1B               	decfsz	??_side_servo_control& (0+255),f,c
  2369  00173E  D7FC               	bra	u3107
  2370  001740  F000               	nop	
  2371  001742  4A1D               	infsnz	side_servo_control@i,f,c
  2372  001744  2A1E               	incf	side_servo_control@i+1,f,c
  2373  001746  D7E3               	goto	l3233
  2374  001748                     l268:
  2375  001748  0012               	return		;funcret
  2376  00174A                     __end_of_side_servo_control:
  2377                           	opt stack 0
  2378                           tblptru	equ	0xFF8
  2379                           prodl	equ	0xFF3
  2380                           intcon	equ	0xFF2
  2381                           intcon3	equ	0xFF0
  2382                           postinc0	equ	0xFEE
  2383                           wreg	equ	0xFE8
  2384                           indf1	equ	0xFE7
  2385                           fsr1h	equ	0xFE2
  2386                           fsr1l	equ	0xFE1
  2387                           indf2	equ	0xFDF
  2388                           fsr2h	equ	0xFDA
  2389                           fsr2l	equ	0xFD9
  2390                           status	equ	0xFD8
  2391                           
  2392 ;; *************** function _main_servo_control *****************
  2393 ;; Defined at:
  2394 ;;		line 17 in file "servo.c"
  2395 ;; Parameters:    Size  Location     Type
  2396 ;;  dir             2   24[COMRAM] int 
  2397 ;; Auto vars:     Size  Location     Type
  2398 ;;  i               2   27[COMRAM] int 
  2399 ;; Return value:  Size  Location     Type
  2400 ;;                  1    wreg      void 
  2401 ;; Registers used:
  2402 ;;		wreg, status,2, status,0
  2403 ;; Tracked objects:
  2404 ;;		On entry : 0/0
  2405 ;;		On exit  : 0/0
  2406 ;;		Unchanged: 0/0
  2407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2408 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2409 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2410 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2411 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2412 ;;Total ram usage:        5 bytes
  2413 ;; Hardware stack levels used:    1
  2414 ;; Hardware stack levels required when called:    4
  2415 ;; This function calls:
  2416 ;;		Nothing
  2417 ;; This function is called by:
  2418 ;;		_sort
  2419 ;;		_initPIC
  2420 ;;		_move_can
  2421 ;; This function uses a non-reentrant model
  2422 ;;
  2423                           
  2424                           	psect	text10
  2425  00183A                     __ptext10:
  2426                           	opt stack 0
  2427  00183A                     _main_servo_control:
  2428                           	opt stack 25
  2429                           
  2430                           ;servo.c: 18: int i;
  2431                           ;servo.c: 19: if( dir == 0){
  2432                           
  2433                           ;incstack = 0
  2434  00183A  5019               	movf	main_servo_control@dir,w,c
  2435  00183C  101A               	iorwf	main_servo_control@dir+1,w,c
  2436  00183E  A4D8               	btfss	status,2,c
  2437  001840  D026               	goto	l3173
  2438                           
  2439                           ;servo.c: 20: for (i = 0; i < 10; i++) {
  2440  001842  0E00               	movlw	0
  2441  001844  6E1D               	movwf	main_servo_control@i+1,c
  2442  001846  0E00               	movlw	0
  2443  001848  6E1C               	movwf	main_servo_control@i,c
  2444  00184A  BE1D               	btfsc	main_servo_control@i+1,7,c
  2445  00184C  D008               	goto	l244
  2446  00184E  501D               	movf	main_servo_control@i+1,w,c
  2447  001850  E105               	bnz	u2530
  2448  001852  0E0A               	movlw	10
  2449  001854  5C1C               	subwf	main_servo_control@i,w,c
  2450  001856  B0D8               	btfsc	status,0,c
  2451  001858  0012               	return	
  2452  00185A  D001               	goto	l244
  2453  00185C                     u2530:
  2454  00185C  0012               	return	
  2455  00185E                     l244:
  2456                           
  2457                           ;servo.c: 21: LATEbits.LATE0 = 1;
  2458  00185E  808D               	bsf	3981,0,c	;volatile
  2459                           
  2460                           ;servo.c: 22: _delay((unsigned long)((1.5)*(8000000/4000.0)));
  2461  001860  0E04               	movlw	4
  2462  001862  6E1B               	movwf	??_main_servo_control& (0+255),c
  2463  001864  0EE4               	movlw	228
  2464  001866                     u3117:
  2465  001866  2EE8               	decfsz	wreg,f,c
  2466  001868  D7FE               	bra	u3117
  2467  00186A  2E1B               	decfsz	??_main_servo_control& (0+255),f,c
  2468  00186C  D7FC               	bra	u3117
  2469  00186E  D000               	nop2	
  2470                           
  2471                           ;servo.c: 24: LATEbits.LATE0 = 0;
  2472  001870  908D               	bcf	3981,0,c	;volatile
  2473                           
  2474                           ;servo.c: 25: _delay((unsigned long)((18.5)*(8000000/4000.0)));
  2475  001872  0E31               	movlw	49
  2476  001874  6E1B               	movwf	??_main_servo_control& (0+255),c
  2477  001876  0E0C               	movlw	12
  2478  001878                     u3127:
  2479  001878  2EE8               	decfsz	wreg,f,c
  2480  00187A  D7FE               	bra	u3127
  2481  00187C  2E1B               	decfsz	??_main_servo_control& (0+255),f,c
  2482  00187E  D7FC               	bra	u3127
  2483  001880  4A1C               	infsnz	main_servo_control@i,f,c
  2484  001882  2A1D               	incf	main_servo_control@i+1,f,c
  2485  001884  BE1D               	btfsc	main_servo_control@i+1,7,c
  2486  001886  D7EB               	goto	l244
  2487  001888  501D               	movf	main_servo_control@i+1,w,c
  2488  00188A  E145               	bnz	l254
  2489  00188C  D7E2               	goto	L2
  2490  00188E                     l3173:
  2491                           
  2492                           ;servo.c: 28: else if(dir == 1){
  2493  00188E  0419               	decf	main_servo_control@dir,w,c
  2494  001890  101A               	iorwf	main_servo_control@dir+1,w,c
  2495  001892  A4D8               	btfss	status,2,c
  2496  001894  D020               	goto	l3187
  2497                           
  2498                           ;servo.c: 29: for (i = 0; i < 10; i++) {
  2499  001896  0E00               	movlw	0
  2500  001898  6E1D               	movwf	main_servo_control@i+1,c
  2501  00189A  0E00               	movlw	0
  2502  00189C  6E1C               	movwf	main_servo_control@i,c
  2503  00189E                     l3177:
  2504  00189E  BE1D               	btfsc	main_servo_control@i+1,7,c
  2505  0018A0  D006               	goto	l248
  2506  0018A2  501D               	movf	main_servo_control@i+1,w,c
  2507  0018A4  E138               	bnz	l254
  2508  0018A6  0E0A               	movlw	10
  2509  0018A8  5C1C               	subwf	main_servo_control@i,w,c
  2510  0018AA  B0D8               	btfsc	status,0,c
  2511  0018AC  0012               	return	
  2512  0018AE                     l248:
  2513                           
  2514                           ;servo.c: 30: LATEbits.LATE0 = 1;
  2515  0018AE  808D               	bsf	3981,0,c	;volatile
  2516                           
  2517                           ;servo.c: 31: _delay((unsigned long)((3)*(8000000/4000.0)));
  2518  0018B0  0E08               	movlw	8
  2519  0018B2  6E1B               	movwf	??_main_servo_control& (0+255),c
  2520  0018B4  0ECA               	movlw	202
  2521  0018B6                     u3137:
  2522  0018B6  2EE8               	decfsz	wreg,f,c
  2523  0018B8  D7FE               	bra	u3137
  2524  0018BA  2E1B               	decfsz	??_main_servo_control& (0+255),f,c
  2525  0018BC  D7FC               	bra	u3137
  2526                           
  2527                           ;servo.c: 33: LATEbits.LATE0 = 0;
  2528  0018BE  908D               	bcf	3981,0,c	;volatile
  2529                           
  2530                           ;servo.c: 34: _delay((unsigned long)((17)*(8000000/4000.0)));
  2531  0018C0  0E2D               	movlw	45
  2532  0018C2  6E1B               	movwf	??_main_servo_control& (0+255),c
  2533  0018C4  0E26               	movlw	38
  2534  0018C6                     u3147:
  2535  0018C6  2EE8               	decfsz	wreg,f,c
  2536  0018C8  D7FE               	bra	u3147
  2537  0018CA  2E1B               	decfsz	??_main_servo_control& (0+255),f,c
  2538  0018CC  D7FC               	bra	u3147
  2539  0018CE  D000               	nop2	
  2540  0018D0  4A1C               	infsnz	main_servo_control@i,f,c
  2541  0018D2  2A1D               	incf	main_servo_control@i+1,f,c
  2542  0018D4  D7E4               	goto	l3177
  2543  0018D6                     l3187:
  2544                           
  2545                           ;servo.c: 37: else if (dir == 2){
  2546  0018D6  0E02               	movlw	2
  2547  0018D8  1819               	xorwf	main_servo_control@dir,w,c
  2548  0018DA  101A               	iorwf	main_servo_control@dir+1,w,c
  2549  0018DC  A4D8               	btfss	status,2,c
  2550  0018DE  0012               	return	
  2551                           
  2552                           ;servo.c: 38: for (i = 0; i < 10; i++) {
  2553  0018E0  0E00               	movlw	0
  2554  0018E2  6E1D               	movwf	main_servo_control@i+1,c
  2555  0018E4  0E00               	movlw	0
  2556  0018E6  6E1C               	movwf	main_servo_control@i,c
  2557  0018E8                     l3191:
  2558  0018E8  BE1D               	btfsc	main_servo_control@i+1,7,c
  2559  0018EA  D006               	goto	l252
  2560  0018EC  501D               	movf	main_servo_control@i+1,w,c
  2561  0018EE  E113               	bnz	l254
  2562  0018F0  0E0A               	movlw	10
  2563  0018F2  5C1C               	subwf	main_servo_control@i,w,c
  2564  0018F4  B0D8               	btfsc	status,0,c
  2565  0018F6  0012               	return	
  2566  0018F8                     l252:
  2567                           
  2568                           ;servo.c: 39: LATEbits.LATE0 = 1;
  2569  0018F8  808D               	bsf	3981,0,c	;volatile
  2570                           
  2571                           ;servo.c: 40: _delay((unsigned long)((0.15)*(8000000/4000.0)));
  2572  0018FA  0E64               	movlw	100
  2573  0018FC                     u3157:
  2574  0018FC  2EE8               	decfsz	wreg,f,c
  2575  0018FE  D7FE               	bra	u3157
  2576                           
  2577                           ;servo.c: 42: LATEbits.LATE0 = 0;
  2578  001900  908D               	bcf	3981,0,c	;volatile
  2579                           
  2580                           ;servo.c: 43: _delay((unsigned long)((19.85)*(8000000/4000.0)));
  2581  001902  0E34               	movlw	52
  2582  001904  6E1B               	movwf	??_main_servo_control& (0+255),c
  2583  001906  0E8E               	movlw	142
  2584  001908                     u3167:
  2585  001908  2EE8               	decfsz	wreg,f,c
  2586  00190A  D7FE               	bra	u3167
  2587  00190C  2E1B               	decfsz	??_main_servo_control& (0+255),f,c
  2588  00190E  D7FC               	bra	u3167
  2589  001910  4A1C               	infsnz	main_servo_control@i,f,c
  2590  001912  2A1D               	incf	main_servo_control@i+1,f,c
  2591  001914  D7E9               	goto	l3191
  2592  001916                     l254:
  2593  001916  0012               	return		;funcret
  2594  001918                     __end_of_main_servo_control:
  2595                           	opt stack 0
  2596                           tblptru	equ	0xFF8
  2597                           prodl	equ	0xFF3
  2598                           intcon	equ	0xFF2
  2599                           intcon3	equ	0xFF0
  2600                           postinc0	equ	0xFEE
  2601                           wreg	equ	0xFE8
  2602                           indf1	equ	0xFE7
  2603                           fsr1h	equ	0xFE2
  2604                           fsr1l	equ	0xFE1
  2605                           indf2	equ	0xFDF
  2606                           fsr2h	equ	0xFDA
  2607                           fsr2l	equ	0xFD9
  2608                           status	equ	0xFD8
  2609                           
  2610 ;; *************** function _initLCD *****************
  2611 ;; Defined at:
  2612 ;;		line 14 in file "lcd.c"
  2613 ;; Parameters:    Size  Location     Type
  2614 ;;		None
  2615 ;; Auto vars:     Size  Location     Type
  2616 ;;		None
  2617 ;; Return value:  Size  Location     Type
  2618 ;;                  1    wreg      void 
  2619 ;; Registers used:
  2620 ;;		wreg, status,2, status,0, cstack
  2621 ;; Tracked objects:
  2622 ;;		On entry : 0/0
  2623 ;;		On exit  : 0/0
  2624 ;;		Unchanged: 0/0
  2625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2628 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2629 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2630 ;;Total ram usage:        1 bytes
  2631 ;; Hardware stack levels used:    1
  2632 ;; Hardware stack levels required when called:    6
  2633 ;; This function calls:
  2634 ;;		_lcdInst
  2635 ;; This function is called by:
  2636 ;;		_initPIC
  2637 ;; This function uses a non-reentrant model
  2638 ;;
  2639                           
  2640                           	psect	text11
  2641  00201A                     __ptext11:
  2642                           	opt stack 0
  2643  00201A                     _initLCD:
  2644                           	opt stack 23
  2645                           
  2646                           ;lcd.c: 15: _delay((unsigned long)((15)*(8000000/4000.0)));
  2647                           
  2648                           ;incstack = 0
  2649  00201A  0E27               	movlw	39
  2650  00201C  6E1C               	movwf	??_initLCD& (0+255),c
  2651  00201E  0EF5               	movlw	245
  2652  002020                     u3177:
  2653  002020  2EE8               	decfsz	wreg,f,c
  2654  002022  D7FE               	bra	u3177
  2655  002024  2E1C               	decfsz	??_initLCD& (0+255),f,c
  2656  002026  D7FC               	bra	u3177
  2657  002028  F000               	nop	
  2658                           
  2659                           ;lcd.c: 16: lcdInst(0b00110011);
  2660  00202A  0E33               	movlw	51
  2661  00202C  ECF2  F010         	call	_lcdInst
  2662                           
  2663                           ;lcd.c: 17: lcdInst(0b00110010);
  2664  002030  0E32               	movlw	50
  2665  002032  ECF2  F010         	call	_lcdInst
  2666                           
  2667                           ;lcd.c: 18: lcdInst(0b00101000);
  2668  002036  0E28               	movlw	40
  2669  002038  ECF2  F010         	call	_lcdInst
  2670                           
  2671                           ;lcd.c: 19: lcdInst(0b00001111);
  2672  00203C  0E0F               	movlw	15
  2673  00203E  ECF2  F010         	call	_lcdInst
  2674                           
  2675                           ;lcd.c: 20: lcdInst(0b00000110);
  2676  002042  0E06               	movlw	6
  2677  002044  ECF2  F010         	call	_lcdInst
  2678                           
  2679                           ;lcd.c: 21: lcdInst(0b00000001);
  2680  002048  0E01               	movlw	1
  2681  00204A  ECF2  F010         	call	_lcdInst
  2682                           
  2683                           ;lcd.c: 22: _delay((unsigned long)((15)*(8000000/4000.0)));
  2684  00204E  0E27               	movlw	39
  2685  002050  6E1C               	movwf	??_initLCD& (0+255),c
  2686  002052  0EF5               	movlw	245
  2687  002054                     u3187:
  2688  002054  2EE8               	decfsz	wreg,f,c
  2689  002056  D7FE               	bra	u3187
  2690  002058  2E1C               	decfsz	??_initLCD& (0+255),f,c
  2691  00205A  D7FC               	bra	u3187
  2692  00205C  F000               	nop	
  2693  00205E  0012               	return		;funcret
  2694  002060                     __end_of_initLCD:
  2695                           	opt stack 0
  2696                           tblptru	equ	0xFF8
  2697                           prodl	equ	0xFF3
  2698                           intcon	equ	0xFF2
  2699                           intcon3	equ	0xFF0
  2700                           postinc0	equ	0xFEE
  2701                           wreg	equ	0xFE8
  2702                           indf1	equ	0xFE7
  2703                           fsr1h	equ	0xFE2
  2704                           fsr1l	equ	0xFE1
  2705                           indf2	equ	0xFDF
  2706                           fsr2h	equ	0xFDA
  2707                           fsr2l	equ	0xFD9
  2708                           status	equ	0xFD8
  2709                           
  2710 ;; *************** function _I2C_Master_Init *****************
  2711 ;; Defined at:
  2712 ;;		line 13 in file "I2C.c"
  2713 ;; Parameters:    Size  Location     Type
  2714 ;;  c               4   37[COMRAM] const unsigned long 
  2715 ;; Auto vars:     Size  Location     Type
  2716 ;;		None
  2717 ;; Return value:  Size  Location     Type
  2718 ;;                  1    wreg      void 
  2719 ;; Registers used:
  2720 ;;		wreg, status,2, status,0, cstack
  2721 ;; Tracked objects:
  2722 ;;		On entry : 0/0
  2723 ;;		On exit  : 0/0
  2724 ;;		Unchanged: 0/0
  2725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2726 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2728 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2729 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2730 ;;Total ram usage:        8 bytes
  2731 ;; Hardware stack levels used:    1
  2732 ;; Hardware stack levels required when called:    5
  2733 ;; This function calls:
  2734 ;;		___lldiv
  2735 ;; This function is called by:
  2736 ;;		_initPIC
  2737 ;;		_set_time
  2738 ;; This function uses a non-reentrant model
  2739 ;;
  2740                           
  2741                           	psect	text12
  2742  001DD0                     __ptext12:
  2743                           	opt stack 0
  2744  001DD0                     _I2C_Master_Init:
  2745                           	opt stack 24
  2746                           
  2747                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  2748                           
  2749                           ;incstack = 0
  2750  001DD0  0E00               	movlw	0
  2751  001DD2  6EC7               	movwf	4039,c	;volatile
  2752                           
  2753                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  2754  001DD4  0E28               	movlw	40
  2755  001DD6  6EC6               	movwf	4038,c	;volatile
  2756                           
  2757                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  2758  001DD8  0E00               	movlw	0
  2759  001DDA  6EC5               	movwf	4037,c	;volatile
  2760                           
  2761                           ;I2C.c: 19: SSPADD = (8000000/(4*c))-1;
  2762  001DDC  0E00               	movlw	0
  2763  001DDE  6E19               	movwf	___lldiv@dividend,c
  2764  001DE0  0E12               	movlw	18
  2765  001DE2  6E1A               	movwf	___lldiv@dividend+1,c
  2766  001DE4  0E7A               	movlw	122
  2767  001DE6  6E1B               	movwf	___lldiv@dividend+2,c
  2768  001DE8  0E00               	movlw	0
  2769  001DEA  6E1C               	movwf	___lldiv@dividend+3,c
  2770  001DEC  C026  F02A         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  2771  001DF0  C027  F02B         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  2772  001DF4  C028  F02C         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  2773  001DF8  C029  F02D         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  2774  001DFC  0E02               	movlw	2
  2775  001DFE                     u1445:
  2776  001DFE  90D8               	bcf	status,0,c
  2777  001E00  362A               	rlcf	??_I2C_Master_Init,f,c
  2778  001E02  362B               	rlcf	??_I2C_Master_Init+1,f,c
  2779  001E04  362C               	rlcf	??_I2C_Master_Init+2,f,c
  2780  001E06  362D               	rlcf	??_I2C_Master_Init+3,f,c
  2781  001E08  2EE8               	decfsz	wreg,f,c
  2782  001E0A  D7F9               	goto	u1445
  2783  001E0C  C02A  F01D         	movff	??_I2C_Master_Init,___lldiv@divisor
  2784  001E10  C02B  F01E         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  2785  001E14  C02C  F01F         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  2786  001E18  C02D  F020         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  2787  001E1C  ECF6  F00D         	call	___lldiv	;wreg free
  2788  001E20  0419               	decf	?___lldiv,w,c
  2789  001E22  6EC8               	movwf	4040,c	;volatile
  2790                           
  2791                           ;I2C.c: 20: TRISC3 = 1;
  2792  001E24  8694               	bsf	3988,3,c	;volatile
  2793                           
  2794                           ;I2C.c: 21: TRISC4 = 1;
  2795  001E26  8894               	bsf	3988,4,c	;volatile
  2796  001E28  0012               	return		;funcret
  2797  001E2A                     __end_of_I2C_Master_Init:
  2798                           	opt stack 0
  2799                           tblptru	equ	0xFF8
  2800                           prodl	equ	0xFF3
  2801                           intcon	equ	0xFF2
  2802                           intcon3	equ	0xFF0
  2803                           postinc0	equ	0xFEE
  2804                           wreg	equ	0xFE8
  2805                           indf1	equ	0xFE7
  2806                           fsr1h	equ	0xFE2
  2807                           fsr1l	equ	0xFE1
  2808                           indf2	equ	0xFDF
  2809                           fsr2h	equ	0xFDA
  2810                           fsr2l	equ	0xFD9
  2811                           status	equ	0xFD8
  2812                           
  2813 ;; *************** function ___lldiv *****************
  2814 ;; Defined at:
  2815 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lldiv.c"
  2816 ;; Parameters:    Size  Location     Type
  2817 ;;  dividend        4   24[COMRAM] unsigned long 
  2818 ;;  divisor         4   28[COMRAM] unsigned long 
  2819 ;; Auto vars:     Size  Location     Type
  2820 ;;  quotient        4   32[COMRAM] unsigned long 
  2821 ;;  counter         1   36[COMRAM] unsigned char 
  2822 ;; Return value:  Size  Location     Type
  2823 ;;                  4   24[COMRAM] unsigned long 
  2824 ;; Registers used:
  2825 ;;		wreg, status,2, status,0
  2826 ;; Tracked objects:
  2827 ;;		On entry : 0/0
  2828 ;;		On exit  : 0/0
  2829 ;;		Unchanged: 0/0
  2830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2831 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2832 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2834 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2835 ;;Total ram usage:       13 bytes
  2836 ;; Hardware stack levels used:    1
  2837 ;; Hardware stack levels required when called:    4
  2838 ;; This function calls:
  2839 ;;		Nothing
  2840 ;; This function is called by:
  2841 ;;		_I2C_Master_Init
  2842 ;; This function uses a non-reentrant model
  2843 ;;
  2844                           
  2845                           	psect	text13
  2846  001BEC                     __ptext13:
  2847                           	opt stack 0
  2848  001BEC                     ___lldiv:
  2849                           	opt stack 24
  2850                           
  2851                           ;incstack = 0
  2852  001BEC  0E00               	movlw	0
  2853  001BEE  6E21               	movwf	___lldiv@quotient,c
  2854  001BF0  0E00               	movlw	0
  2855  001BF2  6E22               	movwf	___lldiv@quotient+1,c
  2856  001BF4  0E00               	movlw	0
  2857  001BF6  6E23               	movwf	___lldiv@quotient+2,c
  2858  001BF8  0E00               	movlw	0
  2859  001BFA  6E24               	movwf	___lldiv@quotient+3,c
  2860  001BFC  501D               	movf	___lldiv@divisor,w,c
  2861  001BFE  101E               	iorwf	___lldiv@divisor+1,w,c
  2862  001C00  101F               	iorwf	___lldiv@divisor+2,w,c
  2863  001C02  1020               	iorwf	___lldiv@divisor+3,w,c
  2864  001C04  B4D8               	btfsc	status,2,c
  2865  001C06  D02A               	goto	l859
  2866  001C08  0E01               	movlw	1
  2867  001C0A  6E25               	movwf	___lldiv@counter,c
  2868  001C0C  D006               	goto	l2219
  2869  001C0E                     l2217:
  2870  001C0E  90D8               	bcf	status,0,c
  2871  001C10  361D               	rlcf	___lldiv@divisor,f,c
  2872  001C12  361E               	rlcf	___lldiv@divisor+1,f,c
  2873  001C14  361F               	rlcf	___lldiv@divisor+2,f,c
  2874  001C16  3620               	rlcf	___lldiv@divisor+3,f,c
  2875  001C18  2A25               	incf	___lldiv@counter,f,c
  2876  001C1A                     l2219:
  2877  001C1A  AE20               	btfss	___lldiv@divisor+3,7,c
  2878  001C1C  D7F8               	goto	l2217
  2879  001C1E                     l2221:
  2880  001C1E  90D8               	bcf	status,0,c
  2881  001C20  3621               	rlcf	___lldiv@quotient,f,c
  2882  001C22  3622               	rlcf	___lldiv@quotient+1,f,c
  2883  001C24  3623               	rlcf	___lldiv@quotient+2,f,c
  2884  001C26  3624               	rlcf	___lldiv@quotient+3,f,c
  2885  001C28  501D               	movf	___lldiv@divisor,w,c
  2886  001C2A  5C19               	subwf	___lldiv@dividend,w,c
  2887  001C2C  501E               	movf	___lldiv@divisor+1,w,c
  2888  001C2E  581A               	subwfb	___lldiv@dividend+1,w,c
  2889  001C30  501F               	movf	___lldiv@divisor+2,w,c
  2890  001C32  581B               	subwfb	___lldiv@dividend+2,w,c
  2891  001C34  5020               	movf	___lldiv@divisor+3,w,c
  2892  001C36  581C               	subwfb	___lldiv@dividend+3,w,c
  2893  001C38  A0D8               	btfss	status,0,c
  2894  001C3A  D009               	goto	l2229
  2895  001C3C  501D               	movf	___lldiv@divisor,w,c
  2896  001C3E  5E19               	subwf	___lldiv@dividend,f,c
  2897  001C40  501E               	movf	___lldiv@divisor+1,w,c
  2898  001C42  5A1A               	subwfb	___lldiv@dividend+1,f,c
  2899  001C44  501F               	movf	___lldiv@divisor+2,w,c
  2900  001C46  5A1B               	subwfb	___lldiv@dividend+2,f,c
  2901  001C48  5020               	movf	___lldiv@divisor+3,w,c
  2902  001C4A  5A1C               	subwfb	___lldiv@dividend+3,f,c
  2903  001C4C  8021               	bsf	___lldiv@quotient,0,c
  2904  001C4E                     l2229:
  2905  001C4E  90D8               	bcf	status,0,c
  2906  001C50  3220               	rrcf	___lldiv@divisor+3,f,c
  2907  001C52  321F               	rrcf	___lldiv@divisor+2,f,c
  2908  001C54  321E               	rrcf	___lldiv@divisor+1,f,c
  2909  001C56  321D               	rrcf	___lldiv@divisor,f,c
  2910  001C58  2E25               	decfsz	___lldiv@counter,f,c
  2911  001C5A  D7E1               	goto	l2221
  2912  001C5C                     l859:
  2913  001C5C  C021  F019         	movff	___lldiv@quotient,?___lldiv
  2914  001C60  C022  F01A         	movff	___lldiv@quotient+1,?___lldiv+1
  2915  001C64  C023  F01B         	movff	___lldiv@quotient+2,?___lldiv+2
  2916  001C68  C024  F01C         	movff	___lldiv@quotient+3,?___lldiv+3
  2917  001C6C  0012               	return		;funcret
  2918  001C6E                     __end_of___lldiv:
  2919                           	opt stack 0
  2920                           tblptru	equ	0xFF8
  2921                           prodl	equ	0xFF3
  2922                           intcon	equ	0xFF2
  2923                           intcon3	equ	0xFF0
  2924                           postinc0	equ	0xFEE
  2925                           wreg	equ	0xFE8
  2926                           indf1	equ	0xFE7
  2927                           fsr1h	equ	0xFE2
  2928                           fsr1l	equ	0xFE1
  2929                           indf2	equ	0xFDF
  2930                           fsr2h	equ	0xFDA
  2931                           fsr2l	equ	0xFD9
  2932                           status	equ	0xFD8
  2933                           
  2934 ;; *************** function _display_time *****************
  2935 ;; Defined at:
  2936 ;;		line 136 in file "picState.c"
  2937 ;; Parameters:    Size  Location     Type
  2938 ;;		None
  2939 ;; Auto vars:     Size  Location     Type
  2940 ;;  i               1   60[COMRAM] unsigned char 
  2941 ;; Return value:  Size  Location     Type
  2942 ;;                  2   88[None  ] int 
  2943 ;; Registers used:
  2944 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2945 ;; Tracked objects:
  2946 ;;		On entry : 0/0
  2947 ;;		On exit  : 0/0
  2948 ;;		Unchanged: 0/0
  2949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2951 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2952 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2953 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2954 ;;Total ram usage:        3 bytes
  2955 ;; Hardware stack levels used:    1
  2956 ;; Hardware stack levels required when called:    7
  2957 ;; This function calls:
  2958 ;;		_I2C_Master_Read
  2959 ;;		_I2C_Master_Start
  2960 ;;		_I2C_Master_Stop
  2961 ;;		_I2C_Master_Write
  2962 ;;		_lcdInst
  2963 ;;		_printf
  2964 ;; This function is called by:
  2965 ;;		_main
  2966 ;; This function uses a non-reentrant model
  2967 ;;
  2968                           
  2969                           	psect	text14
  2970  00174A                     __ptext14:
  2971                           	opt stack 0
  2972  00174A                     _display_time:
  2973                           	opt stack 23
  2974                           
  2975                           ;picState.c: 138: lcdInst(0x01);;
  2976                           
  2977                           ;incstack = 0
  2978  00174A  0E01               	movlw	1
  2979  00174C  ECF2  F010         	call	_lcdInst
  2980                           
  2981                           ;picState.c: 139: _delay((unsigned long)((300)*(8000000/4000.0)));
  2982  001750  0E04               	movlw	4
  2983  001752  6E3C               	movwf	(??_display_time+1)& (0+255),c
  2984  001754  0E0C               	movlw	12
  2985  001756  6E3B               	movwf	??_display_time& (0+255),c
  2986  001758  0E34               	movlw	52
  2987  00175A                     u3197:
  2988  00175A  2EE8               	decfsz	wreg,f,c
  2989  00175C  D7FE               	bra	u3197
  2990  00175E  2E3B               	decfsz	??_display_time& (0+255),f,c
  2991  001760  D7FC               	bra	u3197
  2992  001762  2E3C               	decfsz	(??_display_time+1)& (0+255),f,c
  2993  001764  D7FA               	bra	u3197
  2994                           
  2995                           ;picState.c: 140: while (mode == 1) {
  2996  001766  D065               	goto	l3357
  2997  001768                     l3325:
  2998                           
  2999                           ;picState.c: 141: I2C_Master_Start();
  3000  001768  EC12  F011         	call	_I2C_Master_Start	;wreg free
  3001                           
  3002                           ;picState.c: 142: I2C_Master_Write(0b11010001);
  3003  00176C  0E00               	movlw	0
  3004  00176E  6E1B               	movwf	I2C_Master_Write@d+1,c
  3005  001770  0ED1               	movlw	209
  3006  001772  6E1A               	movwf	I2C_Master_Write@d,c
  3007  001774  EC04  F011         	call	_I2C_Master_Write	;wreg free
  3008                           
  3009                           ;picState.c: 143: for (unsigned char i = 0; i < 0x06; i++) {
  3010  001778  0E00               	movlw	0
  3011  00177A  6E3D               	movwf	display_time@i,c
  3012  00177C                     l3329:
  3013  00177C  0E05               	movlw	5
  3014  00177E  643D               	cpfsgt	display_time@i,c
  3015  001780  D001               	goto	l3333
  3016  001782  D00E               	goto	l3339
  3017  001784                     l3333:
  3018                           
  3019                           ;picState.c: 144: time[i] = I2C_Master_Read(1);
  3020  001784  503D               	movf	display_time@i,w,c
  3021  001786  0D01               	mullw	1
  3022  001788  0E44               	movlw	low _time
  3023  00178A  24F3               	addwf	prodl,w,c
  3024  00178C  6ED9               	movwf	fsr2l,c
  3025  00178E  0E00               	movlw	high _time
  3026  001790  20F4               	addwfc	prodh,w,c
  3027  001792  6EDA               	movwf	fsr2h,c
  3028  001794  0E01               	movlw	1
  3029  001796  EC85  F010         	call	_I2C_Master_Read
  3030  00179A  6EDF               	movwf	indf2,c
  3031  00179C  2A3D               	incf	display_time@i,f,c
  3032  00179E  D7EE               	goto	l3329
  3033  0017A0                     l3339:
  3034                           
  3035                           ;picState.c: 145: }
  3036                           ;picState.c: 146: time[6] = I2C_Master_Read(0);
  3037  0017A0  0E00               	movlw	0
  3038  0017A2  EC85  F010         	call	_I2C_Master_Read
  3039  0017A6  6E4A               	movwf	_time+6,c
  3040                           
  3041                           ;picState.c: 147: I2C_Master_Stop();
  3042  0017A8  EC0E  F011         	call	_I2C_Master_Stop	;wreg free
  3043                           
  3044                           ;picState.c: 148: lcdInst(0b10000000);;
  3045  0017AC  0E80               	movlw	128
  3046  0017AE  ECF2  F010         	call	_lcdInst
  3047                           
  3048                           ;picState.c: 149: printf("%02x/%02x/%02x", time[6], time[5],
  3049                           ;picState.c: 150: time[4]);
  3050  0017B2  0E94               	movlw	low STR_12
  3051  0017B4  6E25               	movwf	printf@f,c
  3052  0017B6  0E10               	movlw	high STR_12
  3053  0017B8  6E26               	movwf	printf@f+1,c
  3054  0017BA  C04A  F027         	movff	_time+6,?_printf+2
  3055  0017BE  6A28               	clrf	?_printf+3,c
  3056  0017C0  C049  F029         	movff	_time+5,?_printf+4
  3057  0017C4  6A2A               	clrf	?_printf+5,c
  3058  0017C6  C048  F02B         	movff	_time+4,?_printf+6
  3059  0017CA  6A2C               	clrf	?_printf+7,c
  3060  0017CC  EC6B  F008         	call	_printf	;wreg free
  3061                           
  3062                           ;picState.c: 151: lcdInst(0b11000000);;
  3063  0017D0  0EC0               	movlw	192
  3064  0017D2  ECF2  F010         	call	_lcdInst
  3065                           
  3066                           ;picState.c: 152: printf("%02x:%02x:%02x", time[2], time[1],
  3067                           ;picState.c: 153: time[0]);
  3068  0017D6  0EA3               	movlw	low STR_13
  3069  0017D8  6E25               	movwf	printf@f,c
  3070  0017DA  0E10               	movlw	high STR_13
  3071  0017DC  6E26               	movwf	printf@f+1,c
  3072  0017DE  C046  F027         	movff	_time+2,?_printf+2
  3073  0017E2  6A28               	clrf	?_printf+3,c
  3074  0017E4  C045  F029         	movff	_time+1,?_printf+4
  3075  0017E8  6A2A               	clrf	?_printf+5,c
  3076  0017EA  C044  F02B         	movff	_time,?_printf+6
  3077  0017EE  6A2C               	clrf	?_printf+7,c
  3078  0017F0  EC6B  F008         	call	_printf	;wreg free
  3079                           
  3080                           ;picState.c: 155: I2C_Master_Start();
  3081  0017F4  EC12  F011         	call	_I2C_Master_Start	;wreg free
  3082                           
  3083                           ;picState.c: 156: I2C_Master_Write(0b11010000);
  3084  0017F8  0E00               	movlw	0
  3085  0017FA  6E1B               	movwf	I2C_Master_Write@d+1,c
  3086  0017FC  0ED0               	movlw	208
  3087  0017FE  6E1A               	movwf	I2C_Master_Write@d,c
  3088  001800  EC04  F011         	call	_I2C_Master_Write	;wreg free
  3089                           
  3090                           ;picState.c: 157: I2C_Master_Write(0x00);
  3091  001804  0E00               	movlw	0
  3092  001806  6E1B               	movwf	I2C_Master_Write@d+1,c
  3093  001808  0E00               	movlw	0
  3094  00180A  6E1A               	movwf	I2C_Master_Write@d,c
  3095  00180C  EC04  F011         	call	_I2C_Master_Write	;wreg free
  3096                           
  3097                           ;picState.c: 158: I2C_Master_Stop();
  3098  001810  EC0E  F011         	call	_I2C_Master_Stop	;wreg free
  3099                           
  3100                           ;picState.c: 160: _delay((unsigned long)((990)*(8000000/4000.0)));
  3101  001814  0E0B               	movlw	11
  3102  001816  6E3C               	movwf	(??_display_time+1)& (0+255),c
  3103  001818  0E0C               	movlw	12
  3104  00181A  6E3B               	movwf	??_display_time& (0+255),c
  3105  00181C  0E64               	movlw	100
  3106  00181E                     u3207:
  3107  00181E  2EE8               	decfsz	wreg,f,c
  3108  001820  D7FE               	bra	u3207
  3109  001822  2E3B               	decfsz	??_display_time& (0+255),f,c
  3110  001824  D7FC               	bra	u3207
  3111  001826  2E3C               	decfsz	(??_display_time+1)& (0+255),f,c
  3112  001828  D7FA               	bra	u3207
  3113  00182A  D000               	nop2	
  3114                           
  3115                           ;picState.c: 161: lcdInst(0b10000000);;
  3116  00182C  0E80               	movlw	128
  3117  00182E  ECF2  F010         	call	_lcdInst
  3118  001832                     l3357:
  3119  001832  0458               	decf	_mode,w,c
  3120  001834  A4D8               	btfss	status,2,c
  3121  001836  0012               	return	
  3122  001838  D797               	goto	l3325
  3123  00183A                     __end_of_display_time:
  3124                           	opt stack 0
  3125                           tblptru	equ	0xFF8
  3126                           prodh	equ	0xFF4
  3127                           prodl	equ	0xFF3
  3128                           intcon	equ	0xFF2
  3129                           intcon3	equ	0xFF0
  3130                           postinc0	equ	0xFEE
  3131                           wreg	equ	0xFE8
  3132                           indf1	equ	0xFE7
  3133                           fsr1h	equ	0xFE2
  3134                           fsr1l	equ	0xFE1
  3135                           indf2	equ	0xFDF
  3136                           fsr2h	equ	0xFDA
  3137                           fsr2l	equ	0xFD9
  3138                           status	equ	0xFD8
  3139                           
  3140 ;; *************** function _I2C_Master_Write *****************
  3141 ;; Defined at:
  3142 ;;		line 47 in file "I2C.c"
  3143 ;; Parameters:    Size  Location     Type
  3144 ;;  d               2   25[COMRAM] unsigned int 
  3145 ;; Auto vars:     Size  Location     Type
  3146 ;;		None
  3147 ;; Return value:  Size  Location     Type
  3148 ;;                  1    wreg      void 
  3149 ;; Registers used:
  3150 ;;		wreg, status,2, status,0, cstack
  3151 ;; Tracked objects:
  3152 ;;		On entry : 0/0
  3153 ;;		On exit  : 0/0
  3154 ;;		Unchanged: 0/0
  3155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3156 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3159 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3160 ;;Total ram usage:        2 bytes
  3161 ;; Hardware stack levels used:    1
  3162 ;; Hardware stack levels required when called:    5
  3163 ;; This function calls:
  3164 ;;		_I2C_Master_Wait
  3165 ;; This function is called by:
  3166 ;;		_display_time
  3167 ;;		_initPIC
  3168 ;;		_get_time
  3169 ;;		_set_time
  3170 ;; This function uses a non-reentrant model
  3171 ;;
  3172                           
  3173                           	psect	text15
  3174  002208                     __ptext15:
  3175                           	opt stack 0
  3176  002208                     _I2C_Master_Write:
  3177                           	opt stack 23
  3178                           
  3179                           ;I2C.c: 49: I2C_Master_Wait();
  3180                           
  3181                           ;incstack = 0
  3182  002208  ECDA  F010         	call	_I2C_Master_Wait	;wreg free
  3183                           
  3184                           ;I2C.c: 50: SSPBUF = d;
  3185  00220C  C01A  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  3186  002210  0012               	return		;funcret
  3187  002212                     __end_of_I2C_Master_Write:
  3188                           	opt stack 0
  3189                           tblptru	equ	0xFF8
  3190                           prodh	equ	0xFF4
  3191                           prodl	equ	0xFF3
  3192                           intcon	equ	0xFF2
  3193                           intcon3	equ	0xFF0
  3194                           postinc0	equ	0xFEE
  3195                           wreg	equ	0xFE8
  3196                           indf1	equ	0xFE7
  3197                           fsr1h	equ	0xFE2
  3198                           fsr1l	equ	0xFE1
  3199                           indf2	equ	0xFDF
  3200                           fsr2h	equ	0xFDA
  3201                           fsr2l	equ	0xFD9
  3202                           status	equ	0xFD8
  3203                           
  3204 ;; *************** function _I2C_Master_Stop *****************
  3205 ;; Defined at:
  3206 ;;		line 41 in file "I2C.c"
  3207 ;; Parameters:    Size  Location     Type
  3208 ;;		None
  3209 ;; Auto vars:     Size  Location     Type
  3210 ;;		None
  3211 ;; Return value:  Size  Location     Type
  3212 ;;                  1    wreg      void 
  3213 ;; Registers used:
  3214 ;;		wreg, status,2, status,0, cstack
  3215 ;; Tracked objects:
  3216 ;;		On entry : 0/0
  3217 ;;		On exit  : 0/0
  3218 ;;		Unchanged: 0/0
  3219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3223 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3224 ;;Total ram usage:        0 bytes
  3225 ;; Hardware stack levels used:    1
  3226 ;; Hardware stack levels required when called:    5
  3227 ;; This function calls:
  3228 ;;		_I2C_Master_Wait
  3229 ;; This function is called by:
  3230 ;;		_display_time
  3231 ;;		_initPIC
  3232 ;;		_get_time
  3233 ;;		_set_time
  3234 ;; This function uses a non-reentrant model
  3235 ;;
  3236                           
  3237                           	psect	text16
  3238  00221C                     __ptext16:
  3239                           	opt stack 0
  3240  00221C                     _I2C_Master_Stop:
  3241                           	opt stack 23
  3242                           
  3243                           ;I2C.c: 43: I2C_Master_Wait();
  3244                           
  3245                           ;incstack = 0
  3246  00221C  ECDA  F010         	call	_I2C_Master_Wait	;wreg free
  3247                           
  3248                           ;I2C.c: 44: PEN = 1;
  3249  002220  84C5               	bsf	4037,2,c	;volatile
  3250  002222  0012               	return		;funcret
  3251  002224                     __end_of_I2C_Master_Stop:
  3252                           	opt stack 0
  3253                           tblptru	equ	0xFF8
  3254                           prodh	equ	0xFF4
  3255                           prodl	equ	0xFF3
  3256                           intcon	equ	0xFF2
  3257                           intcon3	equ	0xFF0
  3258                           postinc0	equ	0xFEE
  3259                           wreg	equ	0xFE8
  3260                           indf1	equ	0xFE7
  3261                           fsr1h	equ	0xFE2
  3262                           fsr1l	equ	0xFE1
  3263                           indf2	equ	0xFDF
  3264                           fsr2h	equ	0xFDA
  3265                           fsr2l	equ	0xFD9
  3266                           status	equ	0xFD8
  3267                           
  3268 ;; *************** function _I2C_Master_Start *****************
  3269 ;; Defined at:
  3270 ;;		line 29 in file "I2C.c"
  3271 ;; Parameters:    Size  Location     Type
  3272 ;;		None
  3273 ;; Auto vars:     Size  Location     Type
  3274 ;;		None
  3275 ;; Return value:  Size  Location     Type
  3276 ;;                  1    wreg      void 
  3277 ;; Registers used:
  3278 ;;		wreg, status,2, status,0, cstack
  3279 ;; Tracked objects:
  3280 ;;		On entry : 0/0
  3281 ;;		On exit  : 0/0
  3282 ;;		Unchanged: 0/0
  3283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3287 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3288 ;;Total ram usage:        0 bytes
  3289 ;; Hardware stack levels used:    1
  3290 ;; Hardware stack levels required when called:    5
  3291 ;; This function calls:
  3292 ;;		_I2C_Master_Wait
  3293 ;; This function is called by:
  3294 ;;		_display_time
  3295 ;;		_initPIC
  3296 ;;		_get_time
  3297 ;;		_set_time
  3298 ;; This function uses a non-reentrant model
  3299 ;;
  3300                           
  3301                           	psect	text17
  3302  002224                     __ptext17:
  3303                           	opt stack 0
  3304  002224                     _I2C_Master_Start:
  3305                           	opt stack 23
  3306                           
  3307                           ;I2C.c: 31: I2C_Master_Wait();
  3308                           
  3309                           ;incstack = 0
  3310  002224  ECDA  F010         	call	_I2C_Master_Wait	;wreg free
  3311                           
  3312                           ;I2C.c: 32: SEN = 1;
  3313  002228  80C5               	bsf	4037,0,c	;volatile
  3314  00222A  0012               	return		;funcret
  3315  00222C                     __end_of_I2C_Master_Start:
  3316                           	opt stack 0
  3317                           tblptru	equ	0xFF8
  3318                           prodh	equ	0xFF4
  3319                           prodl	equ	0xFF3
  3320                           intcon	equ	0xFF2
  3321                           intcon3	equ	0xFF0
  3322                           postinc0	equ	0xFEE
  3323                           wreg	equ	0xFE8
  3324                           indf1	equ	0xFE7
  3325                           fsr1h	equ	0xFE2
  3326                           fsr1l	equ	0xFE1
  3327                           indf2	equ	0xFDF
  3328                           fsr2h	equ	0xFDA
  3329                           fsr2l	equ	0xFD9
  3330                           status	equ	0xFD8
  3331                           
  3332 ;; *************** function _I2C_Master_Read *****************
  3333 ;; Defined at:
  3334 ;;		line 53 in file "I2C.c"
  3335 ;; Parameters:    Size  Location     Type
  3336 ;;  a               1    wreg     unsigned char 
  3337 ;; Auto vars:     Size  Location     Type
  3338 ;;  a               1   25[COMRAM] unsigned char 
  3339 ;;  temp            1   26[COMRAM] unsigned char 
  3340 ;; Return value:  Size  Location     Type
  3341 ;;                  1    wreg      unsigned char 
  3342 ;; Registers used:
  3343 ;;		wreg, status,2, status,0, cstack
  3344 ;; Tracked objects:
  3345 ;;		On entry : 0/0
  3346 ;;		On exit  : 0/0
  3347 ;;		Unchanged: 0/0
  3348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3350 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3352 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3353 ;;Total ram usage:        2 bytes
  3354 ;; Hardware stack levels used:    1
  3355 ;; Hardware stack levels required when called:    5
  3356 ;; This function calls:
  3357 ;;		_I2C_Master_Wait
  3358 ;; This function is called by:
  3359 ;;		_display_time
  3360 ;;		_get_time
  3361 ;; This function uses a non-reentrant model
  3362 ;;
  3363                           
  3364                           	psect	text18
  3365  00210A                     __ptext18:
  3366                           	opt stack 0
  3367  00210A                     _I2C_Master_Read:
  3368                           	opt stack 23
  3369                           
  3370                           ;incstack = 0
  3371                           ;I2C_Master_Read@a stored from wreg
  3372  00210A  6E1A               	movwf	I2C_Master_Read@a,c
  3373                           
  3374                           ;I2C.c: 55: unsigned char temp;
  3375                           ;I2C.c: 56: I2C_Master_Wait();
  3376  00210C  ECDA  F010         	call	_I2C_Master_Wait	;wreg free
  3377                           
  3378                           ;I2C.c: 57: RCEN = 1;
  3379  002110  86C5               	bsf	4037,3,c	;volatile
  3380                           
  3381                           ;I2C.c: 58: I2C_Master_Wait();
  3382  002112  ECDA  F010         	call	_I2C_Master_Wait	;wreg free
  3383                           
  3384                           ;I2C.c: 59: temp = SSPBUF;
  3385  002116  CFC9 F01B          	movff	4041,I2C_Master_Read@temp	;volatile
  3386                           
  3387                           ;I2C.c: 60: I2C_Master_Wait();
  3388  00211A  ECDA  F010         	call	_I2C_Master_Wait	;wreg free
  3389                           
  3390                           ;I2C.c: 61: ACKDT = (a)?0:1;
  3391  00211E  501A               	movf	I2C_Master_Read@a,w,c
  3392  002120  A4D8               	btfss	status,2,c
  3393  002122  D002               	goto	u2150
  3394  002124  8AC5               	bsf	4037,5,c	;volatile
  3395  002126  D001               	goto	l2903
  3396  002128                     u2150:
  3397  002128  9AC5               	bcf	4037,5,c	;volatile
  3398  00212A                     l2903:
  3399                           
  3400                           ;I2C.c: 62: ACKEN = 1;
  3401  00212A  88C5               	bsf	4037,4,c	;volatile
  3402                           
  3403                           ;I2C.c: 63: return temp;
  3404  00212C  501B               	movf	I2C_Master_Read@temp,w,c
  3405  00212E  0012               	return	
  3406  002130                     __end_of_I2C_Master_Read:
  3407                           	opt stack 0
  3408                           tblptru	equ	0xFF8
  3409                           prodh	equ	0xFF4
  3410                           prodl	equ	0xFF3
  3411                           intcon	equ	0xFF2
  3412                           intcon3	equ	0xFF0
  3413                           postinc0	equ	0xFEE
  3414                           wreg	equ	0xFE8
  3415                           indf1	equ	0xFE7
  3416                           fsr1h	equ	0xFE2
  3417                           fsr1l	equ	0xFE1
  3418                           indf2	equ	0xFDF
  3419                           fsr2h	equ	0xFDA
  3420                           fsr2l	equ	0xFD9
  3421                           status	equ	0xFD8
  3422                           
  3423 ;; *************** function _I2C_Master_Wait *****************
  3424 ;; Defined at:
  3425 ;;		line 24 in file "I2C.c"
  3426 ;; Parameters:    Size  Location     Type
  3427 ;;		None
  3428 ;; Auto vars:     Size  Location     Type
  3429 ;;		None
  3430 ;; Return value:  Size  Location     Type
  3431 ;;                  1    wreg      void 
  3432 ;; Registers used:
  3433 ;;		wreg, status,2, status,0
  3434 ;; Tracked objects:
  3435 ;;		On entry : 0/0
  3436 ;;		On exit  : 0/0
  3437 ;;		Unchanged: 0/0
  3438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3441 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3442 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3443 ;;Total ram usage:        1 bytes
  3444 ;; Hardware stack levels used:    1
  3445 ;; Hardware stack levels required when called:    4
  3446 ;; This function calls:
  3447 ;;		Nothing
  3448 ;; This function is called by:
  3449 ;;		_I2C_Master_Start
  3450 ;;		_I2C_Master_Stop
  3451 ;;		_I2C_Master_Write
  3452 ;;		_I2C_Master_Read
  3453 ;;		_I2C_Master_RepeatedStart
  3454 ;; This function uses a non-reentrant model
  3455 ;;
  3456                           
  3457                           	psect	text19
  3458  0021B4                     __ptext19:
  3459                           	opt stack 0
  3460  0021B4                     _I2C_Master_Wait:
  3461                           	opt stack 23
  3462  0021B4                     l34:
  3463  0021B4  B4C7               	btfsc	4039,2,c	;volatile
  3464  0021B6  D7FE               	goto	l34
  3465  0021B8  CFC5 F019          	movff	4037,??_I2C_Master_Wait	;volatile
  3466  0021BC  0E1F               	movlw	31
  3467  0021BE  1619               	andwf	??_I2C_Master_Wait,f,c
  3468  0021C0  B4D8               	btfsc	status,2,c
  3469  0021C2  0012               	return	
  3470  0021C4  D7F7               	goto	l34
  3471  0021C6                     __end_of_I2C_Master_Wait:
  3472                           	opt stack 0
  3473                           tblptru	equ	0xFF8
  3474                           prodh	equ	0xFF4
  3475                           prodl	equ	0xFF3
  3476                           intcon	equ	0xFF2
  3477                           intcon3	equ	0xFF0
  3478                           postinc0	equ	0xFEE
  3479                           wreg	equ	0xFE8
  3480                           indf1	equ	0xFE7
  3481                           fsr1h	equ	0xFE2
  3482                           fsr1l	equ	0xFE1
  3483                           indf2	equ	0xFDF
  3484                           fsr2h	equ	0xFDA
  3485                           fsr2l	equ	0xFD9
  3486                           status	equ	0xFD8
  3487                           
  3488 ;; *************** function _display_sorting_time *****************
  3489 ;; Defined at:
  3490 ;;		line 166 in file "picState.c"
  3491 ;; Parameters:    Size  Location     Type
  3492 ;;		None
  3493 ;; Auto vars:     Size  Location     Type
  3494 ;;  i               2   60[COMRAM] int 
  3495 ;; Return value:  Size  Location     Type
  3496 ;;                  2   92[None  ] int 
  3497 ;; Registers used:
  3498 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3499 ;; Tracked objects:
  3500 ;;		On entry : 0/0
  3501 ;;		On exit  : 0/0
  3502 ;;		Unchanged: 0/0
  3503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3505 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3506 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3507 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3508 ;;Total ram usage:        4 bytes
  3509 ;; Hardware stack levels used:    1
  3510 ;; Hardware stack levels required when called:    7
  3511 ;; This function calls:
  3512 ;;		_lcdInst
  3513 ;;		_printf
  3514 ;; This function is called by:
  3515 ;;		_main
  3516 ;; This function uses a non-reentrant model
  3517 ;;
  3518                           
  3519                           	psect	text20
  3520  001E2A                     __ptext20:
  3521                           	opt stack 0
  3522  001E2A                     _display_sorting_time:
  3523                           	opt stack 23
  3524                           
  3525                           ;picState.c: 167: lcdInst(0x01);;
  3526                           
  3527                           ;incstack = 0
  3528  001E2A  0E01               	movlw	1
  3529  001E2C  ECF2  F010         	call	_lcdInst
  3530                           
  3531                           ;picState.c: 168: _delay((unsigned long)((10)*(8000000/4000.0)));
  3532  001E30  0E1A               	movlw	26
  3533  001E32  6E3B               	movwf	??_display_sorting_time& (0+255),c
  3534  001E34  0EF8               	movlw	248
  3535  001E36                     u3217:
  3536  001E36  2EE8               	decfsz	wreg,f,c
  3537  001E38  D7FE               	bra	u3217
  3538  001E3A  2E3B               	decfsz	??_display_sorting_time& (0+255),f,c
  3539  001E3C  D7FC               	bra	u3217
  3540  001E3E  D000               	nop2	
  3541                           
  3542                           ;picState.c: 169: LATCbits.LATC1 = 0;
  3543  001E40  928B               	bcf	3979,1,c	;volatile
  3544                           
  3545                           ;picState.c: 170: int i = passed_time;
  3546  001E42  C057  F03D         	movff	_passed_time,display_sorting_time@i
  3547  001E46  6A3E               	clrf	display_sorting_time@i+1,c
  3548                           
  3549                           ;picState.c: 171: printf("Time used: %d s", i);
  3550  001E48  0E75               	movlw	low STR_14
  3551  001E4A  6E25               	movwf	printf@f,c
  3552  001E4C  0E10               	movlw	high STR_14
  3553  001E4E  6E26               	movwf	printf@f+1,c
  3554  001E50  C03D  F027         	movff	display_sorting_time@i,?_printf+2
  3555  001E54  C03E  F028         	movff	display_sorting_time@i+1,?_printf+3
  3556  001E58  EC6B  F008         	call	_printf	;wreg free
  3557                           
  3558                           ;picState.c: 172: lcdInst(0b11000000);;
  3559  001E5C  0EC0               	movlw	192
  3560  001E5E  ECF2  F010         	call	_lcdInst
  3561                           
  3562                           ;picState.c: 173: _delay((unsigned long)((500)*(8000000/4000.0)));
  3563  001E62  0E06               	movlw	6
  3564  001E64  6E3C               	movwf	(??_display_sorting_time+1)& (0+255),c
  3565  001E66  0E13               	movlw	19
  3566  001E68  6E3B               	movwf	??_display_sorting_time& (0+255),c
  3567  001E6A  0EAE               	movlw	174
  3568  001E6C                     u3227:
  3569  001E6C  2EE8               	decfsz	wreg,f,c
  3570  001E6E  D7FE               	bra	u3227
  3571  001E70  2E3B               	decfsz	??_display_sorting_time& (0+255),f,c
  3572  001E72  D7FC               	bra	u3227
  3573  001E74  2E3C               	decfsz	(??_display_sorting_time+1)& (0+255),f,c
  3574  001E76  D7FA               	bra	u3227
  3575                           
  3576                           ;picState.c: 174: flag = 0;
  3577  001E78  0E00               	movlw	0
  3578  001E7A  6E56               	movwf	_flag+1,c
  3579  001E7C  0E00               	movlw	0
  3580  001E7E  6E55               	movwf	_flag,c
  3581                           
  3582                           ;picState.c: 175: LATDbits.LATD0 = 0;
  3583  001E80  908C               	bcf	3980,0,c	;volatile
  3584  001E82  0012               	return		;funcret
  3585  001E84                     __end_of_display_sorting_time:
  3586                           	opt stack 0
  3587                           tblptru	equ	0xFF8
  3588                           prodh	equ	0xFF4
  3589                           prodl	equ	0xFF3
  3590                           intcon	equ	0xFF2
  3591                           intcon3	equ	0xFF0
  3592                           postinc0	equ	0xFEE
  3593                           wreg	equ	0xFE8
  3594                           indf1	equ	0xFE7
  3595                           fsr1h	equ	0xFE2
  3596                           fsr1l	equ	0xFE1
  3597                           indf2	equ	0xFDF
  3598                           fsr2h	equ	0xFDA
  3599                           fsr2l	equ	0xFD9
  3600                           status	equ	0xFD8
  3601                           
  3602 ;; *************** function _debug *****************
  3603 ;; Defined at:
  3604 ;;		line 42 in file "picState.c"
  3605 ;; Parameters:    Size  Location     Type
  3606 ;;		None
  3607 ;; Auto vars:     Size  Location     Type
  3608 ;;  i               2   59[COMRAM] int 
  3609 ;; Return value:  Size  Location     Type
  3610 ;;                  2   94[None  ] int 
  3611 ;; Registers used:
  3612 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3613 ;; Tracked objects:
  3614 ;;		On entry : 0/0
  3615 ;;		On exit  : 0/0
  3616 ;;		Unchanged: 0/0
  3617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3619 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3620 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3621 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3622 ;;Total ram usage:        3 bytes
  3623 ;; Hardware stack levels used:    1
  3624 ;; Hardware stack levels required when called:    7
  3625 ;; This function calls:
  3626 ;;		_lcdInst
  3627 ;;		_printf
  3628 ;;		_readADC
  3629 ;; This function is called by:
  3630 ;;		_main
  3631 ;; This function uses a non-reentrant model
  3632 ;;
  3633                           
  3634                           	psect	text21
  3635  0020A2                     __ptext21:
  3636                           	opt stack 0
  3637  0020A2                     _debug:
  3638                           	opt stack 23
  3639                           
  3640                           ;picState.c: 49: int i = 0;
  3641                           
  3642                           ;incstack = 0
  3643  0020A2  0E00               	movlw	0
  3644  0020A4  6E3D               	movwf	debug@i+1,c
  3645  0020A6  0E00               	movlw	0
  3646  0020A8  6E3C               	movwf	debug@i,c
  3647  0020AA                     l3435:
  3648                           
  3649                           ;picState.c: 51: lcdInst(0b10000000);;
  3650  0020AA  0E80               	movlw	128
  3651  0020AC  ECF2  F010         	call	_lcdInst
  3652                           
  3653                           ;picState.c: 52: readADC(2);
  3654  0020B0  0E02               	movlw	2
  3655  0020B2  EC71  F010         	call	_readADC
  3656                           
  3657                           ;picState.c: 53: printf("%x %x", ADRESH,ADRESL);
  3658  0020B6  0ECC               	movlw	low STR_8
  3659  0020B8  6E25               	movwf	printf@f,c
  3660  0020BA  0E10               	movlw	high STR_8
  3661  0020BC  6E26               	movwf	printf@f+1,c
  3662  0020BE  CFC4 F027          	movff	4036,?_printf+2	;volatile
  3663  0020C2  6A28               	clrf	?_printf+3,c
  3664  0020C4  CFC3 F029          	movff	4035,?_printf+4	;volatile
  3665  0020C8  6A2A               	clrf	?_printf+5,c
  3666  0020CA  EC6B  F008         	call	_printf	;wreg free
  3667                           
  3668                           ;picState.c: 54: _delay((unsigned long)((50)*(8000000/4000.0)));
  3669  0020CE  0E82               	movlw	130
  3670  0020D0  6E3B               	movwf	??_debug& (0+255),c
  3671  0020D2  0EDE               	movlw	222
  3672  0020D4                     u3237:
  3673  0020D4  2EE8               	decfsz	wreg,f,c
  3674  0020D6  D7FE               	bra	u3237
  3675  0020D8  2E3B               	decfsz	??_debug& (0+255),f,c
  3676  0020DA  D7FC               	bra	u3237
  3677                           
  3678                           ;picState.c: 55: i++;
  3679  0020DC  4A3C               	infsnz	debug@i,f,c
  3680  0020DE  2A3D               	incf	debug@i+1,f,c
  3681  0020E0  D7E4               	goto	l3435
  3682  0020E2                     __end_of_debug:
  3683                           	opt stack 0
  3684                           tblptru	equ	0xFF8
  3685                           prodh	equ	0xFF4
  3686                           prodl	equ	0xFF3
  3687                           intcon	equ	0xFF2
  3688                           intcon3	equ	0xFF0
  3689                           postinc0	equ	0xFEE
  3690                           wreg	equ	0xFE8
  3691                           indf1	equ	0xFE7
  3692                           fsr1h	equ	0xFE2
  3693                           fsr1l	equ	0xFE1
  3694                           indf2	equ	0xFDF
  3695                           fsr2h	equ	0xFDA
  3696                           fsr2l	equ	0xFD9
  3697                           status	equ	0xFD8
  3698                           
  3699 ;; *************** function _readADC *****************
  3700 ;; Defined at:
  3701 ;;		line 21 in file "adc.c"
  3702 ;; Parameters:    Size  Location     Type
  3703 ;;  channel         1    wreg     unsigned char 
  3704 ;; Auto vars:     Size  Location     Type
  3705 ;;  channel         1   25[COMRAM] unsigned char 
  3706 ;; Return value:  Size  Location     Type
  3707 ;;                  1    wreg      void 
  3708 ;; Registers used:
  3709 ;;		wreg, status,2, status,0
  3710 ;; Tracked objects:
  3711 ;;		On entry : 0/0
  3712 ;;		On exit  : 0/0
  3713 ;;		Unchanged: 0/0
  3714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3716 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3717 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3718 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3719 ;;Total ram usage:        2 bytes
  3720 ;; Hardware stack levels used:    1
  3721 ;; Hardware stack levels required when called:    4
  3722 ;; This function calls:
  3723 ;;		Nothing
  3724 ;; This function is called by:
  3725 ;;		_sense_can
  3726 ;;		_readLightSensor
  3727 ;;		_debug
  3728 ;; This function uses a non-reentrant model
  3729 ;;
  3730                           
  3731                           	psect	text22
  3732  0020E2                     __ptext22:
  3733                           	opt stack 0
  3734  0020E2                     _readADC:
  3735                           	opt stack 24
  3736                           
  3737                           ;incstack = 0
  3738                           ;readADC@channel stored from wreg
  3739  0020E2  6E1A               	movwf	readADC@channel,c
  3740                           
  3741                           ;adc.c: 22: ADCON0 = 0x00;
  3742  0020E4  0E00               	movlw	0
  3743  0020E6  6EC2               	movwf	4034,c	;volatile
  3744                           
  3745                           ;adc.c: 23: ADCON0 = (ADCON0 & 0X3C)|((channel & 0x0F)<<2);
  3746  0020E8  C01A  F019         	movff	readADC@channel,??_readADC
  3747  0020EC  0E0F               	movlw	15
  3748  0020EE  1619               	andwf	??_readADC,f,c
  3749  0020F0  90D8               	bcf	status,0,c
  3750  0020F2  3619               	rlcf	??_readADC,f,c
  3751  0020F4  90D8               	bcf	status,0,c
  3752  0020F6  3619               	rlcf	??_readADC,f,c
  3753  0020F8  50C2               	movf	4034,w,c	;volatile
  3754  0020FA  0B3C               	andlw	60
  3755  0020FC  1019               	iorwf	??_readADC,w,c
  3756  0020FE  6EC2               	movwf	4034,c	;volatile
  3757                           
  3758                           ;adc.c: 24: ADON = 1;
  3759  002100  80C2               	bsf	4034,0,c	;volatile
  3760                           
  3761                           ;adc.c: 25: ADCON0bits.GO = 1;
  3762  002102  82C2               	bsf	4034,1,c	;volatile
  3763  002104                     l126:
  3764  002104  A2C2               	btfss	4034,1,c	;volatile
  3765  002106  0012               	return	
  3766  002108  D7FD               	goto	l126
  3767  00210A                     __end_of_readADC:
  3768                           	opt stack 0
  3769                           tblptru	equ	0xFF8
  3770                           prodh	equ	0xFF4
  3771                           prodl	equ	0xFF3
  3772                           intcon	equ	0xFF2
  3773                           intcon3	equ	0xFF0
  3774                           postinc0	equ	0xFEE
  3775                           wreg	equ	0xFE8
  3776                           indf1	equ	0xFE7
  3777                           fsr1h	equ	0xFE2
  3778                           fsr1l	equ	0xFE1
  3779                           indf2	equ	0xFDF
  3780                           fsr2h	equ	0xFDA
  3781                           fsr2l	equ	0xFD9
  3782                           status	equ	0xFD8
  3783                           
  3784 ;; *************** function _printf *****************
  3785 ;; Defined at:
  3786 ;;		line 464 in file "/Applications/microchip/xc8/v1.41/sources/common/doprnt.c"
  3787 ;; Parameters:    Size  Location     Type
  3788 ;;  f               2   36[COMRAM] PTR const unsigned char 
  3789 ;;		 -> STR_14(16), STR_13(15), STR_12(15), STR_11(3), 
  3790 ;;		 -> STR_10(20), STR_9(16), STR_8(6), STR_7(10), 
  3791 ;;		 -> STR_6(15), STR_5(7), STR_4(21), STR_3(13), 
  3792 ;;		 -> STR_2(9), STR_1(3), 
  3793 ;; Auto vars:     Size  Location     Type
  3794 ;;  idx             1   48[COMRAM] unsigned char 
  3795 ;;  tmpval          4    0        struct .
  3796 ;;  cp              3    0        PTR const unsigned char 
  3797 ;;  width           2   55[COMRAM] int 
  3798 ;;  val             2   52[COMRAM] unsigned int 
  3799 ;;  ap              2   49[COMRAM] PTR void [1]
  3800 ;;		 -> ?_printf(2), 
  3801 ;;  len             2    0        unsigned int 
  3802 ;;  c               1   57[COMRAM] char 
  3803 ;;  flag            1   54[COMRAM] unsigned char 
  3804 ;;  prec            1   51[COMRAM] char 
  3805 ;; Return value:  Size  Location     Type
  3806 ;;                  2   36[COMRAM] int 
  3807 ;; Registers used:
  3808 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3809 ;; Tracked objects:
  3810 ;;		On entry : 0/0
  3811 ;;		On exit  : 0/0
  3812 ;;		Unchanged: 0/0
  3813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3814 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3815 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3816 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3817 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3818 ;;Total ram usage:       22 bytes
  3819 ;; Hardware stack levels used:    1
  3820 ;; Hardware stack levels required when called:    6
  3821 ;; This function calls:
  3822 ;;		___lwdiv
  3823 ;;		___lwmod
  3824 ;;		___wmul
  3825 ;;		_isdigit
  3826 ;;		_putch
  3827 ;; This function is called by:
  3828 ;;		_readLightSensor
  3829 ;;		_welcome
  3830 ;;		_debug
  3831 ;;		_sort
  3832 ;;		_display_time
  3833 ;;		_display_sorting_time
  3834 ;; This function uses a non-reentrant model
  3835 ;;
  3836                           
  3837                           	psect	text23
  3838  0010D6                     __ptext23:
  3839                           	opt stack 0
  3840  0010D6                     _printf:
  3841                           	opt stack 23
  3842                           
  3843                           ;doprnt.c: 466: va_list ap;
  3844                           ;doprnt.c: 499: signed char c;
  3845                           ;doprnt.c: 501: int width;
  3846                           ;doprnt.c: 506: signed char prec;
  3847                           ;doprnt.c: 508: unsigned char flag;
  3848                           ;doprnt.c: 523: union {
  3849                           ;doprnt.c: 524: unsigned long vd;
  3850                           ;doprnt.c: 525: double integ;
  3851                           ;doprnt.c: 526: } tmpval;
  3852                           ;doprnt.c: 528: unsigned int val;
  3853                           ;doprnt.c: 529: unsigned len;
  3854                           ;doprnt.c: 530: const char * cp;
  3855                           ;doprnt.c: 533: *ap = __va_start();
  3856                           
  3857                           ;incstack = 0
  3858  0010D6  0E27               	movlw	low (?_printf+2)
  3859  0010D8  6E32               	movwf	printf@ap,c
  3860  0010DA  0E00               	movlw	high (?_printf+2)
  3861  0010DC  6E33               	movwf	printf@ap+1,c
  3862                           
  3863                           ;doprnt.c: 536: while(c = *f++) {
  3864  0010DE  D174               	goto	l3049
  3865  0010E0                     l2923:
  3866                           
  3867                           ;doprnt.c: 538: if(c != '%')
  3868  0010E0  0E25               	movlw	37
  3869  0010E2  183A               	xorwf	printf@c,w,c
  3870  0010E4  B4D8               	btfsc	status,2,c
  3871  0010E6  D004               	goto	l2927
  3872                           
  3873                           ;doprnt.c: 540: {
  3874                           ;doprnt.c: 541: (putch(c) );
  3875  0010E8  503A               	movf	printf@c,w,c
  3876  0010EA  ECEC  F010         	call	_putch
  3877                           
  3878                           ;doprnt.c: 542: continue;
  3879  0010EE  D16C               	goto	l3049
  3880  0010F0                     l2927:
  3881                           
  3882                           ;doprnt.c: 543: }
  3883                           ;doprnt.c: 546: width = 0;
  3884  0010F0  0E00               	movlw	0
  3885  0010F2  6E39               	movwf	printf@width+1,c
  3886  0010F4  0E00               	movlw	0
  3887  0010F6  6E38               	movwf	printf@width,c
  3888                           
  3889                           ;doprnt.c: 548: flag = 0;
  3890  0010F8  0E00               	movlw	0
  3891  0010FA  6E37               	movwf	printf@flag,c
  3892                           
  3893                           ;doprnt.c: 551: switch(*f) {
  3894                           
  3895                           ;doprnt.c: 550: for(;;) {
  3896  0010FC  D003               	goto	l2933
  3897  0010FE                     l2929:
  3898                           
  3899                           ;doprnt.c: 580: flag |= 0x04;
  3900  0010FE  8437               	bsf	printf@flag,2,c
  3901                           
  3902                           ;doprnt.c: 581: f++;
  3903  001100  4A25               	infsnz	printf@f,f,c
  3904  001102  2A26               	incf	printf@f+1,f,c
  3905  001104                     l2933:
  3906  001104  C025  FFF6         	movff	printf@f,tblptrl
  3907  001108  C026  FFF7         	movff	printf@f+1,tblptrh
  3908  00110C                     	if	0	;tblptru may be non-zero
  3909  00110C                     	endif
  3910  00110C                     	if	0	;tblptru may be non-zero
  3911  00110C                     	endif
  3912  00110C  0008               	tblrd		*
  3913  00110E  50F5               	movf	tablat,w,c
  3914                           
  3915                           ; Switch size 1, requested type "space"
  3916                           ; Number of cases is 1, Range of values is 48 to 48
  3917                           ; switch strategies available:
  3918                           ; Name         Instructions Cycles
  3919                           ; simple_byte            4     3 (average)
  3920                           ;	Chosen strategy is simple_byte
  3921  001110  0A30               	xorlw	48	; case 48
  3922  001112  B4D8               	btfsc	status,2,c
  3923  001114  D7F4               	goto	l2929
  3924                           
  3925                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3926                           
  3927                           ;doprnt.c: 586: }
  3928                           
  3929                           ;doprnt.c: 585: break;
  3930  001116  C025  FFF6         	movff	printf@f,tblptrl
  3931  00111A  C026  FFF7         	movff	printf@f+1,tblptrh
  3932  00111E                     	if	0	;tblptru may be non-zero
  3933  00111E                     	endif
  3934  00111E                     	if	0	;tblptru may be non-zero
  3935  00111E                     	endif
  3936  00111E  0008               	tblrd		*
  3937  001120  50F5               	movf	tablat,w,c
  3938  001122  ECBE  F010         	call	_isdigit
  3939  001126  A0D8               	btfss	status,0,c
  3940  001128  D035               	goto	l2951
  3941                           
  3942                           ;doprnt.c: 598: width = 0;
  3943  00112A  0E00               	movlw	0
  3944  00112C  6E39               	movwf	printf@width+1,c
  3945  00112E  0E00               	movlw	0
  3946  001130  6E38               	movwf	printf@width,c
  3947  001132                     l2939:
  3948                           
  3949                           ;doprnt.c: 600: width *= 10;
  3950  001132  C038  F019         	movff	printf@width,___wmul@multiplier
  3951  001136  C039  F01A         	movff	printf@width+1,___wmul@multiplier+1
  3952  00113A  0E00               	movlw	0
  3953  00113C  6E1C               	movwf	___wmul@multiplicand+1,c
  3954  00113E  0E0A               	movlw	10
  3955  001140  6E1B               	movwf	___wmul@multiplicand,c
  3956  001142  EC98  F010         	call	___wmul	;wreg free
  3957  001146  C019  F038         	movff	?___wmul,printf@width
  3958  00114A  C01A  F039         	movff	?___wmul+1,printf@width+1
  3959                           
  3960                           ;doprnt.c: 601: width += *f++ - '0';
  3961  00114E  0ED0               	movlw	208
  3962  001150  6E2D               	movwf	??_printf& (0+255),c
  3963  001152  0EFF               	movlw	255
  3964  001154  6E2E               	movwf	(??_printf+1)& (0+255),c
  3965  001156  C025  FFF6         	movff	printf@f,tblptrl
  3966  00115A  C026  FFF7         	movff	printf@f+1,tblptrh
  3967  00115E                     	if	0	;tblptru may be non-zero
  3968  00115E                     	endif
  3969  00115E                     	if	0	;tblptru may be non-zero
  3970  00115E                     	endif
  3971  00115E  0008               	tblrd		*
  3972  001160  50F5               	movf	tablat,w,c
  3973  001162  6E2F               	movwf	(??_printf+2)& (0+255),c
  3974  001164  6A30               	clrf	(??_printf+3)& (0+255),c
  3975  001166  502D               	movf	??_printf,w,c
  3976  001168  262F               	addwf	??_printf+2,f,c
  3977  00116A  502E               	movf	??_printf+1,w,c
  3978  00116C  2230               	addwfc	??_printf+3,f,c
  3979  00116E  502F               	movf	??_printf+2,w,c
  3980  001170  2638               	addwf	printf@width,f,c
  3981  001172  5030               	movf	??_printf+3,w,c
  3982  001174  2239               	addwfc	printf@width+1,f,c
  3983  001176  4A25               	infsnz	printf@f,f,c
  3984  001178  2A26               	incf	printf@f+1,f,c
  3985                           
  3986                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3987  00117A  C025  FFF6         	movff	printf@f,tblptrl
  3988  00117E  C026  FFF7         	movff	printf@f+1,tblptrh
  3989  001182                     	if	0	;tblptru may be non-zero
  3990  001182                     	endif
  3991  001182                     	if	0	;tblptru may be non-zero
  3992  001182                     	endif
  3993  001182  0008               	tblrd		*
  3994  001184  50F5               	movf	tablat,w,c
  3995  001186  ECBE  F010         	call	_isdigit
  3996  00118A  A0D8               	btfss	status,0,c
  3997  00118C  D003               	goto	l2951
  3998  00118E  D7D1               	goto	l2939
  3999  001190                     l2947:
  4000                           
  4001                           ;doprnt.c: 721: flag |= 0x80;
  4002  001190  8E37               	bsf	printf@flag,7,c
  4003                           
  4004                           ;doprnt.c: 723: break;
  4005  001192  D017               	goto	l467
  4006  001194                     l2951:
  4007  001194  C025  FFF6         	movff	printf@f,tblptrl
  4008  001198  C026  FFF7         	movff	printf@f+1,tblptrh
  4009  00119C  4A25               	infsnz	printf@f,f,c
  4010  00119E  2A26               	incf	printf@f+1,f,c
  4011  0011A0                     	if	0	;tblptru may be non-zero
  4012  0011A0                     	endif
  4013  0011A0                     	if	0	;tblptru may be non-zero
  4014  0011A0                     	endif
  4015  0011A0  0008               	tblrd		*
  4016  0011A2  CFF5 F03A          	movff	tablat,printf@c
  4017  0011A6  503A               	movf	printf@c,w,c
  4018                           
  4019                           ; Switch size 1, requested type "space"
  4020                           ; Number of cases is 4, Range of values is 0 to 120
  4021                           ; switch strategies available:
  4022                           ; Name         Instructions Cycles
  4023                           ; simple_byte           13     7 (average)
  4024                           ;	Chosen strategy is simple_byte
  4025  0011A8  0A00               	xorlw	0	; case 0
  4026  0011AA  B4D8               	btfsc	status,2,c
  4027  0011AC  0012               	return	
  4028  0011AE  0A64               	xorlw	100	; case 100
  4029  0011B0  B4D8               	btfsc	status,2,c
  4030  0011B2  D007               	goto	l467
  4031  0011B4  0A0D               	xorlw	13	; case 105
  4032  0011B6  B4D8               	btfsc	status,2,c
  4033  0011B8  D004               	goto	l467
  4034  0011BA  0A11               	xorlw	17	; case 120
  4035  0011BC  B4D8               	btfsc	status,2,c
  4036  0011BE  D7E8               	goto	l2947
  4037  0011C0  D103               	goto	l3049
  4038  0011C2                     l467:
  4039                           
  4040                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  4041  0011C2  BE37               	btfsc	printf@flag,7,c
  4042  0011C4  D015               	goto	l2963
  4043                           
  4044                           ;doprnt.c: 1253: {
  4045                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4046  0011C6  C032  FFD9         	movff	printf@ap,fsr2l
  4047  0011CA  C033  FFDA         	movff	printf@ap+1,fsr2h
  4048  0011CE  CFDE F035          	movff	postinc2,printf@val
  4049  0011D2  CFDD F036          	movff	postdec2,printf@val+1
  4050  0011D6  0E02               	movlw	2
  4051  0011D8  2632               	addwf	printf@ap,f,c
  4052  0011DA  0E00               	movlw	0
  4053  0011DC  2233               	addwfc	printf@ap+1,f,c
  4054                           
  4055                           ;doprnt.c: 1261: if((int)val < 0) {
  4056  0011DE  AE36               	btfss	printf@val+1,7,c
  4057  0011E0  D044               	goto	l2997
  4058                           
  4059                           ;doprnt.c: 1262: flag |= 0x03;
  4060  0011E2  0E03               	movlw	3
  4061  0011E4  1237               	iorwf	printf@flag,f,c
  4062                           
  4063                           ;doprnt.c: 1263: val = -val;
  4064  0011E6  6C35               	negf	printf@val,c
  4065  0011E8  1E36               	comf	printf@val+1,f,c
  4066  0011EA  B0D8               	btfsc	status,0,c
  4067  0011EC  2A36               	incf	printf@val+1,f,c
  4068                           
  4069                           ;doprnt.c: 1264: }
  4070                           ;doprnt.c: 1266: }
  4071  0011EE  D03D               	goto	l2997
  4072  0011F0                     l2963:
  4073                           
  4074                           ;doprnt.c: 1268: else
  4075                           ;doprnt.c: 1273: {
  4076                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4077  0011F0  C032  FFD9         	movff	printf@ap,fsr2l
  4078  0011F4  C033  FFDA         	movff	printf@ap+1,fsr2h
  4079  0011F8  CFDE F035          	movff	postinc2,printf@val
  4080  0011FC  CFDD F036          	movff	postdec2,printf@val+1
  4081  001200  0E02               	movlw	2
  4082  001202  2632               	addwf	printf@ap,f,c
  4083  001204  0E00               	movlw	0
  4084  001206  2233               	addwfc	printf@ap+1,f,c
  4085                           
  4086                           ;doprnt.c: 1287: }
  4087                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  4088  001208  D030               	goto	l2997
  4089  00120A                     l2967:
  4090                           
  4091                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4092  00120A  0E01               	movlw	1
  4093  00120C  6E3A               	movwf	printf@c,c
  4094  00120E                     l2969:
  4095  00120E  0E05               	movlw	5
  4096  001210  183A               	xorwf	printf@c,w,c
  4097  001212  B4D8               	btfsc	status,2,c
  4098  001214  D032               	goto	l2999
  4099                           
  4100                           ;doprnt.c: 1306: if(val < dpowers[c])
  4101  001216  503A               	movf	printf@c,w,c
  4102  001218  0D02               	mullw	2
  4103  00121A  0E12               	movlw	low _dpowers
  4104  00121C  24F3               	addwf	prodl,w,c
  4105  00121E  6EF6               	movwf	tblptrl,c
  4106  001220  0E10               	movlw	high _dpowers
  4107  001222  20F4               	addwfc	prodh,w,c
  4108  001224  6EF7               	movwf	tblptrh,c
  4109  001226                     	if	0	;There are less than 3 active tblptr bytes
  4110  001226                     	endif
  4111  001226  0009               	tblrd		*+
  4112  001228  50F5               	movf	tablat,w,c
  4113  00122A  5C35               	subwf	printf@val,w,c
  4114  00122C  0009               	tblrd		*+
  4115  00122E  50F5               	movf	tablat,w,c
  4116  001230  5836               	subwfb	printf@val+1,w,c
  4117  001232  A0D8               	btfss	status,0,c
  4118  001234  D022               	goto	l2999
  4119                           
  4120                           ;doprnt.c: 1307: break;
  4121  001236  2A3A               	incf	printf@c,f,c
  4122  001238  D7EA               	goto	l2969
  4123  00123A                     l2981:
  4124                           
  4125                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4126  00123A  0E01               	movlw	1
  4127  00123C  6E3A               	movwf	printf@c,c
  4128  00123E                     l2983:
  4129  00123E  0E04               	movlw	4
  4130  001240  183A               	xorwf	printf@c,w,c
  4131  001242  B4D8               	btfsc	status,2,c
  4132  001244  D01A               	goto	l2999
  4133                           
  4134                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4135  001246  503A               	movf	printf@c,w,c
  4136  001248  0D02               	mullw	2
  4137  00124A  0E1C               	movlw	low _hexpowers
  4138  00124C  24F3               	addwf	prodl,w,c
  4139  00124E  6EF6               	movwf	tblptrl,c
  4140  001250  0E10               	movlw	high _hexpowers
  4141  001252  20F4               	addwfc	prodh,w,c
  4142  001254  6EF7               	movwf	tblptrh,c
  4143  001256                     	if	0	;There are less than 3 active tblptr bytes
  4144  001256                     	endif
  4145  001256  0009               	tblrd		*+
  4146  001258  50F5               	movf	tablat,w,c
  4147  00125A  5C35               	subwf	printf@val,w,c
  4148  00125C  0009               	tblrd		*+
  4149  00125E  50F5               	movf	tablat,w,c
  4150  001260  5836               	subwfb	printf@val+1,w,c
  4151  001262  A0D8               	btfss	status,0,c
  4152  001264  D00A               	goto	l2999
  4153                           
  4154                           ;doprnt.c: 1318: break;
  4155  001266  2A3A               	incf	printf@c,f,c
  4156  001268  D7EA               	goto	l2983
  4157  00126A                     l2997:
  4158  00126A  5037               	movf	printf@flag,w,c
  4159  00126C  0B80               	andlw	128
  4160                           
  4161                           ; Switch size 1, requested type "space"
  4162                           ; Number of cases is 2, Range of values is 0 to 128
  4163                           ; switch strategies available:
  4164                           ; Name         Instructions Cycles
  4165                           ; simple_byte            7     4 (average)
  4166                           ;	Chosen strategy is simple_byte
  4167  00126E  0A00               	xorlw	0	; case 0
  4168  001270  B4D8               	btfsc	status,2,c
  4169  001272  D7CB               	goto	l2967
  4170  001274  0A80               	xorlw	128	; case 128
  4171  001276  B4D8               	btfsc	status,2,c
  4172  001278  D7E0               	goto	l2981
  4173  00127A                     l2999:
  4174                           
  4175                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4176  00127A  5038               	movf	printf@width,w,c
  4177  00127C  1039               	iorwf	printf@width+1,w,c
  4178  00127E  B4D8               	btfsc	status,2,c
  4179  001280  D009               	goto	l3005
  4180  001282  C037  F02D         	movff	printf@flag,??_printf
  4181  001286  0E03               	movlw	3
  4182  001288  162D               	andwf	??_printf,f,c
  4183  00128A  B4D8               	btfsc	status,2,c
  4184  00128C  D003               	goto	l3005
  4185                           
  4186                           ;doprnt.c: 1346: width--;
  4187  00128E  0638               	decf	printf@width,f,c
  4188  001290  A0D8               	btfss	status,0,c
  4189  001292  0639               	decf	printf@width+1,f,c
  4190  001294                     l3005:
  4191                           
  4192                           ;doprnt.c: 1381: if(width > c)
  4193  001294  0E80               	movlw	128
  4194  001296  BE3A               	btfsc	printf@c,7,c
  4195  001298  0E7F               	movlw	127
  4196  00129A  6E2D               	movwf	??_printf& (0+255),c
  4197  00129C  5038               	movf	printf@width,w,c
  4198  00129E  5C3A               	subwf	printf@c,w,c
  4199  0012A0  5039               	movf	printf@width+1,w,c
  4200  0012A2  0A80               	xorlw	128
  4201  0012A4  582D               	subwfb	??_printf& (0+255),w,c
  4202  0012A6  B0D8               	btfsc	status,0,c
  4203  0012A8  D007               	goto	l3009
  4204                           
  4205                           ;doprnt.c: 1382: width -= c;
  4206  0012AA  503A               	movf	printf@c,w,c
  4207  0012AC  5E38               	subwf	printf@width,f,c
  4208  0012AE  0E00               	movlw	0
  4209  0012B0  BE3A               	btfsc	printf@c,7,c
  4210  0012B2  0EFF               	movlw	255
  4211  0012B4  5A39               	subwfb	printf@width+1,f,c
  4212  0012B6  D004               	goto	l3011
  4213  0012B8                     l3009:
  4214                           
  4215                           ;doprnt.c: 1383: else
  4216                           ;doprnt.c: 1384: width = 0;
  4217  0012B8  0E00               	movlw	0
  4218  0012BA  6E39               	movwf	printf@width+1,c
  4219  0012BC  0E00               	movlw	0
  4220  0012BE  6E38               	movwf	printf@width,c
  4221  0012C0                     l3011:
  4222                           
  4223                           ;doprnt.c: 1387: if(flag & 0x04) {
  4224  0012C0  A437               	btfss	printf@flag,2,c
  4225  0012C2  D014               	goto	l3023
  4226                           
  4227                           ;doprnt.c: 1392: if(flag & 0x03)
  4228  0012C4  C037  F02D         	movff	printf@flag,??_printf
  4229  0012C8  0E03               	movlw	3
  4230  0012CA  162D               	andwf	??_printf,f,c
  4231  0012CC  B4D8               	btfsc	status,2,c
  4232  0012CE  D003               	goto	l3017
  4233                           
  4234                           ;doprnt.c: 1393: (putch('-') );
  4235  0012D0  0E2D               	movlw	45
  4236  0012D2  ECEC  F010         	call	_putch
  4237  0012D6                     l3017:
  4238                           
  4239                           ;doprnt.c: 1415: if(width)
  4240  0012D6  5038               	movf	printf@width,w,c
  4241  0012D8  1039               	iorwf	printf@width+1,w,c
  4242  0012DA  B4D8               	btfsc	status,2,c
  4243  0012DC  D01E               	goto	l3033
  4244                           
  4245                           ;doprnt.c: 1417: (putch('0') );
  4246                           
  4247                           ;doprnt.c: 1416: do
  4248  0012DE  0E30               	movlw	48
  4249  0012E0  ECEC  F010         	call	_putch
  4250                           
  4251                           ;doprnt.c: 1418: while(--width);
  4252  0012E4  0638               	decf	printf@width,f,c
  4253  0012E6  A0D8               	btfss	status,0,c
  4254  0012E8  0639               	decf	printf@width+1,f,c
  4255  0012EA  D7F5               	goto	l3017
  4256  0012EC                     l3023:
  4257                           
  4258                           ;doprnt.c: 1422: {
  4259                           ;doprnt.c: 1424: if(width
  4260                           ;doprnt.c: 1428: )
  4261  0012EC  5038               	movf	printf@width,w,c
  4262  0012EE  1039               	iorwf	printf@width+1,w,c
  4263  0012F0  B4D8               	btfsc	status,2,c
  4264  0012F2  D00A               	goto	l3029
  4265  0012F4                     l3025:
  4266                           
  4267                           ;doprnt.c: 1430: (putch(' ') );
  4268  0012F4  0E20               	movlw	32
  4269  0012F6  ECEC  F010         	call	_putch
  4270                           
  4271                           ;doprnt.c: 1431: while(--width);
  4272  0012FA  0638               	decf	printf@width,f,c
  4273  0012FC  A0D8               	btfss	status,0,c
  4274  0012FE  0639               	decf	printf@width+1,f,c
  4275  001300  5038               	movf	printf@width,w,c
  4276  001302  1039               	iorwf	printf@width+1,w,c
  4277  001304  A4D8               	btfss	status,2,c
  4278  001306  D7F6               	goto	l3025
  4279  001308                     l3029:
  4280                           
  4281                           ;doprnt.c: 1438: if(flag & 0x03)
  4282  001308  C037  F02D         	movff	printf@flag,??_printf
  4283  00130C  0E03               	movlw	3
  4284  00130E  162D               	andwf	??_printf,f,c
  4285  001310  B4D8               	btfsc	status,2,c
  4286  001312  D003               	goto	l3033
  4287                           
  4288                           ;doprnt.c: 1439: (putch('-') );
  4289  001314  0E2D               	movlw	45
  4290  001316  ECEC  F010         	call	_putch
  4291  00131A                     l3033:
  4292                           
  4293                           ;doprnt.c: 1469: }
  4294                           ;doprnt.c: 1472: prec = c;
  4295  00131A  C03A  F034         	movff	printf@c,printf@prec
  4296                           
  4297                           ;doprnt.c: 1474: while(prec--) {
  4298  00131E  D050               	goto	l3047
  4299  001320                     l3035:
  4300                           
  4301                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4302  001320  5034               	movf	printf@prec,w,c
  4303  001322  0D02               	mullw	2
  4304  001324  0E12               	movlw	low _dpowers
  4305  001326  24F3               	addwf	prodl,w,c
  4306  001328  6EF6               	movwf	tblptrl,c
  4307  00132A  0E10               	movlw	high _dpowers
  4308  00132C  20F4               	addwfc	prodh,w,c
  4309  00132E  6EF7               	movwf	tblptrh,c
  4310  001330                     	if	0	;There are less than 3 active tblptr bytes
  4311  001330                     	endif
  4312  001330  0009               	tblrd		*+
  4313  001332  CFF5 F01B          	movff	tablat,___lwdiv@divisor
  4314  001336  000A               	tblrd		*-
  4315  001338  CFF5 F01C          	movff	tablat,___lwdiv@divisor+1
  4316  00133C  C035  F019         	movff	printf@val,___lwdiv@dividend
  4317  001340  C036  F01A         	movff	printf@val+1,___lwdiv@dividend+1
  4318  001344  ECC1  F00F         	call	___lwdiv	;wreg free
  4319  001348  C019  F020         	movff	?___lwdiv,___lwmod@dividend
  4320  00134C  C01A  F021         	movff	?___lwdiv+1,___lwmod@dividend+1
  4321  001350  0E00               	movlw	0
  4322  001352  6E23               	movwf	___lwmod@divisor+1,c
  4323  001354  0E0A               	movlw	10
  4324  001356  6E22               	movwf	___lwmod@divisor,c
  4325  001358  EC30  F010         	call	___lwmod	;wreg free
  4326  00135C  5020               	movf	?___lwmod,w,c
  4327  00135E  0F30               	addlw	48
  4328  001360  6E3A               	movwf	printf@c,c
  4329                           
  4330                           ;doprnt.c: 1491: break;
  4331  001362  D02B               	goto	l3045
  4332  001364                     l3037:
  4333                           
  4334                           ;doprnt.c: 1499: {
  4335                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4336  001364  C035  F019         	movff	printf@val,___lwdiv@dividend
  4337  001368  C036  F01A         	movff	printf@val+1,___lwdiv@dividend+1
  4338  00136C  5034               	movf	printf@prec,w,c
  4339  00136E  0D02               	mullw	2
  4340  001370  0E1C               	movlw	low _hexpowers
  4341  001372  24F3               	addwf	prodl,w,c
  4342  001374  6EF6               	movwf	tblptrl,c
  4343  001376  0E10               	movlw	high _hexpowers
  4344  001378  20F4               	addwfc	prodh,w,c
  4345  00137A  6EF7               	movwf	tblptrh,c
  4346  00137C                     	if	0	;There are less than 3 active tblptr bytes
  4347  00137C                     	endif
  4348  00137C  0009               	tblrd		*+
  4349  00137E  CFF5 F01B          	movff	tablat,___lwdiv@divisor
  4350  001382  000A               	tblrd		*-
  4351  001384  CFF5 F01C          	movff	tablat,___lwdiv@divisor+1
  4352  001388  ECC1  F00F         	call	___lwdiv	;wreg free
  4353  00138C  5019               	movf	?___lwdiv,w,c
  4354  00138E  0B0F               	andlw	15
  4355  001390  6E31               	movwf	printf@idx,c
  4356                           
  4357                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4358  001392  5031               	movf	printf@idx,w,c
  4359  001394  0D01               	mullw	1
  4360  001396  0E54               	movlw	low STR_15
  4361  001398  24F3               	addwf	prodl,w,c
  4362  00139A  6EF6               	movwf	tblptrl,c
  4363  00139C  0E10               	movlw	high STR_15
  4364  00139E  20F4               	addwfc	prodh,w,c
  4365  0013A0  6EF7               	movwf	tblptrh,c
  4366  0013A2                     	if	0	;There are less than 3 active tblptr bytes
  4367  0013A2                     	endif
  4368  0013A2  0008               	tblrd		*
  4369  0013A4  CFF5 F03A          	movff	tablat,printf@c
  4370                           
  4371                           ;doprnt.c: 1523: }
  4372                           
  4373                           ;doprnt.c: 1508: }
  4374                           ;doprnt.c: 1510: break;
  4375  0013A8  D008               	goto	l3045
  4376  0013AA                     l3043:
  4377  0013AA  5037               	movf	printf@flag,w,c
  4378  0013AC  0B80               	andlw	128
  4379                           
  4380                           ; Switch size 1, requested type "space"
  4381                           ; Number of cases is 2, Range of values is 0 to 128
  4382                           ; switch strategies available:
  4383                           ; Name         Instructions Cycles
  4384                           ; simple_byte            7     4 (average)
  4385                           ;	Chosen strategy is simple_byte
  4386  0013AE  0A00               	xorlw	0	; case 0
  4387  0013B0  B4D8               	btfsc	status,2,c
  4388  0013B2  D7B6               	goto	l3035
  4389  0013B4  0A80               	xorlw	128	; case 128
  4390  0013B6  B4D8               	btfsc	status,2,c
  4391  0013B8  D7D5               	goto	l3037
  4392  0013BA                     l3045:
  4393                           
  4394                           ;doprnt.c: 1524: (putch(c) );
  4395  0013BA  503A               	movf	printf@c,w,c
  4396  0013BC  ECEC  F010         	call	_putch
  4397  0013C0                     l3047:
  4398  0013C0  0634               	decf	printf@prec,f,c
  4399  0013C2  2834               	incf	printf@prec,w,c
  4400  0013C4  A4D8               	btfss	status,2,c
  4401  0013C6  D7F1               	goto	l3043
  4402  0013C8                     l3049:
  4403  0013C8  C025  FFF6         	movff	printf@f,tblptrl
  4404  0013CC  C026  FFF7         	movff	printf@f+1,tblptrh
  4405  0013D0  4A25               	infsnz	printf@f,f,c
  4406  0013D2  2A26               	incf	printf@f+1,f,c
  4407  0013D4                     	if	0	;tblptru may be non-zero
  4408  0013D4                     	endif
  4409  0013D4                     	if	0	;tblptru may be non-zero
  4410  0013D4                     	endif
  4411  0013D4  0008               	tblrd		*
  4412  0013D6  CFF5 F03A          	movff	tablat,printf@c
  4413  0013DA  503A               	movf	printf@c,w,c
  4414  0013DC  B4D8               	btfsc	status,2,c
  4415  0013DE  0012               	return	
  4416  0013E0  D67F               	goto	l2923
  4417  0013E2                     __end_of_printf:
  4418                           	opt stack 0
  4419                           tblptru	equ	0xFF8
  4420                           tblptrh	equ	0xFF7
  4421                           tblptrl	equ	0xFF6
  4422                           tablat	equ	0xFF5
  4423                           prodh	equ	0xFF4
  4424                           prodl	equ	0xFF3
  4425                           intcon	equ	0xFF2
  4426                           intcon3	equ	0xFF0
  4427                           postinc0	equ	0xFEE
  4428                           wreg	equ	0xFE8
  4429                           indf1	equ	0xFE7
  4430                           fsr1h	equ	0xFE2
  4431                           fsr1l	equ	0xFE1
  4432                           indf2	equ	0xFDF
  4433                           postinc2	equ	0xFDE
  4434                           postdec2	equ	0xFDD
  4435                           fsr2h	equ	0xFDA
  4436                           fsr2l	equ	0xFD9
  4437                           status	equ	0xFD8
  4438                           
  4439 ;; *************** function _putch *****************
  4440 ;; Defined at:
  4441 ;;		line 30 in file "lcd.c"
  4442 ;; Parameters:    Size  Location     Type
  4443 ;;  data            1    wreg     unsigned char 
  4444 ;; Auto vars:     Size  Location     Type
  4445 ;;  data            1   26[COMRAM] unsigned char 
  4446 ;; Return value:  Size  Location     Type
  4447 ;;                  1    wreg      void 
  4448 ;; Registers used:
  4449 ;;		wreg, status,2, status,0, cstack
  4450 ;; Tracked objects:
  4451 ;;		On entry : 0/0
  4452 ;;		On exit  : 0/0
  4453 ;;		Unchanged: 0/0
  4454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4456 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4458 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4459 ;;Total ram usage:        1 bytes
  4460 ;; Hardware stack levels used:    1
  4461 ;; Hardware stack levels required when called:    5
  4462 ;; This function calls:
  4463 ;;		_lcdNibble
  4464 ;; This function is called by:
  4465 ;;		_printf
  4466 ;; This function uses a non-reentrant model
  4467 ;;
  4468                           
  4469                           	psect	text24
  4470  0021D8                     __ptext24:
  4471                           	opt stack 0
  4472  0021D8                     _putch:
  4473                           	opt stack 23
  4474                           
  4475                           ;incstack = 0
  4476                           ;putch@data stored from wreg
  4477  0021D8  6E1B               	movwf	putch@data,c
  4478                           
  4479                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  4480  0021DA  848C               	bsf	3980,2,c	;volatile
  4481                           
  4482                           ;lcd.c: 32: lcdNibble(data);
  4483  0021DC  501B               	movf	putch@data,w,c
  4484  0021DE  EC42  F00F         	call	_lcdNibble
  4485  0021E2  0012               	return		;funcret
  4486  0021E4                     __end_of_putch:
  4487                           	opt stack 0
  4488                           tblptru	equ	0xFF8
  4489                           tblptrh	equ	0xFF7
  4490                           tblptrl	equ	0xFF6
  4491                           tablat	equ	0xFF5
  4492                           prodh	equ	0xFF4
  4493                           prodl	equ	0xFF3
  4494                           intcon	equ	0xFF2
  4495                           intcon3	equ	0xFF0
  4496                           postinc0	equ	0xFEE
  4497                           wreg	equ	0xFE8
  4498                           indf1	equ	0xFE7
  4499                           fsr1h	equ	0xFE2
  4500                           fsr1l	equ	0xFE1
  4501                           indf2	equ	0xFDF
  4502                           postinc2	equ	0xFDE
  4503                           postdec2	equ	0xFDD
  4504                           fsr2h	equ	0xFDA
  4505                           fsr2l	equ	0xFD9
  4506                           status	equ	0xFD8
  4507                           
  4508 ;; *************** function _isdigit *****************
  4509 ;; Defined at:
  4510 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/isdigit.c"
  4511 ;; Parameters:    Size  Location     Type
  4512 ;;  c               1    wreg     unsigned char 
  4513 ;; Auto vars:     Size  Location     Type
  4514 ;;  c               1   26[COMRAM] unsigned char 
  4515 ;; Return value:  Size  Location     Type
  4516 ;;		None               void
  4517 ;; Registers used:
  4518 ;;		wreg, status,2, status,0
  4519 ;; Tracked objects:
  4520 ;;		On entry : 0/0
  4521 ;;		On exit  : 0/0
  4522 ;;		Unchanged: 0/0
  4523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4525 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4526 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4527 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4528 ;;Total ram usage:        3 bytes
  4529 ;; Hardware stack levels used:    1
  4530 ;; Hardware stack levels required when called:    4
  4531 ;; This function calls:
  4532 ;;		Nothing
  4533 ;; This function is called by:
  4534 ;;		_printf
  4535 ;; This function uses a non-reentrant model
  4536 ;;
  4537                           
  4538                           	psect	text25
  4539  00217C                     __ptext25:
  4540                           	opt stack 0
  4541  00217C                     _isdigit:
  4542                           	opt stack 24
  4543                           
  4544                           ;incstack = 0
  4545                           ;isdigit@c stored from wreg
  4546  00217C  6E1B               	movwf	isdigit@c,c
  4547  00217E  0E00               	movlw	0
  4548  002180  6E1A               	movwf	_isdigit$1039,c
  4549  002182  0E3A               	movlw	58
  4550  002184  601B               	cpfslt	isdigit@c,c
  4551  002186  D005               	goto	l2835
  4552  002188  0E2F               	movlw	47
  4553  00218A  641B               	cpfsgt	isdigit@c,c
  4554  00218C  D002               	goto	l2835
  4555  00218E  0E01               	movlw	1
  4556  002190  6E1A               	movwf	_isdigit$1039,c
  4557  002192                     l2835:
  4558  002192  C01A  F019         	movff	_isdigit$1039,??_isdigit
  4559  002196  3019               	rrcf	??_isdigit,w,c
  4560  002198  0012               	return	
  4561  00219A                     __end_of_isdigit:
  4562                           	opt stack 0
  4563                           tblptru	equ	0xFF8
  4564                           tblptrh	equ	0xFF7
  4565                           tblptrl	equ	0xFF6
  4566                           tablat	equ	0xFF5
  4567                           prodh	equ	0xFF4
  4568                           prodl	equ	0xFF3
  4569                           intcon	equ	0xFF2
  4570                           intcon3	equ	0xFF0
  4571                           postinc0	equ	0xFEE
  4572                           wreg	equ	0xFE8
  4573                           indf1	equ	0xFE7
  4574                           fsr1h	equ	0xFE2
  4575                           fsr1l	equ	0xFE1
  4576                           indf2	equ	0xFDF
  4577                           postinc2	equ	0xFDE
  4578                           postdec2	equ	0xFDD
  4579                           fsr2h	equ	0xFDA
  4580                           fsr2l	equ	0xFD9
  4581                           status	equ	0xFD8
  4582                           
  4583 ;; *************** function ___wmul *****************
  4584 ;; Defined at:
  4585 ;;		line 15 in file "/Applications/microchip/xc8/v1.41/sources/common/Umul16.c"
  4586 ;; Parameters:    Size  Location     Type
  4587 ;;  multiplier      2   24[COMRAM] unsigned int 
  4588 ;;  multiplicand    2   26[COMRAM] unsigned int 
  4589 ;; Auto vars:     Size  Location     Type
  4590 ;;  product         2   28[COMRAM] unsigned int 
  4591 ;; Return value:  Size  Location     Type
  4592 ;;                  2   24[COMRAM] unsigned int 
  4593 ;; Registers used:
  4594 ;;		wreg, status,2, status,0, prodl, prodh
  4595 ;; Tracked objects:
  4596 ;;		On entry : 0/0
  4597 ;;		On exit  : 0/0
  4598 ;;		Unchanged: 0/0
  4599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4600 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4601 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4603 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4604 ;;Total ram usage:        6 bytes
  4605 ;; Hardware stack levels used:    1
  4606 ;; Hardware stack levels required when called:    4
  4607 ;; This function calls:
  4608 ;;		Nothing
  4609 ;; This function is called by:
  4610 ;;		_printf
  4611 ;; This function uses a non-reentrant model
  4612 ;;
  4613                           
  4614                           	psect	text26
  4615  002130                     __ptext26:
  4616                           	opt stack 0
  4617  002130                     ___wmul:
  4618                           	opt stack 24
  4619                           
  4620                           ;incstack = 0
  4621  002130  5019               	movf	___wmul@multiplier,w,c
  4622  002132  021B               	mulwf	___wmul@multiplicand,c
  4623  002134  CFF3 F01D          	movff	prodl,___wmul@product
  4624  002138  CFF4 F01E          	movff	prodh,___wmul@product+1
  4625  00213C  5019               	movf	___wmul@multiplier,w,c
  4626  00213E  021C               	mulwf	___wmul@multiplicand+1,c
  4627  002140  50F3               	movf	prodl,w,c
  4628  002142  261E               	addwf	___wmul@product+1,f,c
  4629  002144  501A               	movf	___wmul@multiplier+1,w,c
  4630  002146  021B               	mulwf	___wmul@multiplicand,c
  4631  002148  50F3               	movf	prodl,w,c
  4632  00214A  261E               	addwf	___wmul@product+1,f,c
  4633  00214C  C01D  F019         	movff	___wmul@product,?___wmul
  4634  002150  C01E  F01A         	movff	___wmul@product+1,?___wmul+1
  4635  002154  0012               	return	
  4636  002156                     __end_of___wmul:
  4637                           	opt stack 0
  4638                           tblptru	equ	0xFF8
  4639                           tblptrh	equ	0xFF7
  4640                           tblptrl	equ	0xFF6
  4641                           tablat	equ	0xFF5
  4642                           prodh	equ	0xFF4
  4643                           prodl	equ	0xFF3
  4644                           intcon	equ	0xFF2
  4645                           intcon3	equ	0xFF0
  4646                           postinc0	equ	0xFEE
  4647                           wreg	equ	0xFE8
  4648                           indf1	equ	0xFE7
  4649                           fsr1h	equ	0xFE2
  4650                           fsr1l	equ	0xFE1
  4651                           indf2	equ	0xFDF
  4652                           postinc2	equ	0xFDE
  4653                           postdec2	equ	0xFDD
  4654                           fsr2h	equ	0xFDA
  4655                           fsr2l	equ	0xFD9
  4656                           status	equ	0xFD8
  4657                           
  4658 ;; *************** function ___lwmod *****************
  4659 ;; Defined at:
  4660 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwmod.c"
  4661 ;; Parameters:    Size  Location     Type
  4662 ;;  dividend        2   31[COMRAM] unsigned int 
  4663 ;;  divisor         2   33[COMRAM] unsigned int 
  4664 ;; Auto vars:     Size  Location     Type
  4665 ;;  counter         1   35[COMRAM] unsigned char 
  4666 ;; Return value:  Size  Location     Type
  4667 ;;                  2   31[COMRAM] unsigned int 
  4668 ;; Registers used:
  4669 ;;		wreg, status,2, status,0
  4670 ;; Tracked objects:
  4671 ;;		On entry : 0/0
  4672 ;;		On exit  : 0/0
  4673 ;;		Unchanged: 0/0
  4674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4675 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4676 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4678 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4679 ;;Total ram usage:        5 bytes
  4680 ;; Hardware stack levels used:    1
  4681 ;; Hardware stack levels required when called:    4
  4682 ;; This function calls:
  4683 ;;		Nothing
  4684 ;; This function is called by:
  4685 ;;		_printf
  4686 ;; This function uses a non-reentrant model
  4687 ;;
  4688                           
  4689                           	psect	text27
  4690  002060                     __ptext27:
  4691                           	opt stack 0
  4692  002060                     ___lwmod:
  4693                           	opt stack 24
  4694                           
  4695                           ;incstack = 0
  4696  002060  5022               	movf	___lwmod@divisor,w,c
  4697  002062  1023               	iorwf	___lwmod@divisor+1,w,c
  4698  002064  B4D8               	btfsc	status,2,c
  4699  002066  D018               	goto	l922
  4700  002068  0E01               	movlw	1
  4701  00206A  6E24               	movwf	___lwmod@counter,c
  4702  00206C  D004               	goto	l2873
  4703  00206E                     l2871:
  4704  00206E  90D8               	bcf	status,0,c
  4705  002070  3622               	rlcf	___lwmod@divisor,f,c
  4706  002072  3623               	rlcf	___lwmod@divisor+1,f,c
  4707  002074  2A24               	incf	___lwmod@counter,f,c
  4708  002076                     l2873:
  4709  002076  AE23               	btfss	___lwmod@divisor+1,7,c
  4710  002078  D7FA               	goto	l2871
  4711  00207A                     l2875:
  4712  00207A  5022               	movf	___lwmod@divisor,w,c
  4713  00207C  5C20               	subwf	___lwmod@dividend,w,c
  4714  00207E  5023               	movf	___lwmod@divisor+1,w,c
  4715  002080  5821               	subwfb	___lwmod@dividend+1,w,c
  4716  002082  A0D8               	btfss	status,0,c
  4717  002084  D004               	goto	l2879
  4718  002086  5022               	movf	___lwmod@divisor,w,c
  4719  002088  5E20               	subwf	___lwmod@dividend,f,c
  4720  00208A  5023               	movf	___lwmod@divisor+1,w,c
  4721  00208C  5A21               	subwfb	___lwmod@dividend+1,f,c
  4722  00208E                     l2879:
  4723  00208E  90D8               	bcf	status,0,c
  4724  002090  3223               	rrcf	___lwmod@divisor+1,f,c
  4725  002092  3222               	rrcf	___lwmod@divisor,f,c
  4726  002094  2E24               	decfsz	___lwmod@counter,f,c
  4727  002096  D7F1               	goto	l2875
  4728  002098                     l922:
  4729  002098  C020  F020         	movff	___lwmod@dividend,?___lwmod
  4730  00209C  C021  F021         	movff	___lwmod@dividend+1,?___lwmod+1
  4731  0020A0  0012               	return		;funcret
  4732  0020A2                     __end_of___lwmod:
  4733                           	opt stack 0
  4734                           tblptru	equ	0xFF8
  4735                           tblptrh	equ	0xFF7
  4736                           tblptrl	equ	0xFF6
  4737                           tablat	equ	0xFF5
  4738                           prodh	equ	0xFF4
  4739                           prodl	equ	0xFF3
  4740                           intcon	equ	0xFF2
  4741                           intcon3	equ	0xFF0
  4742                           postinc0	equ	0xFEE
  4743                           wreg	equ	0xFE8
  4744                           indf1	equ	0xFE7
  4745                           fsr1h	equ	0xFE2
  4746                           fsr1l	equ	0xFE1
  4747                           indf2	equ	0xFDF
  4748                           postinc2	equ	0xFDE
  4749                           postdec2	equ	0xFDD
  4750                           fsr2h	equ	0xFDA
  4751                           fsr2l	equ	0xFD9
  4752                           status	equ	0xFD8
  4753                           
  4754 ;; *************** function ___lwdiv *****************
  4755 ;; Defined at:
  4756 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwdiv.c"
  4757 ;; Parameters:    Size  Location     Type
  4758 ;;  dividend        2   24[COMRAM] unsigned int 
  4759 ;;  divisor         2   26[COMRAM] unsigned int 
  4760 ;; Auto vars:     Size  Location     Type
  4761 ;;  quotient        2   29[COMRAM] unsigned int 
  4762 ;;  counter         1   28[COMRAM] unsigned char 
  4763 ;; Return value:  Size  Location     Type
  4764 ;;                  2   24[COMRAM] unsigned int 
  4765 ;; Registers used:
  4766 ;;		wreg, status,2, status,0
  4767 ;; Tracked objects:
  4768 ;;		On entry : 0/0
  4769 ;;		On exit  : 0/0
  4770 ;;		Unchanged: 0/0
  4771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4772 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4773 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4775 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4776 ;;Total ram usage:        7 bytes
  4777 ;; Hardware stack levels used:    1
  4778 ;; Hardware stack levels required when called:    4
  4779 ;; This function calls:
  4780 ;;		Nothing
  4781 ;; This function is called by:
  4782 ;;		_printf
  4783 ;; This function uses a non-reentrant model
  4784 ;;
  4785                           
  4786                           	psect	text28
  4787  001F82                     __ptext28:
  4788                           	opt stack 0
  4789  001F82                     ___lwdiv:
  4790                           	opt stack 24
  4791                           
  4792                           ;incstack = 0
  4793  001F82  0E00               	movlw	0
  4794  001F84  6E1F               	movwf	___lwdiv@quotient+1,c
  4795  001F86  0E00               	movlw	0
  4796  001F88  6E1E               	movwf	___lwdiv@quotient,c
  4797  001F8A  501B               	movf	___lwdiv@divisor,w,c
  4798  001F8C  101C               	iorwf	___lwdiv@divisor+1,w,c
  4799  001F8E  B4D8               	btfsc	status,2,c
  4800  001F90  D01C               	goto	l912
  4801  001F92  0E01               	movlw	1
  4802  001F94  6E1D               	movwf	___lwdiv@counter,c
  4803  001F96  D004               	goto	l2853
  4804  001F98                     l2851:
  4805  001F98  90D8               	bcf	status,0,c
  4806  001F9A  361B               	rlcf	___lwdiv@divisor,f,c
  4807  001F9C  361C               	rlcf	___lwdiv@divisor+1,f,c
  4808  001F9E  2A1D               	incf	___lwdiv@counter,f,c
  4809  001FA0                     l2853:
  4810  001FA0  AE1C               	btfss	___lwdiv@divisor+1,7,c
  4811  001FA2  D7FA               	goto	l2851
  4812  001FA4                     l2855:
  4813  001FA4  90D8               	bcf	status,0,c
  4814  001FA6  361E               	rlcf	___lwdiv@quotient,f,c
  4815  001FA8  361F               	rlcf	___lwdiv@quotient+1,f,c
  4816  001FAA  501B               	movf	___lwdiv@divisor,w,c
  4817  001FAC  5C19               	subwf	___lwdiv@dividend,w,c
  4818  001FAE  501C               	movf	___lwdiv@divisor+1,w,c
  4819  001FB0  581A               	subwfb	___lwdiv@dividend+1,w,c
  4820  001FB2  A0D8               	btfss	status,0,c
  4821  001FB4  D005               	goto	l2863
  4822  001FB6  501B               	movf	___lwdiv@divisor,w,c
  4823  001FB8  5E19               	subwf	___lwdiv@dividend,f,c
  4824  001FBA  501C               	movf	___lwdiv@divisor+1,w,c
  4825  001FBC  5A1A               	subwfb	___lwdiv@dividend+1,f,c
  4826  001FBE  801E               	bsf	___lwdiv@quotient,0,c
  4827  001FC0                     l2863:
  4828  001FC0  90D8               	bcf	status,0,c
  4829  001FC2  321C               	rrcf	___lwdiv@divisor+1,f,c
  4830  001FC4  321B               	rrcf	___lwdiv@divisor,f,c
  4831  001FC6  2E1D               	decfsz	___lwdiv@counter,f,c
  4832  001FC8  D7ED               	goto	l2855
  4833  001FCA                     l912:
  4834  001FCA  C01E  F019         	movff	___lwdiv@quotient,?___lwdiv
  4835  001FCE  C01F  F01A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4836  001FD2  0012               	return		;funcret
  4837  001FD4                     __end_of___lwdiv:
  4838                           	opt stack 0
  4839                           tblptru	equ	0xFF8
  4840                           tblptrh	equ	0xFF7
  4841                           tblptrl	equ	0xFF6
  4842                           tablat	equ	0xFF5
  4843                           prodh	equ	0xFF4
  4844                           prodl	equ	0xFF3
  4845                           intcon	equ	0xFF2
  4846                           intcon3	equ	0xFF0
  4847                           postinc0	equ	0xFEE
  4848                           wreg	equ	0xFE8
  4849                           indf1	equ	0xFE7
  4850                           fsr1h	equ	0xFE2
  4851                           fsr1l	equ	0xFE1
  4852                           indf2	equ	0xFDF
  4853                           postinc2	equ	0xFDE
  4854                           postdec2	equ	0xFDD
  4855                           fsr2h	equ	0xFDA
  4856                           fsr2l	equ	0xFD9
  4857                           status	equ	0xFD8
  4858                           
  4859 ;; *************** function _lcdInst *****************
  4860 ;; Defined at:
  4861 ;;		line 25 in file "lcd.c"
  4862 ;; Parameters:    Size  Location     Type
  4863 ;;  data            1    wreg     unsigned char 
  4864 ;; Auto vars:     Size  Location     Type
  4865 ;;  data            1   26[COMRAM] unsigned char 
  4866 ;; Return value:  Size  Location     Type
  4867 ;;                  1    wreg      void 
  4868 ;; Registers used:
  4869 ;;		wreg, status,2, status,0, cstack
  4870 ;; Tracked objects:
  4871 ;;		On entry : 0/0
  4872 ;;		On exit  : 0/0
  4873 ;;		Unchanged: 0/0
  4874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4876 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4878 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4879 ;;Total ram usage:        1 bytes
  4880 ;; Hardware stack levels used:    1
  4881 ;; Hardware stack levels required when called:    5
  4882 ;; This function calls:
  4883 ;;		_lcdNibble
  4884 ;; This function is called by:
  4885 ;;		_initLCD
  4886 ;;		_readLightSensor
  4887 ;;		_welcome
  4888 ;;		_debug
  4889 ;;		_sort
  4890 ;;		_display_time
  4891 ;;		_display_sorting_time
  4892 ;; This function uses a non-reentrant model
  4893 ;;
  4894                           
  4895                           	psect	text29
  4896  0021E4                     __ptext29:
  4897                           	opt stack 0
  4898  0021E4                     _lcdInst:
  4899                           	opt stack 24
  4900                           
  4901                           ;incstack = 0
  4902                           ;lcdInst@data stored from wreg
  4903  0021E4  6E1B               	movwf	lcdInst@data,c
  4904                           
  4905                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  4906  0021E6  948C               	bcf	3980,2,c	;volatile
  4907                           
  4908                           ;lcd.c: 27: lcdNibble(data);
  4909  0021E8  501B               	movf	lcdInst@data,w,c
  4910  0021EA  EC42  F00F         	call	_lcdNibble
  4911  0021EE  0012               	return		;funcret
  4912  0021F0                     __end_of_lcdInst:
  4913                           	opt stack 0
  4914                           tblptru	equ	0xFF8
  4915                           tblptrh	equ	0xFF7
  4916                           tblptrl	equ	0xFF6
  4917                           tablat	equ	0xFF5
  4918                           prodh	equ	0xFF4
  4919                           prodl	equ	0xFF3
  4920                           intcon	equ	0xFF2
  4921                           intcon3	equ	0xFF0
  4922                           postinc0	equ	0xFEE
  4923                           wreg	equ	0xFE8
  4924                           indf1	equ	0xFE7
  4925                           fsr1h	equ	0xFE2
  4926                           fsr1l	equ	0xFE1
  4927                           indf2	equ	0xFDF
  4928                           postinc2	equ	0xFDE
  4929                           postdec2	equ	0xFDD
  4930                           fsr2h	equ	0xFDA
  4931                           fsr2l	equ	0xFD9
  4932                           status	equ	0xFD8
  4933                           
  4934 ;; *************** function _lcdNibble *****************
  4935 ;; Defined at:
  4936 ;;		line 35 in file "lcd.c"
  4937 ;; Parameters:    Size  Location     Type
  4938 ;;  data            1    wreg     unsigned char 
  4939 ;; Auto vars:     Size  Location     Type
  4940 ;;  data            1   25[COMRAM] unsigned char 
  4941 ;;  temp            1   24[COMRAM] unsigned char 
  4942 ;; Return value:  Size  Location     Type
  4943 ;;                  1    wreg      void 
  4944 ;; Registers used:
  4945 ;;		wreg, status,2, status,0
  4946 ;; Tracked objects:
  4947 ;;		On entry : 0/0
  4948 ;;		On exit  : 0/0
  4949 ;;		Unchanged: 0/0
  4950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4952 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4954 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4955 ;;Total ram usage:        2 bytes
  4956 ;; Hardware stack levels used:    1
  4957 ;; Hardware stack levels required when called:    4
  4958 ;; This function calls:
  4959 ;;		Nothing
  4960 ;; This function is called by:
  4961 ;;		_lcdInst
  4962 ;;		_putch
  4963 ;; This function uses a non-reentrant model
  4964 ;;
  4965                           
  4966                           	psect	text30
  4967  001E84                     __ptext30:
  4968                           	opt stack 0
  4969  001E84                     _lcdNibble:
  4970                           	opt stack 23
  4971                           
  4972                           ;incstack = 0
  4973                           ;lcdNibble@data stored from wreg
  4974  001E84  6E1A               	movwf	lcdNibble@data,c
  4975                           
  4976                           ;lcd.c: 37: char temp = data & 0xF0;
  4977  001E86  501A               	movf	lcdNibble@data,w,c
  4978  001E88  0BF0               	andlw	240
  4979  001E8A  6E19               	movwf	lcdNibble@temp,c
  4980                           
  4981                           ;lcd.c: 38: LATD = LATD & 0x0F;
  4982  001E8C  508C               	movf	3980,w,c	;volatile
  4983  001E8E  0B0F               	andlw	15
  4984  001E90  6E8C               	movwf	3980,c	;volatile
  4985                           
  4986                           ;lcd.c: 39: LATD = temp | LATD;
  4987  001E92  5019               	movf	lcdNibble@temp,w,c
  4988  001E94  108C               	iorwf	3980,w,c	;volatile
  4989  001E96  6E8C               	movwf	3980,c	;volatile
  4990                           
  4991                           ;lcd.c: 41: LATDbits.LATD3 = 0;
  4992  001E98  968C               	bcf	3980,3,c	;volatile
  4993                           
  4994                           ;lcd.c: 42: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4995  001E9A  0E10               	movlw	16
  4996  001E9C                     u3247:
  4997  001E9C  2EE8               	decfsz	wreg,f,c
  4998  001E9E  D7FE               	bra	u3247
  4999  001EA0  D000               	nop2	
  5000                           
  5001                           ;lcd.c: 43: LATDbits.LATD3 = 1;
  5002  001EA2  868C               	bsf	3980,3,c	;volatile
  5003                           
  5004                           ;lcd.c: 44: _delay((unsigned long)((25)*(8000000/4000000.0)));
  5005  001EA4  0E10               	movlw	16
  5006  001EA6                     u3257:
  5007  001EA6  2EE8               	decfsz	wreg,f,c
  5008  001EA8  D7FE               	bra	u3257
  5009  001EAA  D000               	nop2	
  5010                           
  5011                           ;lcd.c: 46: data = data << 4;
  5012  001EAC  381A               	swapf	lcdNibble@data,w,c
  5013  001EAE  0BF0               	andlw	240
  5014  001EB0  6E1A               	movwf	lcdNibble@data,c
  5015                           
  5016                           ;lcd.c: 48: temp = data & 0xF0;
  5017  001EB2  501A               	movf	lcdNibble@data,w,c
  5018  001EB4  0BF0               	andlw	240
  5019  001EB6  6E19               	movwf	lcdNibble@temp,c
  5020                           
  5021                           ;lcd.c: 49: LATD = LATD & 0x0F;
  5022  001EB8  508C               	movf	3980,w,c	;volatile
  5023  001EBA  0B0F               	andlw	15
  5024  001EBC  6E8C               	movwf	3980,c	;volatile
  5025                           
  5026                           ;lcd.c: 50: LATD = temp | LATD;
  5027  001EBE  5019               	movf	lcdNibble@temp,w,c
  5028  001EC0  108C               	iorwf	3980,w,c	;volatile
  5029  001EC2  6E8C               	movwf	3980,c	;volatile
  5030                           
  5031                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  5032  001EC4  968C               	bcf	3980,3,c	;volatile
  5033                           
  5034                           ;lcd.c: 53: _delay((unsigned long)((25)*(8000000/4000000.0)));
  5035  001EC6  0E10               	movlw	16
  5036  001EC8                     u3267:
  5037  001EC8  2EE8               	decfsz	wreg,f,c
  5038  001ECA  D7FE               	bra	u3267
  5039  001ECC  D000               	nop2	
  5040                           
  5041                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  5042  001ECE  868C               	bsf	3980,3,c	;volatile
  5043                           
  5044                           ;lcd.c: 55: _delay((unsigned long)((25)*(8000000/4000000.0)));
  5045  001ED0  0E10               	movlw	16
  5046  001ED2                     u3277:
  5047  001ED2  2EE8               	decfsz	wreg,f,c
  5048  001ED4  D7FE               	bra	u3277
  5049  001ED6  D000               	nop2	
  5050  001ED8  0012               	return		;funcret
  5051  001EDA                     __end_of_lcdNibble:
  5052                           	opt stack 0
  5053                           tblptru	equ	0xFF8
  5054                           tblptrh	equ	0xFF7
  5055                           tblptrl	equ	0xFF6
  5056                           tablat	equ	0xFF5
  5057                           prodh	equ	0xFF4
  5058                           prodl	equ	0xFF3
  5059                           intcon	equ	0xFF2
  5060                           intcon3	equ	0xFF0
  5061                           postinc0	equ	0xFEE
  5062                           wreg	equ	0xFE8
  5063                           indf1	equ	0xFE7
  5064                           fsr1h	equ	0xFE2
  5065                           fsr1l	equ	0xFE1
  5066                           indf2	equ	0xFDF
  5067                           postinc2	equ	0xFDE
  5068                           postdec2	equ	0xFDD
  5069                           fsr2h	equ	0xFDA
  5070                           fsr2l	equ	0xFD9
  5071                           status	equ	0xFD8
  5072                           
  5073 ;; *************** function _interrupt_handler *****************
  5074 ;; Defined at:
  5075 ;;		line 23 in file "interrupt.c"
  5076 ;; Parameters:    Size  Location     Type
  5077 ;;		None
  5078 ;; Auto vars:     Size  Location     Type
  5079 ;;  keypress        1   23[COMRAM] unsigned char 
  5080 ;; Return value:  Size  Location     Type
  5081 ;;                  1    wreg      void 
  5082 ;; Registers used:
  5083 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5084 ;; Tracked objects:
  5085 ;;		On entry : 0/0
  5086 ;;		On exit  : 0/0
  5087 ;;		Unchanged: 0/0
  5088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5090 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5091 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5092 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5093 ;;Total ram usage:       16 bytes
  5094 ;; Hardware stack levels used:    1
  5095 ;; Hardware stack levels required when called:    3
  5096 ;; This function calls:
  5097 ;;		i2_get_time
  5098 ;;		i2_lcdInst
  5099 ;;		i2_putch
  5100 ;; This function is called by:
  5101 ;;		Interrupt level 2
  5102 ;; This function uses a non-reentrant model
  5103 ;;
  5104                           
  5105                           	psect	intcode
  5106  000008                     __pintcode:
  5107                           	opt stack 0
  5108  000008                     _interrupt_handler:
  5109                           	opt stack 22
  5110                           
  5111                           ;incstack = 0
  5112  000008  8267               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5113  00000A  EDA1  F00A         	call	int_func,f	;refresh shadow registers
  5114                           tblptru	equ	0xFF8
  5115                           tblptrh	equ	0xFF7
  5116                           tblptrl	equ	0xFF6
  5117                           tablat	equ	0xFF5
  5118                           prodh	equ	0xFF4
  5119                           prodl	equ	0xFF3
  5120                           intcon	equ	0xFF2
  5121                           intcon3	equ	0xFF0
  5122                           postinc0	equ	0xFEE
  5123                           wreg	equ	0xFE8
  5124                           indf1	equ	0xFE7
  5125                           fsr1h	equ	0xFE2
  5126                           fsr1l	equ	0xFE1
  5127                           indf2	equ	0xFDF
  5128                           postinc2	equ	0xFDE
  5129                           postdec2	equ	0xFDD
  5130                           fsr2h	equ	0xFDA
  5131                           fsr2l	equ	0xFD9
  5132                           status	equ	0xFD8
  5133                           
  5134                           	psect	intcode_body
  5135  001542                     __pintcode_body:
  5136                           	opt stack 22
  5137  001542                     int_func:
  5138                           	opt stack 22
  5139  001542  0006               	pop		; remove dummy address from shadow register refresh
  5140  001544  CFFA F00A          	movff	pclath,??_interrupt_handler+1
  5141  001548  CFFB F00B          	movff	pclatu,??_interrupt_handler+2
  5142  00154C  CFE9 F00C          	movff	fsr0l,??_interrupt_handler+3
  5143  001550  CFEA F00D          	movff	fsr0h,??_interrupt_handler+4
  5144  001554  CFE1 F00E          	movff	fsr1l,??_interrupt_handler+5
  5145  001558  CFE2 F00F          	movff	fsr1h,??_interrupt_handler+6
  5146  00155C  CFD9 F010          	movff	fsr2l,??_interrupt_handler+7
  5147  001560  CFDA F011          	movff	fsr2h,??_interrupt_handler+8
  5148  001564  CFF3 F012          	movff	prodl,??_interrupt_handler+9
  5149  001568  CFF4 F013          	movff	prodh,??_interrupt_handler+10
  5150  00156C  CFF6 F014          	movff	tblptrl,??_interrupt_handler+11
  5151  001570  CFF7 F015          	movff	tblptrh,??_interrupt_handler+12
  5152  001574  CFF8 F016          	movff	tblptru,??_interrupt_handler+13
  5153  001578  CFF5 F017          	movff	tablat,??_interrupt_handler+14
  5154                           
  5155                           ;interrupt.c: 24: if (INT1IF) {
  5156  00157C  A0F0               	btfss	intcon3,0,c	;volatile
  5157  00157E  D04C               	goto	i2l2799
  5158                           
  5159                           ;interrupt.c: 25: lcdInst(0b11000000);;
  5160  001580  0EC0               	movlw	192
  5161  001582  ECFE  F010         	call	i2_lcdInst
  5162                           
  5163                           ;interrupt.c: 26: unsigned char keypress = (PORTB & 0xF0) >> 4;
  5164  001586  3881               	swapf	3969,w,c	;volatile
  5165  001588  0B0F               	andlw	15
  5166  00158A  0B0F               	andlw	15
  5167  00158C  6E18               	movwf	interrupt_handler@keypress,c
  5168                           
  5169                           ;interrupt.c: 27: putch(keys[keypress]);
  5170  00158E  5018               	movf	interrupt_handler@keypress,w,c
  5171  001590  0D01               	mullw	1
  5172  001592  0E01               	movlw	low _keys
  5173  001594  24F3               	addwf	prodl,w,c
  5174  001596  6EF6               	movwf	tblptrl,c
  5175  001598  0E10               	movlw	high _keys
  5176  00159A  20F4               	addwfc	prodh,w,c
  5177  00159C  6EF7               	movwf	tblptrh,c
  5178  00159E                     	if	0	;There are less than 3 active tblptr bytes
  5179  00159E                     	endif
  5180  00159E  0008               	tblrd		*
  5181  0015A0  50F5               	movf	tablat,w,c
  5182  0015A2  ECF8  F010         	call	i2_putch
  5183                           
  5184                           ;interrupt.c: 28: if (mode == 2) {
  5185  0015A6  0E02               	movlw	2
  5186  0015A8  1858               	xorwf	_mode,w,c
  5187  0015AA  A4D8               	btfss	status,2,c
  5188  0015AC  D013               	goto	i2l2777
  5189                           
  5190                           ;interrupt.c: 29: get_time(end_time);
  5191  0015AE  0E59               	movlw	low _end_time
  5192  0015B0  6E04               	movwf	i2get_time@datime,c
  5193  0015B2  0E00               	movlw	high _end_time
  5194  0015B4  6E05               	movwf	i2get_time@datime+1,c
  5195  0015B6  ECF4  F00C         	call	i2_get_time	;wreg free
  5196                           
  5197                           ;interrupt.c: 30: passed_time =
  5198                           ;interrupt.c: 31: (end_time[1] - start_time[1]) * 60 + (end_time[0] - start_time[0]);
  5199  0015BA  5060               	movf	_start_time,w,c
  5200  0015BC  0800               	sublw	0
  5201  0015BE  6E09               	movwf	??_interrupt_handler& (0+255),c
  5202  0015C0  5061               	movf	_start_time+1,w,c
  5203  0015C2  0800               	sublw	0
  5204  0015C4  245A               	addwf	_end_time+1,w,c
  5205  0015C6  0D3C               	mullw	60
  5206  0015C8  50F3               	movf	prodl,w,c
  5207  0015CA  2409               	addwf	??_interrupt_handler,w,c
  5208  0015CC  2459               	addwf	_end_time,w,c
  5209  0015CE  6E57               	movwf	_passed_time,c
  5210                           
  5211                           ;interrupt.c: 32: mode = 3;
  5212  0015D0  0E03               	movlw	3
  5213  0015D2  D021               	goto	L6
  5214  0015D4                     i2l2777:
  5215  0015D4  5018               	movf	interrupt_handler@keypress,w,c
  5216  0015D6  A4D8               	btfss	status,2,c
  5217  0015D8  D005               	goto	i2l2783
  5218                           
  5219                           ;interrupt.c: 37: if (mode == 0) {
  5220  0015DA  5058               	movf	_mode,w,c
  5221  0015DC  A4D8               	btfss	status,2,c
  5222  0015DE  D01C               	goto	i2l2799
  5223                           
  5224                           ;interrupt.c: 38: mode = 1;
  5225  0015E0  0E01               	movlw	1
  5226  0015E2  D019               	goto	L6
  5227  0015E4                     i2l2783:
  5228  0015E4  0E03               	movlw	3
  5229  0015E6  1818               	xorwf	interrupt_handler@keypress,w,c
  5230  0015E8  A4D8               	btfss	status,2,c
  5231  0015EA  D00B               	goto	i2l2791
  5232                           
  5233                           ;interrupt.c: 42: if (mode == 0) {
  5234  0015EC  5058               	movf	_mode,w,c
  5235  0015EE  A4D8               	btfss	status,2,c
  5236  0015F0  D013               	goto	i2l2799
  5237                           
  5238                           ;interrupt.c: 43: get_time(end_time);
  5239  0015F2  0E59               	movlw	low _end_time
  5240  0015F4  6E04               	movwf	i2get_time@datime,c
  5241  0015F6  0E00               	movlw	high _end_time
  5242  0015F8  6E05               	movwf	i2get_time@datime+1,c
  5243  0015FA  ECF4  F00C         	call	i2_get_time	;wreg free
  5244                           
  5245                           ;interrupt.c: 44: mode = 2;
  5246  0015FE  0E02               	movlw	2
  5247  001600  D00A               	goto	L6
  5248  001602                     i2l2791:
  5249                           
  5250                           ;interrupt.c: 48: else if (keypress == 0x1) {
  5251  001602  0418               	decf	interrupt_handler@keypress,w,c
  5252  001604  A4D8               	btfss	status,2,c
  5253  001606  D002               	goto	i2l2795
  5254                           
  5255                           ;interrupt.c: 49: mode = 0;
  5256  001608  0E00               	movlw	0
  5257  00160A  D005               	goto	L6
  5258  00160C                     i2l2795:
  5259  00160C  0E02               	movlw	2
  5260  00160E  1818               	xorwf	interrupt_handler@keypress,w,c
  5261  001610  A4D8               	btfss	status,2,c
  5262  001612  D002               	goto	i2l2799
  5263                           
  5264                           ;interrupt.c: 52: mode = 99;
  5265  001614  0E63               	movlw	99
  5266  001616                     L6:
  5267  001616  6E58               	movwf	_mode,c
  5268  001618                     i2l2799:
  5269                           
  5270                           ;interrupt.c: 53: }
  5271                           ;interrupt.c: 54: }
  5272                           ;interrupt.c: 55: INT1IF = 0;
  5273  001618  90F0               	bcf	intcon3,0,c	;volatile
  5274  00161A  C017  FFF5         	movff	??_interrupt_handler+14,tablat
  5275  00161E  C016  FFF8         	movff	??_interrupt_handler+13,tblptru
  5276  001622  C015  FFF7         	movff	??_interrupt_handler+12,tblptrh
  5277  001626  C014  FFF6         	movff	??_interrupt_handler+11,tblptrl
  5278  00162A  C013  FFF4         	movff	??_interrupt_handler+10,prodh
  5279  00162E  C012  FFF3         	movff	??_interrupt_handler+9,prodl
  5280  001632  C011  FFDA         	movff	??_interrupt_handler+8,fsr2h
  5281  001636  C010  FFD9         	movff	??_interrupt_handler+7,fsr2l
  5282  00163A  C00F  FFE2         	movff	??_interrupt_handler+6,fsr1h
  5283  00163E  C00E  FFE1         	movff	??_interrupt_handler+5,fsr1l
  5284  001642  C00D  FFEA         	movff	??_interrupt_handler+4,fsr0h
  5285  001646  C00C  FFE9         	movff	??_interrupt_handler+3,fsr0l
  5286  00164A  C00B  FFFB         	movff	??_interrupt_handler+2,pclatu
  5287  00164E  C00A  FFFA         	movff	??_interrupt_handler+1,pclath
  5288  001652  9267               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5289  001654  0011               	retfie		f
  5290  001656                     __end_of_interrupt_handler:
  5291                           	opt stack 0
  5292                           pclatu	equ	0xFFB
  5293                           pclath	equ	0xFFA
  5294                           tblptru	equ	0xFF8
  5295                           tblptrh	equ	0xFF7
  5296                           tblptrl	equ	0xFF6
  5297                           tablat	equ	0xFF5
  5298                           prodh	equ	0xFF4
  5299                           prodl	equ	0xFF3
  5300                           intcon	equ	0xFF2
  5301                           intcon3	equ	0xFF0
  5302                           postinc0	equ	0xFEE
  5303                           fsr0h	equ	0xFEA
  5304                           fsr0l	equ	0xFE9
  5305                           wreg	equ	0xFE8
  5306                           indf1	equ	0xFE7
  5307                           fsr1h	equ	0xFE2
  5308                           fsr1l	equ	0xFE1
  5309                           indf2	equ	0xFDF
  5310                           postinc2	equ	0xFDE
  5311                           postdec2	equ	0xFDD
  5312                           fsr2h	equ	0xFDA
  5313                           fsr2l	equ	0xFD9
  5314                           status	equ	0xFD8
  5315                           
  5316 ;; *************** function i2_putch *****************
  5317 ;; Defined at:
  5318 ;;		line 30 in file "lcd.c"
  5319 ;; Parameters:    Size  Location     Type
  5320 ;;  data            1    wreg     unsigned char 
  5321 ;; Auto vars:     Size  Location     Type
  5322 ;;  data            1    2[COMRAM] unsigned char 
  5323 ;; Return value:  Size  Location     Type
  5324 ;;                  1    wreg      void 
  5325 ;; Registers used:
  5326 ;;		wreg, status,2, status,0, cstack
  5327 ;; Tracked objects:
  5328 ;;		On entry : 0/0
  5329 ;;		On exit  : 0/0
  5330 ;;		Unchanged: 0/0
  5331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5333 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5335 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5336 ;;Total ram usage:        1 bytes
  5337 ;; Hardware stack levels used:    1
  5338 ;; Hardware stack levels required when called:    1
  5339 ;; This function calls:
  5340 ;;		i2_lcdNibble
  5341 ;; This function is called by:
  5342 ;;		_interrupt_handler
  5343 ;; This function uses a non-reentrant model
  5344 ;;
  5345                           
  5346                           	psect	text32
  5347  0021F0                     __ptext32:
  5348                           	opt stack 0
  5349  0021F0                     i2_putch:
  5350                           	opt stack 23
  5351                           
  5352                           ;incstack = 0
  5353                           ;i2putch@data stored from wreg
  5354  0021F0  6E03               	movwf	i2putch@data,c
  5355                           
  5356                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  5357  0021F2  848C               	bsf	3980,2,c	;volatile
  5358                           
  5359                           ;lcd.c: 32: lcdNibble(data);
  5360  0021F4  5003               	movf	i2putch@data,w,c
  5361  0021F6  EC6D  F00F         	call	i2_lcdNibble
  5362  0021FA  0012               	return		;funcret
  5363  0021FC                     __end_ofi2_putch:
  5364                           	opt stack 0
  5365                           pclatu	equ	0xFFB
  5366                           pclath	equ	0xFFA
  5367                           tblptru	equ	0xFF8
  5368                           tblptrh	equ	0xFF7
  5369                           tblptrl	equ	0xFF6
  5370                           tablat	equ	0xFF5
  5371                           prodh	equ	0xFF4
  5372                           prodl	equ	0xFF3
  5373                           intcon	equ	0xFF2
  5374                           intcon3	equ	0xFF0
  5375                           postinc0	equ	0xFEE
  5376                           fsr0h	equ	0xFEA
  5377                           fsr0l	equ	0xFE9
  5378                           wreg	equ	0xFE8
  5379                           indf1	equ	0xFE7
  5380                           fsr1h	equ	0xFE2
  5381                           fsr1l	equ	0xFE1
  5382                           indf2	equ	0xFDF
  5383                           postinc2	equ	0xFDE
  5384                           postdec2	equ	0xFDD
  5385                           fsr2h	equ	0xFDA
  5386                           fsr2l	equ	0xFD9
  5387                           status	equ	0xFD8
  5388                           
  5389 ;; *************** function i2_lcdInst *****************
  5390 ;; Defined at:
  5391 ;;		line 25 in file "lcd.c"
  5392 ;; Parameters:    Size  Location     Type
  5393 ;;  data            1    wreg     unsigned char 
  5394 ;; Auto vars:     Size  Location     Type
  5395 ;;  data            1    2[COMRAM] unsigned char 
  5396 ;; Return value:  Size  Location     Type
  5397 ;;                  1    wreg      void 
  5398 ;; Registers used:
  5399 ;;		wreg, status,2, status,0, cstack
  5400 ;; Tracked objects:
  5401 ;;		On entry : 0/0
  5402 ;;		On exit  : 0/0
  5403 ;;		Unchanged: 0/0
  5404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5406 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5408 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5409 ;;Total ram usage:        1 bytes
  5410 ;; Hardware stack levels used:    1
  5411 ;; Hardware stack levels required when called:    1
  5412 ;; This function calls:
  5413 ;;		i2_lcdNibble
  5414 ;; This function is called by:
  5415 ;;		_interrupt_handler
  5416 ;; This function uses a non-reentrant model
  5417 ;;
  5418                           
  5419                           	psect	text33
  5420  0021FC                     __ptext33:
  5421                           	opt stack 0
  5422  0021FC                     i2_lcdInst:
  5423                           	opt stack 23
  5424                           
  5425                           ;incstack = 0
  5426                           ;i2lcdInst@data stored from wreg
  5427  0021FC  6E03               	movwf	i2lcdInst@data,c
  5428                           
  5429                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  5430  0021FE  948C               	bcf	3980,2,c	;volatile
  5431                           
  5432                           ;lcd.c: 27: lcdNibble(data);
  5433  002200  5003               	movf	i2lcdInst@data,w,c
  5434  002202  EC6D  F00F         	call	i2_lcdNibble
  5435  002206  0012               	return		;funcret
  5436  002208                     __end_ofi2_lcdInst:
  5437                           	opt stack 0
  5438                           pclatu	equ	0xFFB
  5439                           pclath	equ	0xFFA
  5440                           tblptru	equ	0xFF8
  5441                           tblptrh	equ	0xFF7
  5442                           tblptrl	equ	0xFF6
  5443                           tablat	equ	0xFF5
  5444                           prodh	equ	0xFF4
  5445                           prodl	equ	0xFF3
  5446                           intcon	equ	0xFF2
  5447                           intcon3	equ	0xFF0
  5448                           postinc0	equ	0xFEE
  5449                           fsr0h	equ	0xFEA
  5450                           fsr0l	equ	0xFE9
  5451                           wreg	equ	0xFE8
  5452                           indf1	equ	0xFE7
  5453                           fsr1h	equ	0xFE2
  5454                           fsr1l	equ	0xFE1
  5455                           indf2	equ	0xFDF
  5456                           postinc2	equ	0xFDE
  5457                           postdec2	equ	0xFDD
  5458                           fsr2h	equ	0xFDA
  5459                           fsr2l	equ	0xFD9
  5460                           status	equ	0xFD8
  5461                           
  5462 ;; *************** function i2_lcdNibble *****************
  5463 ;; Defined at:
  5464 ;;		line 35 in file "lcd.c"
  5465 ;; Parameters:    Size  Location     Type
  5466 ;;  data            1    wreg     unsigned char 
  5467 ;; Auto vars:     Size  Location     Type
  5468 ;;  data            1    1[COMRAM] unsigned char 
  5469 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  5470 ;; Return value:  Size  Location     Type
  5471 ;;                  1    wreg      void 
  5472 ;; Registers used:
  5473 ;;		wreg, status,2, status,0
  5474 ;; Tracked objects:
  5475 ;;		On entry : 0/0
  5476 ;;		On exit  : 0/0
  5477 ;;		Unchanged: 0/0
  5478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5480 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5482 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5483 ;;Total ram usage:        2 bytes
  5484 ;; Hardware stack levels used:    1
  5485 ;; This function calls:
  5486 ;;		Nothing
  5487 ;; This function is called by:
  5488 ;;		i2_lcdInst
  5489 ;;		i2_putch
  5490 ;; This function uses a non-reentrant model
  5491 ;;
  5492                           
  5493                           	psect	text34
  5494  001EDA                     __ptext34:
  5495                           	opt stack 0
  5496  001EDA                     i2_lcdNibble:
  5497                           	opt stack 23
  5498                           
  5499                           ;incstack = 0
  5500                           ;i2lcdNibble@data stored from wreg
  5501  001EDA  6E02               	movwf	i2lcdNibble@data,c
  5502                           
  5503                           ;lcd.c: 37: char temp = data & 0xF0;
  5504  001EDC  5002               	movf	i2lcdNibble@data,w,c
  5505  001EDE  0BF0               	andlw	240
  5506  001EE0  6E01               	movwf	i2lcdNibble@temp,c
  5507                           
  5508                           ;lcd.c: 38: LATD = LATD & 0x0F;
  5509  001EE2  508C               	movf	3980,w,c	;volatile
  5510  001EE4  0B0F               	andlw	15
  5511  001EE6  6E8C               	movwf	3980,c	;volatile
  5512                           
  5513                           ;lcd.c: 39: LATD = temp | LATD;
  5514  001EE8  5001               	movf	i2lcdNibble@temp,w,c
  5515  001EEA  108C               	iorwf	3980,w,c	;volatile
  5516  001EEC  6E8C               	movwf	3980,c	;volatile
  5517                           
  5518                           ;lcd.c: 41: LATDbits.LATD3 = 0;
  5519  001EEE  968C               	bcf	3980,3,c	;volatile
  5520                           
  5521                           ;lcd.c: 42: _delay((unsigned long)((25)*(8000000/4000000.0)));
  5522  001EF0  0E10               	movlw	16
  5523  001EF2                     i2u328_47:
  5524  001EF2  2EE8               	decfsz	wreg,f,c
  5525  001EF4  D7FE               	bra	i2u328_47
  5526  001EF6  D000               	nop2	
  5527                           
  5528                           ;lcd.c: 43: LATDbits.LATD3 = 1;
  5529  001EF8  868C               	bsf	3980,3,c	;volatile
  5530                           
  5531                           ;lcd.c: 44: _delay((unsigned long)((25)*(8000000/4000000.0)));
  5532  001EFA  0E10               	movlw	16
  5533  001EFC                     i2u329_47:
  5534  001EFC  2EE8               	decfsz	wreg,f,c
  5535  001EFE  D7FE               	bra	i2u329_47
  5536  001F00  D000               	nop2	
  5537                           
  5538                           ;lcd.c: 46: data = data << 4;
  5539  001F02  3802               	swapf	i2lcdNibble@data,w,c
  5540  001F04  0BF0               	andlw	240
  5541  001F06  6E02               	movwf	i2lcdNibble@data,c
  5542                           
  5543                           ;lcd.c: 48: temp = data & 0xF0;
  5544  001F08  5002               	movf	i2lcdNibble@data,w,c
  5545  001F0A  0BF0               	andlw	240
  5546  001F0C  6E01               	movwf	i2lcdNibble@temp,c
  5547                           
  5548                           ;lcd.c: 49: LATD = LATD & 0x0F;
  5549  001F0E  508C               	movf	3980,w,c	;volatile
  5550  001F10  0B0F               	andlw	15
  5551  001F12  6E8C               	movwf	3980,c	;volatile
  5552                           
  5553                           ;lcd.c: 50: LATD = temp | LATD;
  5554  001F14  5001               	movf	i2lcdNibble@temp,w,c
  5555  001F16  108C               	iorwf	3980,w,c	;volatile
  5556  001F18  6E8C               	movwf	3980,c	;volatile
  5557                           
  5558                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  5559  001F1A  968C               	bcf	3980,3,c	;volatile
  5560                           
  5561                           ;lcd.c: 53: _delay((unsigned long)((25)*(8000000/4000000.0)));
  5562  001F1C  0E10               	movlw	16
  5563  001F1E                     i2u330_47:
  5564  001F1E  2EE8               	decfsz	wreg,f,c
  5565  001F20  D7FE               	bra	i2u330_47
  5566  001F22  D000               	nop2	
  5567                           
  5568                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  5569  001F24  868C               	bsf	3980,3,c	;volatile
  5570                           
  5571                           ;lcd.c: 55: _delay((unsigned long)((25)*(8000000/4000000.0)));
  5572  001F26  0E10               	movlw	16
  5573  001F28                     i2u331_47:
  5574  001F28  2EE8               	decfsz	wreg,f,c
  5575  001F2A  D7FE               	bra	i2u331_47
  5576  001F2C  D000               	nop2	
  5577  001F2E  0012               	return		;funcret
  5578  001F30                     __end_ofi2_lcdNibble:
  5579                           	opt stack 0
  5580                           pclatu	equ	0xFFB
  5581                           pclath	equ	0xFFA
  5582                           tblptru	equ	0xFF8
  5583                           tblptrh	equ	0xFF7
  5584                           tblptrl	equ	0xFF6
  5585                           tablat	equ	0xFF5
  5586                           prodh	equ	0xFF4
  5587                           prodl	equ	0xFF3
  5588                           intcon	equ	0xFF2
  5589                           intcon3	equ	0xFF0
  5590                           postinc0	equ	0xFEE
  5591                           fsr0h	equ	0xFEA
  5592                           fsr0l	equ	0xFE9
  5593                           wreg	equ	0xFE8
  5594                           indf1	equ	0xFE7
  5595                           fsr1h	equ	0xFE2
  5596                           fsr1l	equ	0xFE1
  5597                           indf2	equ	0xFDF
  5598                           postinc2	equ	0xFDE
  5599                           postdec2	equ	0xFDD
  5600                           fsr2h	equ	0xFDA
  5601                           fsr2l	equ	0xFD9
  5602                           status	equ	0xFD8
  5603                           
  5604 ;; *************** function i2_get_time *****************
  5605 ;; Defined at:
  5606 ;;		line 39 in file "time.c"
  5607 ;; Parameters:    Size  Location     Type
  5608 ;;  datime          2    3[COMRAM] PTR unsigned char 
  5609 ;;		 -> end_time(7), start_time(7), 
  5610 ;; Auto vars:     Size  Location     Type
  5611 ;;  get_time        2    6[COMRAM] int 
  5612 ;; Return value:  Size  Location     Type
  5613 ;;                  1    wreg      void 
  5614 ;; Registers used:
  5615 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5616 ;; Tracked objects:
  5617 ;;		On entry : 0/0
  5618 ;;		On exit  : 0/0
  5619 ;;		Unchanged: 0/0
  5620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5621 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5622 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5623 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5624 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5625 ;;Total ram usage:        5 bytes
  5626 ;; Hardware stack levels used:    1
  5627 ;; Hardware stack levels required when called:    2
  5628 ;; This function calls:
  5629 ;;		i2_I2C_Master_Read
  5630 ;;		i2_I2C_Master_Start
  5631 ;;		i2_I2C_Master_Stop
  5632 ;;		i2_I2C_Master_Write
  5633 ;; This function is called by:
  5634 ;;		_interrupt_handler
  5635 ;; This function uses a non-reentrant model
  5636 ;;
  5637                           
  5638                           	psect	text35
  5639  0019E8                     __ptext35:
  5640                           	opt stack 0
  5641  0019E8                     i2_get_time:
  5642                           	opt stack 22
  5643                           
  5644                           ;time.c: 40: I2C_Master_Start();
  5645                           
  5646                           ;incstack = 0
  5647  0019E8  EC1A  F011         	call	i2_I2C_Master_Start	;wreg free
  5648                           
  5649                           ;time.c: 41: I2C_Master_Write(0b11010000);
  5650  0019EC  0E00               	movlw	0
  5651  0019EE  6E03               	movwf	i2I2C_Master_Write@d+1,c
  5652  0019F0  0ED0               	movlw	208
  5653  0019F2  6E02               	movwf	i2I2C_Master_Write@d,c
  5654  0019F4  EC09  F011         	call	i2_I2C_Master_Write	;wreg free
  5655                           
  5656                           ;time.c: 42: I2C_Master_Write(0x00);
  5657  0019F8  0E00               	movlw	0
  5658  0019FA  6E03               	movwf	i2I2C_Master_Write@d+1,c
  5659  0019FC  0E00               	movlw	0
  5660  0019FE  6E02               	movwf	i2I2C_Master_Write@d,c
  5661  001A00  EC09  F011         	call	i2_I2C_Master_Write	;wreg free
  5662                           
  5663                           ;time.c: 43: I2C_Master_Stop();
  5664  001A04  EC16  F011         	call	i2_I2C_Master_Stop	;wreg free
  5665                           
  5666                           ;time.c: 46: I2C_Master_Start();
  5667  001A08  EC1A  F011         	call	i2_I2C_Master_Start	;wreg free
  5668                           
  5669                           ;time.c: 47: I2C_Master_Write(0b11010001);
  5670  001A0C  0E00               	movlw	0
  5671  001A0E  6E03               	movwf	i2I2C_Master_Write@d+1,c
  5672  001A10  0ED1               	movlw	209
  5673  001A12  6E02               	movwf	i2I2C_Master_Write@d,c
  5674  001A14  EC09  F011         	call	i2_I2C_Master_Write	;wreg free
  5675                           
  5676                           ;time.c: 48: for(int i = 0; i < 6; i++){
  5677  001A18  0E00               	movlw	0
  5678  001A1A  6E08               	movwf	i2get_time@i+1,c
  5679  001A1C  0E00               	movlw	0
  5680  001A1E  6E07               	movwf	i2get_time@i,c
  5681  001A20                     i2l2649:
  5682  001A20  BE08               	btfsc	i2get_time@i+1,7,c
  5683  001A22  D006               	goto	i2l2653
  5684  001A24  5008               	movf	i2get_time@i+1,w,c
  5685  001A26  E12D               	bnz	i2l2661
  5686  001A28  0E06               	movlw	6
  5687  001A2A  5C07               	subwf	i2get_time@i,w,c
  5688  001A2C  B0D8               	btfsc	status,0,c
  5689  001A2E  D029               	goto	i2l2661
  5690  001A30                     i2l2653:
  5691                           
  5692                           ;time.c: 49: datime[i] = I2C_Master_Read(1);
  5693  001A30  5007               	movf	i2get_time@i,w,c
  5694  001A32  2404               	addwf	i2get_time@datime,w,c
  5695  001A34  6ED9               	movwf	fsr2l,c
  5696  001A36  5008               	movf	i2get_time@i+1,w,c
  5697  001A38  2005               	addwfc	i2get_time@datime+1,w,c
  5698  001A3A  6EDA               	movwf	fsr2h,c
  5699  001A3C  0E01               	movlw	1
  5700  001A3E  ECAB  F010         	call	i2_I2C_Master_Read
  5701  001A42  6EDF               	movwf	indf2,c
  5702                           
  5703                           ;time.c: 50: datime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  5704  001A44  5007               	movf	i2get_time@i,w,c
  5705  001A46  2404               	addwf	i2get_time@datime,w,c
  5706  001A48  6ED9               	movwf	fsr2l,c
  5707  001A4A  5008               	movf	i2get_time@i+1,w,c
  5708  001A4C  2005               	addwfc	i2get_time@datime+1,w,c
  5709  001A4E  6EDA               	movwf	fsr2h,c
  5710  001A50  0E44               	movlw	low _time
  5711  001A52  2407               	addwf	i2get_time@i,w,c
  5712  001A54  6EE1               	movwf	fsr1l,c
  5713  001A56  0E00               	movlw	high _time
  5714  001A58  2008               	addwfc	i2get_time@i+1,w,c
  5715  001A5A  6EE2               	movwf	fsr1h,c
  5716  001A5C  50E7               	movf	indf1,w,c
  5717  001A5E  6E06               	movwf	??i2_get_time& (0+255),c
  5718  001A60  3806               	swapf	??i2_get_time,w,c
  5719  001A62  0B0F               	andlw	15
  5720  001A64  0B0F               	andlw	15
  5721  001A66  0D0A               	mullw	10
  5722  001A68  0E44               	movlw	low _time
  5723  001A6A  2407               	addwf	i2get_time@i,w,c
  5724  001A6C  6EE1               	movwf	fsr1l,c
  5725  001A6E  0E00               	movlw	high _time
  5726  001A70  2008               	addwfc	i2get_time@i+1,w,c
  5727  001A72  6EE2               	movwf	fsr1h,c
  5728  001A74  50E7               	movf	indf1,w,c
  5729  001A76  0B0F               	andlw	15
  5730  001A78  24F3               	addwf	prodl,w,c
  5731  001A7A  6EDF               	movwf	indf2,c
  5732  001A7C  4A07               	infsnz	i2get_time@i,f,c
  5733  001A7E  2A08               	incf	i2get_time@i+1,f,c
  5734  001A80  D7CF               	goto	i2l2649
  5735  001A82                     i2l2661:
  5736                           
  5737                           ;time.c: 52: }
  5738                           ;time.c: 53: datime[6] = I2C_Master_Read(0);
  5739  001A82  EE20 F006          	lfsr	2,6
  5740  001A86  5004               	movf	i2get_time@datime,w,c
  5741  001A88  26D9               	addwf	fsr2l,f,c
  5742  001A8A  5005               	movf	i2get_time@datime+1,w,c
  5743  001A8C  22DA               	addwfc	fsr2h,f,c
  5744  001A8E  0E00               	movlw	0
  5745  001A90  ECAB  F010         	call	i2_I2C_Master_Read
  5746  001A94  6EDF               	movwf	indf2,c
  5747                           
  5748                           ;time.c: 54: I2C_Master_Stop();
  5749  001A96  EC16  F011         	call	i2_I2C_Master_Stop	;wreg free
  5750                           
  5751                           ;time.c: 55: I2C_Master_Write(0b11010000);
  5752  001A9A  0E00               	movlw	0
  5753  001A9C  6E03               	movwf	i2I2C_Master_Write@d+1,c
  5754  001A9E  0ED0               	movlw	208
  5755  001AA0  6E02               	movwf	i2I2C_Master_Write@d,c
  5756  001AA2  EC09  F011         	call	i2_I2C_Master_Write	;wreg free
  5757                           
  5758                           ;time.c: 56: I2C_Master_Write(0x00);
  5759  001AA6  0E00               	movlw	0
  5760  001AA8  6E03               	movwf	i2I2C_Master_Write@d+1,c
  5761  001AAA  0E00               	movlw	0
  5762  001AAC  6E02               	movwf	i2I2C_Master_Write@d,c
  5763  001AAE  EC09  F011         	call	i2_I2C_Master_Write	;wreg free
  5764                           
  5765                           ;time.c: 57: I2C_Master_Stop();
  5766  001AB2  EC16  F011         	call	i2_I2C_Master_Stop	;wreg free
  5767  001AB6  0012               	return		;funcret
  5768  001AB8                     __end_ofi2_get_time:
  5769                           	opt stack 0
  5770                           pclatu	equ	0xFFB
  5771                           pclath	equ	0xFFA
  5772                           tblptru	equ	0xFF8
  5773                           tblptrh	equ	0xFF7
  5774                           tblptrl	equ	0xFF6
  5775                           tablat	equ	0xFF5
  5776                           prodh	equ	0xFF4
  5777                           prodl	equ	0xFF3
  5778                           intcon	equ	0xFF2
  5779                           intcon3	equ	0xFF0
  5780                           postinc0	equ	0xFEE
  5781                           fsr0h	equ	0xFEA
  5782                           fsr0l	equ	0xFE9
  5783                           wreg	equ	0xFE8
  5784                           indf1	equ	0xFE7
  5785                           fsr1h	equ	0xFE2
  5786                           fsr1l	equ	0xFE1
  5787                           indf2	equ	0xFDF
  5788                           postinc2	equ	0xFDE
  5789                           postdec2	equ	0xFDD
  5790                           fsr2h	equ	0xFDA
  5791                           fsr2l	equ	0xFD9
  5792                           status	equ	0xFD8
  5793                           
  5794 ;; *************** function i2_I2C_Master_Write *****************
  5795 ;; Defined at:
  5796 ;;		line 47 in file "I2C.c"
  5797 ;; Parameters:    Size  Location     Type
  5798 ;;  d               2    1[COMRAM] unsigned int 
  5799 ;; Auto vars:     Size  Location     Type
  5800 ;;		None
  5801 ;; Return value:  Size  Location     Type
  5802 ;;                  1    wreg      void 
  5803 ;; Registers used:
  5804 ;;		wreg, status,2, status,0, cstack
  5805 ;; Tracked objects:
  5806 ;;		On entry : 0/0
  5807 ;;		On exit  : 0/0
  5808 ;;		Unchanged: 0/0
  5809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5810 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5813 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5814 ;;Total ram usage:        2 bytes
  5815 ;; Hardware stack levels used:    1
  5816 ;; Hardware stack levels required when called:    1
  5817 ;; This function calls:
  5818 ;;		i2_I2C_Master_Wait
  5819 ;; This function is called by:
  5820 ;;		i2_get_time
  5821 ;; This function uses a non-reentrant model
  5822 ;;
  5823                           
  5824                           	psect	text36
  5825  002212                     __ptext36:
  5826                           	opt stack 0
  5827  002212                     i2_I2C_Master_Write:
  5828                           	opt stack 22
  5829                           
  5830                           ;I2C.c: 49: I2C_Master_Wait();
  5831                           
  5832                           ;incstack = 0
  5833  002212  ECE3  F010         	call	i2_I2C_Master_Wait	;wreg free
  5834                           
  5835                           ;I2C.c: 50: SSPBUF = d;
  5836  002216  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
  5837  00221A  0012               	return		;funcret
  5838  00221C                     __end_ofi2_I2C_Master_Write:
  5839                           	opt stack 0
  5840                           pclatu	equ	0xFFB
  5841                           pclath	equ	0xFFA
  5842                           tblptru	equ	0xFF8
  5843                           tblptrh	equ	0xFF7
  5844                           tblptrl	equ	0xFF6
  5845                           tablat	equ	0xFF5
  5846                           prodh	equ	0xFF4
  5847                           prodl	equ	0xFF3
  5848                           intcon	equ	0xFF2
  5849                           intcon3	equ	0xFF0
  5850                           postinc0	equ	0xFEE
  5851                           fsr0h	equ	0xFEA
  5852                           fsr0l	equ	0xFE9
  5853                           wreg	equ	0xFE8
  5854                           indf1	equ	0xFE7
  5855                           fsr1h	equ	0xFE2
  5856                           fsr1l	equ	0xFE1
  5857                           indf2	equ	0xFDF
  5858                           postinc2	equ	0xFDE
  5859                           postdec2	equ	0xFDD
  5860                           fsr2h	equ	0xFDA
  5861                           fsr2l	equ	0xFD9
  5862                           status	equ	0xFD8
  5863                           
  5864 ;; *************** function i2_I2C_Master_Stop *****************
  5865 ;; Defined at:
  5866 ;;		line 41 in file "I2C.c"
  5867 ;; Parameters:    Size  Location     Type
  5868 ;;		None
  5869 ;; Auto vars:     Size  Location     Type
  5870 ;;		None
  5871 ;; Return value:  Size  Location     Type
  5872 ;;                  1    wreg      void 
  5873 ;; Registers used:
  5874 ;;		wreg, status,2, status,0, cstack
  5875 ;; Tracked objects:
  5876 ;;		On entry : 0/0
  5877 ;;		On exit  : 0/0
  5878 ;;		Unchanged: 0/0
  5879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5883 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5884 ;;Total ram usage:        0 bytes
  5885 ;; Hardware stack levels used:    1
  5886 ;; Hardware stack levels required when called:    1
  5887 ;; This function calls:
  5888 ;;		i2_I2C_Master_Wait
  5889 ;; This function is called by:
  5890 ;;		i2_get_time
  5891 ;; This function uses a non-reentrant model
  5892 ;;
  5893                           
  5894                           	psect	text37
  5895  00222C                     __ptext37:
  5896                           	opt stack 0
  5897  00222C                     i2_I2C_Master_Stop:
  5898                           	opt stack 22
  5899                           
  5900                           ;I2C.c: 43: I2C_Master_Wait();
  5901                           
  5902                           ;incstack = 0
  5903  00222C  ECE3  F010         	call	i2_I2C_Master_Wait	;wreg free
  5904                           
  5905                           ;I2C.c: 44: PEN = 1;
  5906  002230  84C5               	bsf	4037,2,c	;volatile
  5907  002232  0012               	return		;funcret
  5908  002234                     __end_ofi2_I2C_Master_Stop:
  5909                           	opt stack 0
  5910                           pclatu	equ	0xFFB
  5911                           pclath	equ	0xFFA
  5912                           tblptru	equ	0xFF8
  5913                           tblptrh	equ	0xFF7
  5914                           tblptrl	equ	0xFF6
  5915                           tablat	equ	0xFF5
  5916                           prodh	equ	0xFF4
  5917                           prodl	equ	0xFF3
  5918                           intcon	equ	0xFF2
  5919                           intcon3	equ	0xFF0
  5920                           postinc0	equ	0xFEE
  5921                           fsr0h	equ	0xFEA
  5922                           fsr0l	equ	0xFE9
  5923                           wreg	equ	0xFE8
  5924                           indf1	equ	0xFE7
  5925                           fsr1h	equ	0xFE2
  5926                           fsr1l	equ	0xFE1
  5927                           indf2	equ	0xFDF
  5928                           postinc2	equ	0xFDE
  5929                           postdec2	equ	0xFDD
  5930                           fsr2h	equ	0xFDA
  5931                           fsr2l	equ	0xFD9
  5932                           status	equ	0xFD8
  5933                           
  5934 ;; *************** function i2_I2C_Master_Start *****************
  5935 ;; Defined at:
  5936 ;;		line 29 in file "I2C.c"
  5937 ;; Parameters:    Size  Location     Type
  5938 ;;		None
  5939 ;; Auto vars:     Size  Location     Type
  5940 ;;		None
  5941 ;; Return value:  Size  Location     Type
  5942 ;;                  1    wreg      void 
  5943 ;; Registers used:
  5944 ;;		wreg, status,2, status,0, cstack
  5945 ;; Tracked objects:
  5946 ;;		On entry : 0/0
  5947 ;;		On exit  : 0/0
  5948 ;;		Unchanged: 0/0
  5949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5953 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5954 ;;Total ram usage:        0 bytes
  5955 ;; Hardware stack levels used:    1
  5956 ;; Hardware stack levels required when called:    1
  5957 ;; This function calls:
  5958 ;;		i2_I2C_Master_Wait
  5959 ;; This function is called by:
  5960 ;;		i2_get_time
  5961 ;; This function uses a non-reentrant model
  5962 ;;
  5963                           
  5964                           	psect	text38
  5965  002234                     __ptext38:
  5966                           	opt stack 0
  5967  002234                     i2_I2C_Master_Start:
  5968                           	opt stack 22
  5969                           
  5970                           ;I2C.c: 31: I2C_Master_Wait();
  5971                           
  5972                           ;incstack = 0
  5973  002234  ECE3  F010         	call	i2_I2C_Master_Wait	;wreg free
  5974                           
  5975                           ;I2C.c: 32: SEN = 1;
  5976  002238  80C5               	bsf	4037,0,c	;volatile
  5977  00223A  0012               	return		;funcret
  5978  00223C                     __end_ofi2_I2C_Master_Start:
  5979                           	opt stack 0
  5980                           pclatu	equ	0xFFB
  5981                           pclath	equ	0xFFA
  5982                           tblptru	equ	0xFF8
  5983                           tblptrh	equ	0xFF7
  5984                           tblptrl	equ	0xFF6
  5985                           tablat	equ	0xFF5
  5986                           prodh	equ	0xFF4
  5987                           prodl	equ	0xFF3
  5988                           intcon	equ	0xFF2
  5989                           intcon3	equ	0xFF0
  5990                           postinc0	equ	0xFEE
  5991                           fsr0h	equ	0xFEA
  5992                           fsr0l	equ	0xFE9
  5993                           wreg	equ	0xFE8
  5994                           indf1	equ	0xFE7
  5995                           fsr1h	equ	0xFE2
  5996                           fsr1l	equ	0xFE1
  5997                           indf2	equ	0xFDF
  5998                           postinc2	equ	0xFDE
  5999                           postdec2	equ	0xFDD
  6000                           fsr2h	equ	0xFDA
  6001                           fsr2l	equ	0xFD9
  6002                           status	equ	0xFD8
  6003                           
  6004 ;; *************** function i2_I2C_Master_Read *****************
  6005 ;; Defined at:
  6006 ;;		line 53 in file "I2C.c"
  6007 ;; Parameters:    Size  Location     Type
  6008 ;;  a               1    wreg     unsigned char 
  6009 ;; Auto vars:     Size  Location     Type
  6010 ;;  a               1    1[COMRAM] unsigned char 
  6011 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
  6012 ;; Return value:  Size  Location     Type
  6013 ;;                  1    wreg      unsigned char 
  6014 ;; Registers used:
  6015 ;;		wreg, status,2, status,0, cstack
  6016 ;; Tracked objects:
  6017 ;;		On entry : 0/0
  6018 ;;		On exit  : 0/0
  6019 ;;		Unchanged: 0/0
  6020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6022 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6024 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6025 ;;Total ram usage:        2 bytes
  6026 ;; Hardware stack levels used:    1
  6027 ;; Hardware stack levels required when called:    1
  6028 ;; This function calls:
  6029 ;;		i2_I2C_Master_Wait
  6030 ;; This function is called by:
  6031 ;;		i2_get_time
  6032 ;; This function uses a non-reentrant model
  6033 ;;
  6034                           
  6035                           	psect	text39
  6036  002156                     __ptext39:
  6037                           	opt stack 0
  6038  002156                     i2_I2C_Master_Read:
  6039                           	opt stack 22
  6040                           
  6041                           ;incstack = 0
  6042                           ;i2I2C_Master_Read@a stored from wreg
  6043  002156  6E02               	movwf	i2I2C_Master_Read@a,c
  6044                           
  6045                           ;I2C.c: 55: unsigned char temp;
  6046                           ;I2C.c: 56: I2C_Master_Wait();
  6047  002158  ECE3  F010         	call	i2_I2C_Master_Wait	;wreg free
  6048                           
  6049                           ;I2C.c: 57: RCEN = 1;
  6050  00215C  86C5               	bsf	4037,3,c	;volatile
  6051                           
  6052                           ;I2C.c: 58: I2C_Master_Wait();
  6053  00215E  ECE3  F010         	call	i2_I2C_Master_Wait	;wreg free
  6054                           
  6055                           ;I2C.c: 59: temp = SSPBUF;
  6056  002162  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
  6057                           
  6058                           ;I2C.c: 60: I2C_Master_Wait();
  6059  002166  ECE3  F010         	call	i2_I2C_Master_Wait	;wreg free
  6060                           
  6061                           ;I2C.c: 61: ACKDT = (a)?0:1;
  6062  00216A  5002               	movf	i2I2C_Master_Read@a,w,c
  6063  00216C  A4D8               	btfss	status,2,c
  6064  00216E  D002               	goto	i2u174_40
  6065  002170  8AC5               	bsf	4037,5,c	;volatile
  6066  002172  D001               	goto	i2l2443
  6067  002174                     i2u174_40:
  6068  002174  9AC5               	bcf	4037,5,c	;volatile
  6069  002176                     i2l2443:
  6070                           
  6071                           ;I2C.c: 62: ACKEN = 1;
  6072  002176  88C5               	bsf	4037,4,c	;volatile
  6073                           
  6074                           ;I2C.c: 63: return temp;
  6075  002178  5003               	movf	i2I2C_Master_Read@temp,w,c
  6076  00217A  0012               	return	
  6077  00217C                     __end_ofi2_I2C_Master_Read:
  6078                           	opt stack 0
  6079                           pclatu	equ	0xFFB
  6080                           pclath	equ	0xFFA
  6081                           tblptru	equ	0xFF8
  6082                           tblptrh	equ	0xFF7
  6083                           tblptrl	equ	0xFF6
  6084                           tablat	equ	0xFF5
  6085                           prodh	equ	0xFF4
  6086                           prodl	equ	0xFF3
  6087                           intcon	equ	0xFF2
  6088                           intcon3	equ	0xFF0
  6089                           postinc0	equ	0xFEE
  6090                           fsr0h	equ	0xFEA
  6091                           fsr0l	equ	0xFE9
  6092                           wreg	equ	0xFE8
  6093                           indf1	equ	0xFE7
  6094                           fsr1h	equ	0xFE2
  6095                           fsr1l	equ	0xFE1
  6096                           indf2	equ	0xFDF
  6097                           postinc2	equ	0xFDE
  6098                           postdec2	equ	0xFDD
  6099                           fsr2h	equ	0xFDA
  6100                           fsr2l	equ	0xFD9
  6101                           status	equ	0xFD8
  6102                           
  6103 ;; *************** function i2_I2C_Master_Wait *****************
  6104 ;; Defined at:
  6105 ;;		line 24 in file "I2C.c"
  6106 ;; Parameters:    Size  Location     Type
  6107 ;;		None
  6108 ;; Auto vars:     Size  Location     Type
  6109 ;;		None
  6110 ;; Return value:  Size  Location     Type
  6111 ;;                  1    wreg      void 
  6112 ;; Registers used:
  6113 ;;		wreg, status,2, status,0
  6114 ;; Tracked objects:
  6115 ;;		On entry : 0/0
  6116 ;;		On exit  : 0/0
  6117 ;;		Unchanged: 0/0
  6118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6121 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6122 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6123 ;;Total ram usage:        1 bytes
  6124 ;; Hardware stack levels used:    1
  6125 ;; This function calls:
  6126 ;;		Nothing
  6127 ;; This function is called by:
  6128 ;;		i2_I2C_Master_Start
  6129 ;;		i2_I2C_Master_Stop
  6130 ;;		i2_I2C_Master_Write
  6131 ;;		i2_I2C_Master_Read
  6132 ;; This function uses a non-reentrant model
  6133 ;;
  6134                           
  6135                           	psect	text40
  6136  0021C6                     __ptext40:
  6137                           	opt stack 0
  6138  0021C6                     i2_I2C_Master_Wait:
  6139                           	opt stack 22
  6140  0021C6                     i2l34:
  6141  0021C6  B4C7               	btfsc	4039,2,c	;volatile
  6142  0021C8  D7FE               	goto	i2l34
  6143  0021CA  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
  6144  0021CE  0E1F               	movlw	31
  6145  0021D0  1601               	andwf	??i2_I2C_Master_Wait,f,c
  6146  0021D2  B4D8               	btfsc	status,2,c
  6147  0021D4  0012               	return	
  6148  0021D6  D7F7               	goto	i2l34
  6149  0021D8                     __end_ofi2_I2C_Master_Wait:
  6150                           	opt stack 0
  6151                           pclatu	equ	0xFFB
  6152                           pclath	equ	0xFFA
  6153                           tblptru	equ	0xFF8
  6154                           tblptrh	equ	0xFF7
  6155                           tblptrl	equ	0xFF6
  6156                           tablat	equ	0xFF5
  6157                           prodh	equ	0xFF4
  6158                           prodl	equ	0xFF3
  6159                           intcon	equ	0xFF2
  6160                           intcon3	equ	0xFF0
  6161                           postinc0	equ	0xFEE
  6162                           fsr0h	equ	0xFEA
  6163                           fsr0l	equ	0xFE9
  6164                           wreg	equ	0xFE8
  6165                           indf1	equ	0xFE7
  6166                           fsr1h	equ	0xFE2
  6167                           fsr1l	equ	0xFE1
  6168                           indf2	equ	0xFDF
  6169                           postinc2	equ	0xFDE
  6170                           postdec2	equ	0xFDD
  6171                           fsr2h	equ	0xFDA
  6172                           fsr2l	equ	0xFD9
  6173                           status	equ	0xFD8
  6174                           pclatu	equ	0xFFB
  6175                           pclath	equ	0xFFA
  6176                           tblptru	equ	0xFF8
  6177                           tblptrh	equ	0xFF7
  6178                           tblptrl	equ	0xFF6
  6179                           tablat	equ	0xFF5
  6180                           prodh	equ	0xFF4
  6181                           prodl	equ	0xFF3
  6182                           intcon	equ	0xFF2
  6183                           intcon3	equ	0xFF0
  6184                           postinc0	equ	0xFEE
  6185                           fsr0h	equ	0xFEA
  6186                           fsr0l	equ	0xFE9
  6187                           wreg	equ	0xFE8
  6188                           indf1	equ	0xFE7
  6189                           fsr1h	equ	0xFE2
  6190                           fsr1l	equ	0xFE1
  6191                           indf2	equ	0xFDF
  6192                           postinc2	equ	0xFDE
  6193                           postdec2	equ	0xFDD
  6194                           fsr2h	equ	0xFDA
  6195                           fsr2l	equ	0xFD9
  6196                           status	equ	0xFD8
  6197                           
  6198                           	psect	rparam
  6199  0000                     pclatu	equ	0xFFB
  6200                           pclath	equ	0xFFA
  6201                           tblptru	equ	0xFF8
  6202                           tblptrh	equ	0xFF7
  6203                           tblptrl	equ	0xFF6
  6204                           tablat	equ	0xFF5
  6205                           prodh	equ	0xFF4
  6206                           prodl	equ	0xFF3
  6207                           intcon	equ	0xFF2
  6208                           intcon3	equ	0xFF0
  6209                           postinc0	equ	0xFEE
  6210                           fsr0h	equ	0xFEA
  6211                           fsr0l	equ	0xFE9
  6212                           wreg	equ	0xFE8
  6213                           indf1	equ	0xFE7
  6214                           fsr1h	equ	0xFE2
  6215                           fsr1l	equ	0xFE1
  6216                           indf2	equ	0xFDF
  6217                           postinc2	equ	0xFDE
  6218                           postdec2	equ	0xFDD
  6219                           fsr2h	equ	0xFDA
  6220                           fsr2l	equ	0xFD9
  6221                           status	equ	0xFD8
  6222                           
  6223                           	psect	temp
  6224  000067                     btemp:
  6225                           	opt stack 0
  6226  000067                     	ds	1
  6227  0000                     int$flags	set	btemp
  6228                           pclatu	equ	0xFFB
  6229                           pclath	equ	0xFFA
  6230                           tblptru	equ	0xFF8
  6231                           tblptrh	equ	0xFF7
  6232                           tblptrl	equ	0xFF6
  6233                           tablat	equ	0xFF5
  6234                           prodh	equ	0xFF4
  6235                           prodl	equ	0xFF3
  6236                           intcon	equ	0xFF2
  6237                           intcon3	equ	0xFF0
  6238                           postinc0	equ	0xFEE
  6239                           fsr0h	equ	0xFEA
  6240                           fsr0l	equ	0xFE9
  6241                           wreg	equ	0xFE8
  6242                           indf1	equ	0xFE7
  6243                           fsr1h	equ	0xFE2
  6244                           fsr1l	equ	0xFE1
  6245                           indf2	equ	0xFDF
  6246                           postinc2	equ	0xFDE
  6247                           postdec2	equ	0xFDD
  6248                           fsr2h	equ	0xFDA
  6249                           fsr2l	equ	0xFD9
  6250                           status	equ	0xFD8


Data Sizes:
    Strings     170
    Constant    42
    Data        0
    BSS         35
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     67     102
    BANK0           128     12      12
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_14(CODE[16]), STR_13(CODE[15]), STR_12(CODE[15]), STR_11(CODE[3]), 
		 -> STR_10(CODE[20]), STR_9(CODE[16]), STR_8(CODE[6]), STR_7(CODE[10]), 
		 -> STR_6(CODE[15]), STR_5(CODE[7]), STR_4(CODE[21]), STR_3(CODE[13]), 
		 -> STR_2(CODE[9]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    get_time@datime	PTR unsigned char  size(2) Largest target is 7
		 -> end_time(COMRAM[7]), start_time(COMRAM[7]), 


Critical Paths under _main in COMRAM

    _welcome->_printf
    _sort->_readLightSensor
    _sense_can->_readADC
    _readLightSensor->_printf
    _get_time->_I2C_Master_Read
    _get_time->_I2C_Master_Write
    _initPIC->_I2C_Master_Init
    _initLCD->_lcdInst
    _I2C_Master_Init->___lldiv
    _display_time->_printf
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _display_sorting_time->_printf
    _debug->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _interrupt_handler in COMRAM

    _interrupt_handler->i2_get_time
    i2_putch->i2_lcdNibble
    i2_lcdInst->i2_lcdNibble
    i2_get_time->i2_I2C_Master_Read
    i2_get_time->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_sort

Critical Paths under _interrupt_handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interrupt_handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interrupt_handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interrupt_handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interrupt_handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interrupt_handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interrupt_handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interrupt_handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interrupt_handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interrupt_handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interrupt_handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   34701
                              _debug
               _display_sorting_time
                       _display_time
                            _initPIC
                               _sort
                            _welcome
 ---------------------------------------------------------------------------------
 (1) _welcome                                              2     2      0    4219
                                             58 COMRAM     2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _sort                                                12    12      0   12692
                                              0 BANK0     12    12      0
                               _gate
                           _get_time
                            _lcdInst
                 _main_servo_control
                             _printf
                    _readLightSensor
                          _sense_can
                             _shaker
                 _side_servo_control
 ---------------------------------------------------------------------------------
 (2) _shaker                                               3     3      0      47
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _sense_can                                            9     7      2     158
                                             26 COMRAM     9     7      2
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _readLightSensor                                      9     7      2    4346
                                             58 COMRAM     9     7      2
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _get_time                                             5     3      2    1523
                                             27 COMRAM     5     3      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _gate                                                 3     3      0       0
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initPIC                                              0     0      0    3895
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                 _main_servo_control
                 _side_servo_control
 ---------------------------------------------------------------------------------
 (2) _side_servo_control                                   6     4      2    1144
                                             24 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _main_servo_control                                   5     3      2    1144
                                             24 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     135
                                             27 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     440
                                             37 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     290
                                             24 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _display_time                                         3     3      0    5395
                                             58 COMRAM     3     3      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2    1032
                                             25 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      45
                                             25 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _display_sorting_time                                 4     4      0    4253
                                             58 COMRAM     4     4      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _debug                                                3     3      0    4247
                                             58 COMRAM     3     3      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _readADC                                              2     2      0      22
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    4084
                                             36 COMRAM    22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                             26 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     386
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                             31 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     549
                                             24 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                             26 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _interrupt_handler                                   16    16      0     830
                                              8 COMRAM    16    16      0
                         i2_get_time
                          i2_lcdInst
                            i2_putch
 ---------------------------------------------------------------------------------
 (7) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) i2_get_time                                           5     3      2     449
                                              3 COMRAM     5     3      2
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Write                                   2     0      2     152
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _debug
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _readADC
   _display_sorting_time
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _display_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _initPIC
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _initLCD
       _lcdInst
         _lcdNibble
     _main_servo_control
     _side_servo_control
   _sort
     _gate
     _get_time
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _main_servo_control
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _readLightSensor
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _readADC
     _sense_can
       _readADC
     _shaker
     _side_servo_control
   _welcome
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble

 _interrupt_handler (ROOT)
   i2_get_time
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait
   i2_lcdInst
     i2_lcdNibble
   i2_putch
     i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      C       C       5        9.4%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     43      66       1       81.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      72      34        0.0%
DATA                 0      0      72       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sun Apr  9 03:59:46 2017

           i2_I2C_Master_Start 2234             i2_I2C_Master_Write 2212                             l34 21B4  
          ___wmul@multiplicand 001B                    __CFG_BORV$3 000000                   __CFG_CP0$OFF 000000  
                 __CFG_CP1$OFF 000000                   __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000  
                  __CFG_OSC$HS 000000                _readLightSensor 1AB8                            l126 2104  
                          l252 18F8                            l244 185E                            l254 1916  
                          l262 16CA                            l248 18AE                            l266 171E  
                          l258 167A                            l282 1F32                            l268 1748  
                          l285 1F5A                            l381 1D8C             _side_servo_control 1656  
                          l383 1DCE                            l467 11C2                            l912 1FCA  
                          l922 2098                            l859 1C5C                   __CFG_CPB$OFF 000000  
                          _PEN 007E2A                   __CFG_CPD$OFF 000000                            _SEN 007E28  
                ?_display_time 0001            ?i2_I2C_Master_Start 0001            ?i2_I2C_Master_Write 0002  
 __end_of_display_sorting_time 1E84                            prod 000FF3                            wreg 000FE8  
                  _total_count 004B            ?_side_servo_control 0019                   __CFG_LVP$OFF 000000  
                 __CFG_WDT$OFF 000000                           l3011 12C0                           l3005 1294  
                         l2221 1C1E                           l3101 1ACA                           l3023 12EC  
                         l3025 12F4                           l3033 131A                           l3017 12D6  
                         l3009 12B8                           l2217 1C0E                           l3121 1B3A  
                         l3113 1B06                           l3035 1320                           l3043 13AA  
                         l2219 1C1A                           l3107 1AF6                           l3037 1364  
                         l3045 13BA                           l3029 1308                           l2229 1C4E  
                         l3141 1960                           l3047 13C0                           l3215 16AA  
                         l3119 1B2A                           l3071 1C8E                           l3049 13C8  
                         l3233 170E                           l3137 1950                           l3129 1B54  
                         l3219 16BA                           l3083 1CC4                           l3067 1C7E  
                         l3403 150A                           l3333 1784                           l3325 1768  
                         l3173 188E                           l3229 16FC                           l3149 19B2  
                         l3077 1CB4                           l3245 1D7C                           l3413 1538  
                         l3191 18E8                           l3095 1CE4                           l3087 1CCA  
                         l3319 1D64                           l3329 177C                           l3177 189E  
                         l3273 1F7C                           l3435 20AA                           l3339 17A0  
                         l3187 18D6                           l3267 1F54                           l3451 1FD8  
                         l3357 1832                           l2903 212A                           l3391 14B4  
                         l3375 1454                           l3463 1FFE                           l3455 1FE4  
                         l2851 1F98                           l2835 2192                           l2923 10E0  
                         l3387 149E                           l3467 200C                           l3459 1FF0  
                   i2_get_time 19E8                           l2853 1FA0                           l2933 1104  
                         l2863 1FC0                           l2855 1FA4                           l2871 206E  
                         l2951 1194                           l2927 10F0                           l3399 14F0  
                         l2873 2076                           l2929 10FE                           l2875 207A  
                         l2963 11F0                           l2947 1190                           l2939 1132  
                         l2981 123A                           l2879 208E                           l2983 123E  
                         l2967 120A                           l2969 120E                           l2997 126A  
                         l2999 127A                           _ADON 007E10                           STR_1 10CF  
                         STR_2 10BC                           STR_3 1087                           STR_4 102B  
                         STR_5 10C5                           STR_6 1085                           STR_7 10B2  
                         STR_8 10CC                           STR_9 1065                           _LATA 000F89  
                         u2150 2128                           _LATB 000F8A                           u3007 1B1E  
                         _LATC 000F8B                           _LATD 000F8C                           u3017 1F3A  
                         _LATE 000F8D                           u3107 1738                           u3027 1F4A  
                         u1445 1DFE                           u3117 1866                           u3037 1F62  
                         u3207 181E                           u3127 1878                           u3047 1F72  
                         u3217 1E36                           u3137 18B6                           u3057 1682  
                         u2530 185C                           u2450 1CDA                           u3227 1E6C  
                         u3147 18C6                           u3067 1694                           u2620 1678  
                         u3237 20D4                           u3157 18FC                           u3077 16D2  
                         u3247 1E9C                           u3167 1908                           u3087 16E8  
                         u3257 1EA6                           u3177 2020                           u3097 1726  
                         u2490 1B4A                           u3267 1EC8                           u3187 2054  
                         u3277 1ED2                           u3197 175A                           u2937 1D04  
                         u2947 1414                           _RCEN 007E2B                           u2957 14DA  
                         u2967 151E                           u2977 1D96                           i2l34 21C6  
                         u2987 1DAA                           u2997 1DBE                           _RSEN 007E29  
                         _flag 0055                           _gate 1F30                           _main 1FD4  
                         _mode 0058                           _keys 1001                           _time 0044  
                         fsr0h 000FEA                           fsr1h 000FE2                           fsr2h 000FDA  
                         fsr0l 000FE9                           indf1 000FE7                           indf2 000FDF  
                         fsr1l 000FE1                           fsr2l 000FD9                           _sort 13E2  
                         btemp 0067           ??i2_I2C_Master_Start 0002           ??i2_I2C_Master_Write 0004  
                         prodh 000FF4                           prodl 000FF3                           start 000E  
                __CFG_IESO$OFF 000000                __end_ofi2_putch 21FC                  __CFG_MCLRE$ON 000000  
                 ___param_bank 000000           ??_side_servo_control 001B                    i2_lcdNibble 1EDA  
             ?_I2C_Master_Init 0026               ?_I2C_Master_Read 0001               ?_I2C_Master_Wait 0001  
             ?_I2C_Master_Stop 0001                          ?_gate 0001                          ?_main 0001  
                        _ACKEN 007E2C                          _ACKDT 007E2D                 ??_display_time 003B  
                        STR_10 1040                          STR_11 10D2                          STR_12 1094  
                        STR_13 10A3                          STR_14 1075                          STR_15 1054  
                        ?_sort 0001                __end_of___lldiv 1C6E                __end_of___lwdiv 1FD4  
              __end_of___lwmod 20A2                          _PORTB 000F81                          _TRISA 000F92  
                        _TRISB 000F93                          _TRISC 000F94                          _TRISD 000F95  
                        _TRISE 000F96                  __CFG_PWRT$OFF 000000                  __CFG_WRT0$OFF 000000  
                __CFG_WRT1$OFF 000000                  __CFG_WRT2$OFF 000000                  __CFG_WRT3$OFF 000000  
              __end_of_lcdInst 21F0                 __CFG_EBTR0$OFF 000000                 __CFG_FCMEN$OFF 000000  
               __CFG_EBTR1$OFF 000000                 __CFG_EBTR2$OFF 000000                 __CFG_EBTR3$OFF 000000  
                __CFG_WRTB$OFF 000000                  __CFG_WRTC$OFF 000000                  __CFG_WRTD$OFF 000000  
              __end_of_readADC 210A                __end_of_initLCD 2060                 __CFG_EBTRB$OFF 000000  
                        _debug 20A2                __end_of_initPIC 1BEC                __end_of_dpowers 101C  
              __end_of_isdigit 219A                          _putch 21D8                          pclath 000FFA  
                        tablat 000FF5                __end_of_welcome 1D6C                          sort@x 008A  
                        status 000FD8                 __CFG_PBADEN$ON 000000                __initialization 219A  
                 __end_of_gate 1F82             __size_ofi2_lcdInst 000C        __end_of_readLightSensor 1B5E  
                 __end_of_main 201A                   __end_of_keys 1012                   __end_of_sort 1542  
        main_servo_control@dir 0019                         ??_gate 0019                         ??_main 0044  
                       ??_sort 0080                  __activetblptr 000002                    i2get_time@i 0007  
            ?_I2C_Master_Start 0001              ?_I2C_Master_Write 001A                         ?_debug 0001  
           ??_I2C_Master_Start 001A                         _ADCON0 000FC2                         _ADCON1 000FC1  
           ??_I2C_Master_Write 001C                         _ADCON2 000FC0                         _ADRESH 000FC4  
                       _ADRESL 000FC3                i2lcdNibble@data 0002                    ?i2_get_time 0004  
                       ?_putch 0001                i2lcdNibble@temp 0001                         _INT1IE 007F83  
                       _INT1IF 007F80                         i2l2443 2176                         i2l2661 1A82  
                       i2l2653 1A30                         i2l2649 1A20                         i2l2791 1602  
                       i2l2783 15E4                         i2l2777 15D4                         i2l2795 160C  
                       i2l2799 1618                      ??i2_putch 0003               i2get_time@datime 0004  
                       _SSPADD 000FC8                         _TRISC3 007CA3                         _TRISC4 007CA4  
                       _SSPBUF 000FC9                 __CFG_XINST$OFF 000000           _display_sorting_time 1E2A  
             __end_of_get_time 19E8                         ___wmul 2130                 __CFG_STVREN$ON 000000  
   __end_of_main_servo_control 1918                      ??___lldiv 0021                      ??___lwdiv 001D  
                    ??___lwmod 0024                         debug@i 003C                         clear_0 21A0  
                       _shaker 1D6C                      ??_lcdInst 001B                         _printf 10D6  
                    ??_readADC 0019                      ??_initLCD 001C                      ??_initPIC 002E  
                    ??_isdigit 0019                   __mediumconst 0000                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8                      ??_welcome 003B  
                display_time@i 003D              __end_ofi2_lcdInst 2208               readLightSensor@i 0040  
                   __accesstop 0080        __end_of__initialization 21A6           __end_of_display_time 183A  
                ___rparam_used 000001          ?_display_sorting_time 0001                 __pcstackCOMRAM 0001  
             ?_readLightSensor 003B                  __end_of_debug 20E2                  __end_of_putch 21E4  
          __size_ofi2_get_time 00D0            main_servo_control@i 001C             __size_of_lcdNibble 0056  
                  i2putch@data 0003                        ??_debug 003B                        ??_putch 001B  
               _soup_can_label 004F                   ?i2_lcdNibble 0001                        ?___wmul 0019  
               get_time@datime 001C                        ?_shaker 0001                        ?_printf 0025  
           __size_of_sense_can 0080            side_servo_control@i 001D                        _SSPCON1 000FC6  
                      _SSPCON2 000FC5                        _SSPSTAT 000FC7                      ?_get_time 001C  
                      i2_putch 21F0         ??_display_sorting_time 003B    __size_ofi2_I2C_Master_Start 0008  
            __end_of_lcdNibble 1EDA    __size_ofi2_I2C_Master_Write 000A                        __Hparam 0000  
                      __Lparam 0000    __size_of_side_servo_control 00F4                        ___lldiv 1BEC  
              __size_of___wmul 0026                        ___lwdiv 1F82                        ___lwmod 2060  
                 __psmallconst 1000                        __pcinit 219A                        __ramtop 1000  
              __size_of_shaker 0064                        _lcdInst 21E4                        __ptext0 1FD4  
                      __ptext1 1CEE                        __ptext2 13E2                        __ptext3 1D6C  
                      __ptext4 1C6E                        __ptext5 1AB8                        __ptext6 1918  
                      __ptext7 1F30                        __ptext8 1B5E                        __ptext9 1656  
              __size_of_printf 030C                        _readADC 20E2                        _initLCD 201A  
            __end_of_hexpowers 1024                        _initPIC 1B5E                        _dpowers 1012  
                      _isdigit 217C       __size_of_I2C_Master_Init 005A       __size_of_I2C_Master_Read 0026  
     __size_of_I2C_Master_Wait 0012       __size_of_I2C_Master_Stop 0008                        _welcome 1CEE  
                 ??i2_get_time 0006                     ??_get_time 001E                 __pintcode_body 1542  
        __size_of_display_time 00F0           end_of_initialization 21A6                  __Lmediumconst 0000  
                      int_func 1542              __end_of_sense_can 1CEE                        shaker@i 001A  
    __size_of_I2C_Master_Start 0008      __size_of_I2C_Master_Write 000A                ___lldiv@divisor 001D  
              ___lldiv@counter 0025                        printf@c 003A                        printf@f 0025  
             I2C_Master_Init@c 0026               I2C_Master_Read@a 001A                        postdec2 000FDD  
                   _timeSetter 1024                        postinc0 000FEE                        postinc2 000FDE  
                      sort@can 0088                        sort@tap 0082                        sort@tin 0084  
           __end_ofi2_get_time 1AB8                      _PORTBbits 000F81          side_servo_control@dir 0019  
                 _display_time 174A                 sense_can@H_max 0020             _main_servo_control 183A  
            i2_I2C_Master_Read 2156              i2_I2C_Master_Wait 21C6              i2_I2C_Master_Stop 222C  
               _pop_can_no_tap 0051             ?i2_I2C_Master_Read 0001             ?i2_I2C_Master_Wait 0001  
           ?i2_I2C_Master_Stop 0001                     _start_time 0060            ?_main_servo_control 0019  
                    i2_lcdInst 21FC                    printf@width 0038            ??i2_I2C_Master_Read 0002  
          ??i2_I2C_Master_Wait 0001            ??i2_I2C_Master_Stop 0002                 __end_of___wmul 2156  
         __size_ofi2_lcdNibble 0056           ??_main_servo_control 001B                  i2lcdInst@data 0003  
               __end_of_shaker 1DD0                 __end_of_printf 13E2      __end_ofi2_I2C_Master_Read 217C  
    __end_ofi2_I2C_Master_Wait 21D8            start_initialization 219A      __end_ofi2_I2C_Master_Stop 2234  
        i2I2C_Master_Read@temp 0003              ??_I2C_Master_Init 002A              ??_I2C_Master_Read 001A  
                  sort@noLabel 0086              ??_I2C_Master_Wait 0019                     ?i2_lcdInst 0001  
            ??_I2C_Master_Stop 001A                       ??___wmul 001D               __CFG_LPT1OSC$OFF 000000  
                     ??_shaker 0019                       ??_printf 002D              _soup_can_no_label 004D  
     __size_of_readLightSensor 00A6                    __pbssCOMRAM 0044                  __pcstackBANK0 0080  
                 _isdigit$1039 001A                       ?i2_putch 0001              __size_of_get_time 00D0  
             _I2C_Master_Start 2224            i2I2C_Master_Write@d 0002               _I2C_Master_Write 2208  
             ___lwdiv@dividend 0019              __CFG_CCP2MX$PORTC 000000                      __pintcode 0008  
    interrupt_handler@keypress 0018                      _lcdNibble 1E84                       ?___lldiv 0019  
                     ?___lwdiv 0019                       ?___lwmod 0020                       ?_lcdInst 0001  
            _interrupt_handler 0008                       ?_readADC 0001                       ?_initLCD 0001  
                     ?_initPIC 0001                    __smallconst 1000                       ?_isdigit 0001  
   __size_ofi2_I2C_Master_Read 0026     __size_ofi2_I2C_Master_Wait 0012     __size_ofi2_I2C_Master_Stop 0008  
           ?_interrupt_handler 0001                       ?_welcome 0001                      _hexpowers 101C  
             ___lwdiv@quotient 001E                 __size_of_debug 0040                 __size_of_putch 000C  
          ??_interrupt_handler 0009     __end_ofi2_I2C_Master_Start 223C     __end_ofi2_I2C_Master_Write 221C  
                  ??i2_lcdInst 0003                     sense_can@i 0022                 ___wmul@product 001D  
                     _LATAbits 000F89                       _LATBbits 000F8A                       _LATCbits 000F8B  
                     _LATDbits 000F8C                       _LATEbits 000F8D     __end_of_side_servo_control 174A  
__size_of_display_sorting_time 005A                       i2u330_47 1F1E                       i2u331_47 1F28  
                     i2u174_40 2174                       i2u328_47 1EF2                       i2u329_47 1EFC  
                    _sense_can 1C6E               __CFG_WDTPS$32768 000000                     ?_lcdNibble 0001  
    __end_of_interrupt_handler 1656                     _ADCON0bits 000FC2              ___wmul@multiplier 0019  
                lcdNibble@data 001A                     printf@flag 0037                  lcdNibble@temp 0019  
                   printf@prec 0034                      get_time@i 001F            I2C_Master_Read@temp 001B  
            ??_readLightSensor 003D               __size_ofi2_putch 000C                       __Hrparam 0000  
                     __Lrparam 0000                     ?_sense_can 001B             __CFG_BOREN$SBORDIS 000000  
             __size_of___lldiv 0082               __size_of___lwdiv 0052               __size_of___lwmod 0042  
               readADC@channel 001A             i2I2C_Master_Read@a 0002               __size_of_lcdInst 000C  
              _I2C_Master_Init 1DD0               __size_of_readADC 0028                _I2C_Master_Read 210A  
             __size_of_initLCD 0046               __size_of_initPIC 008E                _I2C_Master_Wait 21B4  
              _I2C_Master_Stop 221C               __size_of_isdigit 001E                ___lwdiv@divisor 001B  
              ___lwdiv@counter 001D                       __ptext10 183A                       __ptext11 201A  
                     __ptext20 1E2A                       __ptext12 1DD0                       __ptext21 20A2  
                     __ptext13 1BEC                       __ptext30 1E84                       __ptext22 20E2  
                     __ptext14 174A                       __ptext23 10D6                       __ptext15 2208  
                     __ptext40 21C6                       __ptext32 21F0                       __ptext24 21D8  
                     __ptext16 221C                       __ptext33 21FC                       __ptext25 217C  
                     __ptext17 2224                       __ptext34 1EDA                       __ptext26 2130  
                     __ptext18 210A                       __ptext35 19E8                       __ptext27 2060  
                     __ptext19 21B4                       __ptext36 2212                       __ptext28 1F82  
                     __ptext37 222C                       __ptext29 21E4                       __ptext38 2234  
                     __ptext39 2156                       _end_time 0059               __size_of_welcome 007E  
                     _get_time 1918                  __size_of_gate 0052                  __size_of_main 0046  
         readLightSensor@H_max 0042                  __size_of_sort 0160                  ??i2_lcdNibble 0001  
                  ??_lcdNibble 0019                       int$flags 0067                    _passed_time 0057  
                    printf@idx 0031                      printf@val 0035     __size_of_interrupt_handler 164E  
  __size_of_main_servo_control 00DE                      putch@data 001B       __end_of_I2C_Master_Start 222C  
     __end_of_I2C_Master_Write 2212                     _INTCONbits 000FF2                       isdigit@c 001B  
                     intlevel2 0000             __end_of_timeSetter 102B               ___lwmod@dividend 0020  
             ___lldiv@dividend 0019          display_sorting_time@i 003D                    ??_sense_can 001D  
                  _pop_can_tap 0053                       printf@ap 0032        __end_of_I2C_Master_Init 1E2A  
      __end_of_I2C_Master_Read 2130        __end_of_I2C_Master_Wait 21C6        __end_of_I2C_Master_Stop 2224  
                  lcdInst@data 001B            __end_ofi2_lcdNibble 1F30               ___lldiv@quotient 0021  
            I2C_Master_Write@d 001A                ___lwmod@divisor 0022                ___lwmod@counter 0024  
