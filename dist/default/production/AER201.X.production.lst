

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Mar 29 17:00:17 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text30,global,reloc=2,class=CODE,delta=1
    41                           	psect	text31,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    54                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    55                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    56  0000                     
    57                           ; Version 1.41
    58                           ; Generated 25/01/2017 GMT
    59                           ; 
    60                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    61                           ; All rights reserved.
    62                           ; 
    63                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    64                           ; 
    65                           ; Redistribution and use in source and binary forms, with or without modification, are
    66                           ; permitted provided that the following conditions are met:
    67                           ; 
    68                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    69                           ;        conditions and the following disclaimer.
    70                           ; 
    71                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    72                           ;        of conditions and the following disclaimer in the documentation and/or other
    73                           ;        materials provided with the distribution.
    74                           ; 
    75                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    76                           ;        software without specific prior written permission.
    77                           ; 
    78                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    79                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    80                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    81                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    82                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    83                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    84                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    85                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    86                           ; 
    87                           ; 
    88                           ; Code-generator required, PIC18F4620 Definitions
    89                           ; 
    90                           ; SFR Addresses
    91  0000                     
    92                           	psect	smallconst
    93  001000                     __psmallconst:
    94                           	opt stack 0
    95  001000  00                 	db	0
    96  001001                     _keys:
    97                           	opt stack 0
    98  001001  31                 	db	49
    99  001002  32                 	db	50
   100  001003  33                 	db	51
   101  001004  41                 	db	65
   102  001005  34                 	db	52
   103  001006  35                 	db	53
   104  001007  36                 	db	54
   105  001008  42                 	db	66
   106  001009  37                 	db	55
   107  00100A  38                 	db	56
   108  00100B  39                 	db	57
   109  00100C  43                 	db	67
   110  00100D  2A                 	db	42
   111  00100E  30                 	db	48
   112  00100F  23                 	db	35
   113  001010  44                 	db	68
   114  001011  00                 	db	0
   115  001012                     __end_of_keys:
   116                           	opt stack 0
   117  001012                     _dpowers:
   118                           	opt stack 0
   119  001012  0001               	dw	1
   120  001014  000A               	dw	10
   121  001016  0064               	dw	100
   122  001018  03E8               	dw	1000
   123  00101A  2710               	dw	10000
   124  00101C                     __end_of_dpowers:
   125                           	opt stack 0
   126  00101C                     _hexpowers:
   127                           	opt stack 0
   128  00101C  0001               	dw	1
   129  00101E  0010               	dw	16
   130  001020  0100               	dw	256
   131  001022  1000               	dw	4096
   132  001024                     __end_of_hexpowers:
   133                           	opt stack 0
   134  001024                     _timeSetter:
   135                           	opt stack 0
   136  001024  00                 	db	0
   137  001025  19                 	db	25
   138  001026  15                 	db	21
   139  001027  04                 	db	4
   140  001028  25                 	db	37
   141  001029  01                 	db	1
   142  00102A  17                 	db	23
   143  00102B                     __end_of_timeSetter:
   144                           	opt stack 0
   145  0000                     _PORTB	set	3969
   146  0000                     _LATBbits	set	3978
   147  0000                     _INTCONbits	set	4082
   148  0000                     _ADCON2	set	4032
   149  0000                     _ADCON1	set	4033
   150  0000                     _LATE	set	3981
   151  0000                     _LATC	set	3979
   152  0000                     _LATB	set	3978
   153  0000                     _LATA	set	3977
   154  0000                     _TRISB	set	3987
   155  0000                     _TRISD	set	3989
   156  0000                     _TRISC	set	3988
   157  0000                     _TRISA	set	3986
   158  0000                     _LATAbits	set	3977
   159  0000                     _ADRESL	set	4035
   160  0000                     _LATCbits	set	3979
   161  0000                     _ADRESH	set	4036
   162  0000                     _PORTBbits	set	3969
   163  0000                     _ADCON0bits	set	4034
   164  0000                     _ADCON0	set	4034
   165  0000                     _LATD	set	3980
   166  0000                     _LATDbits	set	3980
   167  0000                     _SSPBUF	set	4041
   168  0000                     _SSPADD	set	4040
   169  0000                     _SSPCON2	set	4037
   170  0000                     _SSPCON1	set	4038
   171  0000                     _SSPSTAT	set	4039
   172  0000                     _INT1IF	set	32640
   173  0000                     _INT1IE	set	32643
   174  0000                     _ADON	set	32272
   175  0000                     _ACKEN	set	32300
   176  0000                     _ACKDT	set	32301
   177  0000                     _RCEN	set	32299
   178  0000                     _PEN	set	32298
   179  0000                     _RSEN	set	32297
   180  0000                     _SEN	set	32296
   181  0000                     _TRISC4	set	31908
   182  0000                     _TRISC3	set	31907
   183  00102B                     STR_4:
   184  00102B  32                 	db	50	;'2'
   185  00102C  20                 	db	32
   186  00102D  42                 	db	66	;'B'
   187  00102E  61                 	db	97	;'a'
   188  00102F  63                 	db	99	;'c'
   189  001030  6B                 	db	107	;'k'
   190  001031  20                 	db	32
   191  001032  74                 	db	116	;'t'
   192  001033  6F                 	db	111	;'o'
   193  001034  20                 	db	32
   194  001035  73                 	db	115	;'s'
   195  001036  74                 	db	116	;'t'
   196  001037  61                 	db	97	;'a'
   197  001038  72                 	db	114	;'r'
   198  001039  74                 	db	116	;'t'
   199  00103A  20                 	db	32
   200  00103B  6D                 	db	109	;'m'
   201  00103C  65                 	db	101	;'e'
   202  00103D  6E                 	db	110	;'n'
   203  00103E  75                 	db	117	;'u'
   204  00103F  00                 	db	0
   205  001040                     STR_10:
   206  001040  50                 	db	80	;'P'
   207  001041  72                 	db	114	;'r'
   208  001042  65                 	db	101	;'e'
   209  001043  73                 	db	115	;'s'
   210  001044  73                 	db	115	;'s'
   211  001045  20                 	db	32
   212  001046  31                 	db	49	;'1'
   213  001047  2F                 	db	47
   214  001048  32                 	db	50	;'2'
   215  001049  2F                 	db	47
   216  00104A  41                 	db	65	;'A'
   217  00104B  20                 	db	32
   218  00104C  74                 	db	116	;'t'
   219  00104D  6F                 	db	111	;'o'
   220  00104E  20                 	db	32
   221  00104F  73                 	db	115	;'s'
   222  001050  74                 	db	116	;'t'
   223  001051  6F                 	db	111	;'o'
   224  001052  70                 	db	112	;'p'
   225  001053  00                 	db	0
   226  001054                     STR_15:
   227  001054  30                 	db	48	;'0'
   228  001055  31                 	db	49	;'1'
   229  001056  32                 	db	50	;'2'
   230  001057  33                 	db	51	;'3'
   231  001058  34                 	db	52	;'4'
   232  001059  35                 	db	53	;'5'
   233  00105A  36                 	db	54	;'6'
   234  00105B  37                 	db	55	;'7'
   235  00105C  38                 	db	56	;'8'
   236  00105D  39                 	db	57	;'9'
   237  00105E  61                 	db	97	;'a'
   238  00105F  62                 	db	98	;'b'
   239  001060  63                 	db	99	;'c'
   240  001061  64                 	db	100	;'d'
   241  001062  65                 	db	101	;'e'
   242  001063  66                 	db	102	;'f'
   243  001064  00                 	db	0
   244  001065                     STR_9:
   245  001065  53                 	db	83	;'S'
   246  001066  6F                 	db	111	;'o'
   247  001067  72                 	db	114	;'r'
   248  001068  74                 	db	116	;'t'
   249  001069  69                 	db	105	;'i'
   250  00106A  6E                 	db	110	;'n'
   251  00106B  67                 	db	103	;'g'
   252  00106C  20                 	db	32
   253  00106D  53                 	db	83	;'S'
   254  00106E  74                 	db	116	;'t'
   255  00106F  61                 	db	97	;'a'
   256  001070  72                 	db	114	;'r'
   257  001071  74                 	db	116	;'t'
   258  001072  65                 	db	101	;'e'
   259  001073  64                 	db	100	;'d'
   260  001074  00                 	db	0
   261  001075                     STR_14:
   262  001075  54                 	db	84	;'T'
   263  001076  69                 	db	105	;'i'
   264  001077  6D                 	db	109	;'m'
   265  001078  65                 	db	101	;'e'
   266  001079  20                 	db	32
   267  00107A  75                 	db	117	;'u'
   268  00107B  73                 	db	115	;'s'
   269  00107C  65                 	db	101	;'e'
   270  00107D  64                 	db	100	;'d'
   271  00107E  3A                 	db	58	;':'
   272  00107F  20                 	db	32
   273  001080  25                 	db	37
   274  001081  64                 	db	100	;'d'
   275  001082  20                 	db	32
   276  001083  73                 	db	115	;'s'
   277  001084  00                 	db	0
   278  001085                     STR_6:
   279  001085  20                 	db	32
   280  001086  20                 	db	32
   281  001087  20                 	db	32
   282  001088  20                 	db	32
   283  001089  20                 	db	32
   284  00108A  20                 	db	32
   285  00108B  20                 	db	32
   286  00108C  20                 	db	32
   287  00108D  20                 	db	32
   288  00108E  20                 	db	32
   289  00108F  20                 	db	32
   290  001090  20                 	db	32
   291  001091  20                 	db	32
   292  001092  20                 	db	32
   293  001093  00                 	db	0
   294  001094                     STR_12:
   295  001094  25                 	db	37
   296  001095  30                 	db	48	;'0'
   297  001096  32                 	db	50	;'2'
   298  001097  78                 	db	120	;'x'
   299  001098  2F                 	db	47
   300  001099  25                 	db	37
   301  00109A  30                 	db	48	;'0'
   302  00109B  32                 	db	50	;'2'
   303  00109C  78                 	db	120	;'x'
   304  00109D  2F                 	db	47
   305  00109E  25                 	db	37
   306  00109F  30                 	db	48	;'0'
   307  0010A0  32                 	db	50	;'2'
   308  0010A1  78                 	db	120	;'x'
   309  0010A2  00                 	db	0
   310  0010A3                     STR_13:
   311  0010A3  25                 	db	37
   312  0010A4  30                 	db	48	;'0'
   313  0010A5  32                 	db	50	;'2'
   314  0010A6  78                 	db	120	;'x'
   315  0010A7  3A                 	db	58	;':'
   316  0010A8  25                 	db	37
   317  0010A9  30                 	db	48	;'0'
   318  0010AA  32                 	db	50	;'2'
   319  0010AB  78                 	db	120	;'x'
   320  0010AC  3A                 	db	58	;':'
   321  0010AD  25                 	db	37
   322  0010AE  30                 	db	48	;'0'
   323  0010AF  32                 	db	50	;'2'
   324  0010B0  78                 	db	120	;'x'
   325  0010B1  00                 	db	0
   326  0010B2                     STR_7:
   327  0010B2  41                 	db	65	;'A'
   328  0010B3  20                 	db	32
   329  0010B4  53                 	db	83	;'S'
   330  0010B5  6F                 	db	111	;'o'
   331  0010B6  72                 	db	114	;'r'
   332  0010B7  74                 	db	116	;'t'
   333  0010B8  69                 	db	105	;'i'
   334  0010B9  6E                 	db	110	;'n'
   335  0010BA  67                 	db	103	;'g'
   336  0010BB  00                 	db	0
   337  0010BC                     STR_2:
   338  0010BC  57                 	db	87	;'W'
   339  0010BD  65                 	db	101	;'e'
   340  0010BE  6C                 	db	108	;'l'
   341  0010BF  63                 	db	99	;'c'
   342  0010C0  6F                 	db	111	;'o'
   343  0010C1  6D                 	db	109	;'m'
   344  0010C2  65                 	db	101	;'e'
   345  0010C3  21                 	db	33
   346  0010C4  00                 	db	0
   347  0010C5                     STR_5:
   348  0010C5  31                 	db	49	;'1'
   349  0010C6  20                 	db	32
   350  0010C7  54                 	db	84	;'T'
   351  0010C8  69                 	db	105	;'i'
   352  0010C9  6D                 	db	109	;'m'
   353  0010CA  65                 	db	101	;'e'
   354  0010CB  00                 	db	0
   355  0010CC                     STR_8:
   356  0010CC  25                 	db	37
   357  0010CD  78                 	db	120	;'x'
   358  0010CE  25                 	db	37
   359  0010CF  78                 	db	120	;'x'
   360  0010D0  00                 	db	0
   361  0010D1                     STR_11:
   362  0010D1  25                 	db	37
   363  0010D2  64                 	db	100	;'d'
   364  0010D3  00                 	db	0
   365  0000                     
   366                           ; #config settings
   367  0010D4  00                 	db	0	; dummy byte at the end
   368  0000                     
   369                           	psect	cinit
   370  002284                     __pcinit:
   371                           	opt stack 0
   372  002284                     start_initialization:
   373                           	opt stack 0
   374  002284                     __initialization:
   375                           	opt stack 0
   376                           
   377                           ; Clear objects allocated to COMRAM (35 bytes)
   378  002284  EE00  F044         	lfsr	0,__pbssCOMRAM
   379  002288  0E23               	movlw	35
   380  00228A                     clear_0:
   381  00228A  6AEE               	clrf	postinc0,c
   382  00228C  06E8               	decf	wreg,f,c
   383  00228E  E1FD               	bnz	clear_0
   384  002290                     end_of_initialization:
   385                           	opt stack 0
   386  002290                     __end_of__initialization:
   387                           	opt stack 0
   388  002290  9067               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   389  002292  9267               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   390  002294  0E00               	movlw	low (__Lmediumconst shr (0+16))
   391  002296  6EF8               	movwf	tblptru,c
   392  002298  0100               	movlb	0
   393  00229A  EF66  F010         	goto	_main	;jump to C main() function
   394                           tblptru	equ	0xFF8
   395                           postinc0	equ	0xFEE
   396                           wreg	equ	0xFE8
   397                           
   398                           	psect	bssCOMRAM
   399  000044                     __pbssCOMRAM:
   400                           	opt stack 0
   401  000044                     _time:
   402                           	opt stack 0
   403  000044                     	ds	7
   404  00004B                     _total_count:
   405                           	opt stack 0
   406  00004B                     	ds	2
   407  00004D                     _soup_can_no_label:
   408                           	opt stack 0
   409  00004D                     	ds	2
   410  00004F                     _soup_can_label:
   411                           	opt stack 0
   412  00004F                     	ds	2
   413  000051                     _pop_can_no_tap:
   414                           	opt stack 0
   415  000051                     	ds	2
   416  000053                     _pop_can_tap:
   417                           	opt stack 0
   418  000053                     	ds	2
   419  000055                     _flag:
   420                           	opt stack 0
   421  000055                     	ds	2
   422  000057                     _passed_time:
   423                           	opt stack 0
   424  000057                     	ds	1
   425  000058                     _mode:
   426                           	opt stack 0
   427  000058                     	ds	1
   428  000059                     _end_time:
   429                           	opt stack 0
   430  000059                     	ds	7
   431  000060                     _start_time:
   432                           	opt stack 0
   433  000060                     	ds	7
   434                           tblptru	equ	0xFF8
   435                           postinc0	equ	0xFEE
   436                           wreg	equ	0xFE8
   437                           
   438                           	psect	cstackBANK0
   439  000080                     __pcstackBANK0:
   440                           	opt stack 0
   441  000080                     ??_sort:
   442                           
   443                           ; 1 bytes @ 0x0
   444  000080                     	ds	2
   445  000082                     sort@tap:
   446                           	opt stack 0
   447                           
   448                           ; 2 bytes @ 0x2
   449  000082                     	ds	2
   450  000084                     sort@tin:
   451                           	opt stack 0
   452                           
   453                           ; 2 bytes @ 0x4
   454  000084                     	ds	2
   455  000086                     sort@noLabel:
   456                           	opt stack 0
   457                           
   458                           ; 2 bytes @ 0x6
   459  000086                     	ds	2
   460  000088                     sort@can:
   461                           	opt stack 0
   462                           
   463                           ; 2 bytes @ 0x8
   464  000088                     	ds	2
   465                           tblptru	equ	0xFF8
   466                           postinc0	equ	0xFEE
   467                           wreg	equ	0xFE8
   468                           
   469                           	psect	cstackCOMRAM
   470  000001                     __pcstackCOMRAM:
   471                           	opt stack 0
   472  000001                     ??i2_I2C_Master_Wait:
   473  000001                     i2lcdNibble@temp:
   474                           	opt stack 0
   475                           
   476                           ; 1 bytes @ 0x0
   477  000001                     	ds	1
   478  000002                     i2I2C_Master_Read@a:
   479                           	opt stack 0
   480  000002                     i2lcdNibble@data:
   481                           	opt stack 0
   482  000002                     i2I2C_Master_Write@d:
   483                           	opt stack 0
   484                           
   485                           ; 2 bytes @ 0x1
   486  000002                     	ds	1
   487  000003                     i2I2C_Master_Read@temp:
   488                           	opt stack 0
   489  000003                     i2lcdInst@data:
   490                           	opt stack 0
   491  000003                     i2putch@data:
   492                           	opt stack 0
   493                           
   494                           ; 1 bytes @ 0x2
   495  000003                     	ds	1
   496  000004                     i2get_time@datime:
   497                           	opt stack 0
   498                           
   499                           ; 2 bytes @ 0x3
   500  000004                     	ds	2
   501  000006                     ??i2_get_time:
   502                           
   503                           ; 1 bytes @ 0x5
   504  000006                     	ds	1
   505  000007                     i2get_time@i:
   506                           	opt stack 0
   507                           
   508                           ; 2 bytes @ 0x6
   509  000007                     	ds	2
   510  000009                     ??_interrupt_handler:
   511                           
   512                           ; 1 bytes @ 0x8
   513  000009                     	ds	15
   514  000018                     interrupt_handler@keypress:
   515                           	opt stack 0
   516                           
   517                           ; 1 bytes @ 0x17
   518  000018                     	ds	1
   519  000019                     ??_shaker:
   520  000019                     ??_gate:
   521  000019                     ??_isdigit:
   522  000019                     ??_I2C_Master_Wait:
   523  000019                     ??_readADC:
   524  000019                     ?___wmul:
   525                           	opt stack 0
   526  000019                     ?___lwdiv:
   527                           	opt stack 0
   528  000019                     ?___lldiv:
   529                           	opt stack 0
   530  000019                     lcdNibble@temp:
   531                           	opt stack 0
   532  000019                     main_servo_control@dir:
   533                           	opt stack 0
   534  000019                     side_servo_control@dir:
   535                           	opt stack 0
   536  000019                     ___wmul@multiplier:
   537                           	opt stack 0
   538  000019                     ___lwdiv@dividend:
   539                           	opt stack 0
   540  000019                     ___lldiv@dividend:
   541                           	opt stack 0
   542                           
   543                           ; 4 bytes @ 0x18
   544  000019                     	ds	1
   545  00001A                     I2C_Master_Read@a:
   546                           	opt stack 0
   547  00001A                     lcdNibble@data:
   548                           	opt stack 0
   549  00001A                     readADC@channel:
   550                           	opt stack 0
   551  00001A                     _isdigit$1053:
   552                           	opt stack 0
   553  00001A                     I2C_Master_Write@d:
   554                           	opt stack 0
   555  00001A                     gate@i:
   556                           	opt stack 0
   557  00001A                     shaker@i:
   558                           	opt stack 0
   559                           
   560                           ; 2 bytes @ 0x19
   561  00001A                     	ds	1
   562  00001B                     ??_main_servo_control:
   563  00001B                     ??_side_servo_control:
   564  00001B                     ?_sense_can:
   565                           	opt stack 0
   566  00001B                     I2C_Master_Read@temp:
   567                           	opt stack 0
   568  00001B                     lcdInst@data:
   569                           	opt stack 0
   570  00001B                     putch@data:
   571                           	opt stack 0
   572  00001B                     isdigit@c:
   573                           	opt stack 0
   574  00001B                     ___wmul@multiplicand:
   575                           	opt stack 0
   576  00001B                     ___lwdiv@divisor:
   577                           	opt stack 0
   578                           
   579                           ; 2 bytes @ 0x1A
   580  00001B                     	ds	1
   581  00001C                     ??_initLCD:
   582  00001C                     main_servo_control@i:
   583                           	opt stack 0
   584  00001C                     side_servo_control@i:
   585                           	opt stack 0
   586  00001C                     get_time@datime:
   587                           	opt stack 0
   588                           
   589                           ; 2 bytes @ 0x1B
   590  00001C                     	ds	1
   591  00001D                     ??_sense_can:
   592  00001D                     ___lwdiv@counter:
   593                           	opt stack 0
   594  00001D                     ___wmul@product:
   595                           	opt stack 0
   596  00001D                     ___lldiv@divisor:
   597                           	opt stack 0
   598                           
   599                           ; 4 bytes @ 0x1C
   600  00001D                     	ds	1
   601  00001E                     ??_get_time:
   602  00001E                     move_can@canType:
   603                           	opt stack 0
   604  00001E                     ___lwdiv@quotient:
   605                           	opt stack 0
   606                           
   607                           ; 2 bytes @ 0x1D
   608  00001E                     	ds	1
   609  00001F                     get_time@i:
   610                           	opt stack 0
   611                           
   612                           ; 2 bytes @ 0x1E
   613  00001F                     	ds	1
   614  000020                     ?___lwmod:
   615                           	opt stack 0
   616  000020                     sense_can@i:
   617                           	opt stack 0
   618  000020                     ___lwmod@dividend:
   619                           	opt stack 0
   620                           
   621                           ; 2 bytes @ 0x1F
   622  000020                     	ds	1
   623  000021                     ___lldiv@quotient:
   624                           	opt stack 0
   625                           
   626                           ; 4 bytes @ 0x20
   627  000021                     	ds	1
   628  000022                     sense_can@i_316:
   629                           	opt stack 0
   630  000022                     ___lwmod@divisor:
   631                           	opt stack 0
   632                           
   633                           ; 2 bytes @ 0x21
   634  000022                     	ds	2
   635  000024                     ___lwmod@counter:
   636                           	opt stack 0
   637  000024                     sense_can@H_max:
   638                           	opt stack 0
   639                           
   640                           ; 2 bytes @ 0x23
   641  000024                     	ds	1
   642  000025                     ?_printf:
   643                           	opt stack 0
   644  000025                     ___lldiv@counter:
   645                           	opt stack 0
   646  000025                     printf@f:
   647                           	opt stack 0
   648                           
   649                           ; 2 bytes @ 0x24
   650  000025                     	ds	1
   651  000026                     I2C_Master_Init@c:
   652                           	opt stack 0
   653                           
   654                           ; 4 bytes @ 0x25
   655  000026                     	ds	4
   656  00002A                     ??_I2C_Master_Init:
   657                           
   658                           ; 1 bytes @ 0x29
   659  00002A                     	ds	3
   660  00002D                     ??_printf:
   661                           
   662                           ; 1 bytes @ 0x2C
   663  00002D                     	ds	1
   664  00002E                     
   665                           ; 1 bytes @ 0x2D
   666  00002E                     	ds	3
   667  000031                     printf@idx:
   668                           	opt stack 0
   669                           
   670                           ; 1 bytes @ 0x30
   671  000031                     	ds	1
   672  000032                     printf@ap:
   673                           	opt stack 0
   674                           
   675                           ; 2 bytes @ 0x31
   676  000032                     	ds	2
   677  000034                     printf@prec:
   678                           	opt stack 0
   679                           
   680                           ; 1 bytes @ 0x33
   681  000034                     	ds	1
   682  000035                     printf@val:
   683                           	opt stack 0
   684                           
   685                           ; 2 bytes @ 0x34
   686  000035                     	ds	2
   687  000037                     printf@flag:
   688                           	opt stack 0
   689                           
   690                           ; 1 bytes @ 0x36
   691  000037                     	ds	1
   692  000038                     printf@width:
   693                           	opt stack 0
   694                           
   695                           ; 2 bytes @ 0x37
   696  000038                     	ds	2
   697  00003A                     printf@c:
   698                           	opt stack 0
   699                           
   700                           ; 1 bytes @ 0x39
   701  00003A                     	ds	1
   702  00003B                     ??_welcome:
   703  00003B                     ??_display_time:
   704  00003B                     ??_display_sorting_time:
   705  00003B                     ?_readLightSensor:
   706                           	opt stack 0
   707  00003B                     debug@H_max:
   708                           	opt stack 0
   709                           
   710                           ; 2 bytes @ 0x3A
   711  00003B                     	ds	2
   712  00003D                     ??_readLightSensor:
   713  00003D                     display_time@i:
   714                           	opt stack 0
   715  00003D                     debug@i:
   716                           	opt stack 0
   717  00003D                     display_sorting_time@i:
   718                           	opt stack 0
   719                           
   720                           ; 2 bytes @ 0x3C
   721  00003D                     	ds	3
   722  000040                     readLightSensor@i:
   723                           	opt stack 0
   724                           
   725                           ; 2 bytes @ 0x3F
   726  000040                     	ds	2
   727  000042                     readLightSensor@H_max:
   728                           	opt stack 0
   729                           
   730                           ; 2 bytes @ 0x41
   731  000042                     	ds	2
   732  000044                     tblptru	equ	0xFF8
   733                           postinc0	equ	0xFEE
   734                           wreg	equ	0xFE8
   735                           
   736                           ; 1 bytes @ 0x43
   737 ;;
   738 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   739 ;;
   740 ;; *************** function _main *****************
   741 ;; Defined at:
   742 ;;		line 21 in file "main.c"
   743 ;; Parameters:    Size  Location     Type
   744 ;;		None
   745 ;; Auto vars:     Size  Location     Type
   746 ;;		None
   747 ;; Return value:  Size  Location     Type
   748 ;;                  1    wreg      void 
   749 ;; Registers used:
   750 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   751 ;; Tracked objects:
   752 ;;		On entry : 0/0
   753 ;;		On exit  : 0/0
   754 ;;		Unchanged: 0/0
   755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   759 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   760 ;;Total ram usage:        0 bytes
   761 ;; Hardware stack levels required when called:    9
   762 ;; This function calls:
   763 ;;		_debug
   764 ;;		_display_sorting_time
   765 ;;		_display_time
   766 ;;		_initPIC
   767 ;;		_sort
   768 ;;		_welcome
   769 ;; This function is called by:
   770 ;;		Startup code after reset
   771 ;; This function uses a non-reentrant model
   772 ;;
   773                           
   774                           	psect	text0
   775  0020CC                     __ptext0:
   776                           	opt stack 0
   777  0020CC                     _main:
   778                           	opt stack 22
   779                           
   780                           ;main.c: 22: initPIC();
   781                           
   782                           ;incstack = 0
   783  0020CC  EC60  F00E         	call	_initPIC	;wreg free
   784  0020D0                     l3424:
   785                           
   786                           ;main.c: 24: if (mode == 0) {
   787  0020D0  5058               	movf	_mode,w,c
   788  0020D2  A4D8               	btfss	status,2,c
   789  0020D4  D003               	goto	l3428
   790                           
   791                           ;main.c: 25: welcome();
   792  0020D6  ECE6  F00E         	call	_welcome	;wreg free
   793                           
   794                           ;main.c: 27: } else if (mode == 1) {
   795  0020DA  D7FA               	goto	l3424
   796  0020DC                     l3428:
   797  0020DC  0458               	decf	_mode,w,c
   798  0020DE  A4D8               	btfss	status,2,c
   799  0020E0  D003               	goto	l3432
   800                           
   801                           ;main.c: 28: display_time();
   802  0020E2  EC0B  F00B         	call	_display_time	;wreg free
   803                           
   804                           ;main.c: 29: }
   805  0020E6  D7F4               	goto	l3424
   806  0020E8                     l3432:
   807                           
   808                           ;main.c: 31: else if (mode == 2) {
   809  0020E8  0E02               	movlw	2
   810  0020EA  1858               	xorwf	_mode,w,c
   811  0020EC  A4D8               	btfss	status,2,c
   812  0020EE  D003               	goto	l3436
   813                           
   814                           ;main.c: 32: sort();
   815  0020F0  ECF1  F009         	call	_sort	;wreg free
   816                           
   817                           ;main.c: 33: }
   818  0020F4  D7ED               	goto	l3424
   819  0020F6                     l3436:
   820                           
   821                           ;main.c: 35: else if (mode == 3) {
   822  0020F6  0E03               	movlw	3
   823  0020F8  1858               	xorwf	_mode,w,c
   824  0020FA  A4D8               	btfss	status,2,c
   825  0020FC  D003               	goto	l3440
   826                           
   827                           ;main.c: 36: display_sorting_time();
   828  0020FE  ECBA  F00F         	call	_display_sorting_time	;wreg free
   829                           
   830                           ;main.c: 37: }
   831  002102  D7E6               	goto	l3424
   832  002104                     l3440:
   833                           
   834                           ;main.c: 39: else if (mode == 99) {
   835  002104  0E63               	movlw	99
   836  002106  1858               	xorwf	_mode,w,c
   837  002108  A4D8               	btfss	status,2,c
   838  00210A  D7E2               	goto	l3424
   839                           
   840                           ;main.c: 40: debug();
   841  00210C  ECCD  F010         	call	_debug	;wreg free
   842  002110  D7DF               	goto	l3424
   843  002112                     __end_of_main:
   844                           	opt stack 0
   845                           tblptru	equ	0xFF8
   846                           postinc0	equ	0xFEE
   847                           wreg	equ	0xFE8
   848                           status	equ	0xFD8
   849                           
   850 ;; *************** function _welcome *****************
   851 ;; Defined at:
   852 ;;		line 20 in file "picState.c"
   853 ;; Parameters:    Size  Location     Type
   854 ;;		None
   855 ;; Auto vars:     Size  Location     Type
   856 ;;		None
   857 ;; Return value:  Size  Location     Type
   858 ;;                  2   86[None  ] int 
   859 ;; Registers used:
   860 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   861 ;; Tracked objects:
   862 ;;		On entry : 0/0
   863 ;;		On exit  : 0/0
   864 ;;		Unchanged: 0/0
   865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   868 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   869 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   870 ;;Total ram usage:        2 bytes
   871 ;; Hardware stack levels used:    1
   872 ;; Hardware stack levels required when called:    7
   873 ;; This function calls:
   874 ;;		_lcdInst
   875 ;;		_printf
   876 ;; This function is called by:
   877 ;;		_main
   878 ;; This function uses a non-reentrant model
   879 ;;
   880                           
   881                           	psect	text1
   882  001DCC                     __ptext1:
   883                           	opt stack 0
   884  001DCC                     _welcome:
   885                           	opt stack 23
   886                           
   887                           ;picState.c: 21: lcdInst(0x01);;
   888                           
   889                           ;incstack = 0
   890  001DCC  0E01               	movlw	1
   891  001DCE  EC67  F011         	call	_lcdInst
   892                           
   893                           ;picState.c: 22: lcdInst(0b10000000);;
   894  001DD2  0E80               	movlw	128
   895  001DD4  EC67  F011         	call	_lcdInst
   896                           
   897                           ;picState.c: 23: _delay((unsigned long)((200)*(8000000/4000.0)));
   898  001DD8  0E03               	movlw	3
   899  001DDA  6E3C               	movwf	(??_welcome+1)& (0+255),c
   900  001DDC  0E08               	movlw	8
   901  001DDE  6E3B               	movwf	??_welcome& (0+255),c
   902  001DE0  0E77               	movlw	119
   903  001DE2                     u2957:
   904  001DE2  2EE8               	decfsz	wreg,f,c
   905  001DE4  D7FE               	bra	u2957
   906  001DE6  2E3B               	decfsz	??_welcome& (0+255),f,c
   907  001DE8  D7FC               	bra	u2957
   908  001DEA  2E3C               	decfsz	(??_welcome+1)& (0+255),f,c
   909  001DEC  D7FA               	bra	u2957
   910  001DEE  F000               	nop	
   911                           
   912                           ;picState.c: 25: printf("Welcome!");
   913  001DF0  0EBC               	movlw	low STR_2
   914  001DF2  6E25               	movwf	printf@f,c
   915  001DF4  0E10               	movlw	high STR_2
   916  001DF6  6E26               	movwf	printf@f+1,c
   917  001DF8  EC6B  F008         	call	_printf	;wreg free
   918                           
   919                           ;picState.c: 26: printf("            ");
   920  001DFC  0E87               	movlw	low (STR_6+2)
   921  001DFE  6E25               	movwf	printf@f,c
   922  001E00  0E10               	movlw	high (STR_6+2)
   923  001E02  6E26               	movwf	printf@f+1,c
   924  001E04  EC6B  F008         	call	_printf	;wreg free
   925                           
   926                           ;picState.c: 27: printf("2 Back to start menu");
   927  001E08  0E2B               	movlw	low STR_4
   928  001E0A  6E25               	movwf	printf@f,c
   929  001E0C  0E10               	movlw	high STR_4
   930  001E0E  6E26               	movwf	printf@f+1,c
   931  001E10  EC6B  F008         	call	_printf	;wreg free
   932                           
   933                           ;picState.c: 28: lcdInst(0b11000000);;
   934  001E14  0EC0               	movlw	192
   935  001E16  EC67  F011         	call	_lcdInst
   936                           
   937                           ;picState.c: 29: printf("1 Time");
   938  001E1A  0EC5               	movlw	low STR_5
   939  001E1C  6E25               	movwf	printf@f,c
   940  001E1E  0E10               	movlw	high STR_5
   941  001E20  6E26               	movwf	printf@f+1,c
   942  001E22  EC6B  F008         	call	_printf	;wreg free
   943                           
   944                           ;picState.c: 30: printf("              ");
   945  001E26  0E85               	movlw	low STR_6
   946  001E28  6E25               	movwf	printf@f,c
   947  001E2A  0E10               	movlw	high STR_6
   948  001E2C  6E26               	movwf	printf@f+1,c
   949  001E2E  EC6B  F008         	call	_printf	;wreg free
   950                           
   951                           ;picState.c: 31: printf("A Sorting");
   952  001E32  0EB2               	movlw	low STR_7
   953  001E34  6E25               	movwf	printf@f,c
   954  001E36  0E10               	movlw	high STR_7
   955  001E38  6E26               	movwf	printf@f+1,c
   956  001E3A  EC6B  F008         	call	_printf	;wreg free
   957                           
   958                           ;picState.c: 32: LATDbits.LATD0 = 0;
   959  001E3E  908C               	bcf	3980,0,c	;volatile
   960                           
   961                           ;picState.c: 33: LATCbits.LATC1 = 0;
   962  001E40  928B               	bcf	3979,1,c	;volatile
   963  001E42                     l3302:
   964  001E42  5058               	movf	_mode,w,c
   965  001E44  A4D8               	btfss	status,2,c
   966  001E46  0012               	return	
   967  001E48  D7FC               	goto	l3302
   968  001E4A                     __end_of_welcome:
   969                           	opt stack 0
   970                           tblptru	equ	0xFF8
   971                           postinc0	equ	0xFEE
   972                           wreg	equ	0xFE8
   973                           status	equ	0xFD8
   974                           
   975 ;; *************** function _sort *****************
   976 ;; Defined at:
   977 ;;		line 94 in file "picState.c"
   978 ;; Parameters:    Size  Location     Type
   979 ;;		None
   980 ;; Auto vars:     Size  Location     Type
   981 ;;  can             2    8[BANK0 ] int 
   982 ;;  noLabel         2    6[BANK0 ] int 
   983 ;;  tin             2    4[BANK0 ] int 
   984 ;;  tap             2    2[BANK0 ] int 
   985 ;; Return value:  Size  Location     Type
   986 ;;                  2   90[None  ] int 
   987 ;; Registers used:
   988 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   989 ;; Tracked objects:
   990 ;;		On entry : 0/0
   991 ;;		On exit  : 0/0
   992 ;;		Unchanged: 0/0
   993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   995 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   996 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   997 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   998 ;;Total ram usage:       10 bytes
   999 ;; Hardware stack levels used:    1
  1000 ;; Hardware stack levels required when called:    8
  1001 ;; This function calls:
  1002 ;;		_gate
  1003 ;;		_get_time
  1004 ;;		_lcdInst
  1005 ;;		_main_servo_control
  1006 ;;		_move_can
  1007 ;;		_printf
  1008 ;;		_readLightSensor
  1009 ;;		_sense_can
  1010 ;;		_shaker
  1011 ;; This function is called by:
  1012 ;;		_main
  1013 ;; This function uses a non-reentrant model
  1014 ;;
  1015                           
  1016                           	psect	text2
  1017  0013E2                     __ptext2:
  1018                           	opt stack 0
  1019  0013E2                     _sort:
  1020                           	opt stack 22
  1021                           
  1022                           ;picState.c: 96: int tap = 0;
  1023                           
  1024                           ;incstack = 0
  1025  0013E2  0E00               	movlw	0
  1026  0013E4  0100               	movlb	0	; () banked
  1027  0013E6  6F83               	movwf	(sort@tap+1)& (0+255),b
  1028  0013E8  0E00               	movlw	0
  1029  0013EA  6F82               	movwf	sort@tap& (0+255),b
  1030                           
  1031                           ;picState.c: 97: int tin = 0;
  1032  0013EC  0E00               	movlw	0
  1033  0013EE  0100               	movlb	0	; () banked
  1034  0013F0  6F85               	movwf	(sort@tin+1)& (0+255),b
  1035  0013F2  0E00               	movlw	0
  1036  0013F4  6F84               	movwf	sort@tin& (0+255),b
  1037                           
  1038                           ;picState.c: 98: int noLabel = 0;
  1039  0013F6  0E00               	movlw	0
  1040  0013F8  0100               	movlb	0	; () banked
  1041  0013FA  6F87               	movwf	(sort@noLabel+1)& (0+255),b
  1042  0013FC  0E00               	movlw	0
  1043  0013FE  6F86               	movwf	sort@noLabel& (0+255),b
  1044                           
  1045                           ; BSR set to: 0
  1046                           ;picState.c: 99: lcdInst(0x01);;
  1047  001400  0E01               	movlw	1
  1048  001402  EC67  F011         	call	_lcdInst
  1049                           
  1050                           ;picState.c: 100: _delay((unsigned long)((100)*(8000000/4000.0)));
  1051  001406  0E02               	movlw	2
  1052  001408  0100               	movlb	0	; () banked
  1053  00140A  6F81               	movwf	(??_sort+1)& (0+255),b
  1054  00140C  0E04               	movlw	4
  1055  00140E  0100               	movlb	0	; () banked
  1056  001410  6F80               	movwf	??_sort& (0+255),b
  1057  001412  0EBA               	movlw	186
  1058  001414                     u2967:
  1059  001414  2EE8               	decfsz	wreg,f,c
  1060  001416  D7FE               	bra	u2967
  1061  001418  2F80               	decfsz	??_sort& (0+255),f,b
  1062  00141A  D7FC               	bra	u2967
  1063  00141C  2F81               	decfsz	(??_sort+1)& (0+255),f,b
  1064  00141E  D7FA               	bra	u2967
  1065  001420  F000               	nop	
  1066                           
  1067                           ;picState.c: 101: printf("Sorting Started");
  1068  001422  0E65               	movlw	low STR_9
  1069  001424  6E25               	movwf	printf@f,c
  1070  001426  0E10               	movlw	high STR_9
  1071  001428  6E26               	movwf	printf@f+1,c
  1072  00142A  EC6B  F008         	call	_printf	;wreg free
  1073                           
  1074                           ;picState.c: 102: lcdInst(0b11000000);;
  1075  00142E  0EC0               	movlw	192
  1076  001430  EC67  F011         	call	_lcdInst
  1077                           
  1078                           ;picState.c: 103: printf("Press 1/2/A to stop");
  1079  001434  0E40               	movlw	low STR_10
  1080  001436  6E25               	movwf	printf@f,c
  1081  001438  0E10               	movlw	high STR_10
  1082  00143A  6E26               	movwf	printf@f+1,c
  1083  00143C  EC6B  F008         	call	_printf	;wreg free
  1084                           
  1085                           ;picState.c: 104: get_time(start_time);
  1086  001440  0E60               	movlw	low _start_time
  1087  001442  6E1C               	movwf	get_time@datime,c
  1088  001444  0E00               	movlw	high _start_time
  1089  001446  6E1D               	movwf	get_time@datime+1,c
  1090  001448  EC45  F00D         	call	_get_time	;wreg free
  1091                           
  1092                           ;picState.c: 105: lcdInst(0b10000000);;
  1093  00144C  0E80               	movlw	128
  1094  00144E  EC67  F011         	call	_lcdInst
  1095                           
  1096                           ;picState.c: 107: while (mode == 2) {
  1097  001452  D058               	goto	l3390
  1098  001454                     l3358:
  1099                           
  1100                           ;picState.c: 108: if (readLightSensor() == 1) {
  1101  001454  EC15  F00E         	call	_readLightSensor	;wreg free
  1102  001458  043B               	decf	?_readLightSensor,w,c
  1103  00145A  103C               	iorwf	?_readLightSensor+1,w,c
  1104  00145C  A4D8               	btfss	status,2,c
  1105  00145E  D035               	goto	l3380
  1106                           
  1107                           ;picState.c: 110: LATDbits.LATD0 = 1;
  1108  001460  808C               	bsf	3980,0,c	;volatile
  1109                           
  1110                           ;picState.c: 111: main_servo_control(0);
  1111  001462  0E00               	movlw	0
  1112  001464  6E1A               	movwf	main_servo_control@dir+1,c
  1113  001466  0E00               	movlw	0
  1114  001468  6E19               	movwf	main_servo_control@dir,c
  1115  00146A  EC83  F00B         	call	_main_servo_control	;wreg free
  1116                           
  1117                           ;picState.c: 112: _delay((unsigned long)((1000)*(8000000/4000.0)));
  1118  00146E  0E0B               	movlw	11
  1119  001470  0100               	movlb	0	; () banked
  1120  001472  6F81               	movwf	(??_sort+1)& (0+255),b
  1121  001474  0E26               	movlw	38
  1122  001476  0100               	movlb	0	; () banked
  1123  001478  6F80               	movwf	??_sort& (0+255),b
  1124  00147A  0E5D               	movlw	93
  1125  00147C                     u2977:
  1126  00147C  2EE8               	decfsz	wreg,f,c
  1127  00147E  D7FE               	bra	u2977
  1128  001480  2F80               	decfsz	??_sort& (0+255),f,b
  1129  001482  D7FC               	bra	u2977
  1130  001484  2F81               	decfsz	(??_sort+1)& (0+255),f,b
  1131  001486  D7FA               	bra	u2977
  1132  001488  D000               	nop2	
  1133                           
  1134                           ;picState.c: 114: lcdInst(0b10000000);;
  1135  00148A  0E80               	movlw	128
  1136  00148C  EC67  F011         	call	_lcdInst
  1137                           
  1138                           ;picState.c: 115: lcdInst(0b11000000);;
  1139  001490  0EC0               	movlw	192
  1140  001492  EC67  F011         	call	_lcdInst
  1141                           
  1142                           ;picState.c: 116: int can = sense_can();
  1143  001496  ECDB  F00C         	call	_sense_can	;wreg free
  1144  00149A  C01B  F088         	movff	?_sense_can,sort@can
  1145  00149E  C01C  F089         	movff	?_sense_can+1,sort@can+1
  1146                           
  1147                           ;picState.c: 117: LATDbits.LATD0 = 0;
  1148  0014A2  908C               	bcf	3980,0,c	;volatile
  1149                           
  1150                           ;picState.c: 118: move_can(can);
  1151  0014A4  C088  F01E         	movff	sort@can,move_can@canType
  1152  0014A8  C089  F01F         	movff	sort@can+1,move_can@canType+1
  1153  0014AC  ECF8  F00B         	call	_move_can	;wreg free
  1154                           
  1155                           ;picState.c: 119: printf("%d", can);
  1156  0014B0  0ED1               	movlw	low STR_11
  1157  0014B2  6E25               	movwf	printf@f,c
  1158  0014B4  0E10               	movlw	high STR_11
  1159  0014B6  6E26               	movwf	printf@f+1,c
  1160  0014B8  C088  F027         	movff	sort@can,?_printf+2
  1161  0014BC  C089  F028         	movff	sort@can+1,?_printf+3
  1162  0014C0  EC6B  F008         	call	_printf	;wreg free
  1163                           
  1164                           ;picState.c: 120: flag++;
  1165  0014C4  4A55               	infsnz	_flag,f,c
  1166  0014C6  2A56               	incf	_flag+1,f,c
  1167                           
  1168                           ;picState.c: 122: } else {
  1169  0014C8  D01D               	goto	l3390
  1170  0014CA                     l3380:
  1171                           
  1172                           ;picState.c: 124: shaker();
  1173  0014CA  EC5B  F00F         	call	_shaker	;wreg free
  1174                           
  1175                           ;picState.c: 125: main_servo_control(0);
  1176  0014CE  0E00               	movlw	0
  1177  0014D0  6E1A               	movwf	main_servo_control@dir+1,c
  1178  0014D2  0E00               	movlw	0
  1179  0014D4  6E19               	movwf	main_servo_control@dir,c
  1180  0014D6  EC83  F00B         	call	_main_servo_control	;wreg free
  1181                           
  1182                           ;picState.c: 126: LATDbits.LATD0 = 0;
  1183  0014DA  908C               	bcf	3980,0,c	;volatile
  1184                           
  1185                           ;picState.c: 127: _delay((unsigned long)((500)*(8000000/4000.0)));
  1186  0014DC  0E06               	movlw	6
  1187  0014DE  0100               	movlb	0	; () banked
  1188  0014E0  6F81               	movwf	(??_sort+1)& (0+255),b
  1189  0014E2  0E13               	movlw	19
  1190  0014E4  0100               	movlb	0	; () banked
  1191  0014E6  6F80               	movwf	??_sort& (0+255),b
  1192  0014E8  0EAD               	movlw	173
  1193  0014EA                     u2987:
  1194  0014EA  2EE8               	decfsz	wreg,f,c
  1195  0014EC  D7FE               	bra	u2987
  1196  0014EE  2F80               	decfsz	??_sort& (0+255),f,b
  1197  0014F0  D7FC               	bra	u2987
  1198  0014F2  2F81               	decfsz	(??_sort+1)& (0+255),f,b
  1199  0014F4  D7FA               	bra	u2987
  1200  0014F6  D000               	nop2	
  1201                           
  1202                           ;picState.c: 128: gate();
  1203  0014F8  EC25  F00F         	call	_gate	;wreg free
  1204                           
  1205                           ;picState.c: 130: flag = 0;
  1206  0014FC  0E00               	movlw	0
  1207  0014FE  6E56               	movwf	_flag+1,c
  1208  001500  0E00               	movlw	0
  1209  001502  6E55               	movwf	_flag,c
  1210  001504                     l3390:
  1211  001504  0E02               	movlw	2
  1212  001506  1858               	xorwf	_mode,w,c
  1213  001508  A4D8               	btfss	status,2,c
  1214  00150A  0012               	return	
  1215  00150C  D7A3               	goto	l3358
  1216  00150E                     __end_of_sort:
  1217                           	opt stack 0
  1218                           tblptru	equ	0xFF8
  1219                           postinc0	equ	0xFEE
  1220                           wreg	equ	0xFE8
  1221                           status	equ	0xFD8
  1222                           
  1223 ;; *************** function _shaker *****************
  1224 ;; Defined at:
  1225 ;;		line 18 in file "motor.c"
  1226 ;; Parameters:    Size  Location     Type
  1227 ;;		None
  1228 ;; Auto vars:     Size  Location     Type
  1229 ;;  i               2   25[COMRAM] int 
  1230 ;; Return value:  Size  Location     Type
  1231 ;;                  1    wreg      void 
  1232 ;; Registers used:
  1233 ;;		wreg, status,2, status,0
  1234 ;; Tracked objects:
  1235 ;;		On entry : 0/0
  1236 ;;		On exit  : 0/0
  1237 ;;		Unchanged: 0/0
  1238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1240 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1241 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1242 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1243 ;;Total ram usage:        3 bytes
  1244 ;; Hardware stack levels used:    1
  1245 ;; Hardware stack levels required when called:    4
  1246 ;; This function calls:
  1247 ;;		Nothing
  1248 ;; This function is called by:
  1249 ;;		_sort
  1250 ;; This function uses a non-reentrant model
  1251 ;;
  1252                           
  1253                           	psect	text3
  1254  001EB6                     __ptext3:
  1255                           	opt stack 0
  1256  001EB6                     _shaker:
  1257                           	opt stack 25
  1258                           
  1259                           ;motor.c: 19: int i = 0;
  1260                           
  1261                           ;incstack = 0
  1262  001EB6  0E00               	movlw	0
  1263  001EB8  6E1B               	movwf	shaker@i+1,c
  1264  001EBA  0E00               	movlw	0
  1265  001EBC  6E1A               	movwf	shaker@i,c
  1266                           
  1267                           ;motor.c: 20: for (i = 0; i<200; i++){
  1268  001EBE  0E00               	movlw	0
  1269  001EC0  6E1B               	movwf	shaker@i+1,c
  1270  001EC2  0E00               	movlw	0
  1271  001EC4  6E1A               	movwf	shaker@i,c
  1272  001EC6                     l3224:
  1273  001EC6  BE1B               	btfsc	shaker@i+1,7,c
  1274  001EC8  D006               	goto	l378
  1275  001ECA  501B               	movf	shaker@i+1,w,c
  1276  001ECC  E125               	bnz	l380
  1277  001ECE  0EC8               	movlw	200
  1278  001ED0  5C1A               	subwf	shaker@i,w,c
  1279  001ED2  B0D8               	btfsc	status,0,c
  1280  001ED4  0012               	return	
  1281  001ED6                     l378:
  1282                           
  1283                           ;motor.c: 22: LATBbits.LATB2 = 1;
  1284  001ED6  848A               	bsf	3978,2,c	;volatile
  1285                           
  1286                           ;motor.c: 23: LATCbits.LATC1 = 1;
  1287  001ED8  828B               	bsf	3979,1,c	;volatile
  1288                           
  1289                           ;motor.c: 25: _delay((unsigned long)((8.5)*(8000000/4000.0)));
  1290  001EDA  0E17               	movlw	23
  1291  001EDC  6E19               	movwf	??_shaker& (0+255),c
  1292  001EDE  0E12               	movlw	18
  1293  001EE0                     u2997:
  1294  001EE0  2EE8               	decfsz	wreg,f,c
  1295  001EE2  D7FE               	bra	u2997
  1296  001EE4  2E19               	decfsz	??_shaker& (0+255),f,c
  1297  001EE6  D7FC               	bra	u2997
  1298  001EE8  D000               	nop2	
  1299                           
  1300                           ;motor.c: 27: LATCbits.LATC1 = 1;
  1301  001EEA  828B               	bsf	3979,1,c	;volatile
  1302                           
  1303                           ;motor.c: 28: LATBbits.LATB2 = 0;
  1304  001EEC  948A               	bcf	3978,2,c	;volatile
  1305                           
  1306                           ;motor.c: 30: _delay((unsigned long)((10)*(8000000/4000.0)));
  1307  001EEE  0E1A               	movlw	26
  1308  001EF0  6E19               	movwf	??_shaker& (0+255),c
  1309  001EF2  0EF8               	movlw	248
  1310  001EF4                     u3007:
  1311  001EF4  2EE8               	decfsz	wreg,f,c
  1312  001EF6  D7FE               	bra	u3007
  1313  001EF8  2E19               	decfsz	??_shaker& (0+255),f,c
  1314  001EFA  D7FC               	bra	u3007
  1315  001EFC  D000               	nop2	
  1316                           
  1317                           ;motor.c: 32: LATBbits.LATB2 = 0;
  1318  001EFE  948A               	bcf	3978,2,c	;volatile
  1319                           
  1320                           ;motor.c: 33: LATCbits.LATC1 = 0;
  1321  001F00  928B               	bcf	3979,1,c	;volatile
  1322                           
  1323                           ;motor.c: 35: _delay((unsigned long)((1.5)*(8000000/4000.0)));
  1324  001F02  0E04               	movlw	4
  1325  001F04  6E19               	movwf	??_shaker& (0+255),c
  1326  001F06  0EE4               	movlw	228
  1327  001F08                     u3017:
  1328  001F08  2EE8               	decfsz	wreg,f,c
  1329  001F0A  D7FE               	bra	u3017
  1330  001F0C  2E19               	decfsz	??_shaker& (0+255),f,c
  1331  001F0E  D7FC               	bra	u3017
  1332  001F10  D000               	nop2	
  1333  001F12  4A1A               	infsnz	shaker@i,f,c
  1334  001F14  2A1B               	incf	shaker@i+1,f,c
  1335  001F16  D7D7               	goto	l3224
  1336  001F18                     l380:
  1337  001F18  0012               	return		;funcret
  1338  001F1A                     __end_of_shaker:
  1339                           	opt stack 0
  1340                           tblptru	equ	0xFF8
  1341                           postinc0	equ	0xFEE
  1342                           wreg	equ	0xFE8
  1343                           status	equ	0xFD8
  1344                           
  1345 ;; *************** function _sense_can *****************
  1346 ;; Defined at:
  1347 ;;		line 30 in file "adc.c"
  1348 ;; Parameters:    Size  Location     Type
  1349 ;;		None
  1350 ;; Auto vars:     Size  Location     Type
  1351 ;;  i               2   33[COMRAM] int 
  1352 ;;  i               2   31[COMRAM] int 
  1353 ;;  H_max           2   35[COMRAM] int 
  1354 ;; Return value:  Size  Location     Type
  1355 ;;                  2   26[COMRAM] int 
  1356 ;; Registers used:
  1357 ;;		wreg, status,2, status,0, cstack
  1358 ;; Tracked objects:
  1359 ;;		On entry : 0/0
  1360 ;;		On exit  : 0/0
  1361 ;;		Unchanged: 0/0
  1362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1363 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1364 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1365 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1366 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1367 ;;Total ram usage:       11 bytes
  1368 ;; Hardware stack levels used:    1
  1369 ;; Hardware stack levels required when called:    5
  1370 ;; This function calls:
  1371 ;;		_readADC
  1372 ;; This function is called by:
  1373 ;;		_sort
  1374 ;; This function uses a non-reentrant model
  1375 ;;
  1376                           
  1377                           	psect	text4
  1378  0019B6                     __ptext4:
  1379                           	opt stack 0
  1380  0019B6                     _sense_can:
  1381                           	opt stack 24
  1382                           
  1383                           ;adc.c: 32: int H_max = 0;
  1384                           
  1385                           ;incstack = 0
  1386  0019B6  0E00               	movlw	0
  1387  0019B8  6E25               	movwf	sense_can@H_max+1,c
  1388  0019BA  0E00               	movlw	0
  1389  0019BC  6E24               	movwf	sense_can@H_max,c
  1390                           
  1391                           ;adc.c: 35: if (PORTBbits.RB0 == 1){
  1392  0019BE  A081               	btfss	3969,0,c	;volatile
  1393  0019C0  D034               	goto	l3126
  1394                           
  1395                           ;adc.c: 38: for (int i = 0; i < 100; i++) {
  1396  0019C2  0E00               	movlw	0
  1397  0019C4  6E21               	movwf	sense_can@i+1,c
  1398  0019C6  0E00               	movlw	0
  1399  0019C8  6E20               	movwf	sense_can@i,c
  1400  0019CA                     l3100:
  1401  0019CA  BE21               	btfsc	sense_can@i+1,7,c
  1402  0019CC  D006               	goto	l3104
  1403  0019CE  5021               	movf	sense_can@i+1,w,c
  1404  0019D0  E11A               	bnz	l3114
  1405  0019D2  0E64               	movlw	100
  1406  0019D4  5C20               	subwf	sense_can@i,w,c
  1407  0019D6  B0D8               	btfsc	status,0,c
  1408  0019D8  D016               	goto	l3114
  1409  0019DA                     l3104:
  1410                           
  1411                           ;adc.c: 40: readADC(0);
  1412  0019DA  0E00               	movlw	0
  1413  0019DC  EC21  F011         	call	_readADC
  1414                           
  1415                           ;adc.c: 41: if (ADRESH > H_max) {
  1416  0019E0  50C4               	movf	4036,w,c	;volatile
  1417  0019E2  6E1D               	movwf	??_sense_can& (0+255),c
  1418  0019E4  6A1E               	clrf	(??_sense_can+1)& (0+255),c
  1419  0019E6  501D               	movf	??_sense_can,w,c
  1420  0019E8  5C24               	subwf	sense_can@H_max,w,c
  1421  0019EA  5025               	movf	sense_can@H_max+1,w,c
  1422  0019EC  0A80               	xorlw	128
  1423  0019EE  6E1F               	movwf	(??_sense_can+2)& (0+255),c
  1424  0019F0  501E               	movf	??_sense_can+1,w,c
  1425  0019F2  0A80               	xorlw	128
  1426  0019F4  581F               	subwfb	(??_sense_can+2)& (0+255),w,c
  1427  0019F6  B0D8               	btfsc	status,0,c
  1428  0019F8  D003               	goto	l3110
  1429                           
  1430                           ;adc.c: 42: H_max = ADRESH;
  1431  0019FA  CFC4 F024          	movff	4036,sense_can@H_max	;volatile
  1432  0019FE  6A25               	clrf	sense_can@H_max+1,c
  1433  001A00                     l3110:
  1434  001A00  4A20               	infsnz	sense_can@i,f,c
  1435  001A02  2A21               	incf	sense_can@i+1,f,c
  1436  001A04  D7E2               	goto	l3100
  1437  001A06                     l3114:
  1438                           
  1439                           ;adc.c: 43: }
  1440                           ;adc.c: 44: }
  1441                           ;adc.c: 46: if (H_max >= 0x4) {
  1442  001A06  BE25               	btfsc	sense_can@H_max+1,7,c
  1443  001A08  D00B               	goto	l3122
  1444  001A0A  5025               	movf	sense_can@H_max+1,w,c
  1445  001A0C  E104               	bnz	u2640
  1446  001A0E  0E04               	movlw	4
  1447  001A10  5C24               	subwf	sense_can@H_max,w,c
  1448  001A12  A0D8               	btfss	status,0,c
  1449  001A14  D005               	goto	l3122
  1450  001A16                     u2640:
  1451                           
  1452                           ;adc.c: 48: return 2;
  1453  001A16  0E00               	movlw	0
  1454  001A18  6E1C               	movwf	?_sense_can+1,c
  1455  001A1A  0E02               	movlw	2
  1456  001A1C  6E1B               	movwf	?_sense_can,c
  1457                           
  1458                           ;adc.c: 49: } else {
  1459  001A1E  0012               	return	
  1460  001A20                     l3122:
  1461                           
  1462                           ;adc.c: 51: return 1;
  1463  001A20  0E00               	movlw	0
  1464  001A22  6E1C               	movwf	?_sense_can+1,c
  1465  001A24  0E01               	movlw	1
  1466  001A26  6E1B               	movwf	?_sense_can,c
  1467                           
  1468                           ;adc.c: 52: }
  1469                           ;adc.c: 53: }
  1470  001A28  0012               	return	
  1471  001A2A                     l3126:
  1472                           
  1473                           ;adc.c: 55: else {
  1474                           ;adc.c: 56: for (int i = 0; i < 100; i++) {
  1475  001A2A  0E00               	movlw	0
  1476  001A2C  6E23               	movwf	sense_can@i_316+1,c
  1477  001A2E  0E00               	movlw	0
  1478  001A30  6E22               	movwf	sense_can@i_316,c
  1479  001A32                     l3128:
  1480  001A32  BE23               	btfsc	sense_can@i_316+1,7,c
  1481  001A34  D006               	goto	l3132
  1482  001A36  5023               	movf	sense_can@i_316+1,w,c
  1483  001A38  E11A               	bnz	l3142
  1484  001A3A  0E64               	movlw	100
  1485  001A3C  5C22               	subwf	sense_can@i_316,w,c
  1486  001A3E  B0D8               	btfsc	status,0,c
  1487  001A40  D016               	goto	l3142
  1488  001A42                     l3132:
  1489                           
  1490                           ;adc.c: 58: readADC(1);
  1491  001A42  0E01               	movlw	1
  1492  001A44  EC21  F011         	call	_readADC
  1493                           
  1494                           ;adc.c: 59: if (ADRESH > H_max) {
  1495  001A48  50C4               	movf	4036,w,c	;volatile
  1496  001A4A  6E1D               	movwf	??_sense_can& (0+255),c
  1497  001A4C  6A1E               	clrf	(??_sense_can+1)& (0+255),c
  1498  001A4E  501D               	movf	??_sense_can,w,c
  1499  001A50  5C24               	subwf	sense_can@H_max,w,c
  1500  001A52  5025               	movf	sense_can@H_max+1,w,c
  1501  001A54  0A80               	xorlw	128
  1502  001A56  6E1F               	movwf	(??_sense_can+2)& (0+255),c
  1503  001A58  501E               	movf	??_sense_can+1,w,c
  1504  001A5A  0A80               	xorlw	128
  1505  001A5C  581F               	subwfb	(??_sense_can+2)& (0+255),w,c
  1506  001A5E  B0D8               	btfsc	status,0,c
  1507  001A60  D003               	goto	l3138
  1508                           
  1509                           ;adc.c: 60: H_max = ADRESH;
  1510  001A62  CFC4 F024          	movff	4036,sense_can@H_max	;volatile
  1511  001A66  6A25               	clrf	sense_can@H_max+1,c
  1512  001A68                     l3138:
  1513  001A68  4A22               	infsnz	sense_can@i_316,f,c
  1514  001A6A  2A23               	incf	sense_can@i_316+1,f,c
  1515  001A6C  D7E2               	goto	l3128
  1516  001A6E                     l3142:
  1517                           
  1518                           ;adc.c: 61: }
  1519                           ;adc.c: 62: }
  1520                           ;adc.c: 63: if (H_max == 0xFF) {
  1521  001A6E  2824               	incf	sense_can@H_max,w,c
  1522  001A70  1025               	iorwf	sense_can@H_max+1,w,c
  1523  001A72  A4D8               	btfss	status,2,c
  1524  001A74  D005               	goto	l3150
  1525                           
  1526                           ;adc.c: 65: return 3;
  1527  001A76  0E00               	movlw	0
  1528  001A78  6E1C               	movwf	?_sense_can+1,c
  1529  001A7A  0E03               	movlw	3
  1530  001A7C  6E1B               	movwf	?_sense_can,c
  1531                           
  1532                           ;adc.c: 66: } else {
  1533  001A7E  0012               	return	
  1534  001A80                     l3150:
  1535                           
  1536                           ;adc.c: 68: return 4;
  1537  001A80  0E00               	movlw	0
  1538  001A82  6E1C               	movwf	?_sense_can+1,c
  1539  001A84  0E04               	movlw	4
  1540  001A86  6E1B               	movwf	?_sense_can,c
  1541  001A88  0012               	return	
  1542  001A8A                     __end_of_sense_can:
  1543                           	opt stack 0
  1544                           tblptru	equ	0xFF8
  1545                           postinc0	equ	0xFEE
  1546                           wreg	equ	0xFE8
  1547                           status	equ	0xFD8
  1548                           
  1549 ;; *************** function _readLightSensor *****************
  1550 ;; Defined at:
  1551 ;;		line 73 in file "adc.c"
  1552 ;; Parameters:    Size  Location     Type
  1553 ;;		None
  1554 ;; Auto vars:     Size  Location     Type
  1555 ;;  H_max           2   65[COMRAM] int 
  1556 ;;  i               2   63[COMRAM] int 
  1557 ;; Return value:  Size  Location     Type
  1558 ;;                  2   58[COMRAM] int 
  1559 ;; Registers used:
  1560 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1561 ;; Tracked objects:
  1562 ;;		On entry : 0/0
  1563 ;;		On exit  : 0/0
  1564 ;;		Unchanged: 0/0
  1565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1566 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1567 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1568 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1569 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1570 ;;Total ram usage:        9 bytes
  1571 ;; Hardware stack levels used:    1
  1572 ;; Hardware stack levels required when called:    7
  1573 ;; This function calls:
  1574 ;;		_lcdInst
  1575 ;;		_printf
  1576 ;;		_readADC
  1577 ;; This function is called by:
  1578 ;;		_sort
  1579 ;; This function uses a non-reentrant model
  1580 ;;
  1581                           
  1582                           	psect	text5
  1583  001C2A                     __ptext5:
  1584                           	opt stack 0
  1585  001C2A                     _readLightSensor:
  1586                           	opt stack 22
  1587                           
  1588                           ;adc.c: 74: int H_max = 0;
  1589                           
  1590                           ;incstack = 0
  1591  001C2A  0E00               	movlw	0
  1592  001C2C  6E43               	movwf	readLightSensor@H_max+1,c
  1593  001C2E  0E00               	movlw	0
  1594  001C30  6E42               	movwf	readLightSensor@H_max,c
  1595                           
  1596                           ;adc.c: 75: int i = 0;
  1597  001C32  0E00               	movlw	0
  1598  001C34  6E41               	movwf	readLightSensor@i+1,c
  1599  001C36  0E00               	movlw	0
  1600  001C38  6E40               	movwf	readLightSensor@i,c
  1601                           
  1602                           ;adc.c: 76: while(i < 50){
  1603  001C3A  D028               	goto	l3168
  1604  001C3C                     l3156:
  1605                           
  1606                           ;adc.c: 77: lcdInst(0b10000000);;
  1607  001C3C  0E80               	movlw	128
  1608  001C3E  EC67  F011         	call	_lcdInst
  1609                           
  1610                           ;adc.c: 79: readADC(5);
  1611  001C42  0E05               	movlw	5
  1612  001C44  EC21  F011         	call	_readADC
  1613                           
  1614                           ;adc.c: 80: if (ADRESH > H_max) {
  1615  001C48  50C4               	movf	4036,w,c	;volatile
  1616  001C4A  6E3D               	movwf	??_readLightSensor& (0+255),c
  1617  001C4C  6A3E               	clrf	(??_readLightSensor+1)& (0+255),c
  1618  001C4E  503D               	movf	??_readLightSensor,w,c
  1619  001C50  5C42               	subwf	readLightSensor@H_max,w,c
  1620  001C52  5043               	movf	readLightSensor@H_max+1,w,c
  1621  001C54  0A80               	xorlw	128
  1622  001C56  6E3F               	movwf	(??_readLightSensor+2)& (0+255),c
  1623  001C58  503E               	movf	??_readLightSensor+1,w,c
  1624  001C5A  0A80               	xorlw	128
  1625  001C5C  583F               	subwfb	(??_readLightSensor+2)& (0+255),w,c
  1626  001C5E  B0D8               	btfsc	status,0,c
  1627  001C60  D003               	goto	l3162
  1628                           
  1629                           ;adc.c: 81: H_max = ADRESH;
  1630  001C62  CFC4 F042          	movff	4036,readLightSensor@H_max	;volatile
  1631  001C66  6A43               	clrf	readLightSensor@H_max+1,c
  1632  001C68                     l3162:
  1633                           
  1634                           ;adc.c: 82: }
  1635                           ;adc.c: 83: printf("%x", ADRESH);
  1636  001C68  0ECE               	movlw	low (STR_8+2)
  1637  001C6A  6E25               	movwf	printf@f,c
  1638  001C6C  0E10               	movlw	high (STR_8+2)
  1639  001C6E  6E26               	movwf	printf@f+1,c
  1640  001C70  CFC4 F027          	movff	4036,?_printf+2	;volatile
  1641  001C74  6A28               	clrf	?_printf+3,c
  1642  001C76  EC6B  F008         	call	_printf	;wreg free
  1643                           
  1644                           ;adc.c: 84: _delay((unsigned long)((5)*(8000000/4000.0)));
  1645  001C7A  0E0D               	movlw	13
  1646  001C7C  6E3D               	movwf	??_readLightSensor& (0+255),c
  1647  001C7E  0EFC               	movlw	252
  1648  001C80                     u3027:
  1649  001C80  2EE8               	decfsz	wreg,f,c
  1650  001C82  D7FE               	bra	u3027
  1651  001C84  2E3D               	decfsz	??_readLightSensor& (0+255),f,c
  1652  001C86  D7FC               	bra	u3027
  1653                           
  1654                           ;adc.c: 85: i++;
  1655  001C88  4A40               	infsnz	readLightSensor@i,f,c
  1656  001C8A  2A41               	incf	readLightSensor@i+1,f,c
  1657  001C8C                     l3168:
  1658  001C8C  BE41               	btfsc	readLightSensor@i+1,7,c
  1659  001C8E  D7D6               	goto	l3156
  1660  001C90  5041               	movf	readLightSensor@i+1,w,c
  1661  001C92  E104               	bnz	l3170
  1662  001C94  0E32               	movlw	50
  1663  001C96  5C40               	subwf	readLightSensor@i,w,c
  1664  001C98  A0D8               	btfss	status,0,c
  1665  001C9A  D7D0               	goto	l3156
  1666  001C9C                     l3170:
  1667                           
  1668                           ;adc.c: 86: }
  1669                           ;adc.c: 88: if(H_max >= 0x50){
  1670  001C9C  BE43               	btfsc	readLightSensor@H_max+1,7,c
  1671  001C9E  D00B               	goto	l3178
  1672  001CA0  5043               	movf	readLightSensor@H_max+1,w,c
  1673  001CA2  E104               	bnz	u2710
  1674  001CA4  0E50               	movlw	80
  1675  001CA6  5C42               	subwf	readLightSensor@H_max,w,c
  1676  001CA8  A0D8               	btfss	status,0,c
  1677  001CAA  D005               	goto	l3178
  1678  001CAC                     u2710:
  1679                           
  1680                           ;adc.c: 89: return 0;
  1681  001CAC  0E00               	movlw	0
  1682  001CAE  6E3C               	movwf	?_readLightSensor+1,c
  1683  001CB0  0E00               	movlw	0
  1684  001CB2  6E3B               	movwf	?_readLightSensor,c
  1685                           
  1686                           ;adc.c: 90: }
  1687  001CB4  0012               	return	
  1688  001CB6                     l3178:
  1689                           
  1690                           ;adc.c: 91: else{
  1691                           ;adc.c: 92: return 1;
  1692  001CB6  0E00               	movlw	0
  1693  001CB8  6E3C               	movwf	?_readLightSensor+1,c
  1694  001CBA  0E01               	movlw	1
  1695  001CBC  6E3B               	movwf	?_readLightSensor,c
  1696  001CBE  0012               	return	
  1697  001CC0                     __end_of_readLightSensor:
  1698                           	opt stack 0
  1699                           tblptru	equ	0xFF8
  1700                           postinc0	equ	0xFEE
  1701                           wreg	equ	0xFE8
  1702                           status	equ	0xFD8
  1703                           
  1704 ;; *************** function _move_can *****************
  1705 ;; Defined at:
  1706 ;;		line 79 in file "servo.c"
  1707 ;; Parameters:    Size  Location     Type
  1708 ;;  canType         2   29[COMRAM] int 
  1709 ;; Auto vars:     Size  Location     Type
  1710 ;;		None
  1711 ;; Return value:  Size  Location     Type
  1712 ;;                  1    wreg      void 
  1713 ;; Registers used:
  1714 ;;		wreg, status,2, status,0, cstack
  1715 ;; Tracked objects:
  1716 ;;		On entry : 0/0
  1717 ;;		On exit  : 0/0
  1718 ;;		Unchanged: 0/0
  1719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1720 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1723 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1724 ;;Total ram usage:        2 bytes
  1725 ;; Hardware stack levels used:    1
  1726 ;; Hardware stack levels required when called:    5
  1727 ;; This function calls:
  1728 ;;		_main_servo_control
  1729 ;;		_side_servo_control
  1730 ;; This function is called by:
  1731 ;;		_sort
  1732 ;; This function uses a non-reentrant model
  1733 ;;
  1734                           
  1735                           	psect	text6
  1736  0017F0                     __ptext6:
  1737                           	opt stack 0
  1738  0017F0                     _move_can:
  1739                           	opt stack 24
  1740                           
  1741                           ;servo.c: 80: if(canType == 1){
  1742                           
  1743                           ;incstack = 0
  1744  0017F0  041E               	decf	move_can@canType,w,c
  1745  0017F2  101F               	iorwf	move_can@canType+1,w,c
  1746  0017F4  A4D8               	btfss	status,2,c
  1747  0017F6  D019               	goto	l3212
  1748                           
  1749                           ;servo.c: 81: side_servo_control(1);
  1750  0017F8  0E00               	movlw	0
  1751  0017FA  6E1A               	movwf	side_servo_control@dir+1,c
  1752  0017FC  0E01               	movlw	1
  1753  0017FE  6E19               	movwf	side_servo_control@dir,c
  1754  001800  EC6A  F00C         	call	_side_servo_control	;wreg free
  1755                           
  1756                           ;servo.c: 82: main_servo_control(1);
  1757  001804  0E00               	movlw	0
  1758  001806  6E1A               	movwf	main_servo_control@dir+1,c
  1759  001808  0E01               	movlw	1
  1760  00180A  6E19               	movwf	main_servo_control@dir,c
  1761  00180C  EC83  F00B         	call	_main_servo_control	;wreg free
  1762                           
  1763                           ;servo.c: 83: main_servo_control(0);
  1764  001810  0E00               	movlw	0
  1765  001812  6E1A               	movwf	main_servo_control@dir+1,c
  1766  001814  0E00               	movlw	0
  1767  001816  6E19               	movwf	main_servo_control@dir,c
  1768  001818  EC83  F00B         	call	_main_servo_control	;wreg free
  1769                           
  1770                           ;servo.c: 84: side_servo_control(0);
  1771  00181C  0E00               	movlw	0
  1772  00181E  6E1A               	movwf	side_servo_control@dir+1,c
  1773  001820  0E00               	movlw	0
  1774  001822  6E19               	movwf	side_servo_control@dir,c
  1775  001824  EC6A  F00C         	call	_side_servo_control	;wreg free
  1776                           
  1777                           ;servo.c: 85: }
  1778  001828  0012               	return	
  1779  00182A                     l3212:
  1780                           
  1781                           ;servo.c: 86: else if(canType == 2){
  1782  00182A  0E02               	movlw	2
  1783  00182C  181E               	xorwf	move_can@canType,w,c
  1784  00182E  101F               	iorwf	move_can@canType+1,w,c
  1785  001830  A4D8               	btfss	status,2,c
  1786  001832  D019               	goto	l3216
  1787                           
  1788                           ;servo.c: 87: side_servo_control(2);
  1789  001834  0E00               	movlw	0
  1790  001836  6E1A               	movwf	side_servo_control@dir+1,c
  1791  001838  0E02               	movlw	2
  1792  00183A  6E19               	movwf	side_servo_control@dir,c
  1793  00183C  EC6A  F00C         	call	_side_servo_control	;wreg free
  1794                           
  1795                           ;servo.c: 88: main_servo_control(1);
  1796  001840  0E00               	movlw	0
  1797  001842  6E1A               	movwf	main_servo_control@dir+1,c
  1798  001844  0E01               	movlw	1
  1799  001846  6E19               	movwf	main_servo_control@dir,c
  1800  001848  EC83  F00B         	call	_main_servo_control	;wreg free
  1801                           
  1802                           ;servo.c: 89: main_servo_control(0);
  1803  00184C  0E00               	movlw	0
  1804  00184E  6E1A               	movwf	main_servo_control@dir+1,c
  1805  001850  0E00               	movlw	0
  1806  001852  6E19               	movwf	main_servo_control@dir,c
  1807  001854  EC83  F00B         	call	_main_servo_control	;wreg free
  1808                           
  1809                           ;servo.c: 90: side_servo_control(0);
  1810  001858  0E00               	movlw	0
  1811  00185A  6E1A               	movwf	side_servo_control@dir+1,c
  1812  00185C  0E00               	movlw	0
  1813  00185E  6E19               	movwf	side_servo_control@dir,c
  1814  001860  EC6A  F00C         	call	_side_servo_control	;wreg free
  1815                           
  1816                           ;servo.c: 92: }
  1817  001864  0012               	return	
  1818  001866                     l3216:
  1819                           
  1820                           ;servo.c: 93: else if (canType == 3){
  1821  001866  0E03               	movlw	3
  1822  001868  181E               	xorwf	move_can@canType,w,c
  1823  00186A  101F               	iorwf	move_can@canType+1,w,c
  1824  00186C  A4D8               	btfss	status,2,c
  1825  00186E  D019               	goto	l3220
  1826                           
  1827                           ;servo.c: 94: main_servo_control(2);
  1828  001870  0E00               	movlw	0
  1829  001872  6E1A               	movwf	main_servo_control@dir+1,c
  1830  001874  0E02               	movlw	2
  1831  001876  6E19               	movwf	main_servo_control@dir,c
  1832  001878  EC83  F00B         	call	_main_servo_control	;wreg free
  1833                           
  1834                           ;servo.c: 95: side_servo_control(2);
  1835  00187C  0E00               	movlw	0
  1836  00187E  6E1A               	movwf	side_servo_control@dir+1,c
  1837  001880  0E02               	movlw	2
  1838  001882  6E19               	movwf	side_servo_control@dir,c
  1839  001884  EC6A  F00C         	call	_side_servo_control	;wreg free
  1840                           
  1841                           ;servo.c: 96: main_servo_control(0);
  1842  001888  0E00               	movlw	0
  1843  00188A  6E1A               	movwf	main_servo_control@dir+1,c
  1844  00188C  0E00               	movlw	0
  1845  00188E  6E19               	movwf	main_servo_control@dir,c
  1846  001890  EC83  F00B         	call	_main_servo_control	;wreg free
  1847                           
  1848                           ;servo.c: 97: side_servo_control(0);
  1849  001894  0E00               	movlw	0
  1850  001896  6E1A               	movwf	side_servo_control@dir+1,c
  1851  001898  0E00               	movlw	0
  1852  00189A  6E19               	movwf	side_servo_control@dir,c
  1853  00189C  EC6A  F00C         	call	_side_servo_control	;wreg free
  1854                           
  1855                           ;servo.c: 98: }
  1856  0018A0  0012               	return	
  1857  0018A2                     l3220:
  1858                           
  1859                           ;servo.c: 99: else{
  1860                           ;servo.c: 100: side_servo_control(1);
  1861  0018A2  0E00               	movlw	0
  1862  0018A4  6E1A               	movwf	side_servo_control@dir+1,c
  1863  0018A6  0E01               	movlw	1
  1864  0018A8  6E19               	movwf	side_servo_control@dir,c
  1865  0018AA  EC6A  F00C         	call	_side_servo_control	;wreg free
  1866                           
  1867                           ;servo.c: 101: main_servo_control(2);
  1868  0018AE  0E00               	movlw	0
  1869  0018B0  6E1A               	movwf	main_servo_control@dir+1,c
  1870  0018B2  0E02               	movlw	2
  1871  0018B4  6E19               	movwf	main_servo_control@dir,c
  1872  0018B6  EC83  F00B         	call	_main_servo_control	;wreg free
  1873                           
  1874                           ;servo.c: 102: main_servo_control(0);
  1875  0018BA  0E00               	movlw	0
  1876  0018BC  6E1A               	movwf	main_servo_control@dir+1,c
  1877  0018BE  0E00               	movlw	0
  1878  0018C0  6E19               	movwf	main_servo_control@dir,c
  1879  0018C2  EC83  F00B         	call	_main_servo_control	;wreg free
  1880                           
  1881                           ;servo.c: 103: side_servo_control(0);
  1882  0018C6  0E00               	movlw	0
  1883  0018C8  6E1A               	movwf	side_servo_control@dir+1,c
  1884  0018CA  0E00               	movlw	0
  1885  0018CC  6E19               	movwf	side_servo_control@dir,c
  1886  0018CE  EC6A  F00C         	call	_side_servo_control	;wreg free
  1887  0018D2  0012               	return	
  1888  0018D4                     __end_of_move_can:
  1889                           	opt stack 0
  1890                           tblptru	equ	0xFF8
  1891                           postinc0	equ	0xFEE
  1892                           wreg	equ	0xFE8
  1893                           status	equ	0xFD8
  1894                           
  1895 ;; *************** function _get_time *****************
  1896 ;; Defined at:
  1897 ;;		line 39 in file "time.c"
  1898 ;; Parameters:    Size  Location     Type
  1899 ;;  datime          2   27[COMRAM] PTR unsigned char 
  1900 ;;		 -> end_time(7), start_time(7), 
  1901 ;; Auto vars:     Size  Location     Type
  1902 ;;  i               2   30[COMRAM] int 
  1903 ;; Return value:  Size  Location     Type
  1904 ;;                  1    wreg      void 
  1905 ;; Registers used:
  1906 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1907 ;; Tracked objects:
  1908 ;;		On entry : 0/0
  1909 ;;		On exit  : 0/0
  1910 ;;		Unchanged: 0/0
  1911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1912 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1913 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1914 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1915 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1916 ;;Total ram usage:        5 bytes
  1917 ;; Hardware stack levels used:    1
  1918 ;; Hardware stack levels required when called:    6
  1919 ;; This function calls:
  1920 ;;		_I2C_Master_Read
  1921 ;;		_I2C_Master_Start
  1922 ;;		_I2C_Master_Stop
  1923 ;;		_I2C_Master_Write
  1924 ;; This function is called by:
  1925 ;;		_sort
  1926 ;; This function uses a non-reentrant model
  1927 ;;
  1928                           
  1929                           	psect	text7
  1930  001A8A                     __ptext7:
  1931                           	opt stack 0
  1932  001A8A                     _get_time:
  1933                           	opt stack 23
  1934                           
  1935                           ;time.c: 40: I2C_Master_Start();
  1936                           
  1937                           ;incstack = 0
  1938  001A8A  EC87  F011         	call	_I2C_Master_Start	;wreg free
  1939                           
  1940                           ;time.c: 41: I2C_Master_Write(0b11010000);
  1941  001A8E  0E00               	movlw	0
  1942  001A90  6E1B               	movwf	I2C_Master_Write@d+1,c
  1943  001A92  0ED0               	movlw	208
  1944  001A94  6E1A               	movwf	I2C_Master_Write@d,c
  1945  001A96  EC79  F011         	call	_I2C_Master_Write	;wreg free
  1946                           
  1947                           ;time.c: 42: I2C_Master_Write(0x00);
  1948  001A9A  0E00               	movlw	0
  1949  001A9C  6E1B               	movwf	I2C_Master_Write@d+1,c
  1950  001A9E  0E00               	movlw	0
  1951  001AA0  6E1A               	movwf	I2C_Master_Write@d,c
  1952  001AA2  EC79  F011         	call	_I2C_Master_Write	;wreg free
  1953                           
  1954                           ;time.c: 43: I2C_Master_Stop();
  1955  001AA6  EC83  F011         	call	_I2C_Master_Stop	;wreg free
  1956                           
  1957                           ;time.c: 46: I2C_Master_Start();
  1958  001AAA  EC87  F011         	call	_I2C_Master_Start	;wreg free
  1959                           
  1960                           ;time.c: 47: I2C_Master_Write(0b11010001);
  1961  001AAE  0E00               	movlw	0
  1962  001AB0  6E1B               	movwf	I2C_Master_Write@d+1,c
  1963  001AB2  0ED1               	movlw	209
  1964  001AB4  6E1A               	movwf	I2C_Master_Write@d,c
  1965  001AB6  EC79  F011         	call	_I2C_Master_Write	;wreg free
  1966                           
  1967                           ;time.c: 48: for(int i = 0; i < 6; i++){
  1968  001ABA  0E00               	movlw	0
  1969  001ABC  6E20               	movwf	get_time@i+1,c
  1970  001ABE  0E00               	movlw	0
  1971  001AC0  6E1F               	movwf	get_time@i,c
  1972  001AC2                     l3186:
  1973  001AC2  BE20               	btfsc	get_time@i+1,7,c
  1974  001AC4  D006               	goto	l3190
  1975  001AC6  5020               	movf	get_time@i+1,w,c
  1976  001AC8  E12D               	bnz	l3198
  1977  001ACA  0E06               	movlw	6
  1978  001ACC  5C1F               	subwf	get_time@i,w,c
  1979  001ACE  B0D8               	btfsc	status,0,c
  1980  001AD0  D029               	goto	l3198
  1981  001AD2                     l3190:
  1982                           
  1983                           ;time.c: 49: datime[i] = I2C_Master_Read(1);
  1984  001AD2  501F               	movf	get_time@i,w,c
  1985  001AD4  241C               	addwf	get_time@datime,w,c
  1986  001AD6  6ED9               	movwf	fsr2l,c
  1987  001AD8  5020               	movf	get_time@i+1,w,c
  1988  001ADA  201D               	addwfc	get_time@datime+1,w,c
  1989  001ADC  6EDA               	movwf	fsr2h,c
  1990  001ADE  0E01               	movlw	1
  1991  001AE0  ECE8  F010         	call	_I2C_Master_Read
  1992  001AE4  6EDF               	movwf	indf2,c
  1993                           
  1994                           ;time.c: 50: datime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  1995  001AE6  501F               	movf	get_time@i,w,c
  1996  001AE8  241C               	addwf	get_time@datime,w,c
  1997  001AEA  6ED9               	movwf	fsr2l,c
  1998  001AEC  5020               	movf	get_time@i+1,w,c
  1999  001AEE  201D               	addwfc	get_time@datime+1,w,c
  2000  001AF0  6EDA               	movwf	fsr2h,c
  2001  001AF2  0E44               	movlw	low _time
  2002  001AF4  241F               	addwf	get_time@i,w,c
  2003  001AF6  6EE1               	movwf	fsr1l,c
  2004  001AF8  0E00               	movlw	high _time
  2005  001AFA  2020               	addwfc	get_time@i+1,w,c
  2006  001AFC  6EE2               	movwf	fsr1h,c
  2007  001AFE  50E7               	movf	indf1,w,c
  2008  001B00  6E1E               	movwf	??_get_time& (0+255),c
  2009  001B02  381E               	swapf	??_get_time,w,c
  2010  001B04  0B0F               	andlw	15
  2011  001B06  0B0F               	andlw	15
  2012  001B08  0D0A               	mullw	10
  2013  001B0A  0E44               	movlw	low _time
  2014  001B0C  241F               	addwf	get_time@i,w,c
  2015  001B0E  6EE1               	movwf	fsr1l,c
  2016  001B10  0E00               	movlw	high _time
  2017  001B12  2020               	addwfc	get_time@i+1,w,c
  2018  001B14  6EE2               	movwf	fsr1h,c
  2019  001B16  50E7               	movf	indf1,w,c
  2020  001B18  0B0F               	andlw	15
  2021  001B1A  24F3               	addwf	prodl,w,c
  2022  001B1C  6EDF               	movwf	indf2,c
  2023  001B1E  4A1F               	infsnz	get_time@i,f,c
  2024  001B20  2A20               	incf	get_time@i+1,f,c
  2025  001B22  D7CF               	goto	l3186
  2026  001B24                     l3198:
  2027                           
  2028                           ;time.c: 52: }
  2029                           ;time.c: 53: datime[6] = I2C_Master_Read(0);
  2030  001B24  EE20 F006          	lfsr	2,6
  2031  001B28  501C               	movf	get_time@datime,w,c
  2032  001B2A  26D9               	addwf	fsr2l,f,c
  2033  001B2C  501D               	movf	get_time@datime+1,w,c
  2034  001B2E  22DA               	addwfc	fsr2h,f,c
  2035  001B30  0E00               	movlw	0
  2036  001B32  ECE8  F010         	call	_I2C_Master_Read
  2037  001B36  6EDF               	movwf	indf2,c
  2038                           
  2039                           ;time.c: 54: I2C_Master_Stop();
  2040  001B38  EC83  F011         	call	_I2C_Master_Stop	;wreg free
  2041                           
  2042                           ;time.c: 55: I2C_Master_Write(0b11010000);
  2043  001B3C  0E00               	movlw	0
  2044  001B3E  6E1B               	movwf	I2C_Master_Write@d+1,c
  2045  001B40  0ED0               	movlw	208
  2046  001B42  6E1A               	movwf	I2C_Master_Write@d,c
  2047  001B44  EC79  F011         	call	_I2C_Master_Write	;wreg free
  2048                           
  2049                           ;time.c: 56: I2C_Master_Write(0x00);
  2050  001B48  0E00               	movlw	0
  2051  001B4A  6E1B               	movwf	I2C_Master_Write@d+1,c
  2052  001B4C  0E00               	movlw	0
  2053  001B4E  6E1A               	movwf	I2C_Master_Write@d,c
  2054  001B50  EC79  F011         	call	_I2C_Master_Write	;wreg free
  2055                           
  2056                           ;time.c: 57: I2C_Master_Stop();
  2057  001B54  EC83  F011         	call	_I2C_Master_Stop	;wreg free
  2058  001B58  0012               	return		;funcret
  2059  001B5A                     __end_of_get_time:
  2060                           	opt stack 0
  2061                           tblptru	equ	0xFF8
  2062                           prodl	equ	0xFF3
  2063                           postinc0	equ	0xFEE
  2064                           wreg	equ	0xFE8
  2065                           indf1	equ	0xFE7
  2066                           fsr1h	equ	0xFE2
  2067                           fsr1l	equ	0xFE1
  2068                           indf2	equ	0xFDF
  2069                           fsr2h	equ	0xFDA
  2070                           fsr2l	equ	0xFD9
  2071                           status	equ	0xFD8
  2072                           
  2073 ;; *************** function _gate *****************
  2074 ;; Defined at:
  2075 ;;		line 107 in file "servo.c"
  2076 ;; Parameters:    Size  Location     Type
  2077 ;;		None
  2078 ;; Auto vars:     Size  Location     Type
  2079 ;;  i               2   25[COMRAM] int 
  2080 ;; Return value:  Size  Location     Type
  2081 ;;                  1    wreg      void 
  2082 ;; Registers used:
  2083 ;;		wreg, status,2, status,0
  2084 ;; Tracked objects:
  2085 ;;		On entry : 0/0
  2086 ;;		On exit  : 0/0
  2087 ;;		Unchanged: 0/0
  2088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2090 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2091 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2092 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2093 ;;Total ram usage:        3 bytes
  2094 ;; Hardware stack levels used:    1
  2095 ;; Hardware stack levels required when called:    4
  2096 ;; This function calls:
  2097 ;;		Nothing
  2098 ;; This function is called by:
  2099 ;;		_sort
  2100 ;; This function uses a non-reentrant model
  2101 ;;
  2102                           
  2103                           	psect	text8
  2104  001E4A                     __ptext8:
  2105                           	opt stack 0
  2106  001E4A                     _gate:
  2107                           	opt stack 25
  2108                           
  2109                           ;servo.c: 108: int i;
  2110                           ;servo.c: 109: for (i = 0; i < 20; i++) {
  2111                           
  2112                           ;incstack = 0
  2113  001E4A  0E00               	movlw	0
  2114  001E4C  6E1B               	movwf	gate@i+1,c
  2115  001E4E  0E00               	movlw	0
  2116  001E50  6E1A               	movwf	gate@i,c
  2117  001E52                     l3242:
  2118  001E52  BE1B               	btfsc	gate@i+1,7,c
  2119  001E54  D006               	goto	l282
  2120  001E56  501B               	movf	gate@i+1,w,c
  2121  001E58  E12D               	bnz	l286
  2122  001E5A  0E14               	movlw	20
  2123  001E5C  5C1A               	subwf	gate@i,w,c
  2124  001E5E  B0D8               	btfsc	status,0,c
  2125  001E60  0012               	return	
  2126  001E62                     l282:
  2127                           
  2128                           ;servo.c: 110: if(PORTBbits.RB3 == 1){
  2129  001E62  A681               	btfss	3969,3,c	;volatile
  2130  001E64  D013               	goto	l284
  2131                           
  2132                           ;servo.c: 111: LATCbits.LATC2 = 1;
  2133  001E66  848B               	bsf	3979,2,c	;volatile
  2134                           
  2135                           ;servo.c: 112: _delay((unsigned long)((1.67)*(8000000/4000.0)));
  2136  001E68  0E05               	movlw	5
  2137  001E6A  6E19               	movwf	??_gate& (0+255),c
  2138  001E6C  0E55               	movlw	85
  2139  001E6E                     u3037:
  2140  001E6E  2EE8               	decfsz	wreg,f,c
  2141  001E70  D7FE               	bra	u3037
  2142  001E72  2E19               	decfsz	??_gate& (0+255),f,c
  2143  001E74  D7FC               	bra	u3037
  2144  001E76  F000               	nop	
  2145                           
  2146                           ;servo.c: 113: LATCbits.LATC2 = 0;
  2147  001E78  948B               	bcf	3979,2,c	;volatile
  2148                           
  2149                           ;servo.c: 114: _delay((unsigned long)((18.33)*(8000000/4000.0)));
  2150  001E7A  0E30               	movlw	48
  2151  001E7C  6E19               	movwf	??_gate& (0+255),c
  2152  001E7E  0E9B               	movlw	155
  2153  001E80                     u3047:
  2154  001E80  2EE8               	decfsz	wreg,f,c
  2155  001E82  D7FE               	bra	u3047
  2156  001E84  2E19               	decfsz	??_gate& (0+255),f,c
  2157  001E86  D7FC               	bra	u3047
  2158  001E88  F000               	nop	
  2159                           
  2160                           ;servo.c: 116: }
  2161  001E8A  D011               	goto	l3256
  2162  001E8C                     l284:
  2163                           
  2164                           ;servo.c: 117: else{
  2165                           ;servo.c: 118: LATCbits.LATC2 = 1;
  2166  001E8C  848B               	bsf	3979,2,c	;volatile
  2167                           
  2168                           ;servo.c: 119: _delay((unsigned long)((1.68)*(8000000/4000.0)));
  2169  001E8E  0E05               	movlw	5
  2170  001E90  6E19               	movwf	??_gate& (0+255),c
  2171  001E92  0E5C               	movlw	92
  2172  001E94                     u3057:
  2173  001E94  2EE8               	decfsz	wreg,f,c
  2174  001E96  D7FE               	bra	u3057
  2175  001E98  2E19               	decfsz	??_gate& (0+255),f,c
  2176  001E9A  D7FC               	bra	u3057
  2177                           
  2178                           ;servo.c: 121: LATCbits.LATC2 = 0;
  2179  001E9C  948B               	bcf	3979,2,c	;volatile
  2180                           
  2181                           ;servo.c: 122: _delay((unsigned long)((18.32)*(8000000/4000.0)));
  2182  001E9E  0E30               	movlw	48
  2183  001EA0  6E19               	movwf	??_gate& (0+255),c
  2184  001EA2  0E94               	movlw	148
  2185  001EA4                     u3067:
  2186  001EA4  2EE8               	decfsz	wreg,f,c
  2187  001EA6  D7FE               	bra	u3067
  2188  001EA8  2E19               	decfsz	??_gate& (0+255),f,c
  2189  001EAA  D7FC               	bra	u3067
  2190  001EAC  D000               	nop2	
  2191  001EAE                     l3256:
  2192  001EAE  4A1A               	infsnz	gate@i,f,c
  2193  001EB0  2A1B               	incf	gate@i+1,f,c
  2194  001EB2  D7CF               	goto	l3242
  2195  001EB4                     l286:
  2196  001EB4  0012               	return		;funcret
  2197  001EB6                     __end_of_gate:
  2198                           	opt stack 0
  2199                           tblptru	equ	0xFF8
  2200                           prodl	equ	0xFF3
  2201                           postinc0	equ	0xFEE
  2202                           wreg	equ	0xFE8
  2203                           indf1	equ	0xFE7
  2204                           fsr1h	equ	0xFE2
  2205                           fsr1l	equ	0xFE1
  2206                           indf2	equ	0xFDF
  2207                           fsr2h	equ	0xFDA
  2208                           fsr2l	equ	0xFD9
  2209                           status	equ	0xFD8
  2210                           
  2211 ;; *************** function _initPIC *****************
  2212 ;; Defined at:
  2213 ;;		line 33 in file "initPic.c"
  2214 ;; Parameters:    Size  Location     Type
  2215 ;;		None
  2216 ;; Auto vars:     Size  Location     Type
  2217 ;;		None
  2218 ;; Return value:  Size  Location     Type
  2219 ;;                  2   82[None  ] int 
  2220 ;; Registers used:
  2221 ;;		wreg, status,2, status,0, cstack
  2222 ;; Tracked objects:
  2223 ;;		On entry : 0/0
  2224 ;;		On exit  : 0/0
  2225 ;;		Unchanged: 0/0
  2226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2230 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2231 ;;Total ram usage:        0 bytes
  2232 ;; Hardware stack levels used:    1
  2233 ;; Hardware stack levels required when called:    7
  2234 ;; This function calls:
  2235 ;;		_I2C_Master_Init
  2236 ;;		_I2C_Master_Start
  2237 ;;		_I2C_Master_Stop
  2238 ;;		_I2C_Master_Write
  2239 ;;		_initLCD
  2240 ;;		_main_servo_control
  2241 ;;		_side_servo_control
  2242 ;; This function is called by:
  2243 ;;		_main
  2244 ;; This function uses a non-reentrant model
  2245 ;;
  2246                           
  2247                           	psect	text9
  2248  001CC0                     __ptext9:
  2249                           	opt stack 0
  2250  001CC0                     _initPIC:
  2251                           	opt stack 23
  2252                           
  2253                           ;initPic.c: 34: TRISA = 0b11110011;
  2254                           
  2255                           ;incstack = 0
  2256  001CC0  0EF3               	movlw	243
  2257  001CC2  6E92               	movwf	3986,c	;volatile
  2258                           
  2259                           ;initPic.c: 35: TRISC = 0x11100110;
  2260  001CC4  0E10               	movlw	16
  2261  001CC6  6E94               	movwf	3988,c	;volatile
  2262                           
  2263                           ;initPic.c: 37: TRISC = 0x11100100;
  2264  001CC8  0E00               	movlw	0
  2265  001CCA  6E94               	movwf	3988,c	;volatile
  2266                           
  2267                           ;initPic.c: 38: TRISD = 0x00;
  2268  001CCC  0E00               	movlw	0
  2269  001CCE  6E95               	movwf	3989,c	;volatile
  2270                           
  2271                           ;initPic.c: 39: TRISB = 0b11111011;
  2272  001CD0  0EFB               	movlw	251
  2273  001CD2  6E93               	movwf	3987,c	;volatile
  2274                           
  2275                           ;initPic.c: 43: LATA = 0x00;
  2276  001CD4  0E00               	movlw	0
  2277  001CD6  6E89               	movwf	3977,c	;volatile
  2278                           
  2279                           ;initPic.c: 44: LATB = 0x00;
  2280  001CD8  0E00               	movlw	0
  2281  001CDA  6E8A               	movwf	3978,c	;volatile
  2282                           
  2283                           ;initPic.c: 45: LATC = 0x00;
  2284  001CDC  0E00               	movlw	0
  2285  001CDE  6E8B               	movwf	3979,c	;volatile
  2286                           
  2287                           ;initPic.c: 46: LATD = 0x00;
  2288  001CE0  0E00               	movlw	0
  2289  001CE2  6E8C               	movwf	3980,c	;volatile
  2290                           
  2291                           ;initPic.c: 47: LATE = 0x00;
  2292  001CE4  0E00               	movlw	0
  2293  001CE6  6E8D               	movwf	3981,c	;volatile
  2294                           
  2295                           ;initPic.c: 49: ADCON0 = 0x00;
  2296  001CE8  0E00               	movlw	0
  2297  001CEA  6EC2               	movwf	4034,c	;volatile
  2298                           
  2299                           ;initPic.c: 50: ADCON1 = 0x09;
  2300  001CEC  0E09               	movlw	9
  2301  001CEE  6EC1               	movwf	4033,c	;volatile
  2302                           
  2303                           ;initPic.c: 53: ADCON2 = 0b00110001;
  2304  001CF0  0E31               	movlw	49
  2305  001CF2  6EC0               	movwf	4032,c	;volatile
  2306                           
  2307                           ;initPic.c: 54: INT1IE = 1;
  2308  001CF4  86F0               	bsf	intcon3,3,c	;volatile
  2309                           
  2310                           ;initPic.c: 56: initLCD();
  2311  001CF6  EC89  F010         	call	_initLCD	;wreg free
  2312                           
  2313                           ;initPic.c: 58: I2C_Master_Init(10000);
  2314  001CFA  0E10               	movlw	16
  2315  001CFC  6E26               	movwf	I2C_Master_Init@c,c
  2316  001CFE  0E27               	movlw	39
  2317  001D00  6E27               	movwf	I2C_Master_Init@c+1,c
  2318  001D02  0E00               	movlw	0
  2319  001D04  6E28               	movwf	I2C_Master_Init@c+2,c
  2320  001D06  0E00               	movlw	0
  2321  001D08  6E29               	movwf	I2C_Master_Init@c+3,c
  2322  001D0A  EC8D  F00F         	call	_I2C_Master_Init	;wreg free
  2323                           
  2324                           ;initPic.c: 59: I2C_Master_Start();
  2325  001D0E  EC87  F011         	call	_I2C_Master_Start	;wreg free
  2326                           
  2327                           ;initPic.c: 60: I2C_Master_Write(0b11010000);
  2328  001D12  0E00               	movlw	0
  2329  001D14  6E1B               	movwf	I2C_Master_Write@d+1,c
  2330  001D16  0ED0               	movlw	208
  2331  001D18  6E1A               	movwf	I2C_Master_Write@d,c
  2332  001D1A  EC79  F011         	call	_I2C_Master_Write	;wreg free
  2333                           
  2334                           ;initPic.c: 61: I2C_Master_Write(0x00);
  2335  001D1E  0E00               	movlw	0
  2336  001D20  6E1B               	movwf	I2C_Master_Write@d+1,c
  2337  001D22  0E00               	movlw	0
  2338  001D24  6E1A               	movwf	I2C_Master_Write@d,c
  2339  001D26  EC79  F011         	call	_I2C_Master_Write	;wreg free
  2340                           
  2341                           ;initPic.c: 62: I2C_Master_Stop();
  2342  001D2A  EC83  F011         	call	_I2C_Master_Stop	;wreg free
  2343                           
  2344                           ;initPic.c: 63: main_servo_control(0);
  2345  001D2E  0E00               	movlw	0
  2346  001D30  6E1A               	movwf	main_servo_control@dir+1,c
  2347  001D32  0E00               	movlw	0
  2348  001D34  6E19               	movwf	main_servo_control@dir,c
  2349  001D36  EC83  F00B         	call	_main_servo_control	;wreg free
  2350                           
  2351                           ;initPic.c: 64: side_servo_control(0);
  2352  001D3A  0E00               	movlw	0
  2353  001D3C  6E1A               	movwf	side_servo_control@dir+1,c
  2354  001D3E  0E00               	movlw	0
  2355  001D40  6E19               	movwf	side_servo_control@dir,c
  2356  001D42  EC6A  F00C         	call	_side_servo_control	;wreg free
  2357                           
  2358                           ;initPic.c: 67: (INTCONbits.GIE = 1);
  2359  001D46  8EF2               	bsf	intcon,7,c	;volatile
  2360  001D48  0012               	return		;funcret
  2361  001D4A                     __end_of_initPIC:
  2362                           	opt stack 0
  2363                           tblptru	equ	0xFF8
  2364                           prodl	equ	0xFF3
  2365                           intcon	equ	0xFF2
  2366                           intcon3	equ	0xFF0
  2367                           postinc0	equ	0xFEE
  2368                           wreg	equ	0xFE8
  2369                           indf1	equ	0xFE7
  2370                           fsr1h	equ	0xFE2
  2371                           fsr1l	equ	0xFE1
  2372                           indf2	equ	0xFDF
  2373                           fsr2h	equ	0xFDA
  2374                           fsr2l	equ	0xFD9
  2375                           status	equ	0xFD8
  2376                           
  2377 ;; *************** function _side_servo_control *****************
  2378 ;; Defined at:
  2379 ;;		line 48 in file "servo.c"
  2380 ;; Parameters:    Size  Location     Type
  2381 ;;  dir             2   24[COMRAM] int 
  2382 ;; Auto vars:     Size  Location     Type
  2383 ;;  i               2   27[COMRAM] int 
  2384 ;; Return value:  Size  Location     Type
  2385 ;;                  1    wreg      void 
  2386 ;; Registers used:
  2387 ;;		wreg, status,2, status,0
  2388 ;; Tracked objects:
  2389 ;;		On entry : 0/0
  2390 ;;		On exit  : 0/0
  2391 ;;		Unchanged: 0/0
  2392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2393 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2394 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2395 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2396 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2397 ;;Total ram usage:        5 bytes
  2398 ;; Hardware stack levels used:    1
  2399 ;; Hardware stack levels required when called:    4
  2400 ;; This function calls:
  2401 ;;		Nothing
  2402 ;; This function is called by:
  2403 ;;		_move_can
  2404 ;;		_initPIC
  2405 ;; This function uses a non-reentrant model
  2406 ;;
  2407                           
  2408                           	psect	text10
  2409  0018D4                     __ptext10:
  2410                           	opt stack 0
  2411  0018D4                     _side_servo_control:
  2412                           	opt stack 24
  2413                           
  2414                           ;servo.c: 49: int i;
  2415                           ;servo.c: 50: if( dir == 0){
  2416                           
  2417                           ;incstack = 0
  2418  0018D4  5019               	movf	side_servo_control@dir,w,c
  2419  0018D6  101A               	iorwf	side_servo_control@dir+1,w,c
  2420  0018D8  A4D8               	btfss	status,2,c
  2421  0018DA  D026               	goto	l3052
  2422                           
  2423                           ;servo.c: 51: for (i = 0; i < 10; i++) {
  2424  0018DC  0E00               	movlw	0
  2425  0018DE  6E1D               	movwf	side_servo_control@i+1,c
  2426  0018E0  0E00               	movlw	0
  2427  0018E2  6E1C               	movwf	side_servo_control@i,c
  2428  0018E4  BE1D               	btfsc	side_servo_control@i+1,7,c
  2429  0018E6  D008               	goto	l260
  2430  0018E8  501D               	movf	side_servo_control@i+1,w,c
  2431  0018EA  E105               	bnz	u2520
  2432  0018EC  0E0A               	movlw	10
  2433  0018EE  5C1C               	subwf	side_servo_control@i,w,c
  2434  0018F0  B0D8               	btfsc	status,0,c
  2435  0018F2  0012               	return	
  2436  0018F4  D001               	goto	l260
  2437  0018F6                     u2520:
  2438  0018F6  0012               	return	
  2439  0018F8                     l260:
  2440                           
  2441                           ;servo.c: 52: LATAbits.LATA3 = 1;
  2442  0018F8  8689               	bsf	3977,3,c	;volatile
  2443                           
  2444                           ;servo.c: 53: _delay((unsigned long)((1)*(8000000/4000.0)));
  2445  0018FA  0E03               	movlw	3
  2446  0018FC  6E1B               	movwf	??_side_servo_control& (0+255),c
  2447  0018FE  0E98               	movlw	152
  2448  001900                     u3077:
  2449  001900  2EE8               	decfsz	wreg,f,c
  2450  001902  D7FE               	bra	u3077
  2451  001904  2E1B               	decfsz	??_side_servo_control& (0+255),f,c
  2452  001906  D7FC               	bra	u3077
  2453                           
  2454                           ;servo.c: 55: LATAbits.LATA3 = 0;
  2455  001908  9689               	bcf	3977,3,c	;volatile
  2456                           
  2457                           ;servo.c: 56: _delay((unsigned long)((19)*(8000000/4000.0)));
  2458  00190A  0E32               	movlw	50
  2459  00190C  6E1B               	movwf	??_side_servo_control& (0+255),c
  2460  00190E  0E58               	movlw	88
  2461  001910                     u3087:
  2462  001910  2EE8               	decfsz	wreg,f,c
  2463  001912  D7FE               	bra	u3087
  2464  001914  2E1B               	decfsz	??_side_servo_control& (0+255),f,c
  2465  001916  D7FC               	bra	u3087
  2466  001918  D000               	nop2	
  2467  00191A  4A1C               	infsnz	side_servo_control@i,f,c
  2468  00191C  2A1D               	incf	side_servo_control@i+1,f,c
  2469  00191E  BE1D               	btfsc	side_servo_control@i+1,7,c
  2470  001920  D7EB               	goto	l260
  2471  001922  501D               	movf	side_servo_control@i+1,w,c
  2472  001924  E147               	bnz	l270
  2473  001926  D7E2               	goto	L1
  2474  001928                     l3052:
  2475                           
  2476                           ;servo.c: 59: else if(dir == 1){
  2477  001928  0419               	decf	side_servo_control@dir,w,c
  2478  00192A  101A               	iorwf	side_servo_control@dir+1,w,c
  2479  00192C  A4D8               	btfss	status,2,c
  2480  00192E  D020               	goto	l3066
  2481                           
  2482                           ;servo.c: 60: for (i = 0; i < 10; i++) {
  2483  001930  0E00               	movlw	0
  2484  001932  6E1D               	movwf	side_servo_control@i+1,c
  2485  001934  0E00               	movlw	0
  2486  001936  6E1C               	movwf	side_servo_control@i,c
  2487  001938                     l3056:
  2488  001938  BE1D               	btfsc	side_servo_control@i+1,7,c
  2489  00193A  D006               	goto	l264
  2490  00193C  501D               	movf	side_servo_control@i+1,w,c
  2491  00193E  E13A               	bnz	l270
  2492  001940  0E0A               	movlw	10
  2493  001942  5C1C               	subwf	side_servo_control@i,w,c
  2494  001944  B0D8               	btfsc	status,0,c
  2495  001946  0012               	return	
  2496  001948                     l264:
  2497                           
  2498                           ;servo.c: 61: LATAbits.LATA3 = 1;
  2499  001948  8689               	bsf	3977,3,c	;volatile
  2500                           
  2501                           ;servo.c: 62: _delay((unsigned long)((2)*(8000000/4000.0)));
  2502  00194A  0E06               	movlw	6
  2503  00194C  6E1B               	movwf	??_side_servo_control& (0+255),c
  2504  00194E  0E30               	movlw	48
  2505  001950                     u3097:
  2506  001950  2EE8               	decfsz	wreg,f,c
  2507  001952  D7FE               	bra	u3097
  2508  001954  2E1B               	decfsz	??_side_servo_control& (0+255),f,c
  2509  001956  D7FC               	bra	u3097
  2510  001958  D000               	nop2	
  2511                           
  2512                           ;servo.c: 64: LATAbits.LATA3 = 0;
  2513  00195A  9689               	bcf	3977,3,c	;volatile
  2514                           
  2515                           ;servo.c: 65: _delay((unsigned long)((18)*(8000000/4000.0)));
  2516  00195C  0E2F               	movlw	47
  2517  00195E  6E1B               	movwf	??_side_servo_control& (0+255),c
  2518  001960  0EC0               	movlw	192
  2519  001962                     u3107:
  2520  001962  2EE8               	decfsz	wreg,f,c
  2521  001964  D7FE               	bra	u3107
  2522  001966  2E1B               	decfsz	??_side_servo_control& (0+255),f,c
  2523  001968  D7FC               	bra	u3107
  2524  00196A  4A1C               	infsnz	side_servo_control@i,f,c
  2525  00196C  2A1D               	incf	side_servo_control@i+1,f,c
  2526  00196E  D7E4               	goto	l3056
  2527  001970                     l3066:
  2528                           
  2529                           ;servo.c: 68: else if (dir == 2){
  2530  001970  0E02               	movlw	2
  2531  001972  1819               	xorwf	side_servo_control@dir,w,c
  2532  001974  101A               	iorwf	side_servo_control@dir+1,w,c
  2533  001976  A4D8               	btfss	status,2,c
  2534  001978  0012               	return	
  2535                           
  2536                           ;servo.c: 69: for (i = 0; i < 10; i++) {
  2537  00197A  0E00               	movlw	0
  2538  00197C  6E1D               	movwf	side_servo_control@i+1,c
  2539  00197E  0E00               	movlw	0
  2540  001980  6E1C               	movwf	side_servo_control@i,c
  2541  001982                     l3070:
  2542  001982  BE1D               	btfsc	side_servo_control@i+1,7,c
  2543  001984  D006               	goto	l268
  2544  001986  501D               	movf	side_servo_control@i+1,w,c
  2545  001988  E115               	bnz	l270
  2546  00198A  0E0A               	movlw	10
  2547  00198C  5C1C               	subwf	side_servo_control@i,w,c
  2548  00198E  B0D8               	btfsc	status,0,c
  2549  001990  0012               	return	
  2550  001992                     l268:
  2551                           
  2552                           ;servo.c: 70: LATAbits.LATA3 = 1;
  2553  001992  8689               	bsf	3977,3,c	;volatile
  2554                           
  2555                           ;servo.c: 71: _delay((unsigned long)((0.5)*(8000000/4000.0)));
  2556  001994  0EC8               	movlw	200
  2557  001996                     u3117:
  2558  001996  D000               	nop2	
  2559  001998  2EE8               	decfsz	wreg,f,c
  2560  00199A  D7FD               	bra	u3117
  2561                           
  2562                           ;servo.c: 73: LATAbits.LATA3 = 0;
  2563  00199C  9689               	bcf	3977,3,c	;volatile
  2564                           
  2565                           ;servo.c: 74: _delay((unsigned long)((19.5)*(8000000/4000.0)));
  2566  00199E  0E33               	movlw	51
  2567  0019A0  6E1B               	movwf	??_side_servo_control& (0+255),c
  2568  0019A2  0EA5               	movlw	165
  2569  0019A4                     u3127:
  2570  0019A4  2EE8               	decfsz	wreg,f,c
  2571  0019A6  D7FE               	bra	u3127
  2572  0019A8  2E1B               	decfsz	??_side_servo_control& (0+255),f,c
  2573  0019AA  D7FC               	bra	u3127
  2574  0019AC  F000               	nop	
  2575  0019AE  4A1C               	infsnz	side_servo_control@i,f,c
  2576  0019B0  2A1D               	incf	side_servo_control@i+1,f,c
  2577  0019B2  D7E7               	goto	l3070
  2578  0019B4                     l270:
  2579  0019B4  0012               	return		;funcret
  2580  0019B6                     __end_of_side_servo_control:
  2581                           	opt stack 0
  2582                           tblptru	equ	0xFF8
  2583                           prodl	equ	0xFF3
  2584                           intcon	equ	0xFF2
  2585                           intcon3	equ	0xFF0
  2586                           postinc0	equ	0xFEE
  2587                           wreg	equ	0xFE8
  2588                           indf1	equ	0xFE7
  2589                           fsr1h	equ	0xFE2
  2590                           fsr1l	equ	0xFE1
  2591                           indf2	equ	0xFDF
  2592                           fsr2h	equ	0xFDA
  2593                           fsr2l	equ	0xFD9
  2594                           status	equ	0xFD8
  2595                           
  2596 ;; *************** function _main_servo_control *****************
  2597 ;; Defined at:
  2598 ;;		line 17 in file "servo.c"
  2599 ;; Parameters:    Size  Location     Type
  2600 ;;  dir             2   24[COMRAM] int 
  2601 ;; Auto vars:     Size  Location     Type
  2602 ;;  i               2   27[COMRAM] int 
  2603 ;; Return value:  Size  Location     Type
  2604 ;;                  1    wreg      void 
  2605 ;; Registers used:
  2606 ;;		wreg, status,2, status,0
  2607 ;; Tracked objects:
  2608 ;;		On entry : 0/0
  2609 ;;		On exit  : 0/0
  2610 ;;		Unchanged: 0/0
  2611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2612 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2613 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2614 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2615 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2616 ;;Total ram usage:        5 bytes
  2617 ;; Hardware stack levels used:    1
  2618 ;; Hardware stack levels required when called:    4
  2619 ;; This function calls:
  2620 ;;		Nothing
  2621 ;; This function is called by:
  2622 ;;		_sort
  2623 ;;		_move_can
  2624 ;;		_initPIC
  2625 ;; This function uses a non-reentrant model
  2626 ;;
  2627                           
  2628                           	psect	text11
  2629  001706                     __ptext11:
  2630                           	opt stack 0
  2631  001706                     _main_servo_control:
  2632                           	opt stack 24
  2633                           
  2634                           ;servo.c: 18: int i;
  2635                           ;servo.c: 19: if( dir == 0){
  2636                           
  2637                           ;incstack = 0
  2638  001706  5019               	movf	main_servo_control@dir,w,c
  2639  001708  101A               	iorwf	main_servo_control@dir+1,w,c
  2640  00170A  A4D8               	btfss	status,2,c
  2641  00170C  D026               	goto	l3010
  2642                           
  2643                           ;servo.c: 20: for (i = 0; i < 10; i++) {
  2644  00170E  0E00               	movlw	0
  2645  001710  6E1D               	movwf	main_servo_control@i+1,c
  2646  001712  0E00               	movlw	0
  2647  001714  6E1C               	movwf	main_servo_control@i,c
  2648  001716  BE1D               	btfsc	main_servo_control@i+1,7,c
  2649  001718  D008               	goto	l246
  2650  00171A  501D               	movf	main_servo_control@i+1,w,c
  2651  00171C  E105               	bnz	u2430
  2652  00171E  0E0A               	movlw	10
  2653  001720  5C1C               	subwf	main_servo_control@i,w,c
  2654  001722  B0D8               	btfsc	status,0,c
  2655  001724  0012               	return	
  2656  001726  D001               	goto	l246
  2657  001728                     u2430:
  2658  001728  0012               	return	
  2659  00172A                     l246:
  2660                           
  2661                           ;servo.c: 21: LATAbits.LATA2 = 1;
  2662  00172A  8489               	bsf	3977,2,c	;volatile
  2663                           
  2664                           ;servo.c: 22: _delay((unsigned long)((1)*(8000000/4000.0)));
  2665  00172C  0E03               	movlw	3
  2666  00172E  6E1B               	movwf	??_main_servo_control& (0+255),c
  2667  001730  0E98               	movlw	152
  2668  001732                     u3137:
  2669  001732  2EE8               	decfsz	wreg,f,c
  2670  001734  D7FE               	bra	u3137
  2671  001736  2E1B               	decfsz	??_main_servo_control& (0+255),f,c
  2672  001738  D7FC               	bra	u3137
  2673                           
  2674                           ;servo.c: 24: LATAbits.LATA2 = 0;
  2675  00173A  9489               	bcf	3977,2,c	;volatile
  2676                           
  2677                           ;servo.c: 25: _delay((unsigned long)((19)*(8000000/4000.0)));
  2678  00173C  0E32               	movlw	50
  2679  00173E  6E1B               	movwf	??_main_servo_control& (0+255),c
  2680  001740  0E58               	movlw	88
  2681  001742                     u3147:
  2682  001742  2EE8               	decfsz	wreg,f,c
  2683  001744  D7FE               	bra	u3147
  2684  001746  2E1B               	decfsz	??_main_servo_control& (0+255),f,c
  2685  001748  D7FC               	bra	u3147
  2686  00174A  D000               	nop2	
  2687  00174C  4A1C               	infsnz	main_servo_control@i,f,c
  2688  00174E  2A1D               	incf	main_servo_control@i+1,f,c
  2689  001750  BE1D               	btfsc	main_servo_control@i+1,7,c
  2690  001752  D7EB               	goto	l246
  2691  001754  501D               	movf	main_servo_control@i+1,w,c
  2692  001756  E14B               	bnz	l256
  2693  001758  D7E2               	goto	L2
  2694  00175A                     l3010:
  2695                           
  2696                           ;servo.c: 28: else if(dir == 1){
  2697  00175A  0419               	decf	main_servo_control@dir,w,c
  2698  00175C  101A               	iorwf	main_servo_control@dir+1,w,c
  2699  00175E  A4D8               	btfss	status,2,c
  2700  001760  D021               	goto	l3024
  2701                           
  2702                           ;servo.c: 29: for (i = 0; i < 10; i++) {
  2703  001762  0E00               	movlw	0
  2704  001764  6E1D               	movwf	main_servo_control@i+1,c
  2705  001766  0E00               	movlw	0
  2706  001768  6E1C               	movwf	main_servo_control@i,c
  2707  00176A                     l3014:
  2708  00176A  BE1D               	btfsc	main_servo_control@i+1,7,c
  2709  00176C  D006               	goto	l250
  2710  00176E  501D               	movf	main_servo_control@i+1,w,c
  2711  001770  E13E               	bnz	l256
  2712  001772  0E0A               	movlw	10
  2713  001774  5C1C               	subwf	main_servo_control@i,w,c
  2714  001776  B0D8               	btfsc	status,0,c
  2715  001778  0012               	return	
  2716  00177A                     l250:
  2717                           
  2718                           ;servo.c: 30: LATAbits.LATA2 = 1;
  2719  00177A  8489               	bsf	3977,2,c	;volatile
  2720                           
  2721                           ;servo.c: 31: _delay((unsigned long)((2.5)*(8000000/4000.0)));
  2722  00177C  0E07               	movlw	7
  2723  00177E  6E1B               	movwf	??_main_servo_control& (0+255),c
  2724  001780  0E7D               	movlw	125
  2725  001782                     u3157:
  2726  001782  2EE8               	decfsz	wreg,f,c
  2727  001784  D7FE               	bra	u3157
  2728  001786  2E1B               	decfsz	??_main_servo_control& (0+255),f,c
  2729  001788  D7FC               	bra	u3157
  2730  00178A  F000               	nop	
  2731                           
  2732                           ;servo.c: 33: LATAbits.LATA2 = 0;
  2733  00178C  9489               	bcf	3977,2,c	;volatile
  2734                           
  2735                           ;servo.c: 34: _delay((unsigned long)((17.5)*(8000000/4000.0)));
  2736  00178E  0E2E               	movlw	46
  2737  001790  6E1B               	movwf	??_main_servo_control& (0+255),c
  2738  001792  0E73               	movlw	115
  2739  001794                     u3167:
  2740  001794  2EE8               	decfsz	wreg,f,c
  2741  001796  D7FE               	bra	u3167
  2742  001798  2E1B               	decfsz	??_main_servo_control& (0+255),f,c
  2743  00179A  D7FC               	bra	u3167
  2744  00179C  F000               	nop	
  2745  00179E  4A1C               	infsnz	main_servo_control@i,f,c
  2746  0017A0  2A1D               	incf	main_servo_control@i+1,f,c
  2747  0017A2  D7E3               	goto	l3014
  2748  0017A4                     l3024:
  2749                           
  2750                           ;servo.c: 37: else if (dir == 2){
  2751  0017A4  0E02               	movlw	2
  2752  0017A6  1819               	xorwf	main_servo_control@dir,w,c
  2753  0017A8  101A               	iorwf	main_servo_control@dir+1,w,c
  2754  0017AA  A4D8               	btfss	status,2,c
  2755  0017AC  0012               	return	
  2756                           
  2757                           ;servo.c: 38: for (i = 0; i < 10; i++) {
  2758  0017AE  0E00               	movlw	0
  2759  0017B0  6E1D               	movwf	main_servo_control@i+1,c
  2760  0017B2  0E00               	movlw	0
  2761  0017B4  6E1C               	movwf	main_servo_control@i,c
  2762  0017B6                     l3028:
  2763  0017B6  BE1D               	btfsc	main_servo_control@i+1,7,c
  2764  0017B8  D006               	goto	l254
  2765  0017BA  501D               	movf	main_servo_control@i+1,w,c
  2766  0017BC  E118               	bnz	l256
  2767  0017BE  0E0A               	movlw	10
  2768  0017C0  5C1C               	subwf	main_servo_control@i,w,c
  2769  0017C2  B0D8               	btfsc	status,0,c
  2770  0017C4  0012               	return	
  2771  0017C6                     l254:
  2772                           
  2773                           ;servo.c: 39: LATAbits.LATA2 = 1;
  2774  0017C6  8489               	bsf	3977,2,c	;volatile
  2775                           
  2776                           ;servo.c: 40: _delay((unsigned long)((1)*(8000000/4000.0)));
  2777  0017C8  0E03               	movlw	3
  2778  0017CA  6E1B               	movwf	??_main_servo_control& (0+255),c
  2779  0017CC  0E98               	movlw	152
  2780  0017CE                     u3177:
  2781  0017CE  2EE8               	decfsz	wreg,f,c
  2782  0017D0  D7FE               	bra	u3177
  2783  0017D2  2E1B               	decfsz	??_main_servo_control& (0+255),f,c
  2784  0017D4  D7FC               	bra	u3177
  2785                           
  2786                           ;servo.c: 42: LATAbits.LATA2 = 0;
  2787  0017D6  9489               	bcf	3977,2,c	;volatile
  2788                           
  2789                           ;servo.c: 43: _delay((unsigned long)((19)*(8000000/4000.0)));
  2790  0017D8  0E32               	movlw	50
  2791  0017DA  6E1B               	movwf	??_main_servo_control& (0+255),c
  2792  0017DC  0E58               	movlw	88
  2793  0017DE                     u3187:
  2794  0017DE  2EE8               	decfsz	wreg,f,c
  2795  0017E0  D7FE               	bra	u3187
  2796  0017E2  2E1B               	decfsz	??_main_servo_control& (0+255),f,c
  2797  0017E4  D7FC               	bra	u3187
  2798  0017E6  D000               	nop2	
  2799  0017E8  4A1C               	infsnz	main_servo_control@i,f,c
  2800  0017EA  2A1D               	incf	main_servo_control@i+1,f,c
  2801  0017EC  D7E4               	goto	l3028
  2802  0017EE                     l256:
  2803  0017EE  0012               	return		;funcret
  2804  0017F0                     __end_of_main_servo_control:
  2805                           	opt stack 0
  2806                           tblptru	equ	0xFF8
  2807                           prodl	equ	0xFF3
  2808                           intcon	equ	0xFF2
  2809                           intcon3	equ	0xFF0
  2810                           postinc0	equ	0xFEE
  2811                           wreg	equ	0xFE8
  2812                           indf1	equ	0xFE7
  2813                           fsr1h	equ	0xFE2
  2814                           fsr1l	equ	0xFE1
  2815                           indf2	equ	0xFDF
  2816                           fsr2h	equ	0xFDA
  2817                           fsr2l	equ	0xFD9
  2818                           status	equ	0xFD8
  2819                           
  2820 ;; *************** function _initLCD *****************
  2821 ;; Defined at:
  2822 ;;		line 14 in file "lcd.c"
  2823 ;; Parameters:    Size  Location     Type
  2824 ;;		None
  2825 ;; Auto vars:     Size  Location     Type
  2826 ;;		None
  2827 ;; Return value:  Size  Location     Type
  2828 ;;                  1    wreg      void 
  2829 ;; Registers used:
  2830 ;;		wreg, status,2, status,0, cstack
  2831 ;; Tracked objects:
  2832 ;;		On entry : 0/0
  2833 ;;		On exit  : 0/0
  2834 ;;		Unchanged: 0/0
  2835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2838 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2839 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2840 ;;Total ram usage:        1 bytes
  2841 ;; Hardware stack levels used:    1
  2842 ;; Hardware stack levels required when called:    6
  2843 ;; This function calls:
  2844 ;;		_lcdInst
  2845 ;; This function is called by:
  2846 ;;		_initPIC
  2847 ;; This function uses a non-reentrant model
  2848 ;;
  2849                           
  2850                           	psect	text12
  2851  002112                     __ptext12:
  2852                           	opt stack 0
  2853  002112                     _initLCD:
  2854                           	opt stack 23
  2855                           
  2856                           ;lcd.c: 15: _delay((unsigned long)((15)*(8000000/4000.0)));
  2857                           
  2858                           ;incstack = 0
  2859  002112  0E27               	movlw	39
  2860  002114  6E1C               	movwf	??_initLCD& (0+255),c
  2861  002116  0EF5               	movlw	245
  2862  002118                     u3197:
  2863  002118  2EE8               	decfsz	wreg,f,c
  2864  00211A  D7FE               	bra	u3197
  2865  00211C  2E1C               	decfsz	??_initLCD& (0+255),f,c
  2866  00211E  D7FC               	bra	u3197
  2867  002120  F000               	nop	
  2868                           
  2869                           ;lcd.c: 16: lcdInst(0b00110011);
  2870  002122  0E33               	movlw	51
  2871  002124  EC67  F011         	call	_lcdInst
  2872                           
  2873                           ;lcd.c: 17: lcdInst(0b00110010);
  2874  002128  0E32               	movlw	50
  2875  00212A  EC67  F011         	call	_lcdInst
  2876                           
  2877                           ;lcd.c: 18: lcdInst(0b00101000);
  2878  00212E  0E28               	movlw	40
  2879  002130  EC67  F011         	call	_lcdInst
  2880                           
  2881                           ;lcd.c: 19: lcdInst(0b00001111);
  2882  002134  0E0F               	movlw	15
  2883  002136  EC67  F011         	call	_lcdInst
  2884                           
  2885                           ;lcd.c: 20: lcdInst(0b00000110);
  2886  00213A  0E06               	movlw	6
  2887  00213C  EC67  F011         	call	_lcdInst
  2888                           
  2889                           ;lcd.c: 21: lcdInst(0b00000001);
  2890  002140  0E01               	movlw	1
  2891  002142  EC67  F011         	call	_lcdInst
  2892                           
  2893                           ;lcd.c: 22: _delay((unsigned long)((15)*(8000000/4000.0)));
  2894  002146  0E27               	movlw	39
  2895  002148  6E1C               	movwf	??_initLCD& (0+255),c
  2896  00214A  0EF5               	movlw	245
  2897  00214C                     u3207:
  2898  00214C  2EE8               	decfsz	wreg,f,c
  2899  00214E  D7FE               	bra	u3207
  2900  002150  2E1C               	decfsz	??_initLCD& (0+255),f,c
  2901  002152  D7FC               	bra	u3207
  2902  002154  F000               	nop	
  2903  002156  0012               	return		;funcret
  2904  002158                     __end_of_initLCD:
  2905                           	opt stack 0
  2906                           tblptru	equ	0xFF8
  2907                           prodl	equ	0xFF3
  2908                           intcon	equ	0xFF2
  2909                           intcon3	equ	0xFF0
  2910                           postinc0	equ	0xFEE
  2911                           wreg	equ	0xFE8
  2912                           indf1	equ	0xFE7
  2913                           fsr1h	equ	0xFE2
  2914                           fsr1l	equ	0xFE1
  2915                           indf2	equ	0xFDF
  2916                           fsr2h	equ	0xFDA
  2917                           fsr2l	equ	0xFD9
  2918                           status	equ	0xFD8
  2919                           
  2920 ;; *************** function _I2C_Master_Init *****************
  2921 ;; Defined at:
  2922 ;;		line 13 in file "I2C.c"
  2923 ;; Parameters:    Size  Location     Type
  2924 ;;  c               4   37[COMRAM] const unsigned long 
  2925 ;; Auto vars:     Size  Location     Type
  2926 ;;		None
  2927 ;; Return value:  Size  Location     Type
  2928 ;;                  1    wreg      void 
  2929 ;; Registers used:
  2930 ;;		wreg, status,2, status,0, cstack
  2931 ;; Tracked objects:
  2932 ;;		On entry : 0/0
  2933 ;;		On exit  : 0/0
  2934 ;;		Unchanged: 0/0
  2935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2936 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2938 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2939 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2940 ;;Total ram usage:        8 bytes
  2941 ;; Hardware stack levels used:    1
  2942 ;; Hardware stack levels required when called:    5
  2943 ;; This function calls:
  2944 ;;		___lldiv
  2945 ;; This function is called by:
  2946 ;;		_initPIC
  2947 ;;		_set_time
  2948 ;; This function uses a non-reentrant model
  2949 ;;
  2950                           
  2951                           	psect	text13
  2952  001F1A                     __ptext13:
  2953                           	opt stack 0
  2954  001F1A                     _I2C_Master_Init:
  2955                           	opt stack 24
  2956                           
  2957                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  2958                           
  2959                           ;incstack = 0
  2960  001F1A  0E00               	movlw	0
  2961  001F1C  6EC7               	movwf	4039,c	;volatile
  2962                           
  2963                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  2964  001F1E  0E28               	movlw	40
  2965  001F20  6EC6               	movwf	4038,c	;volatile
  2966                           
  2967                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  2968  001F22  0E00               	movlw	0
  2969  001F24  6EC5               	movwf	4037,c	;volatile
  2970                           
  2971                           ;I2C.c: 19: SSPADD = (8000000/(4*c))-1;
  2972  001F26  0E00               	movlw	0
  2973  001F28  6E19               	movwf	___lldiv@dividend,c
  2974  001F2A  0E12               	movlw	18
  2975  001F2C  6E1A               	movwf	___lldiv@dividend+1,c
  2976  001F2E  0E7A               	movlw	122
  2977  001F30  6E1B               	movwf	___lldiv@dividend+2,c
  2978  001F32  0E00               	movlw	0
  2979  001F34  6E1C               	movwf	___lldiv@dividend+3,c
  2980  001F36  C026  F02A         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  2981  001F3A  C027  F02B         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  2982  001F3E  C028  F02C         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  2983  001F42  C029  F02D         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  2984  001F46  0E02               	movlw	2
  2985  001F48                     u1635:
  2986  001F48  90D8               	bcf	status,0,c
  2987  001F4A  362A               	rlcf	??_I2C_Master_Init,f,c
  2988  001F4C  362B               	rlcf	??_I2C_Master_Init+1,f,c
  2989  001F4E  362C               	rlcf	??_I2C_Master_Init+2,f,c
  2990  001F50  362D               	rlcf	??_I2C_Master_Init+3,f,c
  2991  001F52  2EE8               	decfsz	wreg,f,c
  2992  001F54  D7F9               	goto	u1635
  2993  001F56  C02A  F01D         	movff	??_I2C_Master_Init,___lldiv@divisor
  2994  001F5A  C02B  F01E         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  2995  001F5E  C02C  F01F         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  2996  001F62  C02D  F020         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  2997  001F66  ECA5  F00E         	call	___lldiv	;wreg free
  2998  001F6A  0419               	decf	?___lldiv,w,c
  2999  001F6C  6EC8               	movwf	4040,c	;volatile
  3000                           
  3001                           ;I2C.c: 20: TRISC3 = 1;
  3002  001F6E  8694               	bsf	3988,3,c	;volatile
  3003                           
  3004                           ;I2C.c: 21: TRISC4 = 1;
  3005  001F70  8894               	bsf	3988,4,c	;volatile
  3006  001F72  0012               	return		;funcret
  3007  001F74                     __end_of_I2C_Master_Init:
  3008                           	opt stack 0
  3009                           tblptru	equ	0xFF8
  3010                           prodl	equ	0xFF3
  3011                           intcon	equ	0xFF2
  3012                           intcon3	equ	0xFF0
  3013                           postinc0	equ	0xFEE
  3014                           wreg	equ	0xFE8
  3015                           indf1	equ	0xFE7
  3016                           fsr1h	equ	0xFE2
  3017                           fsr1l	equ	0xFE1
  3018                           indf2	equ	0xFDF
  3019                           fsr2h	equ	0xFDA
  3020                           fsr2l	equ	0xFD9
  3021                           status	equ	0xFD8
  3022                           
  3023 ;; *************** function ___lldiv *****************
  3024 ;; Defined at:
  3025 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lldiv.c"
  3026 ;; Parameters:    Size  Location     Type
  3027 ;;  dividend        4   24[COMRAM] unsigned long 
  3028 ;;  divisor         4   28[COMRAM] unsigned long 
  3029 ;; Auto vars:     Size  Location     Type
  3030 ;;  quotient        4   32[COMRAM] unsigned long 
  3031 ;;  counter         1   36[COMRAM] unsigned char 
  3032 ;; Return value:  Size  Location     Type
  3033 ;;                  4   24[COMRAM] unsigned long 
  3034 ;; Registers used:
  3035 ;;		wreg, status,2, status,0
  3036 ;; Tracked objects:
  3037 ;;		On entry : 0/0
  3038 ;;		On exit  : 0/0
  3039 ;;		Unchanged: 0/0
  3040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3041 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3042 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3044 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3045 ;;Total ram usage:       13 bytes
  3046 ;; Hardware stack levels used:    1
  3047 ;; Hardware stack levels required when called:    4
  3048 ;; This function calls:
  3049 ;;		Nothing
  3050 ;; This function is called by:
  3051 ;;		_I2C_Master_Init
  3052 ;; This function uses a non-reentrant model
  3053 ;;
  3054                           
  3055                           	psect	text14
  3056  001D4A                     __ptext14:
  3057                           	opt stack 0
  3058  001D4A                     ___lldiv:
  3059                           	opt stack 24
  3060                           
  3061                           ;incstack = 0
  3062  001D4A  0E00               	movlw	0
  3063  001D4C  6E21               	movwf	___lldiv@quotient,c
  3064  001D4E  0E00               	movlw	0
  3065  001D50  6E22               	movwf	___lldiv@quotient+1,c
  3066  001D52  0E00               	movlw	0
  3067  001D54  6E23               	movwf	___lldiv@quotient+2,c
  3068  001D56  0E00               	movlw	0
  3069  001D58  6E24               	movwf	___lldiv@quotient+3,c
  3070  001D5A  501D               	movf	___lldiv@divisor,w,c
  3071  001D5C  101E               	iorwf	___lldiv@divisor+1,w,c
  3072  001D5E  101F               	iorwf	___lldiv@divisor+2,w,c
  3073  001D60  1020               	iorwf	___lldiv@divisor+3,w,c
  3074  001D62  B4D8               	btfsc	status,2,c
  3075  001D64  D02A               	goto	l856
  3076  001D66  0E01               	movlw	1
  3077  001D68  6E25               	movwf	___lldiv@counter,c
  3078  001D6A  D006               	goto	l2276
  3079  001D6C                     l2274:
  3080  001D6C  90D8               	bcf	status,0,c
  3081  001D6E  361D               	rlcf	___lldiv@divisor,f,c
  3082  001D70  361E               	rlcf	___lldiv@divisor+1,f,c
  3083  001D72  361F               	rlcf	___lldiv@divisor+2,f,c
  3084  001D74  3620               	rlcf	___lldiv@divisor+3,f,c
  3085  001D76  2A25               	incf	___lldiv@counter,f,c
  3086  001D78                     l2276:
  3087  001D78  AE20               	btfss	___lldiv@divisor+3,7,c
  3088  001D7A  D7F8               	goto	l2274
  3089  001D7C                     l2278:
  3090  001D7C  90D8               	bcf	status,0,c
  3091  001D7E  3621               	rlcf	___lldiv@quotient,f,c
  3092  001D80  3622               	rlcf	___lldiv@quotient+1,f,c
  3093  001D82  3623               	rlcf	___lldiv@quotient+2,f,c
  3094  001D84  3624               	rlcf	___lldiv@quotient+3,f,c
  3095  001D86  501D               	movf	___lldiv@divisor,w,c
  3096  001D88  5C19               	subwf	___lldiv@dividend,w,c
  3097  001D8A  501E               	movf	___lldiv@divisor+1,w,c
  3098  001D8C  581A               	subwfb	___lldiv@dividend+1,w,c
  3099  001D8E  501F               	movf	___lldiv@divisor+2,w,c
  3100  001D90  581B               	subwfb	___lldiv@dividend+2,w,c
  3101  001D92  5020               	movf	___lldiv@divisor+3,w,c
  3102  001D94  581C               	subwfb	___lldiv@dividend+3,w,c
  3103  001D96  A0D8               	btfss	status,0,c
  3104  001D98  D009               	goto	l2286
  3105  001D9A  501D               	movf	___lldiv@divisor,w,c
  3106  001D9C  5E19               	subwf	___lldiv@dividend,f,c
  3107  001D9E  501E               	movf	___lldiv@divisor+1,w,c
  3108  001DA0  5A1A               	subwfb	___lldiv@dividend+1,f,c
  3109  001DA2  501F               	movf	___lldiv@divisor+2,w,c
  3110  001DA4  5A1B               	subwfb	___lldiv@dividend+2,f,c
  3111  001DA6  5020               	movf	___lldiv@divisor+3,w,c
  3112  001DA8  5A1C               	subwfb	___lldiv@dividend+3,f,c
  3113  001DAA  8021               	bsf	___lldiv@quotient,0,c
  3114  001DAC                     l2286:
  3115  001DAC  90D8               	bcf	status,0,c
  3116  001DAE  3220               	rrcf	___lldiv@divisor+3,f,c
  3117  001DB0  321F               	rrcf	___lldiv@divisor+2,f,c
  3118  001DB2  321E               	rrcf	___lldiv@divisor+1,f,c
  3119  001DB4  321D               	rrcf	___lldiv@divisor,f,c
  3120  001DB6  2E25               	decfsz	___lldiv@counter,f,c
  3121  001DB8  D7E1               	goto	l2278
  3122  001DBA                     l856:
  3123  001DBA  C021  F019         	movff	___lldiv@quotient,?___lldiv
  3124  001DBE  C022  F01A         	movff	___lldiv@quotient+1,?___lldiv+1
  3125  001DC2  C023  F01B         	movff	___lldiv@quotient+2,?___lldiv+2
  3126  001DC6  C024  F01C         	movff	___lldiv@quotient+3,?___lldiv+3
  3127  001DCA  0012               	return		;funcret
  3128  001DCC                     __end_of___lldiv:
  3129                           	opt stack 0
  3130                           tblptru	equ	0xFF8
  3131                           prodl	equ	0xFF3
  3132                           intcon	equ	0xFF2
  3133                           intcon3	equ	0xFF0
  3134                           postinc0	equ	0xFEE
  3135                           wreg	equ	0xFE8
  3136                           indf1	equ	0xFE7
  3137                           fsr1h	equ	0xFE2
  3138                           fsr1l	equ	0xFE1
  3139                           indf2	equ	0xFDF
  3140                           fsr2h	equ	0xFDA
  3141                           fsr2l	equ	0xFD9
  3142                           status	equ	0xFD8
  3143                           
  3144 ;; *************** function _display_time *****************
  3145 ;; Defined at:
  3146 ;;		line 135 in file "picState.c"
  3147 ;; Parameters:    Size  Location     Type
  3148 ;;		None
  3149 ;; Auto vars:     Size  Location     Type
  3150 ;;  i               1   60[COMRAM] unsigned char 
  3151 ;; Return value:  Size  Location     Type
  3152 ;;                  2   88[None  ] int 
  3153 ;; Registers used:
  3154 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3155 ;; Tracked objects:
  3156 ;;		On entry : 0/0
  3157 ;;		On exit  : 0/0
  3158 ;;		Unchanged: 0/0
  3159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3161 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3162 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3163 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3164 ;;Total ram usage:        3 bytes
  3165 ;; Hardware stack levels used:    1
  3166 ;; Hardware stack levels required when called:    7
  3167 ;; This function calls:
  3168 ;;		_I2C_Master_Read
  3169 ;;		_I2C_Master_Start
  3170 ;;		_I2C_Master_Stop
  3171 ;;		_I2C_Master_Write
  3172 ;;		_lcdInst
  3173 ;;		_printf
  3174 ;; This function is called by:
  3175 ;;		_main
  3176 ;; This function uses a non-reentrant model
  3177 ;;
  3178                           
  3179                           	psect	text15
  3180  001616                     __ptext15:
  3181                           	opt stack 0
  3182  001616                     _display_time:
  3183                           	opt stack 23
  3184                           
  3185                           ;picState.c: 137: lcdInst(0x01);;
  3186                           
  3187                           ;incstack = 0
  3188  001616  0E01               	movlw	1
  3189  001618  EC67  F011         	call	_lcdInst
  3190                           
  3191                           ;picState.c: 138: _delay((unsigned long)((300)*(8000000/4000.0)));
  3192  00161C  0E04               	movlw	4
  3193  00161E  6E3C               	movwf	(??_display_time+1)& (0+255),c
  3194  001620  0E0C               	movlw	12
  3195  001622  6E3B               	movwf	??_display_time& (0+255),c
  3196  001624  0E34               	movlw	52
  3197  001626                     u3217:
  3198  001626  2EE8               	decfsz	wreg,f,c
  3199  001628  D7FE               	bra	u3217
  3200  00162A  2E3B               	decfsz	??_display_time& (0+255),f,c
  3201  00162C  D7FC               	bra	u3217
  3202  00162E  2E3C               	decfsz	(??_display_time+1)& (0+255),f,c
  3203  001630  D7FA               	bra	u3217
  3204                           
  3205                           ;picState.c: 139: while (mode == 1) {
  3206  001632  D065               	goto	l3340
  3207  001634                     l3308:
  3208                           
  3209                           ;picState.c: 140: I2C_Master_Start();
  3210  001634  EC87  F011         	call	_I2C_Master_Start	;wreg free
  3211                           
  3212                           ;picState.c: 141: I2C_Master_Write(0b11010001);
  3213  001638  0E00               	movlw	0
  3214  00163A  6E1B               	movwf	I2C_Master_Write@d+1,c
  3215  00163C  0ED1               	movlw	209
  3216  00163E  6E1A               	movwf	I2C_Master_Write@d,c
  3217  001640  EC79  F011         	call	_I2C_Master_Write	;wreg free
  3218                           
  3219                           ;picState.c: 142: for (unsigned char i = 0; i < 0x06; i++) {
  3220  001644  0E00               	movlw	0
  3221  001646  6E3D               	movwf	display_time@i,c
  3222  001648                     l3312:
  3223  001648  0E05               	movlw	5
  3224  00164A  643D               	cpfsgt	display_time@i,c
  3225  00164C  D001               	goto	l3316
  3226  00164E  D00E               	goto	l3322
  3227  001650                     l3316:
  3228                           
  3229                           ;picState.c: 143: time[i] = I2C_Master_Read(1);
  3230  001650  503D               	movf	display_time@i,w,c
  3231  001652  0D01               	mullw	1
  3232  001654  0E44               	movlw	low _time
  3233  001656  24F3               	addwf	prodl,w,c
  3234  001658  6ED9               	movwf	fsr2l,c
  3235  00165A  0E00               	movlw	high _time
  3236  00165C  20F4               	addwfc	prodh,w,c
  3237  00165E  6EDA               	movwf	fsr2h,c
  3238  001660  0E01               	movlw	1
  3239  001662  ECE8  F010         	call	_I2C_Master_Read
  3240  001666  6EDF               	movwf	indf2,c
  3241  001668  2A3D               	incf	display_time@i,f,c
  3242  00166A  D7EE               	goto	l3312
  3243  00166C                     l3322:
  3244                           
  3245                           ;picState.c: 144: }
  3246                           ;picState.c: 145: time[6] = I2C_Master_Read(0);
  3247  00166C  0E00               	movlw	0
  3248  00166E  ECE8  F010         	call	_I2C_Master_Read
  3249  001672  6E4A               	movwf	_time+6,c
  3250                           
  3251                           ;picState.c: 146: I2C_Master_Stop();
  3252  001674  EC83  F011         	call	_I2C_Master_Stop	;wreg free
  3253                           
  3254                           ;picState.c: 147: lcdInst(0b10000000);;
  3255  001678  0E80               	movlw	128
  3256  00167A  EC67  F011         	call	_lcdInst
  3257                           
  3258                           ;picState.c: 148: printf("%02x/%02x/%02x", time[6], time[5],
  3259                           ;picState.c: 149: time[4]);
  3260  00167E  0E94               	movlw	low STR_12
  3261  001680  6E25               	movwf	printf@f,c
  3262  001682  0E10               	movlw	high STR_12
  3263  001684  6E26               	movwf	printf@f+1,c
  3264  001686  C04A  F027         	movff	_time+6,?_printf+2
  3265  00168A  6A28               	clrf	?_printf+3,c
  3266  00168C  C049  F029         	movff	_time+5,?_printf+4
  3267  001690  6A2A               	clrf	?_printf+5,c
  3268  001692  C048  F02B         	movff	_time+4,?_printf+6
  3269  001696  6A2C               	clrf	?_printf+7,c
  3270  001698  EC6B  F008         	call	_printf	;wreg free
  3271                           
  3272                           ;picState.c: 150: lcdInst(0b11000000);;
  3273  00169C  0EC0               	movlw	192
  3274  00169E  EC67  F011         	call	_lcdInst
  3275                           
  3276                           ;picState.c: 151: printf("%02x:%02x:%02x", time[2], time[1],
  3277                           ;picState.c: 152: time[0]);
  3278  0016A2  0EA3               	movlw	low STR_13
  3279  0016A4  6E25               	movwf	printf@f,c
  3280  0016A6  0E10               	movlw	high STR_13
  3281  0016A8  6E26               	movwf	printf@f+1,c
  3282  0016AA  C046  F027         	movff	_time+2,?_printf+2
  3283  0016AE  6A28               	clrf	?_printf+3,c
  3284  0016B0  C045  F029         	movff	_time+1,?_printf+4
  3285  0016B4  6A2A               	clrf	?_printf+5,c
  3286  0016B6  C044  F02B         	movff	_time,?_printf+6
  3287  0016BA  6A2C               	clrf	?_printf+7,c
  3288  0016BC  EC6B  F008         	call	_printf	;wreg free
  3289                           
  3290                           ;picState.c: 154: I2C_Master_Start();
  3291  0016C0  EC87  F011         	call	_I2C_Master_Start	;wreg free
  3292                           
  3293                           ;picState.c: 155: I2C_Master_Write(0b11010000);
  3294  0016C4  0E00               	movlw	0
  3295  0016C6  6E1B               	movwf	I2C_Master_Write@d+1,c
  3296  0016C8  0ED0               	movlw	208
  3297  0016CA  6E1A               	movwf	I2C_Master_Write@d,c
  3298  0016CC  EC79  F011         	call	_I2C_Master_Write	;wreg free
  3299                           
  3300                           ;picState.c: 156: I2C_Master_Write(0x00);
  3301  0016D0  0E00               	movlw	0
  3302  0016D2  6E1B               	movwf	I2C_Master_Write@d+1,c
  3303  0016D4  0E00               	movlw	0
  3304  0016D6  6E1A               	movwf	I2C_Master_Write@d,c
  3305  0016D8  EC79  F011         	call	_I2C_Master_Write	;wreg free
  3306                           
  3307                           ;picState.c: 157: I2C_Master_Stop();
  3308  0016DC  EC83  F011         	call	_I2C_Master_Stop	;wreg free
  3309                           
  3310                           ;picState.c: 159: _delay((unsigned long)((990)*(8000000/4000.0)));
  3311  0016E0  0E0B               	movlw	11
  3312  0016E2  6E3C               	movwf	(??_display_time+1)& (0+255),c
  3313  0016E4  0E0C               	movlw	12
  3314  0016E6  6E3B               	movwf	??_display_time& (0+255),c
  3315  0016E8  0E64               	movlw	100
  3316  0016EA                     u3227:
  3317  0016EA  2EE8               	decfsz	wreg,f,c
  3318  0016EC  D7FE               	bra	u3227
  3319  0016EE  2E3B               	decfsz	??_display_time& (0+255),f,c
  3320  0016F0  D7FC               	bra	u3227
  3321  0016F2  2E3C               	decfsz	(??_display_time+1)& (0+255),f,c
  3322  0016F4  D7FA               	bra	u3227
  3323  0016F6  D000               	nop2	
  3324                           
  3325                           ;picState.c: 160: lcdInst(0b10000000);;
  3326  0016F8  0E80               	movlw	128
  3327  0016FA  EC67  F011         	call	_lcdInst
  3328  0016FE                     l3340:
  3329  0016FE  0458               	decf	_mode,w,c
  3330  001700  A4D8               	btfss	status,2,c
  3331  001702  0012               	return	
  3332  001704  D797               	goto	l3308
  3333  001706                     __end_of_display_time:
  3334                           	opt stack 0
  3335                           tblptru	equ	0xFF8
  3336                           prodh	equ	0xFF4
  3337                           prodl	equ	0xFF3
  3338                           intcon	equ	0xFF2
  3339                           intcon3	equ	0xFF0
  3340                           postinc0	equ	0xFEE
  3341                           wreg	equ	0xFE8
  3342                           indf1	equ	0xFE7
  3343                           fsr1h	equ	0xFE2
  3344                           fsr1l	equ	0xFE1
  3345                           indf2	equ	0xFDF
  3346                           fsr2h	equ	0xFDA
  3347                           fsr2l	equ	0xFD9
  3348                           status	equ	0xFD8
  3349                           
  3350 ;; *************** function _I2C_Master_Write *****************
  3351 ;; Defined at:
  3352 ;;		line 47 in file "I2C.c"
  3353 ;; Parameters:    Size  Location     Type
  3354 ;;  d               2   25[COMRAM] unsigned int 
  3355 ;; Auto vars:     Size  Location     Type
  3356 ;;		None
  3357 ;; Return value:  Size  Location     Type
  3358 ;;                  1    wreg      void 
  3359 ;; Registers used:
  3360 ;;		wreg, status,2, status,0, cstack
  3361 ;; Tracked objects:
  3362 ;;		On entry : 0/0
  3363 ;;		On exit  : 0/0
  3364 ;;		Unchanged: 0/0
  3365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3366 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3369 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3370 ;;Total ram usage:        2 bytes
  3371 ;; Hardware stack levels used:    1
  3372 ;; Hardware stack levels required when called:    5
  3373 ;; This function calls:
  3374 ;;		_I2C_Master_Wait
  3375 ;; This function is called by:
  3376 ;;		_display_time
  3377 ;;		_initPIC
  3378 ;;		_get_time
  3379 ;;		_set_time
  3380 ;; This function uses a non-reentrant model
  3381 ;;
  3382                           
  3383                           	psect	text16
  3384  0022F2                     __ptext16:
  3385                           	opt stack 0
  3386  0022F2                     _I2C_Master_Write:
  3387                           	opt stack 23
  3388                           
  3389                           ;I2C.c: 49: I2C_Master_Wait();
  3390                           
  3391                           ;incstack = 0
  3392  0022F2  EC4F  F011         	call	_I2C_Master_Wait	;wreg free
  3393                           
  3394                           ;I2C.c: 50: SSPBUF = d;
  3395  0022F6  C01A  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  3396  0022FA  0012               	return		;funcret
  3397  0022FC                     __end_of_I2C_Master_Write:
  3398                           	opt stack 0
  3399                           tblptru	equ	0xFF8
  3400                           prodh	equ	0xFF4
  3401                           prodl	equ	0xFF3
  3402                           intcon	equ	0xFF2
  3403                           intcon3	equ	0xFF0
  3404                           postinc0	equ	0xFEE
  3405                           wreg	equ	0xFE8
  3406                           indf1	equ	0xFE7
  3407                           fsr1h	equ	0xFE2
  3408                           fsr1l	equ	0xFE1
  3409                           indf2	equ	0xFDF
  3410                           fsr2h	equ	0xFDA
  3411                           fsr2l	equ	0xFD9
  3412                           status	equ	0xFD8
  3413                           
  3414 ;; *************** function _I2C_Master_Stop *****************
  3415 ;; Defined at:
  3416 ;;		line 41 in file "I2C.c"
  3417 ;; Parameters:    Size  Location     Type
  3418 ;;		None
  3419 ;; Auto vars:     Size  Location     Type
  3420 ;;		None
  3421 ;; Return value:  Size  Location     Type
  3422 ;;                  1    wreg      void 
  3423 ;; Registers used:
  3424 ;;		wreg, status,2, status,0, cstack
  3425 ;; Tracked objects:
  3426 ;;		On entry : 0/0
  3427 ;;		On exit  : 0/0
  3428 ;;		Unchanged: 0/0
  3429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3433 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3434 ;;Total ram usage:        0 bytes
  3435 ;; Hardware stack levels used:    1
  3436 ;; Hardware stack levels required when called:    5
  3437 ;; This function calls:
  3438 ;;		_I2C_Master_Wait
  3439 ;; This function is called by:
  3440 ;;		_display_time
  3441 ;;		_initPIC
  3442 ;;		_get_time
  3443 ;;		_set_time
  3444 ;; This function uses a non-reentrant model
  3445 ;;
  3446                           
  3447                           	psect	text17
  3448  002306                     __ptext17:
  3449                           	opt stack 0
  3450  002306                     _I2C_Master_Stop:
  3451                           	opt stack 23
  3452                           
  3453                           ;I2C.c: 43: I2C_Master_Wait();
  3454                           
  3455                           ;incstack = 0
  3456  002306  EC4F  F011         	call	_I2C_Master_Wait	;wreg free
  3457                           
  3458                           ;I2C.c: 44: PEN = 1;
  3459  00230A  84C5               	bsf	4037,2,c	;volatile
  3460  00230C  0012               	return		;funcret
  3461  00230E                     __end_of_I2C_Master_Stop:
  3462                           	opt stack 0
  3463                           tblptru	equ	0xFF8
  3464                           prodh	equ	0xFF4
  3465                           prodl	equ	0xFF3
  3466                           intcon	equ	0xFF2
  3467                           intcon3	equ	0xFF0
  3468                           postinc0	equ	0xFEE
  3469                           wreg	equ	0xFE8
  3470                           indf1	equ	0xFE7
  3471                           fsr1h	equ	0xFE2
  3472                           fsr1l	equ	0xFE1
  3473                           indf2	equ	0xFDF
  3474                           fsr2h	equ	0xFDA
  3475                           fsr2l	equ	0xFD9
  3476                           status	equ	0xFD8
  3477                           
  3478 ;; *************** function _I2C_Master_Start *****************
  3479 ;; Defined at:
  3480 ;;		line 29 in file "I2C.c"
  3481 ;; Parameters:    Size  Location     Type
  3482 ;;		None
  3483 ;; Auto vars:     Size  Location     Type
  3484 ;;		None
  3485 ;; Return value:  Size  Location     Type
  3486 ;;                  1    wreg      void 
  3487 ;; Registers used:
  3488 ;;		wreg, status,2, status,0, cstack
  3489 ;; Tracked objects:
  3490 ;;		On entry : 0/0
  3491 ;;		On exit  : 0/0
  3492 ;;		Unchanged: 0/0
  3493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3497 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3498 ;;Total ram usage:        0 bytes
  3499 ;; Hardware stack levels used:    1
  3500 ;; Hardware stack levels required when called:    5
  3501 ;; This function calls:
  3502 ;;		_I2C_Master_Wait
  3503 ;; This function is called by:
  3504 ;;		_display_time
  3505 ;;		_initPIC
  3506 ;;		_get_time
  3507 ;;		_set_time
  3508 ;; This function uses a non-reentrant model
  3509 ;;
  3510                           
  3511                           	psect	text18
  3512  00230E                     __ptext18:
  3513                           	opt stack 0
  3514  00230E                     _I2C_Master_Start:
  3515                           	opt stack 23
  3516                           
  3517                           ;I2C.c: 31: I2C_Master_Wait();
  3518                           
  3519                           ;incstack = 0
  3520  00230E  EC4F  F011         	call	_I2C_Master_Wait	;wreg free
  3521                           
  3522                           ;I2C.c: 32: SEN = 1;
  3523  002312  80C5               	bsf	4037,0,c	;volatile
  3524  002314  0012               	return		;funcret
  3525  002316                     __end_of_I2C_Master_Start:
  3526                           	opt stack 0
  3527                           tblptru	equ	0xFF8
  3528                           prodh	equ	0xFF4
  3529                           prodl	equ	0xFF3
  3530                           intcon	equ	0xFF2
  3531                           intcon3	equ	0xFF0
  3532                           postinc0	equ	0xFEE
  3533                           wreg	equ	0xFE8
  3534                           indf1	equ	0xFE7
  3535                           fsr1h	equ	0xFE2
  3536                           fsr1l	equ	0xFE1
  3537                           indf2	equ	0xFDF
  3538                           fsr2h	equ	0xFDA
  3539                           fsr2l	equ	0xFD9
  3540                           status	equ	0xFD8
  3541                           
  3542 ;; *************** function _I2C_Master_Read *****************
  3543 ;; Defined at:
  3544 ;;		line 53 in file "I2C.c"
  3545 ;; Parameters:    Size  Location     Type
  3546 ;;  a               1    wreg     unsigned char 
  3547 ;; Auto vars:     Size  Location     Type
  3548 ;;  a               1   25[COMRAM] unsigned char 
  3549 ;;  temp            1   26[COMRAM] unsigned char 
  3550 ;; Return value:  Size  Location     Type
  3551 ;;                  1    wreg      unsigned char 
  3552 ;; Registers used:
  3553 ;;		wreg, status,2, status,0, cstack
  3554 ;; Tracked objects:
  3555 ;;		On entry : 0/0
  3556 ;;		On exit  : 0/0
  3557 ;;		Unchanged: 0/0
  3558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3560 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3562 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3563 ;;Total ram usage:        2 bytes
  3564 ;; Hardware stack levels used:    1
  3565 ;; Hardware stack levels required when called:    5
  3566 ;; This function calls:
  3567 ;;		_I2C_Master_Wait
  3568 ;; This function is called by:
  3569 ;;		_display_time
  3570 ;;		_get_time
  3571 ;; This function uses a non-reentrant model
  3572 ;;
  3573                           
  3574                           	psect	text19
  3575  0021D0                     __ptext19:
  3576                           	opt stack 0
  3577  0021D0                     _I2C_Master_Read:
  3578                           	opt stack 23
  3579                           
  3580                           ;incstack = 0
  3581                           ;I2C_Master_Read@a stored from wreg
  3582  0021D0  6E1A               	movwf	I2C_Master_Read@a,c
  3583                           
  3584                           ;I2C.c: 55: unsigned char temp;
  3585                           ;I2C.c: 56: I2C_Master_Wait();
  3586  0021D2  EC4F  F011         	call	_I2C_Master_Wait	;wreg free
  3587                           
  3588                           ;I2C.c: 57: RCEN = 1;
  3589  0021D6  86C5               	bsf	4037,3,c	;volatile
  3590                           
  3591                           ;I2C.c: 58: I2C_Master_Wait();
  3592  0021D8  EC4F  F011         	call	_I2C_Master_Wait	;wreg free
  3593                           
  3594                           ;I2C.c: 59: temp = SSPBUF;
  3595  0021DC  CFC9 F01B          	movff	4041,I2C_Master_Read@temp	;volatile
  3596                           
  3597                           ;I2C.c: 60: I2C_Master_Wait();
  3598  0021E0  EC4F  F011         	call	_I2C_Master_Wait	;wreg free
  3599                           
  3600                           ;I2C.c: 61: ACKDT = (a)?0:1;
  3601  0021E4  501A               	movf	I2C_Master_Read@a,w,c
  3602  0021E6  A4D8               	btfss	status,2,c
  3603  0021E8  D002               	goto	u2160
  3604  0021EA  8AC5               	bsf	4037,5,c	;volatile
  3605  0021EC  D001               	goto	l2850
  3606  0021EE                     u2160:
  3607  0021EE  9AC5               	bcf	4037,5,c	;volatile
  3608  0021F0                     l2850:
  3609                           
  3610                           ;I2C.c: 62: ACKEN = 1;
  3611  0021F0  88C5               	bsf	4037,4,c	;volatile
  3612                           
  3613                           ;I2C.c: 63: return temp;
  3614  0021F2  501B               	movf	I2C_Master_Read@temp,w,c
  3615  0021F4  0012               	return	
  3616  0021F6                     __end_of_I2C_Master_Read:
  3617                           	opt stack 0
  3618                           tblptru	equ	0xFF8
  3619                           prodh	equ	0xFF4
  3620                           prodl	equ	0xFF3
  3621                           intcon	equ	0xFF2
  3622                           intcon3	equ	0xFF0
  3623                           postinc0	equ	0xFEE
  3624                           wreg	equ	0xFE8
  3625                           indf1	equ	0xFE7
  3626                           fsr1h	equ	0xFE2
  3627                           fsr1l	equ	0xFE1
  3628                           indf2	equ	0xFDF
  3629                           fsr2h	equ	0xFDA
  3630                           fsr2l	equ	0xFD9
  3631                           status	equ	0xFD8
  3632                           
  3633 ;; *************** function _I2C_Master_Wait *****************
  3634 ;; Defined at:
  3635 ;;		line 24 in file "I2C.c"
  3636 ;; Parameters:    Size  Location     Type
  3637 ;;		None
  3638 ;; Auto vars:     Size  Location     Type
  3639 ;;		None
  3640 ;; Return value:  Size  Location     Type
  3641 ;;                  1    wreg      void 
  3642 ;; Registers used:
  3643 ;;		wreg, status,2, status,0
  3644 ;; Tracked objects:
  3645 ;;		On entry : 0/0
  3646 ;;		On exit  : 0/0
  3647 ;;		Unchanged: 0/0
  3648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3651 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3652 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3653 ;;Total ram usage:        1 bytes
  3654 ;; Hardware stack levels used:    1
  3655 ;; Hardware stack levels required when called:    4
  3656 ;; This function calls:
  3657 ;;		Nothing
  3658 ;; This function is called by:
  3659 ;;		_I2C_Master_Start
  3660 ;;		_I2C_Master_Stop
  3661 ;;		_I2C_Master_Write
  3662 ;;		_I2C_Master_Read
  3663 ;;		_I2C_Master_RepeatedStart
  3664 ;; This function uses a non-reentrant model
  3665 ;;
  3666                           
  3667                           	psect	text20
  3668  00229E                     __ptext20:
  3669                           	opt stack 0
  3670  00229E                     _I2C_Master_Wait:
  3671                           	opt stack 23
  3672  00229E                     l34:
  3673  00229E  B4C7               	btfsc	4039,2,c	;volatile
  3674  0022A0  D7FE               	goto	l34
  3675  0022A2  CFC5 F019          	movff	4037,??_I2C_Master_Wait	;volatile
  3676  0022A6  0E1F               	movlw	31
  3677  0022A8  1619               	andwf	??_I2C_Master_Wait,f,c
  3678  0022AA  B4D8               	btfsc	status,2,c
  3679  0022AC  0012               	return	
  3680  0022AE  D7F7               	goto	l34
  3681  0022B0                     __end_of_I2C_Master_Wait:
  3682                           	opt stack 0
  3683                           tblptru	equ	0xFF8
  3684                           prodh	equ	0xFF4
  3685                           prodl	equ	0xFF3
  3686                           intcon	equ	0xFF2
  3687                           intcon3	equ	0xFF0
  3688                           postinc0	equ	0xFEE
  3689                           wreg	equ	0xFE8
  3690                           indf1	equ	0xFE7
  3691                           fsr1h	equ	0xFE2
  3692                           fsr1l	equ	0xFE1
  3693                           indf2	equ	0xFDF
  3694                           fsr2h	equ	0xFDA
  3695                           fsr2l	equ	0xFD9
  3696                           status	equ	0xFD8
  3697                           
  3698 ;; *************** function _display_sorting_time *****************
  3699 ;; Defined at:
  3700 ;;		line 165 in file "picState.c"
  3701 ;; Parameters:    Size  Location     Type
  3702 ;;		None
  3703 ;; Auto vars:     Size  Location     Type
  3704 ;;  i               2   60[COMRAM] int 
  3705 ;; Return value:  Size  Location     Type
  3706 ;;                  2   92[None  ] int 
  3707 ;; Registers used:
  3708 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3709 ;; Tracked objects:
  3710 ;;		On entry : 0/0
  3711 ;;		On exit  : 0/0
  3712 ;;		Unchanged: 0/0
  3713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3715 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3716 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3717 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3718 ;;Total ram usage:        4 bytes
  3719 ;; Hardware stack levels used:    1
  3720 ;; Hardware stack levels required when called:    7
  3721 ;; This function calls:
  3722 ;;		_lcdInst
  3723 ;;		_printf
  3724 ;; This function is called by:
  3725 ;;		_main
  3726 ;; This function uses a non-reentrant model
  3727 ;;
  3728                           
  3729                           	psect	text21
  3730  001F74                     __ptext21:
  3731                           	opt stack 0
  3732  001F74                     _display_sorting_time:
  3733                           	opt stack 23
  3734                           
  3735                           ;picState.c: 166: lcdInst(0x01);;
  3736                           
  3737                           ;incstack = 0
  3738  001F74  0E01               	movlw	1
  3739  001F76  EC67  F011         	call	_lcdInst
  3740                           
  3741                           ;picState.c: 167: _delay((unsigned long)((10)*(8000000/4000.0)));
  3742  001F7A  0E1A               	movlw	26
  3743  001F7C  6E3B               	movwf	??_display_sorting_time& (0+255),c
  3744  001F7E  0EF8               	movlw	248
  3745  001F80                     u3237:
  3746  001F80  2EE8               	decfsz	wreg,f,c
  3747  001F82  D7FE               	bra	u3237
  3748  001F84  2E3B               	decfsz	??_display_sorting_time& (0+255),f,c
  3749  001F86  D7FC               	bra	u3237
  3750  001F88  D000               	nop2	
  3751                           
  3752                           ;picState.c: 168: LATCbits.LATC1 = 0;
  3753  001F8A  928B               	bcf	3979,1,c	;volatile
  3754                           
  3755                           ;picState.c: 169: int i = passed_time;
  3756  001F8C  C057  F03D         	movff	_passed_time,display_sorting_time@i
  3757  001F90  6A3E               	clrf	display_sorting_time@i+1,c
  3758                           
  3759                           ;picState.c: 170: printf("Time used: %d s", i);
  3760  001F92  0E75               	movlw	low STR_14
  3761  001F94  6E25               	movwf	printf@f,c
  3762  001F96  0E10               	movlw	high STR_14
  3763  001F98  6E26               	movwf	printf@f+1,c
  3764  001F9A  C03D  F027         	movff	display_sorting_time@i,?_printf+2
  3765  001F9E  C03E  F028         	movff	display_sorting_time@i+1,?_printf+3
  3766  001FA2  EC6B  F008         	call	_printf	;wreg free
  3767                           
  3768                           ;picState.c: 171: lcdInst(0b11000000);;
  3769  001FA6  0EC0               	movlw	192
  3770  001FA8  EC67  F011         	call	_lcdInst
  3771                           
  3772                           ;picState.c: 172: _delay((unsigned long)((500)*(8000000/4000.0)));
  3773  001FAC  0E06               	movlw	6
  3774  001FAE  6E3C               	movwf	(??_display_sorting_time+1)& (0+255),c
  3775  001FB0  0E13               	movlw	19
  3776  001FB2  6E3B               	movwf	??_display_sorting_time& (0+255),c
  3777  001FB4  0EAE               	movlw	174
  3778  001FB6                     u3247:
  3779  001FB6  2EE8               	decfsz	wreg,f,c
  3780  001FB8  D7FE               	bra	u3247
  3781  001FBA  2E3B               	decfsz	??_display_sorting_time& (0+255),f,c
  3782  001FBC  D7FC               	bra	u3247
  3783  001FBE  2E3C               	decfsz	(??_display_sorting_time+1)& (0+255),f,c
  3784  001FC0  D7FA               	bra	u3247
  3785                           
  3786                           ;picState.c: 173: flag = 0;
  3787  001FC2  0E00               	movlw	0
  3788  001FC4  6E56               	movwf	_flag+1,c
  3789  001FC6  0E00               	movlw	0
  3790  001FC8  6E55               	movwf	_flag,c
  3791                           
  3792                           ;picState.c: 174: LATDbits.LATD0 = 0;
  3793  001FCA  908C               	bcf	3980,0,c	;volatile
  3794  001FCC  0012               	return		;funcret
  3795  001FCE                     __end_of_display_sorting_time:
  3796                           	opt stack 0
  3797                           tblptru	equ	0xFF8
  3798                           prodh	equ	0xFF4
  3799                           prodl	equ	0xFF3
  3800                           intcon	equ	0xFF2
  3801                           intcon3	equ	0xFF0
  3802                           postinc0	equ	0xFEE
  3803                           wreg	equ	0xFE8
  3804                           indf1	equ	0xFE7
  3805                           fsr1h	equ	0xFE2
  3806                           fsr1l	equ	0xFE1
  3807                           indf2	equ	0xFDF
  3808                           fsr2h	equ	0xFDA
  3809                           fsr2l	equ	0xFD9
  3810                           status	equ	0xFD8
  3811                           
  3812 ;; *************** function _debug *****************
  3813 ;; Defined at:
  3814 ;;		line 42 in file "picState.c"
  3815 ;; Parameters:    Size  Location     Type
  3816 ;;		None
  3817 ;; Auto vars:     Size  Location     Type
  3818 ;;  i               2   60[COMRAM] int 
  3819 ;;  H_max           2   58[COMRAM] int 
  3820 ;; Return value:  Size  Location     Type
  3821 ;;                  2   94[None  ] int 
  3822 ;; Registers used:
  3823 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3824 ;; Tracked objects:
  3825 ;;		On entry : 0/0
  3826 ;;		On exit  : 0/0
  3827 ;;		Unchanged: 0/0
  3828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3830 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3832 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3833 ;;Total ram usage:        4 bytes
  3834 ;; Hardware stack levels used:    1
  3835 ;; Hardware stack levels required when called:    7
  3836 ;; This function calls:
  3837 ;;		_lcdInst
  3838 ;;		_printf
  3839 ;;		_readADC
  3840 ;; This function is called by:
  3841 ;;		_main
  3842 ;; This function uses a non-reentrant model
  3843 ;;
  3844                           
  3845                           	psect	text22
  3846  00219A                     __ptext22:
  3847                           	opt stack 0
  3848  00219A                     _debug:
  3849                           	opt stack 23
  3850                           
  3851                           ;picState.c: 60: int H_max = 0;
  3852                           
  3853                           ;incstack = 0
  3854  00219A  0E00               	movlw	0
  3855  00219C  6E3C               	movwf	debug@H_max+1,c
  3856  00219E  0E00               	movlw	0
  3857  0021A0  6E3B               	movwf	debug@H_max,c
  3858                           
  3859                           ;picState.c: 61: int i = 0;
  3860  0021A2  0E00               	movlw	0
  3861  0021A4  6E3E               	movwf	debug@i+1,c
  3862  0021A6  0E00               	movlw	0
  3863  0021A8  6E3D               	movwf	debug@i,c
  3864  0021AA                     l3412:
  3865                           
  3866                           ;picState.c: 63: lcdInst(0b10000000);;
  3867  0021AA  0E80               	movlw	128
  3868  0021AC  EC67  F011         	call	_lcdInst
  3869                           
  3870                           ;picState.c: 65: readADC(0);
  3871  0021B0  0E00               	movlw	0
  3872  0021B2  EC21  F011         	call	_readADC
  3873                           
  3874                           ;picState.c: 66: printf("%x%x", ADRESH, ADRESL);
  3875  0021B6  0ECC               	movlw	low STR_8
  3876  0021B8  6E25               	movwf	printf@f,c
  3877  0021BA  0E10               	movlw	high STR_8
  3878  0021BC  6E26               	movwf	printf@f+1,c
  3879  0021BE  CFC4 F027          	movff	4036,?_printf+2	;volatile
  3880  0021C2  6A28               	clrf	?_printf+3,c
  3881  0021C4  CFC3 F029          	movff	4035,?_printf+4	;volatile
  3882  0021C8  6A2A               	clrf	?_printf+5,c
  3883  0021CA  EC6B  F008         	call	_printf	;wreg free
  3884  0021CE  D7ED               	goto	l3412
  3885  0021D0                     __end_of_debug:
  3886                           	opt stack 0
  3887                           tblptru	equ	0xFF8
  3888                           prodh	equ	0xFF4
  3889                           prodl	equ	0xFF3
  3890                           intcon	equ	0xFF2
  3891                           intcon3	equ	0xFF0
  3892                           postinc0	equ	0xFEE
  3893                           wreg	equ	0xFE8
  3894                           indf1	equ	0xFE7
  3895                           fsr1h	equ	0xFE2
  3896                           fsr1l	equ	0xFE1
  3897                           indf2	equ	0xFDF
  3898                           fsr2h	equ	0xFDA
  3899                           fsr2l	equ	0xFD9
  3900                           status	equ	0xFD8
  3901                           
  3902 ;; *************** function _readADC *****************
  3903 ;; Defined at:
  3904 ;;		line 21 in file "adc.c"
  3905 ;; Parameters:    Size  Location     Type
  3906 ;;  channel         1    wreg     unsigned char 
  3907 ;; Auto vars:     Size  Location     Type
  3908 ;;  channel         1   25[COMRAM] unsigned char 
  3909 ;; Return value:  Size  Location     Type
  3910 ;;                  1    wreg      void 
  3911 ;; Registers used:
  3912 ;;		wreg, status,2, status,0
  3913 ;; Tracked objects:
  3914 ;;		On entry : 0/0
  3915 ;;		On exit  : 0/0
  3916 ;;		Unchanged: 0/0
  3917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3919 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3920 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3921 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3922 ;;Total ram usage:        2 bytes
  3923 ;; Hardware stack levels used:    1
  3924 ;; Hardware stack levels required when called:    4
  3925 ;; This function calls:
  3926 ;;		Nothing
  3927 ;; This function is called by:
  3928 ;;		_sense_can
  3929 ;;		_readLightSensor
  3930 ;;		_debug
  3931 ;; This function uses a non-reentrant model
  3932 ;;
  3933                           
  3934                           	psect	text23
  3935  002242                     __ptext23:
  3936                           	opt stack 0
  3937  002242                     _readADC:
  3938                           	opt stack 24
  3939                           
  3940                           ;incstack = 0
  3941                           ;readADC@channel stored from wreg
  3942  002242  6E1A               	movwf	readADC@channel,c
  3943                           
  3944                           ;adc.c: 22: ADCON0 = (ADCON0 & 0X3C)|((channel & 0x0F)<<2);
  3945  002244  C01A  F019         	movff	readADC@channel,??_readADC
  3946  002248  0E0F               	movlw	15
  3947  00224A  1619               	andwf	??_readADC,f,c
  3948  00224C  90D8               	bcf	status,0,c
  3949  00224E  3619               	rlcf	??_readADC,f,c
  3950  002250  90D8               	bcf	status,0,c
  3951  002252  3619               	rlcf	??_readADC,f,c
  3952  002254  50C2               	movf	4034,w,c	;volatile
  3953  002256  0B3C               	andlw	60
  3954  002258  1019               	iorwf	??_readADC,w,c
  3955  00225A  6EC2               	movwf	4034,c	;volatile
  3956                           
  3957                           ;adc.c: 23: ADON = 1;
  3958  00225C  80C2               	bsf	4034,0,c	;volatile
  3959                           
  3960                           ;adc.c: 24: ADCON0bits.GO = 1;
  3961  00225E  82C2               	bsf	4034,1,c	;volatile
  3962  002260                     l128:
  3963  002260  A2C2               	btfss	4034,1,c	;volatile
  3964  002262  0012               	return	
  3965  002264  D7FD               	goto	l128
  3966  002266                     __end_of_readADC:
  3967                           	opt stack 0
  3968                           tblptru	equ	0xFF8
  3969                           prodh	equ	0xFF4
  3970                           prodl	equ	0xFF3
  3971                           intcon	equ	0xFF2
  3972                           intcon3	equ	0xFF0
  3973                           postinc0	equ	0xFEE
  3974                           wreg	equ	0xFE8
  3975                           indf1	equ	0xFE7
  3976                           fsr1h	equ	0xFE2
  3977                           fsr1l	equ	0xFE1
  3978                           indf2	equ	0xFDF
  3979                           fsr2h	equ	0xFDA
  3980                           fsr2l	equ	0xFD9
  3981                           status	equ	0xFD8
  3982                           
  3983 ;; *************** function _printf *****************
  3984 ;; Defined at:
  3985 ;;		line 464 in file "/Applications/microchip/xc8/v1.41/sources/common/doprnt.c"
  3986 ;; Parameters:    Size  Location     Type
  3987 ;;  f               2   36[COMRAM] PTR const unsigned char 
  3988 ;;		 -> STR_14(16), STR_13(15), STR_12(15), STR_11(3), 
  3989 ;;		 -> STR_10(20), STR_9(16), STR_8(5), STR_7(10), 
  3990 ;;		 -> STR_6(15), STR_5(7), STR_4(21), STR_3(13), 
  3991 ;;		 -> STR_2(9), STR_1(3), 
  3992 ;; Auto vars:     Size  Location     Type
  3993 ;;  idx             1   48[COMRAM] unsigned char 
  3994 ;;  tmpval          4    0        struct .
  3995 ;;  cp              3    0        PTR const unsigned char 
  3996 ;;  width           2   55[COMRAM] int 
  3997 ;;  val             2   52[COMRAM] unsigned int 
  3998 ;;  ap              2   49[COMRAM] PTR void [1]
  3999 ;;		 -> ?_printf(2), 
  4000 ;;  len             2    0        unsigned int 
  4001 ;;  c               1   57[COMRAM] char 
  4002 ;;  flag            1   54[COMRAM] unsigned char 
  4003 ;;  prec            1   51[COMRAM] char 
  4004 ;; Return value:  Size  Location     Type
  4005 ;;                  2   36[COMRAM] int 
  4006 ;; Registers used:
  4007 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4008 ;; Tracked objects:
  4009 ;;		On entry : 0/0
  4010 ;;		On exit  : 0/0
  4011 ;;		Unchanged: 0/0
  4012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4013 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4014 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4015 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4016 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4017 ;;Total ram usage:       22 bytes
  4018 ;; Hardware stack levels used:    1
  4019 ;; Hardware stack levels required when called:    6
  4020 ;; This function calls:
  4021 ;;		___lwdiv
  4022 ;;		___lwmod
  4023 ;;		___wmul
  4024 ;;		_isdigit
  4025 ;;		_putch
  4026 ;; This function is called by:
  4027 ;;		_readLightSensor
  4028 ;;		_welcome
  4029 ;;		_debug
  4030 ;;		_sort
  4031 ;;		_display_time
  4032 ;;		_display_sorting_time
  4033 ;; This function uses a non-reentrant model
  4034 ;;
  4035                           
  4036                           	psect	text24
  4037  0010D6                     __ptext24:
  4038                           	opt stack 0
  4039  0010D6                     _printf:
  4040                           	opt stack 23
  4041                           
  4042                           ;doprnt.c: 466: va_list ap;
  4043                           ;doprnt.c: 499: signed char c;
  4044                           ;doprnt.c: 501: int width;
  4045                           ;doprnt.c: 506: signed char prec;
  4046                           ;doprnt.c: 508: unsigned char flag;
  4047                           ;doprnt.c: 523: union {
  4048                           ;doprnt.c: 524: unsigned long vd;
  4049                           ;doprnt.c: 525: double integ;
  4050                           ;doprnt.c: 526: } tmpval;
  4051                           ;doprnt.c: 528: unsigned int val;
  4052                           ;doprnt.c: 529: unsigned len;
  4053                           ;doprnt.c: 530: const char * cp;
  4054                           ;doprnt.c: 533: *ap = __va_start();
  4055                           
  4056                           ;incstack = 0
  4057  0010D6  0E27               	movlw	low (?_printf+2)
  4058  0010D8  6E32               	movwf	printf@ap,c
  4059  0010DA  0E00               	movlw	high (?_printf+2)
  4060  0010DC  6E33               	movwf	printf@ap+1,c
  4061                           
  4062                           ;doprnt.c: 536: while(c = *f++) {
  4063  0010DE  D174               	goto	l2994
  4064  0010E0                     l2868:
  4065                           
  4066                           ;doprnt.c: 538: if(c != '%')
  4067  0010E0  0E25               	movlw	37
  4068  0010E2  183A               	xorwf	printf@c,w,c
  4069  0010E4  B4D8               	btfsc	status,2,c
  4070  0010E6  D004               	goto	l2872
  4071                           
  4072                           ;doprnt.c: 540: {
  4073                           ;doprnt.c: 541: (putch(c) );
  4074  0010E8  503A               	movf	printf@c,w,c
  4075  0010EA  EC61  F011         	call	_putch
  4076                           
  4077                           ;doprnt.c: 542: continue;
  4078  0010EE  D16C               	goto	l2994
  4079  0010F0                     l2872:
  4080                           
  4081                           ;doprnt.c: 543: }
  4082                           ;doprnt.c: 546: width = 0;
  4083  0010F0  0E00               	movlw	0
  4084  0010F2  6E39               	movwf	printf@width+1,c
  4085  0010F4  0E00               	movlw	0
  4086  0010F6  6E38               	movwf	printf@width,c
  4087                           
  4088                           ;doprnt.c: 548: flag = 0;
  4089  0010F8  0E00               	movlw	0
  4090  0010FA  6E37               	movwf	printf@flag,c
  4091                           
  4092                           ;doprnt.c: 551: switch(*f) {
  4093                           
  4094                           ;doprnt.c: 550: for(;;) {
  4095  0010FC  D003               	goto	l2878
  4096  0010FE                     l2874:
  4097                           
  4098                           ;doprnt.c: 580: flag |= 0x04;
  4099  0010FE  8437               	bsf	printf@flag,2,c
  4100                           
  4101                           ;doprnt.c: 581: f++;
  4102  001100  4A25               	infsnz	printf@f,f,c
  4103  001102  2A26               	incf	printf@f+1,f,c
  4104  001104                     l2878:
  4105  001104  C025  FFF6         	movff	printf@f,tblptrl
  4106  001108  C026  FFF7         	movff	printf@f+1,tblptrh
  4107  00110C                     	if	0	;tblptru may be non-zero
  4108  00110C                     	endif
  4109  00110C                     	if	0	;tblptru may be non-zero
  4110  00110C                     	endif
  4111  00110C  0008               	tblrd		*
  4112  00110E  50F5               	movf	tablat,w,c
  4113                           
  4114                           ; Switch size 1, requested type "space"
  4115                           ; Number of cases is 1, Range of values is 48 to 48
  4116                           ; switch strategies available:
  4117                           ; Name         Instructions Cycles
  4118                           ; simple_byte            4     3 (average)
  4119                           ;	Chosen strategy is simple_byte
  4120  001110  0A30               	xorlw	48	; case 48
  4121  001112  B4D8               	btfsc	status,2,c
  4122  001114  D7F4               	goto	l2874
  4123                           
  4124                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4125                           
  4126                           ;doprnt.c: 586: }
  4127                           
  4128                           ;doprnt.c: 585: break;
  4129  001116  C025  FFF6         	movff	printf@f,tblptrl
  4130  00111A  C026  FFF7         	movff	printf@f+1,tblptrh
  4131  00111E                     	if	0	;tblptru may be non-zero
  4132  00111E                     	endif
  4133  00111E                     	if	0	;tblptru may be non-zero
  4134  00111E                     	endif
  4135  00111E  0008               	tblrd		*
  4136  001120  50F5               	movf	tablat,w,c
  4137  001122  EC33  F011         	call	_isdigit
  4138  001126  A0D8               	btfss	status,0,c
  4139  001128  D035               	goto	l2896
  4140                           
  4141                           ;doprnt.c: 598: width = 0;
  4142  00112A  0E00               	movlw	0
  4143  00112C  6E39               	movwf	printf@width+1,c
  4144  00112E  0E00               	movlw	0
  4145  001130  6E38               	movwf	printf@width,c
  4146  001132                     l2884:
  4147                           
  4148                           ;doprnt.c: 600: width *= 10;
  4149  001132  C038  F019         	movff	printf@width,___wmul@multiplier
  4150  001136  C039  F01A         	movff	printf@width+1,___wmul@multiplier+1
  4151  00113A  0E00               	movlw	0
  4152  00113C  6E1C               	movwf	___wmul@multiplicand+1,c
  4153  00113E  0E0A               	movlw	10
  4154  001140  6E1B               	movwf	___wmul@multiplicand,c
  4155  001142  ECFB  F010         	call	___wmul	;wreg free
  4156  001146  C019  F038         	movff	?___wmul,printf@width
  4157  00114A  C01A  F039         	movff	?___wmul+1,printf@width+1
  4158                           
  4159                           ;doprnt.c: 601: width += *f++ - '0';
  4160  00114E  0ED0               	movlw	208
  4161  001150  6E2D               	movwf	??_printf& (0+255),c
  4162  001152  0EFF               	movlw	255
  4163  001154  6E2E               	movwf	(??_printf+1)& (0+255),c
  4164  001156  C025  FFF6         	movff	printf@f,tblptrl
  4165  00115A  C026  FFF7         	movff	printf@f+1,tblptrh
  4166  00115E                     	if	0	;tblptru may be non-zero
  4167  00115E                     	endif
  4168  00115E                     	if	0	;tblptru may be non-zero
  4169  00115E                     	endif
  4170  00115E  0008               	tblrd		*
  4171  001160  50F5               	movf	tablat,w,c
  4172  001162  6E2F               	movwf	(??_printf+2)& (0+255),c
  4173  001164  6A30               	clrf	(??_printf+3)& (0+255),c
  4174  001166  502D               	movf	??_printf,w,c
  4175  001168  262F               	addwf	??_printf+2,f,c
  4176  00116A  502E               	movf	??_printf+1,w,c
  4177  00116C  2230               	addwfc	??_printf+3,f,c
  4178  00116E  502F               	movf	??_printf+2,w,c
  4179  001170  2638               	addwf	printf@width,f,c
  4180  001172  5030               	movf	??_printf+3,w,c
  4181  001174  2239               	addwfc	printf@width+1,f,c
  4182  001176  4A25               	infsnz	printf@f,f,c
  4183  001178  2A26               	incf	printf@f+1,f,c
  4184                           
  4185                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4186  00117A  C025  FFF6         	movff	printf@f,tblptrl
  4187  00117E  C026  FFF7         	movff	printf@f+1,tblptrh
  4188  001182                     	if	0	;tblptru may be non-zero
  4189  001182                     	endif
  4190  001182                     	if	0	;tblptru may be non-zero
  4191  001182                     	endif
  4192  001182  0008               	tblrd		*
  4193  001184  50F5               	movf	tablat,w,c
  4194  001186  EC33  F011         	call	_isdigit
  4195  00118A  A0D8               	btfss	status,0,c
  4196  00118C  D003               	goto	l2896
  4197  00118E  D7D1               	goto	l2884
  4198  001190                     l2892:
  4199                           
  4200                           ;doprnt.c: 721: flag |= 0x80;
  4201  001190  8E37               	bsf	printf@flag,7,c
  4202                           
  4203                           ;doprnt.c: 723: break;
  4204  001192  D017               	goto	l464
  4205  001194                     l2896:
  4206  001194  C025  FFF6         	movff	printf@f,tblptrl
  4207  001198  C026  FFF7         	movff	printf@f+1,tblptrh
  4208  00119C  4A25               	infsnz	printf@f,f,c
  4209  00119E  2A26               	incf	printf@f+1,f,c
  4210  0011A0                     	if	0	;tblptru may be non-zero
  4211  0011A0                     	endif
  4212  0011A0                     	if	0	;tblptru may be non-zero
  4213  0011A0                     	endif
  4214  0011A0  0008               	tblrd		*
  4215  0011A2  CFF5 F03A          	movff	tablat,printf@c
  4216  0011A6  503A               	movf	printf@c,w,c
  4217                           
  4218                           ; Switch size 1, requested type "space"
  4219                           ; Number of cases is 4, Range of values is 0 to 120
  4220                           ; switch strategies available:
  4221                           ; Name         Instructions Cycles
  4222                           ; simple_byte           13     7 (average)
  4223                           ;	Chosen strategy is simple_byte
  4224  0011A8  0A00               	xorlw	0	; case 0
  4225  0011AA  B4D8               	btfsc	status,2,c
  4226  0011AC  0012               	return	
  4227  0011AE  0A64               	xorlw	100	; case 100
  4228  0011B0  B4D8               	btfsc	status,2,c
  4229  0011B2  D007               	goto	l464
  4230  0011B4  0A0D               	xorlw	13	; case 105
  4231  0011B6  B4D8               	btfsc	status,2,c
  4232  0011B8  D004               	goto	l464
  4233  0011BA  0A11               	xorlw	17	; case 120
  4234  0011BC  B4D8               	btfsc	status,2,c
  4235  0011BE  D7E8               	goto	l2892
  4236  0011C0  D103               	goto	l2994
  4237  0011C2                     l464:
  4238                           
  4239                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  4240  0011C2  BE37               	btfsc	printf@flag,7,c
  4241  0011C4  D015               	goto	l2908
  4242                           
  4243                           ;doprnt.c: 1253: {
  4244                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4245  0011C6  C032  FFD9         	movff	printf@ap,fsr2l
  4246  0011CA  C033  FFDA         	movff	printf@ap+1,fsr2h
  4247  0011CE  CFDE F035          	movff	postinc2,printf@val
  4248  0011D2  CFDD F036          	movff	postdec2,printf@val+1
  4249  0011D6  0E02               	movlw	2
  4250  0011D8  2632               	addwf	printf@ap,f,c
  4251  0011DA  0E00               	movlw	0
  4252  0011DC  2233               	addwfc	printf@ap+1,f,c
  4253                           
  4254                           ;doprnt.c: 1261: if((int)val < 0) {
  4255  0011DE  AE36               	btfss	printf@val+1,7,c
  4256  0011E0  D044               	goto	l2942
  4257                           
  4258                           ;doprnt.c: 1262: flag |= 0x03;
  4259  0011E2  0E03               	movlw	3
  4260  0011E4  1237               	iorwf	printf@flag,f,c
  4261                           
  4262                           ;doprnt.c: 1263: val = -val;
  4263  0011E6  6C35               	negf	printf@val,c
  4264  0011E8  1E36               	comf	printf@val+1,f,c
  4265  0011EA  B0D8               	btfsc	status,0,c
  4266  0011EC  2A36               	incf	printf@val+1,f,c
  4267                           
  4268                           ;doprnt.c: 1264: }
  4269                           ;doprnt.c: 1266: }
  4270  0011EE  D03D               	goto	l2942
  4271  0011F0                     l2908:
  4272                           
  4273                           ;doprnt.c: 1268: else
  4274                           ;doprnt.c: 1273: {
  4275                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4276  0011F0  C032  FFD9         	movff	printf@ap,fsr2l
  4277  0011F4  C033  FFDA         	movff	printf@ap+1,fsr2h
  4278  0011F8  CFDE F035          	movff	postinc2,printf@val
  4279  0011FC  CFDD F036          	movff	postdec2,printf@val+1
  4280  001200  0E02               	movlw	2
  4281  001202  2632               	addwf	printf@ap,f,c
  4282  001204  0E00               	movlw	0
  4283  001206  2233               	addwfc	printf@ap+1,f,c
  4284                           
  4285                           ;doprnt.c: 1287: }
  4286                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  4287  001208  D030               	goto	l2942
  4288  00120A                     l2912:
  4289                           
  4290                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4291  00120A  0E01               	movlw	1
  4292  00120C  6E3A               	movwf	printf@c,c
  4293  00120E                     l2914:
  4294  00120E  0E05               	movlw	5
  4295  001210  183A               	xorwf	printf@c,w,c
  4296  001212  B4D8               	btfsc	status,2,c
  4297  001214  D032               	goto	l2944
  4298                           
  4299                           ;doprnt.c: 1306: if(val < dpowers[c])
  4300  001216  503A               	movf	printf@c,w,c
  4301  001218  0D02               	mullw	2
  4302  00121A  0E12               	movlw	low _dpowers
  4303  00121C  24F3               	addwf	prodl,w,c
  4304  00121E  6EF6               	movwf	tblptrl,c
  4305  001220  0E10               	movlw	high _dpowers
  4306  001222  20F4               	addwfc	prodh,w,c
  4307  001224  6EF7               	movwf	tblptrh,c
  4308  001226                     	if	0	;There are less than 3 active tblptr bytes
  4309  001226                     	endif
  4310  001226  0009               	tblrd		*+
  4311  001228  50F5               	movf	tablat,w,c
  4312  00122A  5C35               	subwf	printf@val,w,c
  4313  00122C  0009               	tblrd		*+
  4314  00122E  50F5               	movf	tablat,w,c
  4315  001230  5836               	subwfb	printf@val+1,w,c
  4316  001232  A0D8               	btfss	status,0,c
  4317  001234  D022               	goto	l2944
  4318                           
  4319                           ;doprnt.c: 1307: break;
  4320  001236  2A3A               	incf	printf@c,f,c
  4321  001238  D7EA               	goto	l2914
  4322  00123A                     l2926:
  4323                           
  4324                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4325  00123A  0E01               	movlw	1
  4326  00123C  6E3A               	movwf	printf@c,c
  4327  00123E                     l2928:
  4328  00123E  0E04               	movlw	4
  4329  001240  183A               	xorwf	printf@c,w,c
  4330  001242  B4D8               	btfsc	status,2,c
  4331  001244  D01A               	goto	l2944
  4332                           
  4333                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4334  001246  503A               	movf	printf@c,w,c
  4335  001248  0D02               	mullw	2
  4336  00124A  0E1C               	movlw	low _hexpowers
  4337  00124C  24F3               	addwf	prodl,w,c
  4338  00124E  6EF6               	movwf	tblptrl,c
  4339  001250  0E10               	movlw	high _hexpowers
  4340  001252  20F4               	addwfc	prodh,w,c
  4341  001254  6EF7               	movwf	tblptrh,c
  4342  001256                     	if	0	;There are less than 3 active tblptr bytes
  4343  001256                     	endif
  4344  001256  0009               	tblrd		*+
  4345  001258  50F5               	movf	tablat,w,c
  4346  00125A  5C35               	subwf	printf@val,w,c
  4347  00125C  0009               	tblrd		*+
  4348  00125E  50F5               	movf	tablat,w,c
  4349  001260  5836               	subwfb	printf@val+1,w,c
  4350  001262  A0D8               	btfss	status,0,c
  4351  001264  D00A               	goto	l2944
  4352                           
  4353                           ;doprnt.c: 1318: break;
  4354  001266  2A3A               	incf	printf@c,f,c
  4355  001268  D7EA               	goto	l2928
  4356  00126A                     l2942:
  4357  00126A  5037               	movf	printf@flag,w,c
  4358  00126C  0B80               	andlw	128
  4359                           
  4360                           ; Switch size 1, requested type "space"
  4361                           ; Number of cases is 2, Range of values is 0 to 128
  4362                           ; switch strategies available:
  4363                           ; Name         Instructions Cycles
  4364                           ; simple_byte            7     4 (average)
  4365                           ;	Chosen strategy is simple_byte
  4366  00126E  0A00               	xorlw	0	; case 0
  4367  001270  B4D8               	btfsc	status,2,c
  4368  001272  D7CB               	goto	l2912
  4369  001274  0A80               	xorlw	128	; case 128
  4370  001276  B4D8               	btfsc	status,2,c
  4371  001278  D7E0               	goto	l2926
  4372  00127A                     l2944:
  4373                           
  4374                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4375  00127A  5038               	movf	printf@width,w,c
  4376  00127C  1039               	iorwf	printf@width+1,w,c
  4377  00127E  B4D8               	btfsc	status,2,c
  4378  001280  D009               	goto	l2950
  4379  001282  C037  F02D         	movff	printf@flag,??_printf
  4380  001286  0E03               	movlw	3
  4381  001288  162D               	andwf	??_printf,f,c
  4382  00128A  B4D8               	btfsc	status,2,c
  4383  00128C  D003               	goto	l2950
  4384                           
  4385                           ;doprnt.c: 1346: width--;
  4386  00128E  0638               	decf	printf@width,f,c
  4387  001290  A0D8               	btfss	status,0,c
  4388  001292  0639               	decf	printf@width+1,f,c
  4389  001294                     l2950:
  4390                           
  4391                           ;doprnt.c: 1381: if(width > c)
  4392  001294  0E80               	movlw	128
  4393  001296  BE3A               	btfsc	printf@c,7,c
  4394  001298  0E7F               	movlw	127
  4395  00129A  6E2D               	movwf	??_printf& (0+255),c
  4396  00129C  5038               	movf	printf@width,w,c
  4397  00129E  5C3A               	subwf	printf@c,w,c
  4398  0012A0  5039               	movf	printf@width+1,w,c
  4399  0012A2  0A80               	xorlw	128
  4400  0012A4  582D               	subwfb	??_printf& (0+255),w,c
  4401  0012A6  B0D8               	btfsc	status,0,c
  4402  0012A8  D007               	goto	l2954
  4403                           
  4404                           ;doprnt.c: 1382: width -= c;
  4405  0012AA  503A               	movf	printf@c,w,c
  4406  0012AC  5E38               	subwf	printf@width,f,c
  4407  0012AE  0E00               	movlw	0
  4408  0012B0  BE3A               	btfsc	printf@c,7,c
  4409  0012B2  0EFF               	movlw	255
  4410  0012B4  5A39               	subwfb	printf@width+1,f,c
  4411  0012B6  D004               	goto	l2956
  4412  0012B8                     l2954:
  4413                           
  4414                           ;doprnt.c: 1383: else
  4415                           ;doprnt.c: 1384: width = 0;
  4416  0012B8  0E00               	movlw	0
  4417  0012BA  6E39               	movwf	printf@width+1,c
  4418  0012BC  0E00               	movlw	0
  4419  0012BE  6E38               	movwf	printf@width,c
  4420  0012C0                     l2956:
  4421                           
  4422                           ;doprnt.c: 1387: if(flag & 0x04) {
  4423  0012C0  A437               	btfss	printf@flag,2,c
  4424  0012C2  D014               	goto	l2968
  4425                           
  4426                           ;doprnt.c: 1392: if(flag & 0x03)
  4427  0012C4  C037  F02D         	movff	printf@flag,??_printf
  4428  0012C8  0E03               	movlw	3
  4429  0012CA  162D               	andwf	??_printf,f,c
  4430  0012CC  B4D8               	btfsc	status,2,c
  4431  0012CE  D003               	goto	l2962
  4432                           
  4433                           ;doprnt.c: 1393: (putch('-') );
  4434  0012D0  0E2D               	movlw	45
  4435  0012D2  EC61  F011         	call	_putch
  4436  0012D6                     l2962:
  4437                           
  4438                           ;doprnt.c: 1415: if(width)
  4439  0012D6  5038               	movf	printf@width,w,c
  4440  0012D8  1039               	iorwf	printf@width+1,w,c
  4441  0012DA  B4D8               	btfsc	status,2,c
  4442  0012DC  D01E               	goto	l2978
  4443                           
  4444                           ;doprnt.c: 1417: (putch('0') );
  4445                           
  4446                           ;doprnt.c: 1416: do
  4447  0012DE  0E30               	movlw	48
  4448  0012E0  EC61  F011         	call	_putch
  4449                           
  4450                           ;doprnt.c: 1418: while(--width);
  4451  0012E4  0638               	decf	printf@width,f,c
  4452  0012E6  A0D8               	btfss	status,0,c
  4453  0012E8  0639               	decf	printf@width+1,f,c
  4454  0012EA  D7F5               	goto	l2962
  4455  0012EC                     l2968:
  4456                           
  4457                           ;doprnt.c: 1422: {
  4458                           ;doprnt.c: 1424: if(width
  4459                           ;doprnt.c: 1428: )
  4460  0012EC  5038               	movf	printf@width,w,c
  4461  0012EE  1039               	iorwf	printf@width+1,w,c
  4462  0012F0  B4D8               	btfsc	status,2,c
  4463  0012F2  D00A               	goto	l2974
  4464  0012F4                     l2970:
  4465                           
  4466                           ;doprnt.c: 1430: (putch(' ') );
  4467  0012F4  0E20               	movlw	32
  4468  0012F6  EC61  F011         	call	_putch
  4469                           
  4470                           ;doprnt.c: 1431: while(--width);
  4471  0012FA  0638               	decf	printf@width,f,c
  4472  0012FC  A0D8               	btfss	status,0,c
  4473  0012FE  0639               	decf	printf@width+1,f,c
  4474  001300  5038               	movf	printf@width,w,c
  4475  001302  1039               	iorwf	printf@width+1,w,c
  4476  001304  A4D8               	btfss	status,2,c
  4477  001306  D7F6               	goto	l2970
  4478  001308                     l2974:
  4479                           
  4480                           ;doprnt.c: 1438: if(flag & 0x03)
  4481  001308  C037  F02D         	movff	printf@flag,??_printf
  4482  00130C  0E03               	movlw	3
  4483  00130E  162D               	andwf	??_printf,f,c
  4484  001310  B4D8               	btfsc	status,2,c
  4485  001312  D003               	goto	l2978
  4486                           
  4487                           ;doprnt.c: 1439: (putch('-') );
  4488  001314  0E2D               	movlw	45
  4489  001316  EC61  F011         	call	_putch
  4490  00131A                     l2978:
  4491                           
  4492                           ;doprnt.c: 1469: }
  4493                           ;doprnt.c: 1472: prec = c;
  4494  00131A  C03A  F034         	movff	printf@c,printf@prec
  4495                           
  4496                           ;doprnt.c: 1474: while(prec--) {
  4497  00131E  D050               	goto	l2992
  4498  001320                     l2980:
  4499                           
  4500                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4501  001320  5034               	movf	printf@prec,w,c
  4502  001322  0D02               	mullw	2
  4503  001324  0E12               	movlw	low _dpowers
  4504  001326  24F3               	addwf	prodl,w,c
  4505  001328  6EF6               	movwf	tblptrl,c
  4506  00132A  0E10               	movlw	high _dpowers
  4507  00132C  20F4               	addwfc	prodh,w,c
  4508  00132E  6EF7               	movwf	tblptrh,c
  4509  001330                     	if	0	;There are less than 3 active tblptr bytes
  4510  001330                     	endif
  4511  001330  0009               	tblrd		*+
  4512  001332  CFF5 F01B          	movff	tablat,___lwdiv@divisor
  4513  001336  000A               	tblrd		*-
  4514  001338  CFF5 F01C          	movff	tablat,___lwdiv@divisor+1
  4515  00133C  C035  F019         	movff	printf@val,___lwdiv@dividend
  4516  001340  C036  F01A         	movff	printf@val+1,___lwdiv@dividend+1
  4517  001344  EC3D  F010         	call	___lwdiv	;wreg free
  4518  001348  C019  F020         	movff	?___lwdiv,___lwmod@dividend
  4519  00134C  C01A  F021         	movff	?___lwdiv+1,___lwmod@dividend+1
  4520  001350  0E00               	movlw	0
  4521  001352  6E23               	movwf	___lwmod@divisor+1,c
  4522  001354  0E0A               	movlw	10
  4523  001356  6E22               	movwf	___lwmod@divisor,c
  4524  001358  ECAC  F010         	call	___lwmod	;wreg free
  4525  00135C  5020               	movf	?___lwmod,w,c
  4526  00135E  0F30               	addlw	48
  4527  001360  6E3A               	movwf	printf@c,c
  4528                           
  4529                           ;doprnt.c: 1491: break;
  4530  001362  D02B               	goto	l2990
  4531  001364                     l2982:
  4532                           
  4533                           ;doprnt.c: 1499: {
  4534                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4535  001364  C035  F019         	movff	printf@val,___lwdiv@dividend
  4536  001368  C036  F01A         	movff	printf@val+1,___lwdiv@dividend+1
  4537  00136C  5034               	movf	printf@prec,w,c
  4538  00136E  0D02               	mullw	2
  4539  001370  0E1C               	movlw	low _hexpowers
  4540  001372  24F3               	addwf	prodl,w,c
  4541  001374  6EF6               	movwf	tblptrl,c
  4542  001376  0E10               	movlw	high _hexpowers
  4543  001378  20F4               	addwfc	prodh,w,c
  4544  00137A  6EF7               	movwf	tblptrh,c
  4545  00137C                     	if	0	;There are less than 3 active tblptr bytes
  4546  00137C                     	endif
  4547  00137C  0009               	tblrd		*+
  4548  00137E  CFF5 F01B          	movff	tablat,___lwdiv@divisor
  4549  001382  000A               	tblrd		*-
  4550  001384  CFF5 F01C          	movff	tablat,___lwdiv@divisor+1
  4551  001388  EC3D  F010         	call	___lwdiv	;wreg free
  4552  00138C  5019               	movf	?___lwdiv,w,c
  4553  00138E  0B0F               	andlw	15
  4554  001390  6E31               	movwf	printf@idx,c
  4555                           
  4556                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4557  001392  5031               	movf	printf@idx,w,c
  4558  001394  0D01               	mullw	1
  4559  001396  0E54               	movlw	low STR_15
  4560  001398  24F3               	addwf	prodl,w,c
  4561  00139A  6EF6               	movwf	tblptrl,c
  4562  00139C  0E10               	movlw	high STR_15
  4563  00139E  20F4               	addwfc	prodh,w,c
  4564  0013A0  6EF7               	movwf	tblptrh,c
  4565  0013A2                     	if	0	;There are less than 3 active tblptr bytes
  4566  0013A2                     	endif
  4567  0013A2  0008               	tblrd		*
  4568  0013A4  CFF5 F03A          	movff	tablat,printf@c
  4569                           
  4570                           ;doprnt.c: 1523: }
  4571                           
  4572                           ;doprnt.c: 1508: }
  4573                           ;doprnt.c: 1510: break;
  4574  0013A8  D008               	goto	l2990
  4575  0013AA                     l2988:
  4576  0013AA  5037               	movf	printf@flag,w,c
  4577  0013AC  0B80               	andlw	128
  4578                           
  4579                           ; Switch size 1, requested type "space"
  4580                           ; Number of cases is 2, Range of values is 0 to 128
  4581                           ; switch strategies available:
  4582                           ; Name         Instructions Cycles
  4583                           ; simple_byte            7     4 (average)
  4584                           ;	Chosen strategy is simple_byte
  4585  0013AE  0A00               	xorlw	0	; case 0
  4586  0013B0  B4D8               	btfsc	status,2,c
  4587  0013B2  D7B6               	goto	l2980
  4588  0013B4  0A80               	xorlw	128	; case 128
  4589  0013B6  B4D8               	btfsc	status,2,c
  4590  0013B8  D7D5               	goto	l2982
  4591  0013BA                     l2990:
  4592                           
  4593                           ;doprnt.c: 1524: (putch(c) );
  4594  0013BA  503A               	movf	printf@c,w,c
  4595  0013BC  EC61  F011         	call	_putch
  4596  0013C0                     l2992:
  4597  0013C0  0634               	decf	printf@prec,f,c
  4598  0013C2  2834               	incf	printf@prec,w,c
  4599  0013C4  A4D8               	btfss	status,2,c
  4600  0013C6  D7F1               	goto	l2988
  4601  0013C8                     l2994:
  4602  0013C8  C025  FFF6         	movff	printf@f,tblptrl
  4603  0013CC  C026  FFF7         	movff	printf@f+1,tblptrh
  4604  0013D0  4A25               	infsnz	printf@f,f,c
  4605  0013D2  2A26               	incf	printf@f+1,f,c
  4606  0013D4                     	if	0	;tblptru may be non-zero
  4607  0013D4                     	endif
  4608  0013D4                     	if	0	;tblptru may be non-zero
  4609  0013D4                     	endif
  4610  0013D4  0008               	tblrd		*
  4611  0013D6  CFF5 F03A          	movff	tablat,printf@c
  4612  0013DA  503A               	movf	printf@c,w,c
  4613  0013DC  B4D8               	btfsc	status,2,c
  4614  0013DE  0012               	return	
  4615  0013E0  D67F               	goto	l2868
  4616  0013E2                     __end_of_printf:
  4617                           	opt stack 0
  4618                           tblptru	equ	0xFF8
  4619                           tblptrh	equ	0xFF7
  4620                           tblptrl	equ	0xFF6
  4621                           tablat	equ	0xFF5
  4622                           prodh	equ	0xFF4
  4623                           prodl	equ	0xFF3
  4624                           intcon	equ	0xFF2
  4625                           intcon3	equ	0xFF0
  4626                           postinc0	equ	0xFEE
  4627                           wreg	equ	0xFE8
  4628                           indf1	equ	0xFE7
  4629                           fsr1h	equ	0xFE2
  4630                           fsr1l	equ	0xFE1
  4631                           indf2	equ	0xFDF
  4632                           postinc2	equ	0xFDE
  4633                           postdec2	equ	0xFDD
  4634                           fsr2h	equ	0xFDA
  4635                           fsr2l	equ	0xFD9
  4636                           status	equ	0xFD8
  4637                           
  4638 ;; *************** function _putch *****************
  4639 ;; Defined at:
  4640 ;;		line 30 in file "lcd.c"
  4641 ;; Parameters:    Size  Location     Type
  4642 ;;  data            1    wreg     unsigned char 
  4643 ;; Auto vars:     Size  Location     Type
  4644 ;;  data            1   26[COMRAM] unsigned char 
  4645 ;; Return value:  Size  Location     Type
  4646 ;;                  1    wreg      void 
  4647 ;; Registers used:
  4648 ;;		wreg, status,2, status,0, cstack
  4649 ;; Tracked objects:
  4650 ;;		On entry : 0/0
  4651 ;;		On exit  : 0/0
  4652 ;;		Unchanged: 0/0
  4653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4655 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4657 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4658 ;;Total ram usage:        1 bytes
  4659 ;; Hardware stack levels used:    1
  4660 ;; Hardware stack levels required when called:    5
  4661 ;; This function calls:
  4662 ;;		_lcdNibble
  4663 ;; This function is called by:
  4664 ;;		_printf
  4665 ;; This function uses a non-reentrant model
  4666 ;;
  4667                           
  4668                           	psect	text25
  4669  0022C2                     __ptext25:
  4670                           	opt stack 0
  4671  0022C2                     _putch:
  4672                           	opt stack 23
  4673                           
  4674                           ;incstack = 0
  4675                           ;putch@data stored from wreg
  4676  0022C2  6E1B               	movwf	putch@data,c
  4677                           
  4678                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  4679  0022C4  848C               	bsf	3980,2,c	;volatile
  4680                           
  4681                           ;lcd.c: 32: lcdNibble(data);
  4682  0022C6  501B               	movf	putch@data,w,c
  4683  0022C8  ECE7  F00F         	call	_lcdNibble
  4684  0022CC  0012               	return		;funcret
  4685  0022CE                     __end_of_putch:
  4686                           	opt stack 0
  4687                           tblptru	equ	0xFF8
  4688                           tblptrh	equ	0xFF7
  4689                           tblptrl	equ	0xFF6
  4690                           tablat	equ	0xFF5
  4691                           prodh	equ	0xFF4
  4692                           prodl	equ	0xFF3
  4693                           intcon	equ	0xFF2
  4694                           intcon3	equ	0xFF0
  4695                           postinc0	equ	0xFEE
  4696                           wreg	equ	0xFE8
  4697                           indf1	equ	0xFE7
  4698                           fsr1h	equ	0xFE2
  4699                           fsr1l	equ	0xFE1
  4700                           indf2	equ	0xFDF
  4701                           postinc2	equ	0xFDE
  4702                           postdec2	equ	0xFDD
  4703                           fsr2h	equ	0xFDA
  4704                           fsr2l	equ	0xFD9
  4705                           status	equ	0xFD8
  4706                           
  4707 ;; *************** function _isdigit *****************
  4708 ;; Defined at:
  4709 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/isdigit.c"
  4710 ;; Parameters:    Size  Location     Type
  4711 ;;  c               1    wreg     unsigned char 
  4712 ;; Auto vars:     Size  Location     Type
  4713 ;;  c               1   26[COMRAM] unsigned char 
  4714 ;; Return value:  Size  Location     Type
  4715 ;;		None               void
  4716 ;; Registers used:
  4717 ;;		wreg, status,2, status,0
  4718 ;; Tracked objects:
  4719 ;;		On entry : 0/0
  4720 ;;		On exit  : 0/0
  4721 ;;		Unchanged: 0/0
  4722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4724 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4725 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4726 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4727 ;;Total ram usage:        3 bytes
  4728 ;; Hardware stack levels used:    1
  4729 ;; Hardware stack levels required when called:    4
  4730 ;; This function calls:
  4731 ;;		Nothing
  4732 ;; This function is called by:
  4733 ;;		_printf
  4734 ;; This function uses a non-reentrant model
  4735 ;;
  4736                           
  4737                           	psect	text26
  4738  002266                     __ptext26:
  4739                           	opt stack 0
  4740  002266                     _isdigit:
  4741                           	opt stack 24
  4742                           
  4743                           ;incstack = 0
  4744                           ;isdigit@c stored from wreg
  4745  002266  6E1B               	movwf	isdigit@c,c
  4746  002268  0E00               	movlw	0
  4747  00226A  6E1A               	movwf	_isdigit$1053,c
  4748  00226C  0E3A               	movlw	58
  4749  00226E  601B               	cpfslt	isdigit@c,c
  4750  002270  D005               	goto	l2782
  4751  002272  0E2F               	movlw	47
  4752  002274  641B               	cpfsgt	isdigit@c,c
  4753  002276  D002               	goto	l2782
  4754  002278  0E01               	movlw	1
  4755  00227A  6E1A               	movwf	_isdigit$1053,c
  4756  00227C                     l2782:
  4757  00227C  C01A  F019         	movff	_isdigit$1053,??_isdigit
  4758  002280  3019               	rrcf	??_isdigit,w,c
  4759  002282  0012               	return	
  4760  002284                     __end_of_isdigit:
  4761                           	opt stack 0
  4762                           tblptru	equ	0xFF8
  4763                           tblptrh	equ	0xFF7
  4764                           tblptrl	equ	0xFF6
  4765                           tablat	equ	0xFF5
  4766                           prodh	equ	0xFF4
  4767                           prodl	equ	0xFF3
  4768                           intcon	equ	0xFF2
  4769                           intcon3	equ	0xFF0
  4770                           postinc0	equ	0xFEE
  4771                           wreg	equ	0xFE8
  4772                           indf1	equ	0xFE7
  4773                           fsr1h	equ	0xFE2
  4774                           fsr1l	equ	0xFE1
  4775                           indf2	equ	0xFDF
  4776                           postinc2	equ	0xFDE
  4777                           postdec2	equ	0xFDD
  4778                           fsr2h	equ	0xFDA
  4779                           fsr2l	equ	0xFD9
  4780                           status	equ	0xFD8
  4781                           
  4782 ;; *************** function ___wmul *****************
  4783 ;; Defined at:
  4784 ;;		line 15 in file "/Applications/microchip/xc8/v1.41/sources/common/Umul16.c"
  4785 ;; Parameters:    Size  Location     Type
  4786 ;;  multiplier      2   24[COMRAM] unsigned int 
  4787 ;;  multiplicand    2   26[COMRAM] unsigned int 
  4788 ;; Auto vars:     Size  Location     Type
  4789 ;;  product         2   28[COMRAM] unsigned int 
  4790 ;; Return value:  Size  Location     Type
  4791 ;;                  2   24[COMRAM] unsigned int 
  4792 ;; Registers used:
  4793 ;;		wreg, status,2, status,0, prodl, prodh
  4794 ;; Tracked objects:
  4795 ;;		On entry : 0/0
  4796 ;;		On exit  : 0/0
  4797 ;;		Unchanged: 0/0
  4798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4799 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4800 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4802 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4803 ;;Total ram usage:        6 bytes
  4804 ;; Hardware stack levels used:    1
  4805 ;; Hardware stack levels required when called:    4
  4806 ;; This function calls:
  4807 ;;		Nothing
  4808 ;; This function is called by:
  4809 ;;		_printf
  4810 ;; This function uses a non-reentrant model
  4811 ;;
  4812                           
  4813                           	psect	text27
  4814  0021F6                     __ptext27:
  4815                           	opt stack 0
  4816  0021F6                     ___wmul:
  4817                           	opt stack 24
  4818                           
  4819                           ;incstack = 0
  4820  0021F6  5019               	movf	___wmul@multiplier,w,c
  4821  0021F8  021B               	mulwf	___wmul@multiplicand,c
  4822  0021FA  CFF3 F01D          	movff	prodl,___wmul@product
  4823  0021FE  CFF4 F01E          	movff	prodh,___wmul@product+1
  4824  002202  5019               	movf	___wmul@multiplier,w,c
  4825  002204  021C               	mulwf	___wmul@multiplicand+1,c
  4826  002206  50F3               	movf	prodl,w,c
  4827  002208  261E               	addwf	___wmul@product+1,f,c
  4828  00220A  501A               	movf	___wmul@multiplier+1,w,c
  4829  00220C  021B               	mulwf	___wmul@multiplicand,c
  4830  00220E  50F3               	movf	prodl,w,c
  4831  002210  261E               	addwf	___wmul@product+1,f,c
  4832  002212  C01D  F019         	movff	___wmul@product,?___wmul
  4833  002216  C01E  F01A         	movff	___wmul@product+1,?___wmul+1
  4834  00221A  0012               	return	
  4835  00221C                     __end_of___wmul:
  4836                           	opt stack 0
  4837                           tblptru	equ	0xFF8
  4838                           tblptrh	equ	0xFF7
  4839                           tblptrl	equ	0xFF6
  4840                           tablat	equ	0xFF5
  4841                           prodh	equ	0xFF4
  4842                           prodl	equ	0xFF3
  4843                           intcon	equ	0xFF2
  4844                           intcon3	equ	0xFF0
  4845                           postinc0	equ	0xFEE
  4846                           wreg	equ	0xFE8
  4847                           indf1	equ	0xFE7
  4848                           fsr1h	equ	0xFE2
  4849                           fsr1l	equ	0xFE1
  4850                           indf2	equ	0xFDF
  4851                           postinc2	equ	0xFDE
  4852                           postdec2	equ	0xFDD
  4853                           fsr2h	equ	0xFDA
  4854                           fsr2l	equ	0xFD9
  4855                           status	equ	0xFD8
  4856                           
  4857 ;; *************** function ___lwmod *****************
  4858 ;; Defined at:
  4859 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwmod.c"
  4860 ;; Parameters:    Size  Location     Type
  4861 ;;  dividend        2   31[COMRAM] unsigned int 
  4862 ;;  divisor         2   33[COMRAM] unsigned int 
  4863 ;; Auto vars:     Size  Location     Type
  4864 ;;  counter         1   35[COMRAM] unsigned char 
  4865 ;; Return value:  Size  Location     Type
  4866 ;;                  2   31[COMRAM] unsigned int 
  4867 ;; Registers used:
  4868 ;;		wreg, status,2, status,0
  4869 ;; Tracked objects:
  4870 ;;		On entry : 0/0
  4871 ;;		On exit  : 0/0
  4872 ;;		Unchanged: 0/0
  4873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4874 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4875 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4877 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4878 ;;Total ram usage:        5 bytes
  4879 ;; Hardware stack levels used:    1
  4880 ;; Hardware stack levels required when called:    4
  4881 ;; This function calls:
  4882 ;;		Nothing
  4883 ;; This function is called by:
  4884 ;;		_printf
  4885 ;; This function uses a non-reentrant model
  4886 ;;
  4887                           
  4888                           	psect	text28
  4889  002158                     __ptext28:
  4890                           	opt stack 0
  4891  002158                     ___lwmod:
  4892                           	opt stack 24
  4893                           
  4894                           ;incstack = 0
  4895  002158  5022               	movf	___lwmod@divisor,w,c
  4896  00215A  1023               	iorwf	___lwmod@divisor+1,w,c
  4897  00215C  B4D8               	btfsc	status,2,c
  4898  00215E  D018               	goto	l919
  4899  002160  0E01               	movlw	1
  4900  002162  6E24               	movwf	___lwmod@counter,c
  4901  002164  D004               	goto	l2820
  4902  002166                     l2818:
  4903  002166  90D8               	bcf	status,0,c
  4904  002168  3622               	rlcf	___lwmod@divisor,f,c
  4905  00216A  3623               	rlcf	___lwmod@divisor+1,f,c
  4906  00216C  2A24               	incf	___lwmod@counter,f,c
  4907  00216E                     l2820:
  4908  00216E  AE23               	btfss	___lwmod@divisor+1,7,c
  4909  002170  D7FA               	goto	l2818
  4910  002172                     l2822:
  4911  002172  5022               	movf	___lwmod@divisor,w,c
  4912  002174  5C20               	subwf	___lwmod@dividend,w,c
  4913  002176  5023               	movf	___lwmod@divisor+1,w,c
  4914  002178  5821               	subwfb	___lwmod@dividend+1,w,c
  4915  00217A  A0D8               	btfss	status,0,c
  4916  00217C  D004               	goto	l2826
  4917  00217E  5022               	movf	___lwmod@divisor,w,c
  4918  002180  5E20               	subwf	___lwmod@dividend,f,c
  4919  002182  5023               	movf	___lwmod@divisor+1,w,c
  4920  002184  5A21               	subwfb	___lwmod@dividend+1,f,c
  4921  002186                     l2826:
  4922  002186  90D8               	bcf	status,0,c
  4923  002188  3223               	rrcf	___lwmod@divisor+1,f,c
  4924  00218A  3222               	rrcf	___lwmod@divisor,f,c
  4925  00218C  2E24               	decfsz	___lwmod@counter,f,c
  4926  00218E  D7F1               	goto	l2822
  4927  002190                     l919:
  4928  002190  C020  F020         	movff	___lwmod@dividend,?___lwmod
  4929  002194  C021  F021         	movff	___lwmod@dividend+1,?___lwmod+1
  4930  002198  0012               	return		;funcret
  4931  00219A                     __end_of___lwmod:
  4932                           	opt stack 0
  4933                           tblptru	equ	0xFF8
  4934                           tblptrh	equ	0xFF7
  4935                           tblptrl	equ	0xFF6
  4936                           tablat	equ	0xFF5
  4937                           prodh	equ	0xFF4
  4938                           prodl	equ	0xFF3
  4939                           intcon	equ	0xFF2
  4940                           intcon3	equ	0xFF0
  4941                           postinc0	equ	0xFEE
  4942                           wreg	equ	0xFE8
  4943                           indf1	equ	0xFE7
  4944                           fsr1h	equ	0xFE2
  4945                           fsr1l	equ	0xFE1
  4946                           indf2	equ	0xFDF
  4947                           postinc2	equ	0xFDE
  4948                           postdec2	equ	0xFDD
  4949                           fsr2h	equ	0xFDA
  4950                           fsr2l	equ	0xFD9
  4951                           status	equ	0xFD8
  4952                           
  4953 ;; *************** function ___lwdiv *****************
  4954 ;; Defined at:
  4955 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwdiv.c"
  4956 ;; Parameters:    Size  Location     Type
  4957 ;;  dividend        2   24[COMRAM] unsigned int 
  4958 ;;  divisor         2   26[COMRAM] unsigned int 
  4959 ;; Auto vars:     Size  Location     Type
  4960 ;;  quotient        2   29[COMRAM] unsigned int 
  4961 ;;  counter         1   28[COMRAM] unsigned char 
  4962 ;; Return value:  Size  Location     Type
  4963 ;;                  2   24[COMRAM] unsigned int 
  4964 ;; Registers used:
  4965 ;;		wreg, status,2, status,0
  4966 ;; Tracked objects:
  4967 ;;		On entry : 0/0
  4968 ;;		On exit  : 0/0
  4969 ;;		Unchanged: 0/0
  4970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4971 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4972 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4974 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4975 ;;Total ram usage:        7 bytes
  4976 ;; Hardware stack levels used:    1
  4977 ;; Hardware stack levels required when called:    4
  4978 ;; This function calls:
  4979 ;;		Nothing
  4980 ;; This function is called by:
  4981 ;;		_printf
  4982 ;; This function uses a non-reentrant model
  4983 ;;
  4984                           
  4985                           	psect	text29
  4986  00207A                     __ptext29:
  4987                           	opt stack 0
  4988  00207A                     ___lwdiv:
  4989                           	opt stack 24
  4990                           
  4991                           ;incstack = 0
  4992  00207A  0E00               	movlw	0
  4993  00207C  6E1F               	movwf	___lwdiv@quotient+1,c
  4994  00207E  0E00               	movlw	0
  4995  002080  6E1E               	movwf	___lwdiv@quotient,c
  4996  002082  501B               	movf	___lwdiv@divisor,w,c
  4997  002084  101C               	iorwf	___lwdiv@divisor+1,w,c
  4998  002086  B4D8               	btfsc	status,2,c
  4999  002088  D01C               	goto	l909
  5000  00208A  0E01               	movlw	1
  5001  00208C  6E1D               	movwf	___lwdiv@counter,c
  5002  00208E  D004               	goto	l2800
  5003  002090                     l2798:
  5004  002090  90D8               	bcf	status,0,c
  5005  002092  361B               	rlcf	___lwdiv@divisor,f,c
  5006  002094  361C               	rlcf	___lwdiv@divisor+1,f,c
  5007  002096  2A1D               	incf	___lwdiv@counter,f,c
  5008  002098                     l2800:
  5009  002098  AE1C               	btfss	___lwdiv@divisor+1,7,c
  5010  00209A  D7FA               	goto	l2798
  5011  00209C                     l2802:
  5012  00209C  90D8               	bcf	status,0,c
  5013  00209E  361E               	rlcf	___lwdiv@quotient,f,c
  5014  0020A0  361F               	rlcf	___lwdiv@quotient+1,f,c
  5015  0020A2  501B               	movf	___lwdiv@divisor,w,c
  5016  0020A4  5C19               	subwf	___lwdiv@dividend,w,c
  5017  0020A6  501C               	movf	___lwdiv@divisor+1,w,c
  5018  0020A8  581A               	subwfb	___lwdiv@dividend+1,w,c
  5019  0020AA  A0D8               	btfss	status,0,c
  5020  0020AC  D005               	goto	l2810
  5021  0020AE  501B               	movf	___lwdiv@divisor,w,c
  5022  0020B0  5E19               	subwf	___lwdiv@dividend,f,c
  5023  0020B2  501C               	movf	___lwdiv@divisor+1,w,c
  5024  0020B4  5A1A               	subwfb	___lwdiv@dividend+1,f,c
  5025  0020B6  801E               	bsf	___lwdiv@quotient,0,c
  5026  0020B8                     l2810:
  5027  0020B8  90D8               	bcf	status,0,c
  5028  0020BA  321C               	rrcf	___lwdiv@divisor+1,f,c
  5029  0020BC  321B               	rrcf	___lwdiv@divisor,f,c
  5030  0020BE  2E1D               	decfsz	___lwdiv@counter,f,c
  5031  0020C0  D7ED               	goto	l2802
  5032  0020C2                     l909:
  5033  0020C2  C01E  F019         	movff	___lwdiv@quotient,?___lwdiv
  5034  0020C6  C01F  F01A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5035  0020CA  0012               	return		;funcret
  5036  0020CC                     __end_of___lwdiv:
  5037                           	opt stack 0
  5038                           tblptru	equ	0xFF8
  5039                           tblptrh	equ	0xFF7
  5040                           tblptrl	equ	0xFF6
  5041                           tablat	equ	0xFF5
  5042                           prodh	equ	0xFF4
  5043                           prodl	equ	0xFF3
  5044                           intcon	equ	0xFF2
  5045                           intcon3	equ	0xFF0
  5046                           postinc0	equ	0xFEE
  5047                           wreg	equ	0xFE8
  5048                           indf1	equ	0xFE7
  5049                           fsr1h	equ	0xFE2
  5050                           fsr1l	equ	0xFE1
  5051                           indf2	equ	0xFDF
  5052                           postinc2	equ	0xFDE
  5053                           postdec2	equ	0xFDD
  5054                           fsr2h	equ	0xFDA
  5055                           fsr2l	equ	0xFD9
  5056                           status	equ	0xFD8
  5057                           
  5058 ;; *************** function _lcdInst *****************
  5059 ;; Defined at:
  5060 ;;		line 25 in file "lcd.c"
  5061 ;; Parameters:    Size  Location     Type
  5062 ;;  data            1    wreg     unsigned char 
  5063 ;; Auto vars:     Size  Location     Type
  5064 ;;  data            1   26[COMRAM] unsigned char 
  5065 ;; Return value:  Size  Location     Type
  5066 ;;                  1    wreg      void 
  5067 ;; Registers used:
  5068 ;;		wreg, status,2, status,0, cstack
  5069 ;; Tracked objects:
  5070 ;;		On entry : 0/0
  5071 ;;		On exit  : 0/0
  5072 ;;		Unchanged: 0/0
  5073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5075 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5077 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5078 ;;Total ram usage:        1 bytes
  5079 ;; Hardware stack levels used:    1
  5080 ;; Hardware stack levels required when called:    5
  5081 ;; This function calls:
  5082 ;;		_lcdNibble
  5083 ;; This function is called by:
  5084 ;;		_initLCD
  5085 ;;		_readLightSensor
  5086 ;;		_welcome
  5087 ;;		_debug
  5088 ;;		_sort
  5089 ;;		_display_time
  5090 ;;		_display_sorting_time
  5091 ;; This function uses a non-reentrant model
  5092 ;;
  5093                           
  5094                           	psect	text30
  5095  0022CE                     __ptext30:
  5096                           	opt stack 0
  5097  0022CE                     _lcdInst:
  5098                           	opt stack 24
  5099                           
  5100                           ;incstack = 0
  5101                           ;lcdInst@data stored from wreg
  5102  0022CE  6E1B               	movwf	lcdInst@data,c
  5103                           
  5104                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  5105  0022D0  948C               	bcf	3980,2,c	;volatile
  5106                           
  5107                           ;lcd.c: 27: lcdNibble(data);
  5108  0022D2  501B               	movf	lcdInst@data,w,c
  5109  0022D4  ECE7  F00F         	call	_lcdNibble
  5110  0022D8  0012               	return		;funcret
  5111  0022DA                     __end_of_lcdInst:
  5112                           	opt stack 0
  5113                           tblptru	equ	0xFF8
  5114                           tblptrh	equ	0xFF7
  5115                           tblptrl	equ	0xFF6
  5116                           tablat	equ	0xFF5
  5117                           prodh	equ	0xFF4
  5118                           prodl	equ	0xFF3
  5119                           intcon	equ	0xFF2
  5120                           intcon3	equ	0xFF0
  5121                           postinc0	equ	0xFEE
  5122                           wreg	equ	0xFE8
  5123                           indf1	equ	0xFE7
  5124                           fsr1h	equ	0xFE2
  5125                           fsr1l	equ	0xFE1
  5126                           indf2	equ	0xFDF
  5127                           postinc2	equ	0xFDE
  5128                           postdec2	equ	0xFDD
  5129                           fsr2h	equ	0xFDA
  5130                           fsr2l	equ	0xFD9
  5131                           status	equ	0xFD8
  5132                           
  5133 ;; *************** function _lcdNibble *****************
  5134 ;; Defined at:
  5135 ;;		line 35 in file "lcd.c"
  5136 ;; Parameters:    Size  Location     Type
  5137 ;;  data            1    wreg     unsigned char 
  5138 ;; Auto vars:     Size  Location     Type
  5139 ;;  data            1   25[COMRAM] unsigned char 
  5140 ;;  temp            1   24[COMRAM] unsigned char 
  5141 ;; Return value:  Size  Location     Type
  5142 ;;                  1    wreg      void 
  5143 ;; Registers used:
  5144 ;;		wreg, status,2, status,0
  5145 ;; Tracked objects:
  5146 ;;		On entry : 0/0
  5147 ;;		On exit  : 0/0
  5148 ;;		Unchanged: 0/0
  5149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5151 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5153 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5154 ;;Total ram usage:        2 bytes
  5155 ;; Hardware stack levels used:    1
  5156 ;; Hardware stack levels required when called:    4
  5157 ;; This function calls:
  5158 ;;		Nothing
  5159 ;; This function is called by:
  5160 ;;		_lcdInst
  5161 ;;		_putch
  5162 ;; This function uses a non-reentrant model
  5163 ;;
  5164                           
  5165                           	psect	text31
  5166  001FCE                     __ptext31:
  5167                           	opt stack 0
  5168  001FCE                     _lcdNibble:
  5169                           	opt stack 23
  5170                           
  5171                           ;incstack = 0
  5172                           ;lcdNibble@data stored from wreg
  5173  001FCE  6E1A               	movwf	lcdNibble@data,c
  5174                           
  5175                           ;lcd.c: 37: char temp = data & 0xF0;
  5176  001FD0  501A               	movf	lcdNibble@data,w,c
  5177  001FD2  0BF0               	andlw	240
  5178  001FD4  6E19               	movwf	lcdNibble@temp,c
  5179                           
  5180                           ;lcd.c: 38: LATD = LATD & 0x0F;
  5181  001FD6  508C               	movf	3980,w,c	;volatile
  5182  001FD8  0B0F               	andlw	15
  5183  001FDA  6E8C               	movwf	3980,c	;volatile
  5184                           
  5185                           ;lcd.c: 39: LATD = temp | LATD;
  5186  001FDC  5019               	movf	lcdNibble@temp,w,c
  5187  001FDE  108C               	iorwf	3980,w,c	;volatile
  5188  001FE0  6E8C               	movwf	3980,c	;volatile
  5189                           
  5190                           ;lcd.c: 41: LATDbits.LATD3 = 0;
  5191  001FE2  968C               	bcf	3980,3,c	;volatile
  5192                           
  5193                           ;lcd.c: 42: _delay((unsigned long)((25)*(8000000/4000000.0)));
  5194  001FE4  0E10               	movlw	16
  5195  001FE6                     u3257:
  5196  001FE6  2EE8               	decfsz	wreg,f,c
  5197  001FE8  D7FE               	bra	u3257
  5198  001FEA  D000               	nop2	
  5199                           
  5200                           ;lcd.c: 43: LATDbits.LATD3 = 1;
  5201  001FEC  868C               	bsf	3980,3,c	;volatile
  5202                           
  5203                           ;lcd.c: 44: _delay((unsigned long)((25)*(8000000/4000000.0)));
  5204  001FEE  0E10               	movlw	16
  5205  001FF0                     u3267:
  5206  001FF0  2EE8               	decfsz	wreg,f,c
  5207  001FF2  D7FE               	bra	u3267
  5208  001FF4  D000               	nop2	
  5209                           
  5210                           ;lcd.c: 46: data = data << 4;
  5211  001FF6  381A               	swapf	lcdNibble@data,w,c
  5212  001FF8  0BF0               	andlw	240
  5213  001FFA  6E1A               	movwf	lcdNibble@data,c
  5214                           
  5215                           ;lcd.c: 48: temp = data & 0xF0;
  5216  001FFC  501A               	movf	lcdNibble@data,w,c
  5217  001FFE  0BF0               	andlw	240
  5218  002000  6E19               	movwf	lcdNibble@temp,c
  5219                           
  5220                           ;lcd.c: 49: LATD = LATD & 0x0F;
  5221  002002  508C               	movf	3980,w,c	;volatile
  5222  002004  0B0F               	andlw	15
  5223  002006  6E8C               	movwf	3980,c	;volatile
  5224                           
  5225                           ;lcd.c: 50: LATD = temp | LATD;
  5226  002008  5019               	movf	lcdNibble@temp,w,c
  5227  00200A  108C               	iorwf	3980,w,c	;volatile
  5228  00200C  6E8C               	movwf	3980,c	;volatile
  5229                           
  5230                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  5231  00200E  968C               	bcf	3980,3,c	;volatile
  5232                           
  5233                           ;lcd.c: 53: _delay((unsigned long)((25)*(8000000/4000000.0)));
  5234  002010  0E10               	movlw	16
  5235  002012                     u3277:
  5236  002012  2EE8               	decfsz	wreg,f,c
  5237  002014  D7FE               	bra	u3277
  5238  002016  D000               	nop2	
  5239                           
  5240                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  5241  002018  868C               	bsf	3980,3,c	;volatile
  5242                           
  5243                           ;lcd.c: 55: _delay((unsigned long)((25)*(8000000/4000000.0)));
  5244  00201A  0E10               	movlw	16
  5245  00201C                     u3287:
  5246  00201C  2EE8               	decfsz	wreg,f,c
  5247  00201E  D7FE               	bra	u3287
  5248  002020  D000               	nop2	
  5249  002022  0012               	return		;funcret
  5250  002024                     __end_of_lcdNibble:
  5251                           	opt stack 0
  5252                           tblptru	equ	0xFF8
  5253                           tblptrh	equ	0xFF7
  5254                           tblptrl	equ	0xFF6
  5255                           tablat	equ	0xFF5
  5256                           prodh	equ	0xFF4
  5257                           prodl	equ	0xFF3
  5258                           intcon	equ	0xFF2
  5259                           intcon3	equ	0xFF0
  5260                           postinc0	equ	0xFEE
  5261                           wreg	equ	0xFE8
  5262                           indf1	equ	0xFE7
  5263                           fsr1h	equ	0xFE2
  5264                           fsr1l	equ	0xFE1
  5265                           indf2	equ	0xFDF
  5266                           postinc2	equ	0xFDE
  5267                           postdec2	equ	0xFDD
  5268                           fsr2h	equ	0xFDA
  5269                           fsr2l	equ	0xFD9
  5270                           status	equ	0xFD8
  5271                           
  5272 ;; *************** function _interrupt_handler *****************
  5273 ;; Defined at:
  5274 ;;		line 23 in file "interrupt.c"
  5275 ;; Parameters:    Size  Location     Type
  5276 ;;		None
  5277 ;; Auto vars:     Size  Location     Type
  5278 ;;  keypress        1   23[COMRAM] unsigned char 
  5279 ;; Return value:  Size  Location     Type
  5280 ;;                  1    wreg      void 
  5281 ;; Registers used:
  5282 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5283 ;; Tracked objects:
  5284 ;;		On entry : 0/0
  5285 ;;		On exit  : 0/0
  5286 ;;		Unchanged: 0/0
  5287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5289 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5290 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5291 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5292 ;;Total ram usage:       16 bytes
  5293 ;; Hardware stack levels used:    1
  5294 ;; Hardware stack levels required when called:    3
  5295 ;; This function calls:
  5296 ;;		i2_get_time
  5297 ;;		i2_lcdInst
  5298 ;;		i2_putch
  5299 ;; This function is called by:
  5300 ;;		Interrupt level 2
  5301 ;; This function uses a non-reentrant model
  5302 ;;
  5303                           
  5304                           	psect	intcode
  5305  000008                     __pintcode:
  5306                           	opt stack 0
  5307  000008                     _interrupt_handler:
  5308                           	opt stack 22
  5309                           
  5310                           ;incstack = 0
  5311  000008  8267               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5312  00000A  ED87  F00A         	call	int_func,f	;refresh shadow registers
  5313                           tblptru	equ	0xFF8
  5314                           tblptrh	equ	0xFF7
  5315                           tblptrl	equ	0xFF6
  5316                           tablat	equ	0xFF5
  5317                           prodh	equ	0xFF4
  5318                           prodl	equ	0xFF3
  5319                           intcon	equ	0xFF2
  5320                           intcon3	equ	0xFF0
  5321                           postinc0	equ	0xFEE
  5322                           wreg	equ	0xFE8
  5323                           indf1	equ	0xFE7
  5324                           fsr1h	equ	0xFE2
  5325                           fsr1l	equ	0xFE1
  5326                           indf2	equ	0xFDF
  5327                           postinc2	equ	0xFDE
  5328                           postdec2	equ	0xFDD
  5329                           fsr2h	equ	0xFDA
  5330                           fsr2l	equ	0xFD9
  5331                           status	equ	0xFD8
  5332                           
  5333                           	psect	intcode_body
  5334  00150E                     __pintcode_body:
  5335                           	opt stack 22
  5336  00150E                     int_func:
  5337                           	opt stack 22
  5338  00150E  0006               	pop		; remove dummy address from shadow register refresh
  5339  001510  CFFA F00A          	movff	pclath,??_interrupt_handler+1
  5340  001514  CFFB F00B          	movff	pclatu,??_interrupt_handler+2
  5341  001518  CFE9 F00C          	movff	fsr0l,??_interrupt_handler+3
  5342  00151C  CFEA F00D          	movff	fsr0h,??_interrupt_handler+4
  5343  001520  CFE1 F00E          	movff	fsr1l,??_interrupt_handler+5
  5344  001524  CFE2 F00F          	movff	fsr1h,??_interrupt_handler+6
  5345  001528  CFD9 F010          	movff	fsr2l,??_interrupt_handler+7
  5346  00152C  CFDA F011          	movff	fsr2h,??_interrupt_handler+8
  5347  001530  CFF3 F012          	movff	prodl,??_interrupt_handler+9
  5348  001534  CFF4 F013          	movff	prodh,??_interrupt_handler+10
  5349  001538  CFF6 F014          	movff	tblptrl,??_interrupt_handler+11
  5350  00153C  CFF7 F015          	movff	tblptrh,??_interrupt_handler+12
  5351  001540  CFF8 F016          	movff	tblptru,??_interrupt_handler+13
  5352  001544  CFF5 F017          	movff	tablat,??_interrupt_handler+14
  5353                           
  5354                           ;interrupt.c: 24: if (INT1IF) {
  5355  001548  A0F0               	btfss	intcon3,0,c	;volatile
  5356  00154A  D046               	goto	i2l2746
  5357                           
  5358                           ;interrupt.c: 25: lcdInst(0b11000000);;
  5359  00154C  0EC0               	movlw	192
  5360  00154E  EC73  F011         	call	i2_lcdInst
  5361                           
  5362                           ;interrupt.c: 26: unsigned char keypress = (PORTB & 0xF0) >> 4;
  5363  001552  3881               	swapf	3969,w,c	;volatile
  5364  001554  0B0F               	andlw	15
  5365  001556  0B0F               	andlw	15
  5366  001558  6E18               	movwf	interrupt_handler@keypress,c
  5367                           
  5368                           ;interrupt.c: 27: putch(keys[keypress]);
  5369  00155A  5018               	movf	interrupt_handler@keypress,w,c
  5370  00155C  0D01               	mullw	1
  5371  00155E  0E01               	movlw	low _keys
  5372  001560  24F3               	addwf	prodl,w,c
  5373  001562  6EF6               	movwf	tblptrl,c
  5374  001564  0E10               	movlw	high _keys
  5375  001566  20F4               	addwfc	prodh,w,c
  5376  001568  6EF7               	movwf	tblptrh,c
  5377  00156A                     	if	0	;There are less than 3 active tblptr bytes
  5378  00156A                     	endif
  5379  00156A  0008               	tblrd		*
  5380  00156C  50F5               	movf	tablat,w,c
  5381  00156E  EC6D  F011         	call	i2_putch
  5382                           
  5383                           ;interrupt.c: 28: if (mode == 2) {
  5384  001572  0E02               	movlw	2
  5385  001574  1858               	xorwf	_mode,w,c
  5386  001576  A4D8               	btfss	status,2,c
  5387  001578  D013               	goto	i2l2726
  5388                           
  5389                           ;interrupt.c: 29: get_time(end_time);
  5390  00157A  0E59               	movlw	low _end_time
  5391  00157C  6E04               	movwf	i2get_time@datime,c
  5392  00157E  0E00               	movlw	high _end_time
  5393  001580  6E05               	movwf	i2get_time@datime+1,c
  5394  001582  ECAD  F00D         	call	i2_get_time	;wreg free
  5395                           
  5396                           ;interrupt.c: 30: passed_time =
  5397                           ;interrupt.c: 31: (end_time[1] - start_time[1]) * 60 + (end_time[0] - start_time[0]);
  5398  001586  5060               	movf	_start_time,w,c
  5399  001588  0800               	sublw	0
  5400  00158A  6E09               	movwf	??_interrupt_handler& (0+255),c
  5401  00158C  5061               	movf	_start_time+1,w,c
  5402  00158E  0800               	sublw	0
  5403  001590  245A               	addwf	_end_time+1,w,c
  5404  001592  0D3C               	mullw	60
  5405  001594  50F3               	movf	prodl,w,c
  5406  001596  2409               	addwf	??_interrupt_handler,w,c
  5407  001598  2459               	addwf	_end_time,w,c
  5408  00159A  6E57               	movwf	_passed_time,c
  5409                           
  5410                           ;interrupt.c: 32: mode = 3;
  5411  00159C  0E03               	movlw	3
  5412  00159E  D01B               	goto	L6
  5413  0015A0                     i2l2726:
  5414  0015A0  5018               	movf	interrupt_handler@keypress,w,c
  5415  0015A2  A4D8               	btfss	status,2,c
  5416  0015A4  D005               	goto	i2l2732
  5417                           
  5418                           ;interrupt.c: 37: if (mode == 0) {
  5419  0015A6  5058               	movf	_mode,w,c
  5420  0015A8  A4D8               	btfss	status,2,c
  5421  0015AA  D016               	goto	i2l2746
  5422                           
  5423                           ;interrupt.c: 38: mode = 1;
  5424  0015AC  0E01               	movlw	1
  5425  0015AE  D013               	goto	L6
  5426  0015B0                     i2l2732:
  5427  0015B0  0E03               	movlw	3
  5428  0015B2  1818               	xorwf	interrupt_handler@keypress,w,c
  5429  0015B4  A4D8               	btfss	status,2,c
  5430  0015B6  D005               	goto	i2l2738
  5431                           
  5432                           ;interrupt.c: 42: if (mode == 0) {
  5433  0015B8  5058               	movf	_mode,w,c
  5434  0015BA  A4D8               	btfss	status,2,c
  5435  0015BC  D00D               	goto	i2l2746
  5436                           
  5437                           ;interrupt.c: 43: mode = 2;
  5438  0015BE  0E02               	movlw	2
  5439  0015C0  D00A               	goto	L6
  5440  0015C2                     i2l2738:
  5441                           
  5442                           ;interrupt.c: 47: else if (keypress == 0x1) {
  5443  0015C2  0418               	decf	interrupt_handler@keypress,w,c
  5444  0015C4  A4D8               	btfss	status,2,c
  5445  0015C6  D002               	goto	i2l2742
  5446                           
  5447                           ;interrupt.c: 48: mode = 0;
  5448  0015C8  0E00               	movlw	0
  5449  0015CA  D005               	goto	L6
  5450  0015CC                     i2l2742:
  5451  0015CC  0E02               	movlw	2
  5452  0015CE  1818               	xorwf	interrupt_handler@keypress,w,c
  5453  0015D0  A4D8               	btfss	status,2,c
  5454  0015D2  D002               	goto	i2l2746
  5455                           
  5456                           ;interrupt.c: 51: mode = 99;
  5457  0015D4  0E63               	movlw	99
  5458  0015D6                     L6:
  5459  0015D6  6E58               	movwf	_mode,c
  5460  0015D8                     i2l2746:
  5461                           
  5462                           ;interrupt.c: 52: }
  5463                           ;interrupt.c: 53: }
  5464                           ;interrupt.c: 54: INT1IF = 0;
  5465  0015D8  90F0               	bcf	intcon3,0,c	;volatile
  5466  0015DA  C017  FFF5         	movff	??_interrupt_handler+14,tablat
  5467  0015DE  C016  FFF8         	movff	??_interrupt_handler+13,tblptru
  5468  0015E2  C015  FFF7         	movff	??_interrupt_handler+12,tblptrh
  5469  0015E6  C014  FFF6         	movff	??_interrupt_handler+11,tblptrl
  5470  0015EA  C013  FFF4         	movff	??_interrupt_handler+10,prodh
  5471  0015EE  C012  FFF3         	movff	??_interrupt_handler+9,prodl
  5472  0015F2  C011  FFDA         	movff	??_interrupt_handler+8,fsr2h
  5473  0015F6  C010  FFD9         	movff	??_interrupt_handler+7,fsr2l
  5474  0015FA  C00F  FFE2         	movff	??_interrupt_handler+6,fsr1h
  5475  0015FE  C00E  FFE1         	movff	??_interrupt_handler+5,fsr1l
  5476  001602  C00D  FFEA         	movff	??_interrupt_handler+4,fsr0h
  5477  001606  C00C  FFE9         	movff	??_interrupt_handler+3,fsr0l
  5478  00160A  C00B  FFFB         	movff	??_interrupt_handler+2,pclatu
  5479  00160E  C00A  FFFA         	movff	??_interrupt_handler+1,pclath
  5480  001612  9267               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5481  001614  0011               	retfie		f
  5482  001616                     __end_of_interrupt_handler:
  5483                           	opt stack 0
  5484                           pclatu	equ	0xFFB
  5485                           pclath	equ	0xFFA
  5486                           tblptru	equ	0xFF8
  5487                           tblptrh	equ	0xFF7
  5488                           tblptrl	equ	0xFF6
  5489                           tablat	equ	0xFF5
  5490                           prodh	equ	0xFF4
  5491                           prodl	equ	0xFF3
  5492                           intcon	equ	0xFF2
  5493                           intcon3	equ	0xFF0
  5494                           postinc0	equ	0xFEE
  5495                           fsr0h	equ	0xFEA
  5496                           fsr0l	equ	0xFE9
  5497                           wreg	equ	0xFE8
  5498                           indf1	equ	0xFE7
  5499                           fsr1h	equ	0xFE2
  5500                           fsr1l	equ	0xFE1
  5501                           indf2	equ	0xFDF
  5502                           postinc2	equ	0xFDE
  5503                           postdec2	equ	0xFDD
  5504                           fsr2h	equ	0xFDA
  5505                           fsr2l	equ	0xFD9
  5506                           status	equ	0xFD8
  5507                           
  5508 ;; *************** function i2_putch *****************
  5509 ;; Defined at:
  5510 ;;		line 30 in file "lcd.c"
  5511 ;; Parameters:    Size  Location     Type
  5512 ;;  data            1    wreg     unsigned char 
  5513 ;; Auto vars:     Size  Location     Type
  5514 ;;  data            1    2[COMRAM] unsigned char 
  5515 ;; Return value:  Size  Location     Type
  5516 ;;                  1    wreg      void 
  5517 ;; Registers used:
  5518 ;;		wreg, status,2, status,0, cstack
  5519 ;; Tracked objects:
  5520 ;;		On entry : 0/0
  5521 ;;		On exit  : 0/0
  5522 ;;		Unchanged: 0/0
  5523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5525 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5527 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5528 ;;Total ram usage:        1 bytes
  5529 ;; Hardware stack levels used:    1
  5530 ;; Hardware stack levels required when called:    1
  5531 ;; This function calls:
  5532 ;;		i2_lcdNibble
  5533 ;; This function is called by:
  5534 ;;		_interrupt_handler
  5535 ;; This function uses a non-reentrant model
  5536 ;;
  5537                           
  5538                           	psect	text33
  5539  0022DA                     __ptext33:
  5540                           	opt stack 0
  5541  0022DA                     i2_putch:
  5542                           	opt stack 23
  5543                           
  5544                           ;incstack = 0
  5545                           ;i2putch@data stored from wreg
  5546  0022DA  6E03               	movwf	i2putch@data,c
  5547                           
  5548                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  5549  0022DC  848C               	bsf	3980,2,c	;volatile
  5550                           
  5551                           ;lcd.c: 32: lcdNibble(data);
  5552  0022DE  5003               	movf	i2putch@data,w,c
  5553  0022E0  EC12  F010         	call	i2_lcdNibble
  5554  0022E4  0012               	return		;funcret
  5555  0022E6                     __end_ofi2_putch:
  5556                           	opt stack 0
  5557                           pclatu	equ	0xFFB
  5558                           pclath	equ	0xFFA
  5559                           tblptru	equ	0xFF8
  5560                           tblptrh	equ	0xFF7
  5561                           tblptrl	equ	0xFF6
  5562                           tablat	equ	0xFF5
  5563                           prodh	equ	0xFF4
  5564                           prodl	equ	0xFF3
  5565                           intcon	equ	0xFF2
  5566                           intcon3	equ	0xFF0
  5567                           postinc0	equ	0xFEE
  5568                           fsr0h	equ	0xFEA
  5569                           fsr0l	equ	0xFE9
  5570                           wreg	equ	0xFE8
  5571                           indf1	equ	0xFE7
  5572                           fsr1h	equ	0xFE2
  5573                           fsr1l	equ	0xFE1
  5574                           indf2	equ	0xFDF
  5575                           postinc2	equ	0xFDE
  5576                           postdec2	equ	0xFDD
  5577                           fsr2h	equ	0xFDA
  5578                           fsr2l	equ	0xFD9
  5579                           status	equ	0xFD8
  5580                           
  5581 ;; *************** function i2_lcdInst *****************
  5582 ;; Defined at:
  5583 ;;		line 25 in file "lcd.c"
  5584 ;; Parameters:    Size  Location     Type
  5585 ;;  data            1    wreg     unsigned char 
  5586 ;; Auto vars:     Size  Location     Type
  5587 ;;  data            1    2[COMRAM] unsigned char 
  5588 ;; Return value:  Size  Location     Type
  5589 ;;                  1    wreg      void 
  5590 ;; Registers used:
  5591 ;;		wreg, status,2, status,0, cstack
  5592 ;; Tracked objects:
  5593 ;;		On entry : 0/0
  5594 ;;		On exit  : 0/0
  5595 ;;		Unchanged: 0/0
  5596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5598 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5600 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5601 ;;Total ram usage:        1 bytes
  5602 ;; Hardware stack levels used:    1
  5603 ;; Hardware stack levels required when called:    1
  5604 ;; This function calls:
  5605 ;;		i2_lcdNibble
  5606 ;; This function is called by:
  5607 ;;		_interrupt_handler
  5608 ;; This function uses a non-reentrant model
  5609 ;;
  5610                           
  5611                           	psect	text34
  5612  0022E6                     __ptext34:
  5613                           	opt stack 0
  5614  0022E6                     i2_lcdInst:
  5615                           	opt stack 23
  5616                           
  5617                           ;incstack = 0
  5618                           ;i2lcdInst@data stored from wreg
  5619  0022E6  6E03               	movwf	i2lcdInst@data,c
  5620                           
  5621                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  5622  0022E8  948C               	bcf	3980,2,c	;volatile
  5623                           
  5624                           ;lcd.c: 27: lcdNibble(data);
  5625  0022EA  5003               	movf	i2lcdInst@data,w,c
  5626  0022EC  EC12  F010         	call	i2_lcdNibble
  5627  0022F0  0012               	return		;funcret
  5628  0022F2                     __end_ofi2_lcdInst:
  5629                           	opt stack 0
  5630                           pclatu	equ	0xFFB
  5631                           pclath	equ	0xFFA
  5632                           tblptru	equ	0xFF8
  5633                           tblptrh	equ	0xFF7
  5634                           tblptrl	equ	0xFF6
  5635                           tablat	equ	0xFF5
  5636                           prodh	equ	0xFF4
  5637                           prodl	equ	0xFF3
  5638                           intcon	equ	0xFF2
  5639                           intcon3	equ	0xFF0
  5640                           postinc0	equ	0xFEE
  5641                           fsr0h	equ	0xFEA
  5642                           fsr0l	equ	0xFE9
  5643                           wreg	equ	0xFE8
  5644                           indf1	equ	0xFE7
  5645                           fsr1h	equ	0xFE2
  5646                           fsr1l	equ	0xFE1
  5647                           indf2	equ	0xFDF
  5648                           postinc2	equ	0xFDE
  5649                           postdec2	equ	0xFDD
  5650                           fsr2h	equ	0xFDA
  5651                           fsr2l	equ	0xFD9
  5652                           status	equ	0xFD8
  5653                           
  5654 ;; *************** function i2_lcdNibble *****************
  5655 ;; Defined at:
  5656 ;;		line 35 in file "lcd.c"
  5657 ;; Parameters:    Size  Location     Type
  5658 ;;  data            1    wreg     unsigned char 
  5659 ;; Auto vars:     Size  Location     Type
  5660 ;;  data            1    1[COMRAM] unsigned char 
  5661 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  5662 ;; Return value:  Size  Location     Type
  5663 ;;                  1    wreg      void 
  5664 ;; Registers used:
  5665 ;;		wreg, status,2, status,0
  5666 ;; Tracked objects:
  5667 ;;		On entry : 0/0
  5668 ;;		On exit  : 0/0
  5669 ;;		Unchanged: 0/0
  5670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5672 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5674 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5675 ;;Total ram usage:        2 bytes
  5676 ;; Hardware stack levels used:    1
  5677 ;; This function calls:
  5678 ;;		Nothing
  5679 ;; This function is called by:
  5680 ;;		i2_lcdInst
  5681 ;;		i2_putch
  5682 ;; This function uses a non-reentrant model
  5683 ;;
  5684                           
  5685                           	psect	text35
  5686  002024                     __ptext35:
  5687                           	opt stack 0
  5688  002024                     i2_lcdNibble:
  5689                           	opt stack 23
  5690                           
  5691                           ;incstack = 0
  5692                           ;i2lcdNibble@data stored from wreg
  5693  002024  6E02               	movwf	i2lcdNibble@data,c
  5694                           
  5695                           ;lcd.c: 37: char temp = data & 0xF0;
  5696  002026  5002               	movf	i2lcdNibble@data,w,c
  5697  002028  0BF0               	andlw	240
  5698  00202A  6E01               	movwf	i2lcdNibble@temp,c
  5699                           
  5700                           ;lcd.c: 38: LATD = LATD & 0x0F;
  5701  00202C  508C               	movf	3980,w,c	;volatile
  5702  00202E  0B0F               	andlw	15
  5703  002030  6E8C               	movwf	3980,c	;volatile
  5704                           
  5705                           ;lcd.c: 39: LATD = temp | LATD;
  5706  002032  5001               	movf	i2lcdNibble@temp,w,c
  5707  002034  108C               	iorwf	3980,w,c	;volatile
  5708  002036  6E8C               	movwf	3980,c	;volatile
  5709                           
  5710                           ;lcd.c: 41: LATDbits.LATD3 = 0;
  5711  002038  968C               	bcf	3980,3,c	;volatile
  5712                           
  5713                           ;lcd.c: 42: _delay((unsigned long)((25)*(8000000/4000000.0)));
  5714  00203A  0E10               	movlw	16
  5715  00203C                     i2u329_47:
  5716  00203C  2EE8               	decfsz	wreg,f,c
  5717  00203E  D7FE               	bra	i2u329_47
  5718  002040  D000               	nop2	
  5719                           
  5720                           ;lcd.c: 43: LATDbits.LATD3 = 1;
  5721  002042  868C               	bsf	3980,3,c	;volatile
  5722                           
  5723                           ;lcd.c: 44: _delay((unsigned long)((25)*(8000000/4000000.0)));
  5724  002044  0E10               	movlw	16
  5725  002046                     i2u330_47:
  5726  002046  2EE8               	decfsz	wreg,f,c
  5727  002048  D7FE               	bra	i2u330_47
  5728  00204A  D000               	nop2	
  5729                           
  5730                           ;lcd.c: 46: data = data << 4;
  5731  00204C  3802               	swapf	i2lcdNibble@data,w,c
  5732  00204E  0BF0               	andlw	240
  5733  002050  6E02               	movwf	i2lcdNibble@data,c
  5734                           
  5735                           ;lcd.c: 48: temp = data & 0xF0;
  5736  002052  5002               	movf	i2lcdNibble@data,w,c
  5737  002054  0BF0               	andlw	240
  5738  002056  6E01               	movwf	i2lcdNibble@temp,c
  5739                           
  5740                           ;lcd.c: 49: LATD = LATD & 0x0F;
  5741  002058  508C               	movf	3980,w,c	;volatile
  5742  00205A  0B0F               	andlw	15
  5743  00205C  6E8C               	movwf	3980,c	;volatile
  5744                           
  5745                           ;lcd.c: 50: LATD = temp | LATD;
  5746  00205E  5001               	movf	i2lcdNibble@temp,w,c
  5747  002060  108C               	iorwf	3980,w,c	;volatile
  5748  002062  6E8C               	movwf	3980,c	;volatile
  5749                           
  5750                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  5751  002064  968C               	bcf	3980,3,c	;volatile
  5752                           
  5753                           ;lcd.c: 53: _delay((unsigned long)((25)*(8000000/4000000.0)));
  5754  002066  0E10               	movlw	16
  5755  002068                     i2u331_47:
  5756  002068  2EE8               	decfsz	wreg,f,c
  5757  00206A  D7FE               	bra	i2u331_47
  5758  00206C  D000               	nop2	
  5759                           
  5760                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  5761  00206E  868C               	bsf	3980,3,c	;volatile
  5762                           
  5763                           ;lcd.c: 55: _delay((unsigned long)((25)*(8000000/4000000.0)));
  5764  002070  0E10               	movlw	16
  5765  002072                     i2u332_47:
  5766  002072  2EE8               	decfsz	wreg,f,c
  5767  002074  D7FE               	bra	i2u332_47
  5768  002076  D000               	nop2	
  5769  002078  0012               	return		;funcret
  5770  00207A                     __end_ofi2_lcdNibble:
  5771                           	opt stack 0
  5772                           pclatu	equ	0xFFB
  5773                           pclath	equ	0xFFA
  5774                           tblptru	equ	0xFF8
  5775                           tblptrh	equ	0xFF7
  5776                           tblptrl	equ	0xFF6
  5777                           tablat	equ	0xFF5
  5778                           prodh	equ	0xFF4
  5779                           prodl	equ	0xFF3
  5780                           intcon	equ	0xFF2
  5781                           intcon3	equ	0xFF0
  5782                           postinc0	equ	0xFEE
  5783                           fsr0h	equ	0xFEA
  5784                           fsr0l	equ	0xFE9
  5785                           wreg	equ	0xFE8
  5786                           indf1	equ	0xFE7
  5787                           fsr1h	equ	0xFE2
  5788                           fsr1l	equ	0xFE1
  5789                           indf2	equ	0xFDF
  5790                           postinc2	equ	0xFDE
  5791                           postdec2	equ	0xFDD
  5792                           fsr2h	equ	0xFDA
  5793                           fsr2l	equ	0xFD9
  5794                           status	equ	0xFD8
  5795                           
  5796 ;; *************** function i2_get_time *****************
  5797 ;; Defined at:
  5798 ;;		line 39 in file "time.c"
  5799 ;; Parameters:    Size  Location     Type
  5800 ;;  datime          2    3[COMRAM] PTR unsigned char 
  5801 ;;		 -> end_time(7), start_time(7), 
  5802 ;; Auto vars:     Size  Location     Type
  5803 ;;  get_time        2    6[COMRAM] int 
  5804 ;; Return value:  Size  Location     Type
  5805 ;;                  1    wreg      void 
  5806 ;; Registers used:
  5807 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5808 ;; Tracked objects:
  5809 ;;		On entry : 0/0
  5810 ;;		On exit  : 0/0
  5811 ;;		Unchanged: 0/0
  5812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5813 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5814 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5815 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5816 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5817 ;;Total ram usage:        5 bytes
  5818 ;; Hardware stack levels used:    1
  5819 ;; Hardware stack levels required when called:    2
  5820 ;; This function calls:
  5821 ;;		i2_I2C_Master_Read
  5822 ;;		i2_I2C_Master_Start
  5823 ;;		i2_I2C_Master_Stop
  5824 ;;		i2_I2C_Master_Write
  5825 ;; This function is called by:
  5826 ;;		_interrupt_handler
  5827 ;; This function uses a non-reentrant model
  5828 ;;
  5829                           
  5830                           	psect	text36
  5831  001B5A                     __ptext36:
  5832                           	opt stack 0
  5833  001B5A                     i2_get_time:
  5834                           	opt stack 22
  5835                           
  5836                           ;time.c: 40: I2C_Master_Start();
  5837                           
  5838                           ;incstack = 0
  5839  001B5A  EC8F  F011         	call	i2_I2C_Master_Start	;wreg free
  5840                           
  5841                           ;time.c: 41: I2C_Master_Write(0b11010000);
  5842  001B5E  0E00               	movlw	0
  5843  001B60  6E03               	movwf	i2I2C_Master_Write@d+1,c
  5844  001B62  0ED0               	movlw	208
  5845  001B64  6E02               	movwf	i2I2C_Master_Write@d,c
  5846  001B66  EC7E  F011         	call	i2_I2C_Master_Write	;wreg free
  5847                           
  5848                           ;time.c: 42: I2C_Master_Write(0x00);
  5849  001B6A  0E00               	movlw	0
  5850  001B6C  6E03               	movwf	i2I2C_Master_Write@d+1,c
  5851  001B6E  0E00               	movlw	0
  5852  001B70  6E02               	movwf	i2I2C_Master_Write@d,c
  5853  001B72  EC7E  F011         	call	i2_I2C_Master_Write	;wreg free
  5854                           
  5855                           ;time.c: 43: I2C_Master_Stop();
  5856  001B76  EC8B  F011         	call	i2_I2C_Master_Stop	;wreg free
  5857                           
  5858                           ;time.c: 46: I2C_Master_Start();
  5859  001B7A  EC8F  F011         	call	i2_I2C_Master_Start	;wreg free
  5860                           
  5861                           ;time.c: 47: I2C_Master_Write(0b11010001);
  5862  001B7E  0E00               	movlw	0
  5863  001B80  6E03               	movwf	i2I2C_Master_Write@d+1,c
  5864  001B82  0ED1               	movlw	209
  5865  001B84  6E02               	movwf	i2I2C_Master_Write@d,c
  5866  001B86  EC7E  F011         	call	i2_I2C_Master_Write	;wreg free
  5867                           
  5868                           ;time.c: 48: for(int i = 0; i < 6; i++){
  5869  001B8A  0E00               	movlw	0
  5870  001B8C  6E08               	movwf	i2get_time@i+1,c
  5871  001B8E  0E00               	movlw	0
  5872  001B90  6E07               	movwf	i2get_time@i,c
  5873  001B92                     i2l2646:
  5874  001B92  BE08               	btfsc	i2get_time@i+1,7,c
  5875  001B94  D006               	goto	i2l2650
  5876  001B96  5008               	movf	i2get_time@i+1,w,c
  5877  001B98  E12D               	bnz	i2l2658
  5878  001B9A  0E06               	movlw	6
  5879  001B9C  5C07               	subwf	i2get_time@i,w,c
  5880  001B9E  B0D8               	btfsc	status,0,c
  5881  001BA0  D029               	goto	i2l2658
  5882  001BA2                     i2l2650:
  5883                           
  5884                           ;time.c: 49: datime[i] = I2C_Master_Read(1);
  5885  001BA2  5007               	movf	i2get_time@i,w,c
  5886  001BA4  2404               	addwf	i2get_time@datime,w,c
  5887  001BA6  6ED9               	movwf	fsr2l,c
  5888  001BA8  5008               	movf	i2get_time@i+1,w,c
  5889  001BAA  2005               	addwfc	i2get_time@datime+1,w,c
  5890  001BAC  6EDA               	movwf	fsr2h,c
  5891  001BAE  0E01               	movlw	1
  5892  001BB0  EC0E  F011         	call	i2_I2C_Master_Read
  5893  001BB4  6EDF               	movwf	indf2,c
  5894                           
  5895                           ;time.c: 50: datime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  5896  001BB6  5007               	movf	i2get_time@i,w,c
  5897  001BB8  2404               	addwf	i2get_time@datime,w,c
  5898  001BBA  6ED9               	movwf	fsr2l,c
  5899  001BBC  5008               	movf	i2get_time@i+1,w,c
  5900  001BBE  2005               	addwfc	i2get_time@datime+1,w,c
  5901  001BC0  6EDA               	movwf	fsr2h,c
  5902  001BC2  0E44               	movlw	low _time
  5903  001BC4  2407               	addwf	i2get_time@i,w,c
  5904  001BC6  6EE1               	movwf	fsr1l,c
  5905  001BC8  0E00               	movlw	high _time
  5906  001BCA  2008               	addwfc	i2get_time@i+1,w,c
  5907  001BCC  6EE2               	movwf	fsr1h,c
  5908  001BCE  50E7               	movf	indf1,w,c
  5909  001BD0  6E06               	movwf	??i2_get_time& (0+255),c
  5910  001BD2  3806               	swapf	??i2_get_time,w,c
  5911  001BD4  0B0F               	andlw	15
  5912  001BD6  0B0F               	andlw	15
  5913  001BD8  0D0A               	mullw	10
  5914  001BDA  0E44               	movlw	low _time
  5915  001BDC  2407               	addwf	i2get_time@i,w,c
  5916  001BDE  6EE1               	movwf	fsr1l,c
  5917  001BE0  0E00               	movlw	high _time
  5918  001BE2  2008               	addwfc	i2get_time@i+1,w,c
  5919  001BE4  6EE2               	movwf	fsr1h,c
  5920  001BE6  50E7               	movf	indf1,w,c
  5921  001BE8  0B0F               	andlw	15
  5922  001BEA  24F3               	addwf	prodl,w,c
  5923  001BEC  6EDF               	movwf	indf2,c
  5924  001BEE  4A07               	infsnz	i2get_time@i,f,c
  5925  001BF0  2A08               	incf	i2get_time@i+1,f,c
  5926  001BF2  D7CF               	goto	i2l2646
  5927  001BF4                     i2l2658:
  5928                           
  5929                           ;time.c: 52: }
  5930                           ;time.c: 53: datime[6] = I2C_Master_Read(0);
  5931  001BF4  EE20 F006          	lfsr	2,6
  5932  001BF8  5004               	movf	i2get_time@datime,w,c
  5933  001BFA  26D9               	addwf	fsr2l,f,c
  5934  001BFC  5005               	movf	i2get_time@datime+1,w,c
  5935  001BFE  22DA               	addwfc	fsr2h,f,c
  5936  001C00  0E00               	movlw	0
  5937  001C02  EC0E  F011         	call	i2_I2C_Master_Read
  5938  001C06  6EDF               	movwf	indf2,c
  5939                           
  5940                           ;time.c: 54: I2C_Master_Stop();
  5941  001C08  EC8B  F011         	call	i2_I2C_Master_Stop	;wreg free
  5942                           
  5943                           ;time.c: 55: I2C_Master_Write(0b11010000);
  5944  001C0C  0E00               	movlw	0
  5945  001C0E  6E03               	movwf	i2I2C_Master_Write@d+1,c
  5946  001C10  0ED0               	movlw	208
  5947  001C12  6E02               	movwf	i2I2C_Master_Write@d,c
  5948  001C14  EC7E  F011         	call	i2_I2C_Master_Write	;wreg free
  5949                           
  5950                           ;time.c: 56: I2C_Master_Write(0x00);
  5951  001C18  0E00               	movlw	0
  5952  001C1A  6E03               	movwf	i2I2C_Master_Write@d+1,c
  5953  001C1C  0E00               	movlw	0
  5954  001C1E  6E02               	movwf	i2I2C_Master_Write@d,c
  5955  001C20  EC7E  F011         	call	i2_I2C_Master_Write	;wreg free
  5956                           
  5957                           ;time.c: 57: I2C_Master_Stop();
  5958  001C24  EC8B  F011         	call	i2_I2C_Master_Stop	;wreg free
  5959  001C28  0012               	return		;funcret
  5960  001C2A                     __end_ofi2_get_time:
  5961                           	opt stack 0
  5962                           pclatu	equ	0xFFB
  5963                           pclath	equ	0xFFA
  5964                           tblptru	equ	0xFF8
  5965                           tblptrh	equ	0xFF7
  5966                           tblptrl	equ	0xFF6
  5967                           tablat	equ	0xFF5
  5968                           prodh	equ	0xFF4
  5969                           prodl	equ	0xFF3
  5970                           intcon	equ	0xFF2
  5971                           intcon3	equ	0xFF0
  5972                           postinc0	equ	0xFEE
  5973                           fsr0h	equ	0xFEA
  5974                           fsr0l	equ	0xFE9
  5975                           wreg	equ	0xFE8
  5976                           indf1	equ	0xFE7
  5977                           fsr1h	equ	0xFE2
  5978                           fsr1l	equ	0xFE1
  5979                           indf2	equ	0xFDF
  5980                           postinc2	equ	0xFDE
  5981                           postdec2	equ	0xFDD
  5982                           fsr2h	equ	0xFDA
  5983                           fsr2l	equ	0xFD9
  5984                           status	equ	0xFD8
  5985                           
  5986 ;; *************** function i2_I2C_Master_Write *****************
  5987 ;; Defined at:
  5988 ;;		line 47 in file "I2C.c"
  5989 ;; Parameters:    Size  Location     Type
  5990 ;;  d               2    1[COMRAM] unsigned int 
  5991 ;; Auto vars:     Size  Location     Type
  5992 ;;		None
  5993 ;; Return value:  Size  Location     Type
  5994 ;;                  1    wreg      void 
  5995 ;; Registers used:
  5996 ;;		wreg, status,2, status,0, cstack
  5997 ;; Tracked objects:
  5998 ;;		On entry : 0/0
  5999 ;;		On exit  : 0/0
  6000 ;;		Unchanged: 0/0
  6001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6002 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6005 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6006 ;;Total ram usage:        2 bytes
  6007 ;; Hardware stack levels used:    1
  6008 ;; Hardware stack levels required when called:    1
  6009 ;; This function calls:
  6010 ;;		i2_I2C_Master_Wait
  6011 ;; This function is called by:
  6012 ;;		i2_get_time
  6013 ;; This function uses a non-reentrant model
  6014 ;;
  6015                           
  6016                           	psect	text37
  6017  0022FC                     __ptext37:
  6018                           	opt stack 0
  6019  0022FC                     i2_I2C_Master_Write:
  6020                           	opt stack 22
  6021                           
  6022                           ;I2C.c: 49: I2C_Master_Wait();
  6023                           
  6024                           ;incstack = 0
  6025  0022FC  EC58  F011         	call	i2_I2C_Master_Wait	;wreg free
  6026                           
  6027                           ;I2C.c: 50: SSPBUF = d;
  6028  002300  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
  6029  002304  0012               	return		;funcret
  6030  002306                     __end_ofi2_I2C_Master_Write:
  6031                           	opt stack 0
  6032                           pclatu	equ	0xFFB
  6033                           pclath	equ	0xFFA
  6034                           tblptru	equ	0xFF8
  6035                           tblptrh	equ	0xFF7
  6036                           tblptrl	equ	0xFF6
  6037                           tablat	equ	0xFF5
  6038                           prodh	equ	0xFF4
  6039                           prodl	equ	0xFF3
  6040                           intcon	equ	0xFF2
  6041                           intcon3	equ	0xFF0
  6042                           postinc0	equ	0xFEE
  6043                           fsr0h	equ	0xFEA
  6044                           fsr0l	equ	0xFE9
  6045                           wreg	equ	0xFE8
  6046                           indf1	equ	0xFE7
  6047                           fsr1h	equ	0xFE2
  6048                           fsr1l	equ	0xFE1
  6049                           indf2	equ	0xFDF
  6050                           postinc2	equ	0xFDE
  6051                           postdec2	equ	0xFDD
  6052                           fsr2h	equ	0xFDA
  6053                           fsr2l	equ	0xFD9
  6054                           status	equ	0xFD8
  6055                           
  6056 ;; *************** function i2_I2C_Master_Stop *****************
  6057 ;; Defined at:
  6058 ;;		line 41 in file "I2C.c"
  6059 ;; Parameters:    Size  Location     Type
  6060 ;;		None
  6061 ;; Auto vars:     Size  Location     Type
  6062 ;;		None
  6063 ;; Return value:  Size  Location     Type
  6064 ;;                  1    wreg      void 
  6065 ;; Registers used:
  6066 ;;		wreg, status,2, status,0, cstack
  6067 ;; Tracked objects:
  6068 ;;		On entry : 0/0
  6069 ;;		On exit  : 0/0
  6070 ;;		Unchanged: 0/0
  6071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6073 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6075 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6076 ;;Total ram usage:        0 bytes
  6077 ;; Hardware stack levels used:    1
  6078 ;; Hardware stack levels required when called:    1
  6079 ;; This function calls:
  6080 ;;		i2_I2C_Master_Wait
  6081 ;; This function is called by:
  6082 ;;		i2_get_time
  6083 ;; This function uses a non-reentrant model
  6084 ;;
  6085                           
  6086                           	psect	text38
  6087  002316                     __ptext38:
  6088                           	opt stack 0
  6089  002316                     i2_I2C_Master_Stop:
  6090                           	opt stack 22
  6091                           
  6092                           ;I2C.c: 43: I2C_Master_Wait();
  6093                           
  6094                           ;incstack = 0
  6095  002316  EC58  F011         	call	i2_I2C_Master_Wait	;wreg free
  6096                           
  6097                           ;I2C.c: 44: PEN = 1;
  6098  00231A  84C5               	bsf	4037,2,c	;volatile
  6099  00231C  0012               	return		;funcret
  6100  00231E                     __end_ofi2_I2C_Master_Stop:
  6101                           	opt stack 0
  6102                           pclatu	equ	0xFFB
  6103                           pclath	equ	0xFFA
  6104                           tblptru	equ	0xFF8
  6105                           tblptrh	equ	0xFF7
  6106                           tblptrl	equ	0xFF6
  6107                           tablat	equ	0xFF5
  6108                           prodh	equ	0xFF4
  6109                           prodl	equ	0xFF3
  6110                           intcon	equ	0xFF2
  6111                           intcon3	equ	0xFF0
  6112                           postinc0	equ	0xFEE
  6113                           fsr0h	equ	0xFEA
  6114                           fsr0l	equ	0xFE9
  6115                           wreg	equ	0xFE8
  6116                           indf1	equ	0xFE7
  6117                           fsr1h	equ	0xFE2
  6118                           fsr1l	equ	0xFE1
  6119                           indf2	equ	0xFDF
  6120                           postinc2	equ	0xFDE
  6121                           postdec2	equ	0xFDD
  6122                           fsr2h	equ	0xFDA
  6123                           fsr2l	equ	0xFD9
  6124                           status	equ	0xFD8
  6125                           
  6126 ;; *************** function i2_I2C_Master_Start *****************
  6127 ;; Defined at:
  6128 ;;		line 29 in file "I2C.c"
  6129 ;; Parameters:    Size  Location     Type
  6130 ;;		None
  6131 ;; Auto vars:     Size  Location     Type
  6132 ;;		None
  6133 ;; Return value:  Size  Location     Type
  6134 ;;                  1    wreg      void 
  6135 ;; Registers used:
  6136 ;;		wreg, status,2, status,0, cstack
  6137 ;; Tracked objects:
  6138 ;;		On entry : 0/0
  6139 ;;		On exit  : 0/0
  6140 ;;		Unchanged: 0/0
  6141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6145 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6146 ;;Total ram usage:        0 bytes
  6147 ;; Hardware stack levels used:    1
  6148 ;; Hardware stack levels required when called:    1
  6149 ;; This function calls:
  6150 ;;		i2_I2C_Master_Wait
  6151 ;; This function is called by:
  6152 ;;		i2_get_time
  6153 ;; This function uses a non-reentrant model
  6154 ;;
  6155                           
  6156                           	psect	text39
  6157  00231E                     __ptext39:
  6158                           	opt stack 0
  6159  00231E                     i2_I2C_Master_Start:
  6160                           	opt stack 22
  6161                           
  6162                           ;I2C.c: 31: I2C_Master_Wait();
  6163                           
  6164                           ;incstack = 0
  6165  00231E  EC58  F011         	call	i2_I2C_Master_Wait	;wreg free
  6166                           
  6167                           ;I2C.c: 32: SEN = 1;
  6168  002322  80C5               	bsf	4037,0,c	;volatile
  6169  002324  0012               	return		;funcret
  6170  002326                     __end_ofi2_I2C_Master_Start:
  6171                           	opt stack 0
  6172                           pclatu	equ	0xFFB
  6173                           pclath	equ	0xFFA
  6174                           tblptru	equ	0xFF8
  6175                           tblptrh	equ	0xFF7
  6176                           tblptrl	equ	0xFF6
  6177                           tablat	equ	0xFF5
  6178                           prodh	equ	0xFF4
  6179                           prodl	equ	0xFF3
  6180                           intcon	equ	0xFF2
  6181                           intcon3	equ	0xFF0
  6182                           postinc0	equ	0xFEE
  6183                           fsr0h	equ	0xFEA
  6184                           fsr0l	equ	0xFE9
  6185                           wreg	equ	0xFE8
  6186                           indf1	equ	0xFE7
  6187                           fsr1h	equ	0xFE2
  6188                           fsr1l	equ	0xFE1
  6189                           indf2	equ	0xFDF
  6190                           postinc2	equ	0xFDE
  6191                           postdec2	equ	0xFDD
  6192                           fsr2h	equ	0xFDA
  6193                           fsr2l	equ	0xFD9
  6194                           status	equ	0xFD8
  6195                           
  6196 ;; *************** function i2_I2C_Master_Read *****************
  6197 ;; Defined at:
  6198 ;;		line 53 in file "I2C.c"
  6199 ;; Parameters:    Size  Location     Type
  6200 ;;  a               1    wreg     unsigned char 
  6201 ;; Auto vars:     Size  Location     Type
  6202 ;;  a               1    1[COMRAM] unsigned char 
  6203 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
  6204 ;; Return value:  Size  Location     Type
  6205 ;;                  1    wreg      unsigned char 
  6206 ;; Registers used:
  6207 ;;		wreg, status,2, status,0, cstack
  6208 ;; Tracked objects:
  6209 ;;		On entry : 0/0
  6210 ;;		On exit  : 0/0
  6211 ;;		Unchanged: 0/0
  6212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6214 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6216 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6217 ;;Total ram usage:        2 bytes
  6218 ;; Hardware stack levels used:    1
  6219 ;; Hardware stack levels required when called:    1
  6220 ;; This function calls:
  6221 ;;		i2_I2C_Master_Wait
  6222 ;; This function is called by:
  6223 ;;		i2_get_time
  6224 ;; This function uses a non-reentrant model
  6225 ;;
  6226                           
  6227                           	psect	text40
  6228  00221C                     __ptext40:
  6229                           	opt stack 0
  6230  00221C                     i2_I2C_Master_Read:
  6231                           	opt stack 22
  6232                           
  6233                           ;incstack = 0
  6234                           ;i2I2C_Master_Read@a stored from wreg
  6235  00221C  6E02               	movwf	i2I2C_Master_Read@a,c
  6236                           
  6237                           ;I2C.c: 55: unsigned char temp;
  6238                           ;I2C.c: 56: I2C_Master_Wait();
  6239  00221E  EC58  F011         	call	i2_I2C_Master_Wait	;wreg free
  6240                           
  6241                           ;I2C.c: 57: RCEN = 1;
  6242  002222  86C5               	bsf	4037,3,c	;volatile
  6243                           
  6244                           ;I2C.c: 58: I2C_Master_Wait();
  6245  002224  EC58  F011         	call	i2_I2C_Master_Wait	;wreg free
  6246                           
  6247                           ;I2C.c: 59: temp = SSPBUF;
  6248  002228  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
  6249                           
  6250                           ;I2C.c: 60: I2C_Master_Wait();
  6251  00222C  EC58  F011         	call	i2_I2C_Master_Wait	;wreg free
  6252                           
  6253                           ;I2C.c: 61: ACKDT = (a)?0:1;
  6254  002230  5002               	movf	i2I2C_Master_Read@a,w,c
  6255  002232  A4D8               	btfss	status,2,c
  6256  002234  D002               	goto	i2u181_40
  6257  002236  8AC5               	bsf	4037,5,c	;volatile
  6258  002238  D001               	goto	i2l2450
  6259  00223A                     i2u181_40:
  6260  00223A  9AC5               	bcf	4037,5,c	;volatile
  6261  00223C                     i2l2450:
  6262                           
  6263                           ;I2C.c: 62: ACKEN = 1;
  6264  00223C  88C5               	bsf	4037,4,c	;volatile
  6265                           
  6266                           ;I2C.c: 63: return temp;
  6267  00223E  5003               	movf	i2I2C_Master_Read@temp,w,c
  6268  002240  0012               	return	
  6269  002242                     __end_ofi2_I2C_Master_Read:
  6270                           	opt stack 0
  6271                           pclatu	equ	0xFFB
  6272                           pclath	equ	0xFFA
  6273                           tblptru	equ	0xFF8
  6274                           tblptrh	equ	0xFF7
  6275                           tblptrl	equ	0xFF6
  6276                           tablat	equ	0xFF5
  6277                           prodh	equ	0xFF4
  6278                           prodl	equ	0xFF3
  6279                           intcon	equ	0xFF2
  6280                           intcon3	equ	0xFF0
  6281                           postinc0	equ	0xFEE
  6282                           fsr0h	equ	0xFEA
  6283                           fsr0l	equ	0xFE9
  6284                           wreg	equ	0xFE8
  6285                           indf1	equ	0xFE7
  6286                           fsr1h	equ	0xFE2
  6287                           fsr1l	equ	0xFE1
  6288                           indf2	equ	0xFDF
  6289                           postinc2	equ	0xFDE
  6290                           postdec2	equ	0xFDD
  6291                           fsr2h	equ	0xFDA
  6292                           fsr2l	equ	0xFD9
  6293                           status	equ	0xFD8
  6294                           
  6295 ;; *************** function i2_I2C_Master_Wait *****************
  6296 ;; Defined at:
  6297 ;;		line 24 in file "I2C.c"
  6298 ;; Parameters:    Size  Location     Type
  6299 ;;		None
  6300 ;; Auto vars:     Size  Location     Type
  6301 ;;		None
  6302 ;; Return value:  Size  Location     Type
  6303 ;;                  1    wreg      void 
  6304 ;; Registers used:
  6305 ;;		wreg, status,2, status,0
  6306 ;; Tracked objects:
  6307 ;;		On entry : 0/0
  6308 ;;		On exit  : 0/0
  6309 ;;		Unchanged: 0/0
  6310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6313 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6314 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6315 ;;Total ram usage:        1 bytes
  6316 ;; Hardware stack levels used:    1
  6317 ;; This function calls:
  6318 ;;		Nothing
  6319 ;; This function is called by:
  6320 ;;		i2_I2C_Master_Start
  6321 ;;		i2_I2C_Master_Stop
  6322 ;;		i2_I2C_Master_Write
  6323 ;;		i2_I2C_Master_Read
  6324 ;; This function uses a non-reentrant model
  6325 ;;
  6326                           
  6327                           	psect	text41
  6328  0022B0                     __ptext41:
  6329                           	opt stack 0
  6330  0022B0                     i2_I2C_Master_Wait:
  6331                           	opt stack 22
  6332  0022B0                     i2l34:
  6333  0022B0  B4C7               	btfsc	4039,2,c	;volatile
  6334  0022B2  D7FE               	goto	i2l34
  6335  0022B4  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
  6336  0022B8  0E1F               	movlw	31
  6337  0022BA  1601               	andwf	??i2_I2C_Master_Wait,f,c
  6338  0022BC  B4D8               	btfsc	status,2,c
  6339  0022BE  0012               	return	
  6340  0022C0  D7F7               	goto	i2l34
  6341  0022C2                     __end_ofi2_I2C_Master_Wait:
  6342                           	opt stack 0
  6343                           pclatu	equ	0xFFB
  6344                           pclath	equ	0xFFA
  6345                           tblptru	equ	0xFF8
  6346                           tblptrh	equ	0xFF7
  6347                           tblptrl	equ	0xFF6
  6348                           tablat	equ	0xFF5
  6349                           prodh	equ	0xFF4
  6350                           prodl	equ	0xFF3
  6351                           intcon	equ	0xFF2
  6352                           intcon3	equ	0xFF0
  6353                           postinc0	equ	0xFEE
  6354                           fsr0h	equ	0xFEA
  6355                           fsr0l	equ	0xFE9
  6356                           wreg	equ	0xFE8
  6357                           indf1	equ	0xFE7
  6358                           fsr1h	equ	0xFE2
  6359                           fsr1l	equ	0xFE1
  6360                           indf2	equ	0xFDF
  6361                           postinc2	equ	0xFDE
  6362                           postdec2	equ	0xFDD
  6363                           fsr2h	equ	0xFDA
  6364                           fsr2l	equ	0xFD9
  6365                           status	equ	0xFD8
  6366                           pclatu	equ	0xFFB
  6367                           pclath	equ	0xFFA
  6368                           tblptru	equ	0xFF8
  6369                           tblptrh	equ	0xFF7
  6370                           tblptrl	equ	0xFF6
  6371                           tablat	equ	0xFF5
  6372                           prodh	equ	0xFF4
  6373                           prodl	equ	0xFF3
  6374                           intcon	equ	0xFF2
  6375                           intcon3	equ	0xFF0
  6376                           postinc0	equ	0xFEE
  6377                           fsr0h	equ	0xFEA
  6378                           fsr0l	equ	0xFE9
  6379                           wreg	equ	0xFE8
  6380                           indf1	equ	0xFE7
  6381                           fsr1h	equ	0xFE2
  6382                           fsr1l	equ	0xFE1
  6383                           indf2	equ	0xFDF
  6384                           postinc2	equ	0xFDE
  6385                           postdec2	equ	0xFDD
  6386                           fsr2h	equ	0xFDA
  6387                           fsr2l	equ	0xFD9
  6388                           status	equ	0xFD8
  6389                           
  6390                           	psect	rparam
  6391  0000                     pclatu	equ	0xFFB
  6392                           pclath	equ	0xFFA
  6393                           tblptru	equ	0xFF8
  6394                           tblptrh	equ	0xFF7
  6395                           tblptrl	equ	0xFF6
  6396                           tablat	equ	0xFF5
  6397                           prodh	equ	0xFF4
  6398                           prodl	equ	0xFF3
  6399                           intcon	equ	0xFF2
  6400                           intcon3	equ	0xFF0
  6401                           postinc0	equ	0xFEE
  6402                           fsr0h	equ	0xFEA
  6403                           fsr0l	equ	0xFE9
  6404                           wreg	equ	0xFE8
  6405                           indf1	equ	0xFE7
  6406                           fsr1h	equ	0xFE2
  6407                           fsr1l	equ	0xFE1
  6408                           indf2	equ	0xFDF
  6409                           postinc2	equ	0xFDE
  6410                           postdec2	equ	0xFDD
  6411                           fsr2h	equ	0xFDA
  6412                           fsr2l	equ	0xFD9
  6413                           status	equ	0xFD8
  6414                           
  6415                           	psect	temp
  6416  000067                     btemp:
  6417                           	opt stack 0
  6418  000067                     	ds	1
  6419  0000                     int$flags	set	btemp
  6420                           pclatu	equ	0xFFB
  6421                           pclath	equ	0xFFA
  6422                           tblptru	equ	0xFF8
  6423                           tblptrh	equ	0xFF7
  6424                           tblptrl	equ	0xFF6
  6425                           tablat	equ	0xFF5
  6426                           prodh	equ	0xFF4
  6427                           prodl	equ	0xFF3
  6428                           intcon	equ	0xFF2
  6429                           intcon3	equ	0xFF0
  6430                           postinc0	equ	0xFEE
  6431                           fsr0h	equ	0xFEA
  6432                           fsr0l	equ	0xFE9
  6433                           wreg	equ	0xFE8
  6434                           indf1	equ	0xFE7
  6435                           fsr1h	equ	0xFE2
  6436                           fsr1l	equ	0xFE1
  6437                           indf2	equ	0xFDF
  6438                           postinc2	equ	0xFDE
  6439                           postdec2	equ	0xFDD
  6440                           fsr2h	equ	0xFDA
  6441                           fsr2l	equ	0xFD9
  6442                           status	equ	0xFD8


Data Sizes:
    Strings     169
    Constant    42
    Data        0
    BSS         35
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     67     102
    BANK0           128     10      10
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_14(CODE[16]), STR_13(CODE[15]), STR_12(CODE[15]), STR_11(CODE[3]), 
		 -> STR_10(CODE[20]), STR_9(CODE[16]), STR_8(CODE[5]), STR_7(CODE[10]), 
		 -> STR_6(CODE[15]), STR_5(CODE[7]), STR_4(CODE[21]), STR_3(CODE[13]), 
		 -> STR_2(CODE[9]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    get_time@datime	PTR unsigned char  size(2) Largest target is 7
		 -> end_time(COMRAM[7]), start_time(COMRAM[7]), 


Critical Paths under _main in COMRAM

    _welcome->_printf
    _sort->_readLightSensor
    _sense_can->_readADC
    _readLightSensor->_printf
    _move_can->_main_servo_control
    _move_can->_side_servo_control
    _get_time->_I2C_Master_Read
    _get_time->_I2C_Master_Write
    _initPIC->_I2C_Master_Init
    _initLCD->_lcdInst
    _I2C_Master_Init->___lldiv
    _display_time->_printf
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _display_sorting_time->_printf
    _debug->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _interrupt_handler in COMRAM

    _interrupt_handler->i2_get_time
    i2_putch->i2_lcdNibble
    i2_lcdInst->i2_lcdNibble
    i2_get_time->i2_I2C_Master_Read
    i2_get_time->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_sort

Critical Paths under _interrupt_handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interrupt_handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interrupt_handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interrupt_handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interrupt_handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interrupt_handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interrupt_handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interrupt_handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interrupt_handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interrupt_handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interrupt_handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   35807
                              _debug
               _display_sorting_time
                       _display_time
                            _initPIC
                               _sort
                            _welcome
 ---------------------------------------------------------------------------------
 (1) _welcome                                              2     2      0    4219
                                             58 COMRAM     2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _sort                                                10    10      0   13952
                                              0 BANK0     10    10      0
                               _gate
                           _get_time
                            _lcdInst
                 _main_servo_control
                           _move_can
                             _printf
                    _readLightSensor
                          _sense_can
                             _shaker
 ---------------------------------------------------------------------------------
 (2) _shaker                                               3     3      0      47
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _sense_can                                           11     9      2     291
                                             26 COMRAM    11     9      2
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _readLightSensor                                      9     7      2    4346
                                             58 COMRAM     9     7      2
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _move_can                                             2     0      2    2304
                                             29 COMRAM     2     0      2
                 _main_servo_control
                 _side_servo_control
 ---------------------------------------------------------------------------------
 (2) _get_time                                             5     3      2    1481
                                             27 COMRAM     5     3      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _gate                                                 3     3      0      46
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _initPIC                                              0     0      0    3741
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                 _main_servo_control
                 _side_servo_control
 ---------------------------------------------------------------------------------
 (3) _side_servo_control                                   5     3      2     990
                                             24 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (3) _main_servo_control                                   5     3      2    1144
                                             24 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     135
                                             27 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     440
                                             37 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     290
                                             24 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _display_time                                         3     3      0    5395
                                             58 COMRAM     3     3      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2    1032
                                             25 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      45
                                             25 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _display_sorting_time                                 4     4      0    4253
                                             58 COMRAM     4     4      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _debug                                                4     4      0    4247
                                             58 COMRAM     4     4      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _readADC                                              2     2      0      22
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    4084
                                             36 COMRAM    22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                             26 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     386
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                             31 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     549
                                             24 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                             26 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _interrupt_handler                                   16    16      0     804
                                              8 COMRAM    16    16      0
                         i2_get_time
                          i2_lcdInst
                            i2_putch
 ---------------------------------------------------------------------------------
 (7) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) i2_get_time                                           5     3      2     423
                                              3 COMRAM     5     3      2
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Write                                   2     0      2     152
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _debug
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _readADC
   _display_sorting_time
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _display_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _initPIC
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _initLCD
       _lcdInst
         _lcdNibble
     _main_servo_control
     _side_servo_control
   _sort
     _gate
     _get_time
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _main_servo_control
     _move_can
       _main_servo_control
       _side_servo_control
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _readLightSensor
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _readADC
     _sense_can
       _readADC
     _shaker
   _welcome
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble

 _interrupt_handler (ROOT)
   i2_get_time
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait
   i2_lcdInst
     i2_lcdNibble
   i2_putch
     i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      A       A       5        7.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     43      66       1       81.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      70      34        0.0%
DATA                 0      0      70       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Mar 29 17:00:17 2017

           i2_I2C_Master_Start 231E             i2_I2C_Master_Write 22FC                             l34 229E  
          ___wmul@multiplicand 001B                    __CFG_BORV$3 000000                   __CFG_CP0$OFF 000000  
                 __CFG_CP1$OFF 000000                   __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000  
                  __CFG_OSC$HS 000000                _readLightSensor 1C2A                            l128 2260  
                          l250 177A                            l260 18F8                            l254 17C6  
                          l246 172A                            l270 19B4                            l256 17EE  
                          l264 1948                            l282 1E62                            l268 1992  
                          l284 1E8C                            l380 1F18                            l286 1EB4  
           _side_servo_control 18D4                            l464 11C2                            l378 1ED6  
                          l909 20C2                            l919 2190                            l856 1DBA  
                 __CFG_CPB$OFF 000000                            _PEN 007E2A                   __CFG_CPD$OFF 000000  
                          _SEN 007E28                  ?_display_time 0001            ?i2_I2C_Master_Start 0001  
          ?i2_I2C_Master_Write 0002   __end_of_display_sorting_time 1FCE                            prod 000FF3  
                          wreg 000FE8                    _total_count 004B            ?_side_servo_control 0019  
                 __CFG_LVP$OFF 000000                   __CFG_WDT$OFF 000000                           l3010 175A  
                         l3100 19CA                           l3014 176A                           l3110 1A00  
                         l3024 17A4                           l3104 19DA                           l3122 1A20  
                         l3114 1A06                           l3028 17B6                           l3052 1928  
                         l3220 18A2                           l3212 182A                           l3132 1A42  
                         l3070 1982                           l3150 1A80                           l3142 1A6E  
                         l3126 1A2A                           l3302 1E42                           l3312 1648  
                         l3056 1938                           l3216 1866                           l3128 1A32  
                         l3224 1EC6                           l3322 166C                           l2274 1D6C  
                         l3066 1970                           l3242 1E52                           l3170 1C9C  
                         l3162 1C68                           l3138 1A68                           l3412 21AA  
                         l3316 1650                           l3308 1634                           l3340 16FE  
                         l2276 1D78                           l3156 1C3C                           l2286 1DAC  
                         l2278 1D7C                           l3190 1AD2                           l2800 2098  
                         l3256 1EAE                           l3168 1C8C                           l3440 2104  
                         l3432 20E8                           l3424 20D0                           l2810 20B8  
                         l2802 209C                           l3186 1AC2                           l3178 1CB6  
                         l2820 216E                           l3380 14CA                           l3436 20F6  
                         l3428 20DC                           l2822 2172                           l3198 1B24  
                         l3358 1454                           l3390 1504                           l2912 120A  
                         l2826 2186                           l2818 2166                           l2914 120E  
                         l2850 21F0                           l2908 11F0                     i2_get_time 1B5A  
                         l2782 227C                           l2950 1294                           l2926 123A  
                         l2942 126A                           l2928 123E                           l2944 127A  
                         l2872 10F0                           l2970 12F4                           l2962 12D6  
                         l2954 12B8                           l2874 10FE                           l2980 1320  
                         l2956 12C0                           l2892 1190                           l2884 1132  
                         l2868 10E0                           l2798 2090                           l2982 1364  
                         l2990 13BA                           l2974 1308                           l2878 1104  
                         l2992 13C0                           l2968 12EC                           l2896 1194  
                         l2978 131A                           l2994 13C8                           l2988 13AA  
                         _ADON 007E10                           STR_1 10CE                           STR_2 10BC  
                         STR_3 1087                           STR_4 102B                           STR_5 10C5  
                         STR_6 1085                           STR_7 10B2                           STR_8 10CC  
                         STR_9 1065                           _LATA 000F89                           _LATB 000F8A  
                         u3007 1EF4                           _LATC 000F8B                           u2160 21EE  
                         _LATD 000F8C                           u3017 1F08                           _LATE 000F8D  
                         u3107 1962                           u3027 1C80                           u3117 1996  
                         u3037 1E6E                           u2430 1728                           u3207 214C  
                         u3127 19A4                           u3047 1E80                           u2520 18F6  
                         u3217 1626                           u3137 1732                           u3057 1E94  
                         u3227 16EA                           u1635 1F48                           u3147 1742  
                         u3067 1EA4                           u3237 1F80                           u3157 1782  
                         u3077 1900                           u2710 1CAC                           u3247 1FB6  
                         u3167 1794                           u3087 1910                           u2640 1A16  
                         u3257 1FE6                           u3177 17CE                           u3097 1950  
                         u3267 1FF0                           u3187 17DE                           u3277 2012  
                         u3197 2118                           u3287 201C                           _RCEN 007E2B  
                         u2957 1DE2                           u2967 1414                           u2977 147C  
                         i2l34 22B0                           u2987 14EA                           u2997 1EE0  
                         _RSEN 007E29                           _flag 0055                           _gate 1E4A  
                         _main 20CC                           _mode 0058                           _keys 1001  
                         _time 0044                           fsr0h 000FEA                           fsr1h 000FE2  
                         fsr2h 000FDA                           fsr0l 000FE9                           indf1 000FE7  
                         indf2 000FDF                           fsr1l 000FE1                           fsr2l 000FD9  
                         _sort 13E2                           btemp 0067           ??i2_I2C_Master_Start 0002  
         ??i2_I2C_Master_Write 0004                           prodh 000FF4                           prodl 000FF3  
                         start 000E                  __CFG_IESO$OFF 000000                __end_ofi2_putch 22E6  
                __CFG_MCLRE$ON 000000                   ___param_bank 000000           ??_side_servo_control 001B  
                  i2_lcdNibble 2024               ?_I2C_Master_Init 0026               ?_I2C_Master_Read 0001  
             ?_I2C_Master_Wait 0001               ?_I2C_Master_Stop 0001                          ?_gate 0001  
                        ?_main 0001                          _ACKEN 007E2C                          _ACKDT 007E2D  
               ??_display_time 003B                          STR_10 1040                          STR_11 10D1  
                        STR_12 1094                          STR_13 10A3                          STR_14 1075  
                        STR_15 1054                          ?_sort 0001                __end_of___lldiv 1DCC  
              __end_of___lwdiv 20CC                __end_of___lwmod 219A                          _PORTB 000F81  
                        _TRISA 000F92                          _TRISB 000F93                          _TRISC 000F94  
                        _TRISD 000F95                  __CFG_PWRT$OFF 000000                  __CFG_WRT0$OFF 000000  
                __CFG_WRT1$OFF 000000                  __CFG_WRT2$OFF 000000                  __CFG_WRT3$OFF 000000  
              __end_of_lcdInst 22DA                 __CFG_EBTR0$OFF 000000                 __CFG_FCMEN$OFF 000000  
               __CFG_EBTR1$OFF 000000                 __CFG_EBTR2$OFF 000000                 __CFG_EBTR3$OFF 000000  
                __CFG_WRTB$OFF 000000                  __CFG_WRTC$OFF 000000                  __CFG_WRTD$OFF 000000  
              __end_of_readADC 2266                __end_of_initLCD 2158                 __CFG_EBTRB$OFF 000000  
                        _debug 219A                __end_of_initPIC 1D4A                __end_of_dpowers 101C  
              __end_of_isdigit 2284                          gate@i 001A                          _putch 22C2  
                        pclath 000FFA                          tablat 000FF5                __end_of_welcome 1E4A  
                        status 000FD8                 __CFG_PBADEN$ON 000000                __initialization 2284  
                 __end_of_gate 1EB6             __size_ofi2_lcdInst 000C        __end_of_readLightSensor 1CC0  
                 __end_of_main 2112                   __end_of_keys 1012                   __end_of_sort 150E  
        main_servo_control@dir 0019                         ??_gate 0019                         ??_main 0044  
                       ??_sort 0080                  __activetblptr 000002                    i2get_time@i 0007  
            ?_I2C_Master_Start 0001              ?_I2C_Master_Write 001A                         ?_debug 0001  
           ??_I2C_Master_Start 001A                         _ADCON0 000FC2                         _ADCON1 000FC1  
           ??_I2C_Master_Write 001C                         _ADCON2 000FC0                         _ADRESH 000FC4  
                       _ADRESL 000FC3                i2lcdNibble@data 0002                    ?i2_get_time 0004  
                       ?_putch 0001                i2lcdNibble@temp 0001                         _INT1IE 007F83  
                       _INT1IF 007F80                         i2l2450 223C                         i2l2650 1BA2  
                       i2l2732 15B0                         i2l2646 1B92                         i2l2742 15CC  
                       i2l2726 15A0                         i2l2658 1BF4                         i2l2738 15C2  
                       i2l2746 15D8                      ??i2_putch 0003               i2get_time@datime 0004  
                       _SSPADD 000FC8                         _TRISC3 007CA3                         _TRISC4 007CA4  
                       _SSPBUF 000FC9                 __CFG_XINST$OFF 000000           _display_sorting_time 1F74  
             __end_of_get_time 1B5A                         ___wmul 21F6                 __CFG_STVREN$ON 000000  
   __end_of_main_servo_control 17F0                      ??___lldiv 0021                      ??___lwdiv 001D  
                    ??___lwmod 0024                         debug@i 003D                         clear_0 228A  
                       _shaker 1EB6                      ??_lcdInst 001B                         _printf 10D6  
                    ??_readADC 0019                      ??_initLCD 001C                      ??_initPIC 002E  
             __end_of_move_can 18D4                      ??_isdigit 0019                   __mediumconst 0000  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
                    ??_welcome 003B                  display_time@i 003D              __end_ofi2_lcdInst 22F2  
             readLightSensor@i 0040                     __accesstop 0080        __end_of__initialization 2290  
         __end_of_display_time 1706                  ___rparam_used 000001          ?_display_sorting_time 0001  
               __pcstackCOMRAM 0001               ?_readLightSensor 003B                  __end_of_debug 21D0  
                __end_of_putch 22CE            __size_ofi2_get_time 00D0            main_servo_control@i 001C  
           __size_of_lcdNibble 0056                    i2putch@data 0003                        ??_debug 003B  
                      ??_putch 001B                 _soup_can_label 004F                   ?i2_lcdNibble 0001  
                      ?___wmul 0019                 get_time@datime 001C                        ?_shaker 0001  
                      ?_printf 0025             __size_of_sense_can 00D4            side_servo_control@i 001C  
                      _SSPCON1 000FC6                        _SSPCON2 000FC5                        _SSPSTAT 000FC7  
                    ?_get_time 001C                        i2_putch 22DA         ??_display_sorting_time 003B  
  __size_ofi2_I2C_Master_Start 0008              __end_of_lcdNibble 2024    __size_ofi2_I2C_Master_Write 000A  
                      __Hparam 0000                      ?_move_can 001E                        __Lparam 0000  
                   debug@H_max 003B    __size_of_side_servo_control 00E2                        ___lldiv 1D4A  
              __size_of___wmul 0026                        ___lwdiv 207A                        ___lwmod 2158  
                 __psmallconst 1000                        __pcinit 2284                        __ramtop 1000  
              __size_of_shaker 0064                        _lcdInst 22CE                        __ptext0 20CC  
                      __ptext1 1DCC                        __ptext2 13E2                        __ptext3 1EB6  
                      __ptext4 19B6                        __ptext5 1C2A                        __ptext6 17F0  
                      __ptext7 1A8A                        __ptext8 1E4A                        __ptext9 1CC0  
              __size_of_printf 030C                        _readADC 2242                        _initLCD 2112  
            __end_of_hexpowers 1024                        _initPIC 1CC0                        _dpowers 1012  
                      _isdigit 2266       __size_of_I2C_Master_Init 005A       __size_of_I2C_Master_Read 0026  
     __size_of_I2C_Master_Wait 0012       __size_of_I2C_Master_Stop 0008                        _welcome 1DCC  
                 ??i2_get_time 0006                     ??_get_time 001E                 __pintcode_body 150E  
        __size_of_display_time 00F0           end_of_initialization 2290                move_can@canType 001E  
                __Lmediumconst 0000                        int_func 150E              __end_of_sense_can 1A8A  
                      shaker@i 001A      __size_of_I2C_Master_Start 0008      __size_of_I2C_Master_Write 000A  
              ___lldiv@divisor 001D                ___lldiv@counter 0025                     ??_move_can 0020  
                      printf@c 003A                        printf@f 0025               I2C_Master_Init@c 0026  
             I2C_Master_Read@a 001A                        postdec2 000FDD                     _timeSetter 1024  
                      postinc0 000FEE                        postinc2 000FDE                        sort@can 0088  
                      sort@tap 0082                        sort@tin 0084             __end_ofi2_get_time 1C2A  
                    _PORTBbits 000F81          side_servo_control@dir 0019                   _display_time 1616  
               sense_can@H_max 0024             _main_servo_control 1706                 sense_can@i_316 0022  
            i2_I2C_Master_Read 221C              i2_I2C_Master_Wait 22B0              i2_I2C_Master_Stop 2316  
               _pop_can_no_tap 0051             ?i2_I2C_Master_Read 0001             ?i2_I2C_Master_Wait 0001  
           ?i2_I2C_Master_Stop 0001                     _start_time 0060            ?_main_servo_control 0019  
                    i2_lcdInst 22E6                    printf@width 0038            ??i2_I2C_Master_Read 0002  
          ??i2_I2C_Master_Wait 0001            ??i2_I2C_Master_Stop 0002                 __end_of___wmul 221C  
         __size_ofi2_lcdNibble 0056           ??_main_servo_control 001B                  i2lcdInst@data 0003  
               __end_of_shaker 1F1A                 __end_of_printf 13E2      __end_ofi2_I2C_Master_Read 2242  
    __end_ofi2_I2C_Master_Wait 22C2            start_initialization 2284      __end_ofi2_I2C_Master_Stop 231E  
        i2I2C_Master_Read@temp 0003              ??_I2C_Master_Init 002A              ??_I2C_Master_Read 001A  
                  sort@noLabel 0086              ??_I2C_Master_Wait 0019                     ?i2_lcdInst 0001  
            ??_I2C_Master_Stop 001A                       ??___wmul 001D               __CFG_LPT1OSC$OFF 000000  
                     ??_shaker 0019                       ??_printf 002D              _soup_can_no_label 004D  
     __size_of_readLightSensor 0096                    __pbssCOMRAM 0044                  __pcstackBANK0 0080  
                 _isdigit$1053 001A                       ?i2_putch 0001              __size_of_get_time 00D0  
             _I2C_Master_Start 230E            i2I2C_Master_Write@d 0002               _I2C_Master_Write 22F2  
             ___lwdiv@dividend 0019              __CFG_CCP2MX$PORTC 000000                      __pintcode 0008  
    interrupt_handler@keypress 0018                      _lcdNibble 1FCE              __size_of_move_can 00E4  
                     ?___lldiv 0019                       ?___lwdiv 0019                       ?___lwmod 0020  
                     ?_lcdInst 0001              _interrupt_handler 0008                       ?_readADC 0001  
                     ?_initLCD 0001                       ?_initPIC 0001                    __smallconst 1000  
                     ?_isdigit 0001     __size_ofi2_I2C_Master_Read 0026     __size_ofi2_I2C_Master_Wait 0012  
   __size_ofi2_I2C_Master_Stop 0008             ?_interrupt_handler 0001                       ?_welcome 0001  
                    _hexpowers 101C               ___lwdiv@quotient 001E                 __size_of_debug 0036  
               __size_of_putch 000C            ??_interrupt_handler 0009     __end_ofi2_I2C_Master_Start 2326  
   __end_ofi2_I2C_Master_Write 2306                    ??i2_lcdInst 0003                     sense_can@i 0020  
               ___wmul@product 001D                       _LATAbits 000F89                       _LATBbits 000F8A  
                     _LATCbits 000F8B                       _LATDbits 000F8C     __end_of_side_servo_control 19B6  
__size_of_display_sorting_time 005A                       i2u330_47 2046                       i2u331_47 2068  
                     i2u332_47 2072                       i2u181_40 223A                       i2u329_47 203C  
                    _sense_can 19B6               __CFG_WDTPS$32768 000000                     ?_lcdNibble 0001  
    __end_of_interrupt_handler 1616                     _ADCON0bits 000FC2              ___wmul@multiplier 0019  
                lcdNibble@data 001A                     printf@flag 0037                  lcdNibble@temp 0019  
                   printf@prec 0034                      get_time@i 001F            I2C_Master_Read@temp 001B  
            ??_readLightSensor 003D               __size_ofi2_putch 000C                       __Hrparam 0000  
                     __Lrparam 0000                     ?_sense_can 001B             __CFG_BOREN$SBORDIS 000000  
             __size_of___lldiv 0082               __size_of___lwdiv 0052               __size_of___lwmod 0042  
               readADC@channel 001A             i2I2C_Master_Read@a 0002               __size_of_lcdInst 000C  
              _I2C_Master_Init 1F1A               __size_of_readADC 0024                _I2C_Master_Read 21D0  
             __size_of_initLCD 0046               __size_of_initPIC 008A                _I2C_Master_Wait 229E  
              _I2C_Master_Stop 2306               __size_of_isdigit 001E                ___lwdiv@divisor 001B  
              ___lwdiv@counter 001D                       __ptext10 18D4                       __ptext11 1706  
                     __ptext20 229E                       __ptext12 2112                       __ptext21 1F74  
                     __ptext13 1F1A                       __ptext30 22CE                       __ptext22 219A  
                     __ptext14 1D4A                       __ptext31 1FCE                       __ptext23 2242  
                     __ptext15 1616                       __ptext40 221C                       __ptext24 10D6  
                     __ptext16 22F2                       __ptext41 22B0                       __ptext33 22DA  
                     __ptext25 22C2                       __ptext17 2306                       __ptext34 22E6  
                     __ptext26 2266                       __ptext18 230E                       __ptext35 2024  
                     __ptext27 21F6                       __ptext19 21D0                       __ptext36 1B5A  
                     __ptext28 2158                       __ptext37 22FC                       __ptext29 207A  
                     __ptext38 2316                       __ptext39 231E                       _end_time 0059  
             __size_of_welcome 007E                       _get_time 1A8A                  __size_of_gate 006C  
                __size_of_main 0046           readLightSensor@H_max 0042                  __size_of_sort 012C  
                     _move_can 17F0                  ??i2_lcdNibble 0001                    ??_lcdNibble 0019  
                     int$flags 0067                    _passed_time 0057                      printf@idx 0031  
                    printf@val 0035     __size_of_interrupt_handler 160E    __size_of_main_servo_control 00EA  
                    putch@data 001B       __end_of_I2C_Master_Start 2316       __end_of_I2C_Master_Write 22FC  
                   _INTCONbits 000FF2                       isdigit@c 001B                       intlevel2 0000  
           __end_of_timeSetter 102B               ___lwmod@dividend 0020               ___lldiv@dividend 0019  
        display_sorting_time@i 003D                    ??_sense_can 001D                    _pop_can_tap 0053  
                     printf@ap 0032        __end_of_I2C_Master_Init 1F74        __end_of_I2C_Master_Read 21F6  
      __end_of_I2C_Master_Wait 22B0        __end_of_I2C_Master_Stop 230E                    lcdInst@data 001B  
          __end_ofi2_lcdNibble 207A               ___lldiv@quotient 0021              I2C_Master_Write@d 001A  
              ___lwmod@divisor 0022                ___lwmod@counter 0024  
