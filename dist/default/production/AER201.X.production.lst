

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Apr 10 02:05:42 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text30,global,reloc=2,class=CODE,delta=1
    41                           	psect	text31,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    54                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    55                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    56  0000                     
    57                           ; Version 1.41
    58                           ; Generated 25/01/2017 GMT
    59                           ; 
    60                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    61                           ; All rights reserved.
    62                           ; 
    63                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    64                           ; 
    65                           ; Redistribution and use in source and binary forms, with or without modification, are
    66                           ; permitted provided that the following conditions are met:
    67                           ; 
    68                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    69                           ;        conditions and the following disclaimer.
    70                           ; 
    71                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    72                           ;        of conditions and the following disclaimer in the documentation and/or other
    73                           ;        materials provided with the distribution.
    74                           ; 
    75                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    76                           ;        software without specific prior written permission.
    77                           ; 
    78                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    79                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    80                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    81                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    82                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    83                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    84                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    85                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    86                           ; 
    87                           ; 
    88                           ; Code-generator required, PIC18F4620 Definitions
    89                           ; 
    90                           ; SFR Addresses
    91  0000                     
    92                           	psect	smallconst
    93  001000                     __psmallconst:
    94                           	opt stack 0
    95  001000  00                 	db	0
    96  001001                     _keys:
    97                           	opt stack 0
    98  001001  31                 	db	49
    99  001002  32                 	db	50
   100  001003  33                 	db	51
   101  001004  41                 	db	65
   102  001005  34                 	db	52
   103  001006  35                 	db	53
   104  001007  36                 	db	54
   105  001008  42                 	db	66
   106  001009  37                 	db	55
   107  00100A  38                 	db	56
   108  00100B  39                 	db	57
   109  00100C  43                 	db	67
   110  00100D  2A                 	db	42
   111  00100E  30                 	db	48
   112  00100F  23                 	db	35
   113  001010  44                 	db	68
   114  001011  00                 	db	0
   115  001012                     __end_of_keys:
   116                           	opt stack 0
   117  001012                     _dpowers:
   118                           	opt stack 0
   119  001012  0001               	dw	1
   120  001014  000A               	dw	10
   121  001016  0064               	dw	100
   122  001018  03E8               	dw	1000
   123  00101A  2710               	dw	10000
   124  00101C                     __end_of_dpowers:
   125                           	opt stack 0
   126  00101C                     _hexpowers:
   127                           	opt stack 0
   128  00101C  0001               	dw	1
   129  00101E  0010               	dw	16
   130  001020  0100               	dw	256
   131  001022  1000               	dw	4096
   132  001024                     __end_of_hexpowers:
   133                           	opt stack 0
   134  001024                     _timeSetter:
   135                           	opt stack 0
   136  001024  00                 	db	0
   137  001025  19                 	db	25
   138  001026  15                 	db	21
   139  001027  04                 	db	4
   140  001028  25                 	db	37
   141  001029  01                 	db	1
   142  00102A  17                 	db	23
   143  00102B                     __end_of_timeSetter:
   144                           	opt stack 0
   145  0000                     _PORTB	set	3969
   146  0000                     _LATBbits	set	3978
   147  0000                     _INTCONbits	set	4082
   148  0000                     _ADCON2	set	4032
   149  0000                     _ADCON1	set	4033
   150  0000                     _LATE	set	3981
   151  0000                     _LATC	set	3979
   152  0000                     _LATB	set	3978
   153  0000                     _LATA	set	3977
   154  0000                     _TRISE	set	3990
   155  0000                     _TRISB	set	3987
   156  0000                     _TRISD	set	3989
   157  0000                     _TRISC	set	3988
   158  0000                     _TRISA	set	3986
   159  0000                     _LATAbits	set	3977
   160  0000                     _LATEbits	set	3981
   161  0000                     _ADRESL	set	4035
   162  0000                     _LATCbits	set	3979
   163  0000                     _PORTBbits	set	3969
   164  0000                     _ADRESH	set	4036
   165  0000                     _ADCON0bits	set	4034
   166  0000                     _ADCON0	set	4034
   167  0000                     _LATD	set	3980
   168  0000                     _LATDbits	set	3980
   169  0000                     _SSPBUF	set	4041
   170  0000                     _SSPADD	set	4040
   171  0000                     _SSPCON2	set	4037
   172  0000                     _SSPCON1	set	4038
   173  0000                     _SSPSTAT	set	4039
   174  0000                     _INT1IF	set	32640
   175  0000                     _INT1IE	set	32643
   176  0000                     _ADON	set	32272
   177  0000                     _ACKEN	set	32300
   178  0000                     _ACKDT	set	32301
   179  0000                     _RCEN	set	32299
   180  0000                     _PEN	set	32298
   181  0000                     _RSEN	set	32297
   182  0000                     _SEN	set	32296
   183  0000                     _TRISC4	set	31908
   184  0000                     _TRISC3	set	31907
   185  00102B                     STR_4:
   186  00102B  32                 	db	50	;'2'
   187  00102C  20                 	db	32
   188  00102D  42                 	db	66	;'B'
   189  00102E  61                 	db	97	;'a'
   190  00102F  63                 	db	99	;'c'
   191  001030  6B                 	db	107	;'k'
   192  001031  20                 	db	32
   193  001032  74                 	db	116	;'t'
   194  001033  6F                 	db	111	;'o'
   195  001034  20                 	db	32
   196  001035  73                 	db	115	;'s'
   197  001036  74                 	db	116	;'t'
   198  001037  61                 	db	97	;'a'
   199  001038  72                 	db	114	;'r'
   200  001039  74                 	db	116	;'t'
   201  00103A  20                 	db	32
   202  00103B  6D                 	db	109	;'m'
   203  00103C  65                 	db	101	;'e'
   204  00103D  6E                 	db	110	;'n'
   205  00103E  75                 	db	117	;'u'
   206  00103F  00                 	db	0
   207  001040                     STR_10:
   208  001040  50                 	db	80	;'P'
   209  001041  72                 	db	114	;'r'
   210  001042  65                 	db	101	;'e'
   211  001043  73                 	db	115	;'s'
   212  001044  73                 	db	115	;'s'
   213  001045  20                 	db	32
   214  001046  31                 	db	49	;'1'
   215  001047  2F                 	db	47
   216  001048  32                 	db	50	;'2'
   217  001049  2F                 	db	47
   218  00104A  41                 	db	65	;'A'
   219  00104B  20                 	db	32
   220  00104C  74                 	db	116	;'t'
   221  00104D  6F                 	db	111	;'o'
   222  00104E  20                 	db	32
   223  00104F  73                 	db	115	;'s'
   224  001050  74                 	db	116	;'t'
   225  001051  6F                 	db	111	;'o'
   226  001052  70                 	db	112	;'p'
   227  001053  00                 	db	0
   228  001054                     STR_15:
   229  001054  30                 	db	48	;'0'
   230  001055  31                 	db	49	;'1'
   231  001056  32                 	db	50	;'2'
   232  001057  33                 	db	51	;'3'
   233  001058  34                 	db	52	;'4'
   234  001059  35                 	db	53	;'5'
   235  00105A  36                 	db	54	;'6'
   236  00105B  37                 	db	55	;'7'
   237  00105C  38                 	db	56	;'8'
   238  00105D  39                 	db	57	;'9'
   239  00105E  61                 	db	97	;'a'
   240  00105F  62                 	db	98	;'b'
   241  001060  63                 	db	99	;'c'
   242  001061  64                 	db	100	;'d'
   243  001062  65                 	db	101	;'e'
   244  001063  66                 	db	102	;'f'
   245  001064  00                 	db	0
   246  001065                     STR_9:
   247  001065  53                 	db	83	;'S'
   248  001066  6F                 	db	111	;'o'
   249  001067  72                 	db	114	;'r'
   250  001068  74                 	db	116	;'t'
   251  001069  69                 	db	105	;'i'
   252  00106A  6E                 	db	110	;'n'
   253  00106B  67                 	db	103	;'g'
   254  00106C  20                 	db	32
   255  00106D  53                 	db	83	;'S'
   256  00106E  74                 	db	116	;'t'
   257  00106F  61                 	db	97	;'a'
   258  001070  72                 	db	114	;'r'
   259  001071  74                 	db	116	;'t'
   260  001072  65                 	db	101	;'e'
   261  001073  64                 	db	100	;'d'
   262  001074  00                 	db	0
   263  001075                     STR_14:
   264  001075  54                 	db	84	;'T'
   265  001076  69                 	db	105	;'i'
   266  001077  6D                 	db	109	;'m'
   267  001078  65                 	db	101	;'e'
   268  001079  20                 	db	32
   269  00107A  75                 	db	117	;'u'
   270  00107B  73                 	db	115	;'s'
   271  00107C  65                 	db	101	;'e'
   272  00107D  64                 	db	100	;'d'
   273  00107E  3A                 	db	58	;':'
   274  00107F  20                 	db	32
   275  001080  25                 	db	37
   276  001081  64                 	db	100	;'d'
   277  001082  20                 	db	32
   278  001083  73                 	db	115	;'s'
   279  001084  00                 	db	0
   280  001085                     STR_6:
   281  001085  20                 	db	32
   282  001086  20                 	db	32
   283  001087  20                 	db	32
   284  001088  20                 	db	32
   285  001089  20                 	db	32
   286  00108A  20                 	db	32
   287  00108B  20                 	db	32
   288  00108C  20                 	db	32
   289  00108D  20                 	db	32
   290  00108E  20                 	db	32
   291  00108F  20                 	db	32
   292  001090  20                 	db	32
   293  001091  20                 	db	32
   294  001092  20                 	db	32
   295  001093  00                 	db	0
   296  001094                     STR_12:
   297  001094  25                 	db	37
   298  001095  30                 	db	48	;'0'
   299  001096  32                 	db	50	;'2'
   300  001097  78                 	db	120	;'x'
   301  001098  2F                 	db	47
   302  001099  25                 	db	37
   303  00109A  30                 	db	48	;'0'
   304  00109B  32                 	db	50	;'2'
   305  00109C  78                 	db	120	;'x'
   306  00109D  2F                 	db	47
   307  00109E  25                 	db	37
   308  00109F  30                 	db	48	;'0'
   309  0010A0  32                 	db	50	;'2'
   310  0010A1  78                 	db	120	;'x'
   311  0010A2  00                 	db	0
   312  0010A3                     STR_13:
   313  0010A3  25                 	db	37
   314  0010A4  30                 	db	48	;'0'
   315  0010A5  32                 	db	50	;'2'
   316  0010A6  78                 	db	120	;'x'
   317  0010A7  3A                 	db	58	;':'
   318  0010A8  25                 	db	37
   319  0010A9  30                 	db	48	;'0'
   320  0010AA  32                 	db	50	;'2'
   321  0010AB  78                 	db	120	;'x'
   322  0010AC  3A                 	db	58	;':'
   323  0010AD  25                 	db	37
   324  0010AE  30                 	db	48	;'0'
   325  0010AF  32                 	db	50	;'2'
   326  0010B0  78                 	db	120	;'x'
   327  0010B1  00                 	db	0
   328  0010B2                     STR_7:
   329  0010B2  41                 	db	65	;'A'
   330  0010B3  20                 	db	32
   331  0010B4  53                 	db	83	;'S'
   332  0010B5  6F                 	db	111	;'o'
   333  0010B6  72                 	db	114	;'r'
   334  0010B7  74                 	db	116	;'t'
   335  0010B8  69                 	db	105	;'i'
   336  0010B9  6E                 	db	110	;'n'
   337  0010BA  67                 	db	103	;'g'
   338  0010BB  00                 	db	0
   339  0010BC                     STR_2:
   340  0010BC  57                 	db	87	;'W'
   341  0010BD  65                 	db	101	;'e'
   342  0010BE  6C                 	db	108	;'l'
   343  0010BF  63                 	db	99	;'c'
   344  0010C0  6F                 	db	111	;'o'
   345  0010C1  6D                 	db	109	;'m'
   346  0010C2  65                 	db	101	;'e'
   347  0010C3  21                 	db	33
   348  0010C4  00                 	db	0
   349  0010C5                     STR_5:
   350  0010C5  31                 	db	49	;'1'
   351  0010C6  20                 	db	32
   352  0010C7  54                 	db	84	;'T'
   353  0010C8  69                 	db	105	;'i'
   354  0010C9  6D                 	db	109	;'m'
   355  0010CA  65                 	db	101	;'e'
   356  0010CB  00                 	db	0
   357  0010CC                     STR_8:
   358  0010CC  25                 	db	37
   359  0010CD  78                 	db	120	;'x'
   360  0010CE  20                 	db	32
   361  0010CF  25                 	db	37
   362  0010D0  78                 	db	120	;'x'
   363  0010D1  00                 	db	0
   364  0010D2                     STR_11:
   365  0010D2  25                 	db	37
   366  0010D3  64                 	db	100	;'d'
   367  0010D4  00                 	db	0
   368  0000                     
   369                           ; #config settings
   370  0010D5  00                 	db	0	; dummy byte at the end
   371  0000                     
   372                           	psect	cinit
   373  0025BA                     __pcinit:
   374                           	opt stack 0
   375  0025BA                     start_initialization:
   376                           	opt stack 0
   377  0025BA                     __initialization:
   378                           	opt stack 0
   379                           
   380                           ; Clear objects allocated to COMRAM (35 bytes)
   381  0025BA  EE00  F044         	lfsr	0,__pbssCOMRAM
   382  0025BE  0E23               	movlw	35
   383  0025C0                     clear_0:
   384  0025C0  6AEE               	clrf	postinc0,c
   385  0025C2  06E8               	decf	wreg,f,c
   386  0025C4  E1FD               	bnz	clear_0
   387  0025C6                     end_of_initialization:
   388                           	opt stack 0
   389  0025C6                     __end_of__initialization:
   390                           	opt stack 0
   391  0025C6  9067               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   392  0025C8  9267               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   393  0025CA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   394  0025CC  6EF8               	movwf	tblptru,c
   395  0025CE  0100               	movlb	0
   396  0025D0  EFFA  F011         	goto	_main	;jump to C main() function
   397                           tblptru	equ	0xFF8
   398                           postinc0	equ	0xFEE
   399                           wreg	equ	0xFE8
   400                           
   401                           	psect	bssCOMRAM
   402  000044                     __pbssCOMRAM:
   403                           	opt stack 0
   404  000044                     _time:
   405                           	opt stack 0
   406  000044                     	ds	7
   407  00004B                     _total_count:
   408                           	opt stack 0
   409  00004B                     	ds	2
   410  00004D                     _soup_can_no_label:
   411                           	opt stack 0
   412  00004D                     	ds	2
   413  00004F                     _soup_can_label:
   414                           	opt stack 0
   415  00004F                     	ds	2
   416  000051                     _pop_can_no_tap:
   417                           	opt stack 0
   418  000051                     	ds	2
   419  000053                     _pop_can_tap:
   420                           	opt stack 0
   421  000053                     	ds	2
   422  000055                     _flag:
   423                           	opt stack 0
   424  000055                     	ds	2
   425  000057                     _passed_time:
   426                           	opt stack 0
   427  000057                     	ds	1
   428  000058                     _mode:
   429                           	opt stack 0
   430  000058                     	ds	1
   431  000059                     _end_time:
   432                           	opt stack 0
   433  000059                     	ds	7
   434  000060                     _start_time:
   435                           	opt stack 0
   436  000060                     	ds	7
   437                           tblptru	equ	0xFF8
   438                           postinc0	equ	0xFEE
   439                           wreg	equ	0xFE8
   440                           
   441                           	psect	cstackBANK0
   442  000080                     __pcstackBANK0:
   443                           	opt stack 0
   444  000080                     ??_sort:
   445                           
   446                           ; 1 bytes @ 0x0
   447  000080                     	ds	2
   448  000082                     sort@tap:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0x2
   452  000082                     	ds	2
   453  000084                     sort@tin:
   454                           	opt stack 0
   455                           
   456                           ; 2 bytes @ 0x4
   457  000084                     	ds	2
   458  000086                     sort@noLabel:
   459                           	opt stack 0
   460                           
   461                           ; 2 bytes @ 0x6
   462  000086                     	ds	2
   463  000088                     sort@can:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0x8
   467  000088                     	ds	2
   468                           tblptru	equ	0xFF8
   469                           postinc0	equ	0xFEE
   470                           wreg	equ	0xFE8
   471                           
   472                           	psect	cstackCOMRAM
   473  000001                     __pcstackCOMRAM:
   474                           	opt stack 0
   475  000001                     ??i2_I2C_Master_Wait:
   476  000001                     i2lcdNibble@temp:
   477                           	opt stack 0
   478                           
   479                           ; 1 bytes @ 0x0
   480  000001                     	ds	1
   481  000002                     i2I2C_Master_Read@a:
   482                           	opt stack 0
   483  000002                     i2lcdNibble@data:
   484                           	opt stack 0
   485  000002                     i2I2C_Master_Write@d:
   486                           	opt stack 0
   487                           
   488                           ; 2 bytes @ 0x1
   489  000002                     	ds	1
   490  000003                     i2I2C_Master_Read@temp:
   491                           	opt stack 0
   492  000003                     i2lcdInst@data:
   493                           	opt stack 0
   494  000003                     i2putch@data:
   495                           	opt stack 0
   496                           
   497                           ; 1 bytes @ 0x2
   498  000003                     	ds	1
   499  000004                     i2get_time@datime:
   500                           	opt stack 0
   501                           
   502                           ; 2 bytes @ 0x3
   503  000004                     	ds	2
   504  000006                     ??i2_get_time:
   505                           
   506                           ; 1 bytes @ 0x5
   507  000006                     	ds	1
   508  000007                     i2get_time@i:
   509                           	opt stack 0
   510                           
   511                           ; 2 bytes @ 0x6
   512  000007                     	ds	2
   513  000009                     ??_interrupt_handler:
   514                           
   515                           ; 1 bytes @ 0x8
   516  000009                     	ds	15
   517  000018                     interrupt_handler@keypress:
   518                           	opt stack 0
   519                           
   520                           ; 1 bytes @ 0x17
   521  000018                     	ds	1
   522  000019                     ??_shaker:
   523  000019                     ??_gate:
   524  000019                     ??_isdigit:
   525  000019                     ??_I2C_Master_Wait:
   526  000019                     ??_readADC:
   527  000019                     ?___wmul:
   528                           	opt stack 0
   529  000019                     ?___lwdiv:
   530                           	opt stack 0
   531  000019                     ?___lldiv:
   532                           	opt stack 0
   533  000019                     lcdNibble@temp:
   534                           	opt stack 0
   535  000019                     main_servo_control@dir:
   536                           	opt stack 0
   537  000019                     side_servo_control@dir:
   538                           	opt stack 0
   539  000019                     ___wmul@multiplier:
   540                           	opt stack 0
   541  000019                     ___lwdiv@dividend:
   542                           	opt stack 0
   543  000019                     ___lldiv@dividend:
   544                           	opt stack 0
   545                           
   546                           ; 4 bytes @ 0x18
   547  000019                     	ds	1
   548  00001A                     I2C_Master_Read@a:
   549                           	opt stack 0
   550  00001A                     lcdNibble@data:
   551                           	opt stack 0
   552  00001A                     readADC@channel:
   553                           	opt stack 0
   554  00001A                     _isdigit$1112:
   555                           	opt stack 0
   556  00001A                     I2C_Master_Write@d:
   557                           	opt stack 0
   558  00001A                     shaker@i:
   559                           	opt stack 0
   560                           
   561                           ; 2 bytes @ 0x19
   562  00001A                     	ds	1
   563  00001B                     ??_main_servo_control:
   564  00001B                     ??_side_servo_control:
   565  00001B                     I2C_Master_Read@temp:
   566                           	opt stack 0
   567  00001B                     lcdInst@data:
   568                           	opt stack 0
   569  00001B                     putch@data:
   570                           	opt stack 0
   571  00001B                     isdigit@c:
   572                           	opt stack 0
   573  00001B                     ___wmul@multiplicand:
   574                           	opt stack 0
   575  00001B                     ___lwdiv@divisor:
   576                           	opt stack 0
   577                           
   578                           ; 2 bytes @ 0x1A
   579  00001B                     	ds	1
   580  00001C                     ??_initLCD:
   581  00001C                     main_servo_control@i:
   582                           	opt stack 0
   583  00001C                     get_time@datime:
   584                           	opt stack 0
   585                           
   586                           ; 2 bytes @ 0x1B
   587  00001C                     	ds	1
   588  00001D                     ___lwdiv@counter:
   589                           	opt stack 0
   590  00001D                     side_servo_control@i:
   591                           	opt stack 0
   592  00001D                     ___wmul@product:
   593                           	opt stack 0
   594  00001D                     ___lldiv@divisor:
   595                           	opt stack 0
   596                           
   597                           ; 4 bytes @ 0x1C
   598  00001D                     	ds	1
   599  00001E                     ??_get_time:
   600  00001E                     ___lwdiv@quotient:
   601                           	opt stack 0
   602                           
   603                           ; 2 bytes @ 0x1D
   604  00001E                     	ds	1
   605  00001F                     ?_sense_can:
   606                           	opt stack 0
   607  00001F                     move_can@canType:
   608                           	opt stack 0
   609  00001F                     get_time@i:
   610                           	opt stack 0
   611                           
   612                           ; 2 bytes @ 0x1E
   613  00001F                     	ds	1
   614  000020                     ?___lwmod:
   615                           	opt stack 0
   616  000020                     ___lwmod@dividend:
   617                           	opt stack 0
   618                           
   619                           ; 2 bytes @ 0x1F
   620  000020                     	ds	1
   621  000021                     ??_move_can:
   622  000021                     ??_sense_can:
   623  000021                     ___lldiv@quotient:
   624                           	opt stack 0
   625                           
   626                           ; 4 bytes @ 0x20
   627  000021                     	ds	1
   628  000022                     ___lwmod@divisor:
   629                           	opt stack 0
   630                           
   631                           ; 2 bytes @ 0x21
   632  000022                     	ds	1
   633  000023                     move_can@i:
   634                           	opt stack 0
   635                           
   636                           ; 2 bytes @ 0x22
   637  000023                     	ds	1
   638  000024                     ___lwmod@counter:
   639                           	opt stack 0
   640  000024                     sense_can@cansize:
   641                           	opt stack 0
   642                           
   643                           ; 2 bytes @ 0x23
   644  000024                     	ds	1
   645  000025                     ?_printf:
   646                           	opt stack 0
   647  000025                     ___lldiv@counter:
   648                           	opt stack 0
   649  000025                     move_can@i_636:
   650                           	opt stack 0
   651  000025                     printf@f:
   652                           	opt stack 0
   653                           
   654                           ; 2 bytes @ 0x24
   655  000025                     	ds	1
   656  000026                     sense_can@conductOnFall:
   657                           	opt stack 0
   658  000026                     I2C_Master_Init@c:
   659                           	opt stack 0
   660                           
   661                           ; 4 bytes @ 0x25
   662  000026                     	ds	1
   663  000027                     move_can@i_637:
   664                           	opt stack 0
   665                           
   666                           ; 2 bytes @ 0x26
   667  000027                     	ds	1
   668  000028                     sense_can@i:
   669                           	opt stack 0
   670                           
   671                           ; 2 bytes @ 0x27
   672  000028                     	ds	1
   673  000029                     move_can@i_638:
   674                           	opt stack 0
   675                           
   676                           ; 2 bytes @ 0x28
   677  000029                     	ds	1
   678  00002A                     ??_I2C_Master_Init:
   679  00002A                     sense_can@i_350:
   680                           	opt stack 0
   681                           
   682                           ; 2 bytes @ 0x29
   683  00002A                     	ds	2
   684  00002C                     sense_can@i_351:
   685                           	opt stack 0
   686                           
   687                           ; 2 bytes @ 0x2B
   688  00002C                     	ds	1
   689  00002D                     ??_printf:
   690                           
   691                           ; 1 bytes @ 0x2C
   692  00002D                     	ds	1
   693  00002E                     sense_can@i_352:
   694                           	opt stack 0
   695                           
   696                           ; 2 bytes @ 0x2D
   697  00002E                     	ds	2
   698  000030                     sense_can@H_max:
   699                           	opt stack 0
   700                           
   701                           ; 2 bytes @ 0x2F
   702  000030                     	ds	1
   703  000031                     printf@idx:
   704                           	opt stack 0
   705                           
   706                           ; 1 bytes @ 0x30
   707  000031                     	ds	1
   708  000032                     printf@ap:
   709                           	opt stack 0
   710                           
   711                           ; 2 bytes @ 0x31
   712  000032                     	ds	2
   713  000034                     printf@prec:
   714                           	opt stack 0
   715                           
   716                           ; 1 bytes @ 0x33
   717  000034                     	ds	1
   718  000035                     printf@val:
   719                           	opt stack 0
   720                           
   721                           ; 2 bytes @ 0x34
   722  000035                     	ds	2
   723  000037                     printf@flag:
   724                           	opt stack 0
   725                           
   726                           ; 1 bytes @ 0x36
   727  000037                     	ds	1
   728  000038                     printf@width:
   729                           	opt stack 0
   730                           
   731                           ; 2 bytes @ 0x37
   732  000038                     	ds	2
   733  00003A                     printf@c:
   734                           	opt stack 0
   735                           
   736                           ; 1 bytes @ 0x39
   737  00003A                     	ds	1
   738  00003B                     ??_welcome:
   739  00003B                     ??_display_time:
   740  00003B                     ??_display_sorting_time:
   741  00003B                     ??_debug:
   742  00003B                     ?_readLightSensor:
   743                           	opt stack 0
   744                           
   745                           ; 2 bytes @ 0x3A
   746  00003B                     	ds	1
   747  00003C                     debug@i:
   748                           	opt stack 0
   749                           
   750                           ; 2 bytes @ 0x3B
   751  00003C                     	ds	1
   752  00003D                     ??_readLightSensor:
   753  00003D                     display_time@i:
   754                           	opt stack 0
   755  00003D                     display_sorting_time@i:
   756                           	opt stack 0
   757                           
   758                           ; 2 bytes @ 0x3C
   759  00003D                     	ds	3
   760  000040                     readLightSensor@i:
   761                           	opt stack 0
   762                           
   763                           ; 2 bytes @ 0x3F
   764  000040                     	ds	2
   765  000042                     readLightSensor@H_max:
   766                           	opt stack 0
   767                           
   768                           ; 2 bytes @ 0x41
   769  000042                     	ds	2
   770  000044                     tblptru	equ	0xFF8
   771                           postinc0	equ	0xFEE
   772                           wreg	equ	0xFE8
   773                           
   774                           ; 1 bytes @ 0x43
   775 ;;
   776 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   777 ;;
   778 ;; *************** function _main *****************
   779 ;; Defined at:
   780 ;;		line 21 in file "main.c"
   781 ;; Parameters:    Size  Location     Type
   782 ;;		None
   783 ;; Auto vars:     Size  Location     Type
   784 ;;		None
   785 ;; Return value:  Size  Location     Type
   786 ;;                  1    wreg      void 
   787 ;; Registers used:
   788 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   789 ;; Tracked objects:
   790 ;;		On entry : 0/0
   791 ;;		On exit  : 0/0
   792 ;;		Unchanged: 0/0
   793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   797 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   798 ;;Total ram usage:        0 bytes
   799 ;; Hardware stack levels required when called:    9
   800 ;; This function calls:
   801 ;;		_debug
   802 ;;		_display_sorting_time
   803 ;;		_display_time
   804 ;;		_initPIC
   805 ;;		_sort
   806 ;;		_welcome
   807 ;; This function is called by:
   808 ;;		Startup code after reset
   809 ;; This function uses a non-reentrant model
   810 ;;
   811                           
   812                           	psect	text0
   813  0023F4                     __ptext0:
   814                           	opt stack 0
   815  0023F4                     _main:
   816                           	opt stack 22
   817                           
   818                           ;main.c: 22: initPIC();
   819                           
   820                           ;incstack = 0
   821  0023F4  ECFF  F00F         	call	_initPIC	;wreg free
   822  0023F8                     l3991:
   823                           
   824                           ;main.c: 24: if (mode == 0) {
   825  0023F8  5058               	movf	_mode,w,c
   826  0023FA  A4D8               	btfss	status,2,c
   827  0023FC  D003               	goto	l3995
   828                           
   829                           ;main.c: 25: welcome();
   830  0023FE  EC87  F010         	call	_welcome	;wreg free
   831                           
   832                           ;main.c: 27: } else if (mode == 1) {
   833  002402  D7FA               	goto	l3991
   834  002404                     l3995:
   835  002404  0458               	decf	_mode,w,c
   836  002406  A4D8               	btfss	status,2,c
   837  002408  D003               	goto	l3999
   838                           
   839                           ;main.c: 28: display_time();
   840  00240A  ECF5  F00D         	call	_display_time	;wreg free
   841                           
   842                           ;main.c: 29: }
   843  00240E  D7F4               	goto	l3991
   844  002410                     l3999:
   845                           
   846                           ;main.c: 31: else if (mode == 2) {
   847  002410  0E02               	movlw	2
   848  002412  1858               	xorwf	_mode,w,c
   849  002414  A4D8               	btfss	status,2,c
   850  002416  D003               	goto	l4003
   851                           
   852                           ;main.c: 32: sort();
   853  002418  ECF3  F00C         	call	_sort	;wreg free
   854                           
   855                           ;main.c: 33: }
   856  00241C  D7ED               	goto	l3991
   857  00241E                     l4003:
   858                           
   859                           ;main.c: 35: else if (mode == 3) {
   860  00241E  0E03               	movlw	3
   861  002420  1858               	xorwf	_mode,w,c
   862  002422  A4D8               	btfss	status,2,c
   863  002424  D003               	goto	l4007
   864                           
   865                           ;main.c: 36: display_sorting_time();
   866  002426  EC25  F011         	call	_display_sorting_time	;wreg free
   867                           
   868                           ;main.c: 37: }
   869  00242A  D7E6               	goto	l3991
   870  00242C                     l4007:
   871                           
   872                           ;main.c: 39: else if (mode == 99) {
   873  00242C  0E63               	movlw	99
   874  00242E  1858               	xorwf	_mode,w,c
   875  002430  A4D8               	btfss	status,2,c
   876  002432  D7E2               	goto	l3991
   877                           
   878                           ;main.c: 40: debug();
   879  002434  EC61  F012         	call	_debug	;wreg free
   880  002438  D7DF               	goto	l3991
   881  00243A                     __end_of_main:
   882                           	opt stack 0
   883                           tblptru	equ	0xFF8
   884                           postinc0	equ	0xFEE
   885                           wreg	equ	0xFE8
   886                           status	equ	0xFD8
   887                           
   888 ;; *************** function _welcome *****************
   889 ;; Defined at:
   890 ;;		line 20 in file "picState.c"
   891 ;; Parameters:    Size  Location     Type
   892 ;;		None
   893 ;; Auto vars:     Size  Location     Type
   894 ;;		None
   895 ;; Return value:  Size  Location     Type
   896 ;;                  2   86[None  ] int 
   897 ;; Registers used:
   898 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   899 ;; Tracked objects:
   900 ;;		On entry : 0/0
   901 ;;		On exit  : 0/0
   902 ;;		Unchanged: 0/0
   903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   906 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   907 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   908 ;;Total ram usage:        2 bytes
   909 ;; Hardware stack levels used:    1
   910 ;; Hardware stack levels required when called:    7
   911 ;; This function calls:
   912 ;;		_lcdInst
   913 ;;		_printf
   914 ;; This function is called by:
   915 ;;		_main
   916 ;; This function uses a non-reentrant model
   917 ;;
   918                           
   919                           	psect	text1
   920  00210E                     __ptext1:
   921                           	opt stack 0
   922  00210E                     _welcome:
   923                           	opt stack 23
   924                           
   925                           ;picState.c: 21: lcdInst(0x01);;
   926                           
   927                           ;incstack = 0
   928  00210E  0E01               	movlw	1
   929  002110  EC02  F013         	call	_lcdInst
   930                           
   931                           ;picState.c: 22: lcdInst(0b10000000);;
   932  002114  0E80               	movlw	128
   933  002116  EC02  F013         	call	_lcdInst
   934                           
   935                           ;picState.c: 23: _delay((unsigned long)((200)*(8000000/4000.0)));
   936  00211A  0E03               	movlw	3
   937  00211C  6E3C               	movwf	(??_welcome+1)& (0+255),c
   938  00211E  0E08               	movlw	8
   939  002120  6E3B               	movwf	??_welcome& (0+255),c
   940  002122  0E77               	movlw	119
   941  002124                     u3657:
   942  002124  2EE8               	decfsz	wreg,f,c
   943  002126  D7FE               	bra	u3657
   944  002128  2E3B               	decfsz	??_welcome& (0+255),f,c
   945  00212A  D7FC               	bra	u3657
   946  00212C  2E3C               	decfsz	(??_welcome+1)& (0+255),f,c
   947  00212E  D7FA               	bra	u3657
   948  002130  F000               	nop	
   949                           
   950                           ;picState.c: 25: printf("Welcome!");
   951  002132  0EBC               	movlw	low STR_2
   952  002134  6E25               	movwf	printf@f,c
   953  002136  0E10               	movlw	high STR_2
   954  002138  6E26               	movwf	printf@f+1,c
   955  00213A  EC6B  F008         	call	_printf	;wreg free
   956                           
   957                           ;picState.c: 26: printf("            ");
   958  00213E  0E87               	movlw	low (STR_6+2)
   959  002140  6E25               	movwf	printf@f,c
   960  002142  0E10               	movlw	high (STR_6+2)
   961  002144  6E26               	movwf	printf@f+1,c
   962  002146  EC6B  F008         	call	_printf	;wreg free
   963                           
   964                           ;picState.c: 27: printf("2 Back to start menu");
   965  00214A  0E2B               	movlw	low STR_4
   966  00214C  6E25               	movwf	printf@f,c
   967  00214E  0E10               	movlw	high STR_4
   968  002150  6E26               	movwf	printf@f+1,c
   969  002152  EC6B  F008         	call	_printf	;wreg free
   970                           
   971                           ;picState.c: 28: lcdInst(0b11000000);;
   972  002156  0EC0               	movlw	192
   973  002158  EC02  F013         	call	_lcdInst
   974                           
   975                           ;picState.c: 29: printf("1 Time");
   976  00215C  0EC5               	movlw	low STR_5
   977  00215E  6E25               	movwf	printf@f,c
   978  002160  0E10               	movlw	high STR_5
   979  002162  6E26               	movwf	printf@f+1,c
   980  002164  EC6B  F008         	call	_printf	;wreg free
   981                           
   982                           ;picState.c: 30: printf("              ");
   983  002168  0E85               	movlw	low STR_6
   984  00216A  6E25               	movwf	printf@f,c
   985  00216C  0E10               	movlw	high STR_6
   986  00216E  6E26               	movwf	printf@f+1,c
   987  002170  EC6B  F008         	call	_printf	;wreg free
   988                           
   989                           ;picState.c: 31: printf("A Sorting");
   990  002174  0EB2               	movlw	low STR_7
   991  002176  6E25               	movwf	printf@f,c
   992  002178  0E10               	movlw	high STR_7
   993  00217A  6E26               	movwf	printf@f+1,c
   994  00217C  EC6B  F008         	call	_printf	;wreg free
   995                           
   996                           ;picState.c: 32: LATDbits.LATD0 = 0;
   997  002180  908C               	bcf	3980,0,c	;volatile
   998                           
   999                           ;picState.c: 33: LATCbits.LATC1 = 0;
  1000  002182  928B               	bcf	3979,1,c	;volatile
  1001  002184                     l3873:
  1002  002184  5058               	movf	_mode,w,c
  1003  002186  A4D8               	btfss	status,2,c
  1004  002188  0012               	return	
  1005  00218A  D7FC               	goto	l3873
  1006  00218C                     __end_of_welcome:
  1007                           	opt stack 0
  1008                           tblptru	equ	0xFF8
  1009                           postinc0	equ	0xFEE
  1010                           wreg	equ	0xFE8
  1011                           status	equ	0xFD8
  1012                           
  1013 ;; *************** function _sort *****************
  1014 ;; Defined at:
  1015 ;;		line 86 in file "picState.c"
  1016 ;; Parameters:    Size  Location     Type
  1017 ;;		None
  1018 ;; Auto vars:     Size  Location     Type
  1019 ;;  can             2    8[BANK0 ] int 
  1020 ;;  noLabel         2    6[BANK0 ] int 
  1021 ;;  tin             2    4[BANK0 ] int 
  1022 ;;  tap             2    2[BANK0 ] int 
  1023 ;; Return value:  Size  Location     Type
  1024 ;;                  2   90[None  ] int 
  1025 ;; Registers used:
  1026 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1027 ;; Tracked objects:
  1028 ;;		On entry : 0/0
  1029 ;;		On exit  : 0/0
  1030 ;;		Unchanged: 0/0
  1031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1033 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1034 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1035 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1036 ;;Total ram usage:       10 bytes
  1037 ;; Hardware stack levels used:    1
  1038 ;; Hardware stack levels required when called:    8
  1039 ;; This function calls:
  1040 ;;		_gate
  1041 ;;		_get_time
  1042 ;;		_lcdInst
  1043 ;;		_main_servo_control
  1044 ;;		_move_can
  1045 ;;		_printf
  1046 ;;		_readLightSensor
  1047 ;;		_sense_can
  1048 ;;		_shaker
  1049 ;;		_side_servo_control
  1050 ;; This function is called by:
  1051 ;;		_main
  1052 ;; This function uses a non-reentrant model
  1053 ;;
  1054                           
  1055                           	psect	text2
  1056  0019E6                     __ptext2:
  1057                           	opt stack 0
  1058  0019E6                     _sort:
  1059                           	opt stack 22
  1060                           
  1061                           ;picState.c: 88: int tap = 0;
  1062                           
  1063                           ;incstack = 0
  1064  0019E6  0E00               	movlw	0
  1065  0019E8  0100               	movlb	0	; () banked
  1066  0019EA  6F83               	movwf	(sort@tap+1)& (0+255),b
  1067  0019EC  0E00               	movlw	0
  1068  0019EE  6F82               	movwf	sort@tap& (0+255),b
  1069                           
  1070                           ;picState.c: 89: int tin = 0;
  1071  0019F0  0E00               	movlw	0
  1072  0019F2  0100               	movlb	0	; () banked
  1073  0019F4  6F85               	movwf	(sort@tin+1)& (0+255),b
  1074  0019F6  0E00               	movlw	0
  1075  0019F8  6F84               	movwf	sort@tin& (0+255),b
  1076                           
  1077                           ;picState.c: 90: int noLabel = 0;
  1078  0019FA  0E00               	movlw	0
  1079  0019FC  0100               	movlb	0	; () banked
  1080  0019FE  6F87               	movwf	(sort@noLabel+1)& (0+255),b
  1081  001A00  0E00               	movlw	0
  1082  001A02  6F86               	movwf	sort@noLabel& (0+255),b
  1083                           
  1084                           ; BSR set to: 0
  1085                           ;picState.c: 92: lcdInst(0x01);;
  1086  001A04  0E01               	movlw	1
  1087  001A06  EC02  F013         	call	_lcdInst
  1088                           
  1089                           ;picState.c: 93: _delay((unsigned long)((100)*(8000000/4000.0)));
  1090  001A0A  0E02               	movlw	2
  1091  001A0C  0100               	movlb	0	; () banked
  1092  001A0E  6F81               	movwf	(??_sort+1)& (0+255),b
  1093  001A10  0E04               	movlw	4
  1094  001A12  0100               	movlb	0	; () banked
  1095  001A14  6F80               	movwf	??_sort& (0+255),b
  1096  001A16  0EBA               	movlw	186
  1097  001A18                     u3667:
  1098  001A18  2EE8               	decfsz	wreg,f,c
  1099  001A1A  D7FE               	bra	u3667
  1100  001A1C  2F80               	decfsz	??_sort& (0+255),f,b
  1101  001A1E  D7FC               	bra	u3667
  1102  001A20  2F81               	decfsz	(??_sort+1)& (0+255),f,b
  1103  001A22  D7FA               	bra	u3667
  1104  001A24  F000               	nop	
  1105                           
  1106                           ;picState.c: 94: printf("Sorting Started");
  1107  001A26  0E65               	movlw	low STR_9
  1108  001A28  6E25               	movwf	printf@f,c
  1109  001A2A  0E10               	movlw	high STR_9
  1110  001A2C  6E26               	movwf	printf@f+1,c
  1111  001A2E  EC6B  F008         	call	_printf	;wreg free
  1112                           
  1113                           ;picState.c: 95: lcdInst(0b11000000);;
  1114  001A32  0EC0               	movlw	192
  1115  001A34  EC02  F013         	call	_lcdInst
  1116                           
  1117                           ;picState.c: 96: printf("Press 1/2/A to stop");
  1118  001A38  0E40               	movlw	low STR_10
  1119  001A3A  6E25               	movwf	printf@f,c
  1120  001A3C  0E10               	movlw	high STR_10
  1121  001A3E  6E26               	movwf	printf@f+1,c
  1122  001A40  EC6B  F008         	call	_printf	;wreg free
  1123                           
  1124                           ;picState.c: 97: get_time(start_time);
  1125  001A44  0E60               	movlw	low _start_time
  1126  001A46  6E1C               	movwf	get_time@datime,c
  1127  001A48  0E00               	movlw	high _start_time
  1128  001A4A  6E1D               	movwf	get_time@datime+1,c
  1129  001A4C  ECDC  F00E         	call	_get_time	;wreg free
  1130                           
  1131                           ;picState.c: 98: lcdInst(0b10000000);;
  1132  001A50  0E80               	movlw	128
  1133  001A52  EC02  F013         	call	_lcdInst
  1134                           
  1135                           ;picState.c: 100: while (mode == 2){
  1136  001A56  D04A               	goto	l3953
  1137  001A58                     l3929:
  1138                           
  1139                           ;picState.c: 101: main_servo_control(0);
  1140  001A58  0E00               	movlw	0
  1141  001A5A  6E1A               	movwf	main_servo_control@dir+1,c
  1142  001A5C  0E00               	movlw	0
  1143  001A5E  6E19               	movwf	main_servo_control@dir,c
  1144  001A60  EC6D  F00E         	call	_main_servo_control	;wreg free
  1145                           
  1146                           ;picState.c: 102: side_servo_control(0);
  1147  001A64  0E00               	movlw	0
  1148  001A66  6E1A               	movwf	side_servo_control@dir+1,c
  1149  001A68  0E00               	movlw	0
  1150  001A6A  6E19               	movwf	side_servo_control@dir,c
  1151  001A6C  EC7B  F00D         	call	_side_servo_control	;wreg free
  1152                           
  1153                           ;picState.c: 104: if (readLightSensor() == 1) {
  1154  001A70  ECAC  F00F         	call	_readLightSensor	;wreg free
  1155  001A74  043B               	decf	?_readLightSensor,w,c
  1156  001A76  103C               	iorwf	?_readLightSensor+1,w,c
  1157  001A78  A4D8               	btfss	status,2,c
  1158  001A7A  D021               	goto	l3943
  1159                           
  1160                           ;picState.c: 106: LATDbits.LATD0 = 1;
  1161  001A7C  808C               	bsf	3980,0,c	;volatile
  1162                           
  1163                           ;picState.c: 107: lcdInst(0b10000000);;
  1164  001A7E  0E80               	movlw	128
  1165  001A80  EC02  F013         	call	_lcdInst
  1166                           
  1167                           ;picState.c: 108: lcdInst(0b11000000);;
  1168  001A84  0EC0               	movlw	192
  1169  001A86  EC02  F013         	call	_lcdInst
  1170                           
  1171                           ;picState.c: 109: int can = sense_can();
  1172  001A8A  ECF1  F009         	call	_sense_can	;wreg free
  1173  001A8E  C01F  F088         	movff	?_sense_can,sort@can
  1174  001A92  C020  F089         	movff	?_sense_can+1,sort@can+1
  1175                           
  1176                           ;picState.c: 110: LATDbits.LATD0 = 0;
  1177  001A96  908C               	bcf	3980,0,c	;volatile
  1178                           
  1179                           ;picState.c: 111: move_can(can);
  1180  001A98  C088  F01F         	movff	sort@can,move_can@canType
  1181  001A9C  C089  F020         	movff	sort@can+1,move_can@canType+1
  1182  001AA0  EC4E  F00B         	call	_move_can	;wreg free
  1183                           
  1184                           ;picState.c: 113: printf("%d", can);
  1185  001AA4  0ED2               	movlw	low STR_11
  1186  001AA6  6E25               	movwf	printf@f,c
  1187  001AA8  0E10               	movlw	high STR_11
  1188  001AAA  6E26               	movwf	printf@f+1,c
  1189  001AAC  C088  F027         	movff	sort@can,?_printf+2
  1190  001AB0  C089  F028         	movff	sort@can+1,?_printf+3
  1191  001AB4  EC6B  F008         	call	_printf	;wreg free
  1192                           
  1193                           ;picState.c: 114: flag++;
  1194  001AB8  4A55               	infsnz	_flag,f,c
  1195  001ABA  2A56               	incf	_flag+1,f,c
  1196                           
  1197                           ;picState.c: 115: } else {
  1198  001ABC  D017               	goto	l3953
  1199  001ABE                     l3943:
  1200                           
  1201                           ;picState.c: 117: shaker();
  1202  001ABE  ECC6  F010         	call	_shaker	;wreg free
  1203                           
  1204                           ;picState.c: 118: LATDbits.LATD0 = 0;
  1205  001AC2  908C               	bcf	3980,0,c	;volatile
  1206                           
  1207                           ;picState.c: 119: _delay((unsigned long)((500)*(8000000/4000.0)));
  1208  001AC4  0E06               	movlw	6
  1209  001AC6  0100               	movlb	0	; () banked
  1210  001AC8  6F81               	movwf	(??_sort+1)& (0+255),b
  1211  001ACA  0E13               	movlw	19
  1212  001ACC  0100               	movlb	0	; () banked
  1213  001ACE  6F80               	movwf	??_sort& (0+255),b
  1214  001AD0  0EAD               	movlw	173
  1215  001AD2                     u3677:
  1216  001AD2  2EE8               	decfsz	wreg,f,c
  1217  001AD4  D7FE               	bra	u3677
  1218  001AD6  2F80               	decfsz	??_sort& (0+255),f,b
  1219  001AD8  D7FC               	bra	u3677
  1220  001ADA  2F81               	decfsz	(??_sort+1)& (0+255),f,b
  1221  001ADC  D7FA               	bra	u3677
  1222  001ADE  D000               	nop2	
  1223                           
  1224                           ;picState.c: 120: gate();
  1225  001AE0  ECA8  F011         	call	_gate	;wreg free
  1226                           
  1227                           ;picState.c: 121: flag = 0;
  1228  001AE4  0E00               	movlw	0
  1229  001AE6  6E56               	movwf	_flag+1,c
  1230  001AE8  0E00               	movlw	0
  1231  001AEA  6E55               	movwf	_flag,c
  1232  001AEC                     l3953:
  1233  001AEC  0E02               	movlw	2
  1234  001AEE  1858               	xorwf	_mode,w,c
  1235  001AF0  A4D8               	btfss	status,2,c
  1236  001AF2  0012               	return	
  1237  001AF4  D7B1               	goto	l3929
  1238  001AF6                     __end_of_sort:
  1239                           	opt stack 0
  1240                           tblptru	equ	0xFF8
  1241                           postinc0	equ	0xFEE
  1242                           wreg	equ	0xFE8
  1243                           status	equ	0xFD8
  1244                           
  1245 ;; *************** function _shaker *****************
  1246 ;; Defined at:
  1247 ;;		line 18 in file "motor.c"
  1248 ;; Parameters:    Size  Location     Type
  1249 ;;		None
  1250 ;; Auto vars:     Size  Location     Type
  1251 ;;  i               2   25[COMRAM] int 
  1252 ;; Return value:  Size  Location     Type
  1253 ;;                  1    wreg      void 
  1254 ;; Registers used:
  1255 ;;		wreg, status,2, status,0
  1256 ;; Tracked objects:
  1257 ;;		On entry : 0/0
  1258 ;;		On exit  : 0/0
  1259 ;;		Unchanged: 0/0
  1260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1262 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1263 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1264 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1265 ;;Total ram usage:        3 bytes
  1266 ;; Hardware stack levels used:    1
  1267 ;; Hardware stack levels required when called:    4
  1268 ;; This function calls:
  1269 ;;		Nothing
  1270 ;; This function is called by:
  1271 ;;		_sort
  1272 ;; This function uses a non-reentrant model
  1273 ;;
  1274                           
  1275                           	psect	text3
  1276  00218C                     __ptext3:
  1277                           	opt stack 0
  1278  00218C                     _shaker:
  1279                           	opt stack 25
  1280                           
  1281                           ;motor.c: 19: int i = 0;
  1282                           
  1283                           ;incstack = 0
  1284  00218C  0E00               	movlw	0
  1285  00218E  6E1B               	movwf	shaker@i+1,c
  1286  002190  0E00               	movlw	0
  1287  002192  6E1A               	movwf	shaker@i,c
  1288                           
  1289                           ;motor.c: 20: for (i = 0; i<200; i++){
  1290  002194  0E00               	movlw	0
  1291  002196  6E1B               	movwf	shaker@i+1,c
  1292  002198  0E00               	movlw	0
  1293  00219A  6E1A               	movwf	shaker@i,c
  1294  00219C                     l3799:
  1295  00219C  BE1B               	btfsc	shaker@i+1,7,c
  1296  00219E  D006               	goto	l417
  1297  0021A0  501B               	movf	shaker@i+1,w,c
  1298  0021A2  E125               	bnz	l419
  1299  0021A4  0EC8               	movlw	200
  1300  0021A6  5C1A               	subwf	shaker@i,w,c
  1301  0021A8  B0D8               	btfsc	status,0,c
  1302  0021AA  0012               	return	
  1303  0021AC                     l417:
  1304                           
  1305                           ;motor.c: 22: LATBbits.LATB2 = 1;
  1306  0021AC  848A               	bsf	3978,2,c	;volatile
  1307                           
  1308                           ;motor.c: 23: LATCbits.LATC1 = 1;
  1309  0021AE  828B               	bsf	3979,1,c	;volatile
  1310                           
  1311                           ;motor.c: 25: _delay((unsigned long)((8.5)*(8000000/4000.0)));
  1312  0021B0  0E17               	movlw	23
  1313  0021B2  6E19               	movwf	??_shaker& (0+255),c
  1314  0021B4  0E12               	movlw	18
  1315  0021B6                     u3687:
  1316  0021B6  2EE8               	decfsz	wreg,f,c
  1317  0021B8  D7FE               	bra	u3687
  1318  0021BA  2E19               	decfsz	??_shaker& (0+255),f,c
  1319  0021BC  D7FC               	bra	u3687
  1320  0021BE  D000               	nop2	
  1321                           
  1322                           ;motor.c: 27: LATCbits.LATC1 = 1;
  1323  0021C0  828B               	bsf	3979,1,c	;volatile
  1324                           
  1325                           ;motor.c: 28: LATBbits.LATB2 = 0;
  1326  0021C2  948A               	bcf	3978,2,c	;volatile
  1327                           
  1328                           ;motor.c: 30: _delay((unsigned long)((10)*(8000000/4000.0)));
  1329  0021C4  0E1A               	movlw	26
  1330  0021C6  6E19               	movwf	??_shaker& (0+255),c
  1331  0021C8  0EF8               	movlw	248
  1332  0021CA                     u3697:
  1333  0021CA  2EE8               	decfsz	wreg,f,c
  1334  0021CC  D7FE               	bra	u3697
  1335  0021CE  2E19               	decfsz	??_shaker& (0+255),f,c
  1336  0021D0  D7FC               	bra	u3697
  1337  0021D2  D000               	nop2	
  1338                           
  1339                           ;motor.c: 32: LATBbits.LATB2 = 0;
  1340  0021D4  948A               	bcf	3978,2,c	;volatile
  1341                           
  1342                           ;motor.c: 33: LATCbits.LATC1 = 0;
  1343  0021D6  928B               	bcf	3979,1,c	;volatile
  1344                           
  1345                           ;motor.c: 35: _delay((unsigned long)((1.5)*(8000000/4000.0)));
  1346  0021D8  0E04               	movlw	4
  1347  0021DA  6E19               	movwf	??_shaker& (0+255),c
  1348  0021DC  0EE4               	movlw	228
  1349  0021DE                     u3707:
  1350  0021DE  2EE8               	decfsz	wreg,f,c
  1351  0021E0  D7FE               	bra	u3707
  1352  0021E2  2E19               	decfsz	??_shaker& (0+255),f,c
  1353  0021E4  D7FC               	bra	u3707
  1354  0021E6  D000               	nop2	
  1355  0021E8  4A1A               	infsnz	shaker@i,f,c
  1356  0021EA  2A1B               	incf	shaker@i+1,f,c
  1357  0021EC  D7D7               	goto	l3799
  1358  0021EE                     l419:
  1359  0021EE  0012               	return		;funcret
  1360  0021F0                     __end_of_shaker:
  1361                           	opt stack 0
  1362                           tblptru	equ	0xFF8
  1363                           postinc0	equ	0xFEE
  1364                           wreg	equ	0xFE8
  1365                           status	equ	0xFD8
  1366                           
  1367 ;; *************** function _sense_can *****************
  1368 ;; Defined at:
  1369 ;;		line 31 in file "adc.c"
  1370 ;; Parameters:    Size  Location     Type
  1371 ;;		None
  1372 ;; Auto vars:     Size  Location     Type
  1373 ;;  i               2   45[COMRAM] int 
  1374 ;;  i               2   43[COMRAM] int 
  1375 ;;  i               2   41[COMRAM] int 
  1376 ;;  i               2   39[COMRAM] int 
  1377 ;;  H_max           2   47[COMRAM] int 
  1378 ;;  conductOnFal    2   37[COMRAM] int 
  1379 ;;  cansize         2   35[COMRAM] int 
  1380 ;; Return value:  Size  Location     Type
  1381 ;;                  2   30[COMRAM] int 
  1382 ;; Registers used:
  1383 ;;		wreg, status,2, status,0, cstack
  1384 ;; Tracked objects:
  1385 ;;		On entry : 0/0
  1386 ;;		On exit  : 0/0
  1387 ;;		Unchanged: 0/0
  1388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1389 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1390 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1391 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1392 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1393 ;;Total ram usage:       19 bytes
  1394 ;; Hardware stack levels used:    1
  1395 ;; Hardware stack levels required when called:    5
  1396 ;; This function calls:
  1397 ;;		_main_servo_control
  1398 ;;		_readADC
  1399 ;;		_side_servo_control
  1400 ;; This function is called by:
  1401 ;;		_sort
  1402 ;; This function uses a non-reentrant model
  1403 ;;
  1404                           
  1405                           	psect	text4
  1406  0013E2                     __ptext4:
  1407                           	opt stack 0
  1408  0013E2                     _sense_can:
  1409                           	opt stack 24
  1410                           
  1411                           ;adc.c: 33: int H_max = 0;
  1412                           
  1413                           ;incstack = 0
  1414  0013E2  0E00               	movlw	0
  1415  0013E4  6E31               	movwf	sense_can@H_max+1,c
  1416  0013E6  0E00               	movlw	0
  1417  0013E8  6E30               	movwf	sense_can@H_max,c
  1418                           
  1419                           ;adc.c: 34: int cansize = 0;
  1420  0013EA  0E00               	movlw	0
  1421  0013EC  6E25               	movwf	sense_can@cansize+1,c
  1422  0013EE  0E00               	movlw	0
  1423  0013F0  6E24               	movwf	sense_can@cansize,c
  1424                           
  1425                           ;adc.c: 35: int conductOnFall = 0;
  1426  0013F2  0E00               	movlw	0
  1427  0013F4  6E27               	movwf	sense_can@conductOnFall+1,c
  1428  0013F6  0E00               	movlw	0
  1429  0013F8  6E26               	movwf	sense_can@conductOnFall,c
  1430                           
  1431                           ;adc.c: 41: for (int i = 0; i < 10000; i++) {
  1432  0013FA  0E00               	movlw	0
  1433  0013FC  6E29               	movwf	sense_can@i+1,c
  1434  0013FE  0E00               	movlw	0
  1435  001400  6E28               	movwf	sense_can@i,c
  1436  001402                     l3491:
  1437  001402  BE29               	btfsc	sense_can@i+1,7,c
  1438  001404  D006               	goto	l3495
  1439  001406  0E10               	movlw	16
  1440  001408  5C28               	subwf	sense_can@i,w,c
  1441  00140A  0E27               	movlw	39
  1442  00140C  5829               	subwfb	sense_can@i+1,w,c
  1443  00140E  B0D8               	btfsc	status,0,c
  1444  001410  D029               	goto	l3513
  1445  001412                     l3495:
  1446                           
  1447                           ;adc.c: 42: readADC(0);
  1448  001412  0E00               	movlw	0
  1449  001414  EC81  F012         	call	_readADC
  1450                           
  1451                           ;adc.c: 43: if (ADRESH > H_max) {
  1452  001418  50C4               	movf	4036,w,c	;volatile
  1453  00141A  6E21               	movwf	??_sense_can& (0+255),c
  1454  00141C  6A22               	clrf	(??_sense_can+1)& (0+255),c
  1455  00141E  5021               	movf	??_sense_can,w,c
  1456  001420  5C30               	subwf	sense_can@H_max,w,c
  1457  001422  5031               	movf	sense_can@H_max+1,w,c
  1458  001424  0A80               	xorlw	128
  1459  001426  6E23               	movwf	(??_sense_can+2)& (0+255),c
  1460  001428  5022               	movf	??_sense_can+1,w,c
  1461  00142A  0A80               	xorlw	128
  1462  00142C  5823               	subwfb	(??_sense_can+2)& (0+255),w,c
  1463  00142E  B0D8               	btfsc	status,0,c
  1464  001430  D003               	goto	l3501
  1465                           
  1466                           ;adc.c: 44: H_max = ADRESH;
  1467  001432  CFC4 F030          	movff	4036,sense_can@H_max	;volatile
  1468  001436  6A31               	clrf	sense_can@H_max+1,c
  1469  001438                     l3501:
  1470                           
  1471                           ;adc.c: 45: }
  1472                           ;adc.c: 47: if (ADRESH > 30){
  1473  001438  0E1E               	movlw	30
  1474  00143A  64C4               	cpfsgt	4036,c	;volatile
  1475  00143C  D004               	goto	l3505
  1476                           
  1477                           ;adc.c: 48: conductOnFall = 1;
  1478  00143E  0E00               	movlw	0
  1479  001440  6E27               	movwf	sense_can@conductOnFall+1,c
  1480  001442  0E01               	movlw	1
  1481  001444  6E26               	movwf	sense_can@conductOnFall,c
  1482  001446                     l3505:
  1483                           
  1484                           ;adc.c: 49: }
  1485                           ;adc.c: 51: if (H_max >= 0xA0) {
  1486  001446  BE31               	btfsc	sense_can@H_max+1,7,c
  1487  001448  D00A               	goto	l3509
  1488  00144A  5031               	movf	sense_can@H_max+1,w,c
  1489  00144C  E104               	bnz	u3100
  1490  00144E  0EA0               	movlw	160
  1491  001450  5C30               	subwf	sense_can@H_max,w,c
  1492  001452  A0D8               	btfss	status,0,c
  1493  001454  D004               	goto	l3509
  1494  001456                     u3100:
  1495                           
  1496                           ;adc.c: 52: conductOnFall = 1;
  1497  001456  0E00               	movlw	0
  1498  001458  6E27               	movwf	sense_can@conductOnFall+1,c
  1499  00145A  0E01               	movlw	1
  1500  00145C  6E26               	movwf	sense_can@conductOnFall,c
  1501  00145E                     l3509:
  1502  00145E  4A28               	infsnz	sense_can@i,f,c
  1503  001460  2A29               	incf	sense_can@i+1,f,c
  1504  001462  D7CF               	goto	l3491
  1505  001464                     l3513:
  1506                           
  1507                           ;adc.c: 53: }
  1508                           ;adc.c: 54: }
  1509                           ;adc.c: 57: _delay((unsigned long)((100)*(8000000/4000.0)));
  1510  001464  0E02               	movlw	2
  1511  001466  6E22               	movwf	(??_sense_can+1)& (0+255),c
  1512  001468  0E04               	movlw	4
  1513  00146A  6E21               	movwf	??_sense_can& (0+255),c
  1514  00146C  0EBA               	movlw	186
  1515  00146E                     u3717:
  1516  00146E  2EE8               	decfsz	wreg,f,c
  1517  001470  D7FE               	bra	u3717
  1518  001472  2E21               	decfsz	??_sense_can& (0+255),f,c
  1519  001474  D7FC               	bra	u3717
  1520  001476  2E22               	decfsz	(??_sense_can+1)& (0+255),f,c
  1521  001478  D7FA               	bra	u3717
  1522  00147A  D000               	nop2	
  1523                           
  1524                           ;adc.c: 58: if (PORTBbits.RB0 == 1){
  1525  00147C  A081               	btfss	3969,0,c	;volatile
  1526  00147E  D004               	goto	l3519
  1527                           
  1528                           ;adc.c: 59: cansize = 0;
  1529  001480  0E00               	movlw	0
  1530  001482  6E25               	movwf	sense_can@cansize+1,c
  1531  001484  0E00               	movlw	0
  1532  001486  D003               	goto	L1
  1533  001488                     l3519:
  1534                           
  1535                           ;adc.c: 61: else {
  1536                           ;adc.c: 62: cansize = 1;
  1537  001488  0E00               	movlw	0
  1538  00148A  6E25               	movwf	sense_can@cansize+1,c
  1539  00148C  0E01               	movlw	1
  1540  00148E                     L1:
  1541  00148E  6E24               	movwf	sense_can@cansize,c
  1542                           
  1543                           ;adc.c: 63: }
  1544                           ;adc.c: 65: LATDbits.LATD0 = 0;
  1545  001490  908C               	bcf	3980,0,c	;volatile
  1546                           
  1547                           ;adc.c: 66: main_servo_control(0);
  1548  001492  0E00               	movlw	0
  1549  001494  6E1A               	movwf	main_servo_control@dir+1,c
  1550  001496  0E00               	movlw	0
  1551  001498  6E19               	movwf	main_servo_control@dir,c
  1552  00149A  EC6D  F00E         	call	_main_servo_control	;wreg free
  1553                           
  1554                           ;adc.c: 67: side_servo_control(0);
  1555  00149E  0E00               	movlw	0
  1556  0014A0  6E1A               	movwf	side_servo_control@dir+1,c
  1557  0014A2  0E00               	movlw	0
  1558  0014A4  6E19               	movwf	side_servo_control@dir,c
  1559  0014A6  EC7B  F00D         	call	_side_servo_control	;wreg free
  1560                           
  1561                           ;adc.c: 68: _delay((unsigned long)((500)*(8000000/4000.0)));
  1562  0014AA  0E06               	movlw	6
  1563  0014AC  6E22               	movwf	(??_sense_can+1)& (0+255),c
  1564  0014AE  0E13               	movlw	19
  1565  0014B0  6E21               	movwf	??_sense_can& (0+255),c
  1566  0014B2  0EAE               	movlw	174
  1567  0014B4                     u3727:
  1568  0014B4  2EE8               	decfsz	wreg,f,c
  1569  0014B6  D7FE               	bra	u3727
  1570  0014B8  2E21               	decfsz	??_sense_can& (0+255),f,c
  1571  0014BA  D7FC               	bra	u3727
  1572  0014BC  2E22               	decfsz	(??_sense_can+1)& (0+255),f,c
  1573  0014BE  D7FA               	bra	u3727
  1574                           
  1575                           ;adc.c: 69: main_servo_control(0);
  1576  0014C0  0E00               	movlw	0
  1577  0014C2  6E1A               	movwf	main_servo_control@dir+1,c
  1578  0014C4  0E00               	movlw	0
  1579  0014C6  6E19               	movwf	main_servo_control@dir,c
  1580  0014C8  EC6D  F00E         	call	_main_servo_control	;wreg free
  1581                           
  1582                           ;adc.c: 70: side_servo_control(0);
  1583  0014CC  0E00               	movlw	0
  1584  0014CE  6E1A               	movwf	side_servo_control@dir+1,c
  1585  0014D0  0E00               	movlw	0
  1586  0014D2  6E19               	movwf	side_servo_control@dir,c
  1587  0014D4  EC7B  F00D         	call	_side_servo_control	;wreg free
  1588                           
  1589                           ;adc.c: 71: LATDbits.LATD0 = 1;
  1590  0014D8  808C               	bsf	3980,0,c	;volatile
  1591                           
  1592                           ;adc.c: 74: if (cansize == 0){
  1593  0014DA  5024               	movf	sense_can@cansize,w,c
  1594  0014DC  1025               	iorwf	sense_can@cansize+1,w,c
  1595  0014DE  A4D8               	btfss	status,2,c
  1596  0014E0  D045               	goto	l3577
  1597                           
  1598                           ;adc.c: 79: if (conductOnFall){
  1599  0014E2  5026               	movf	sense_can@conductOnFall,w,c
  1600  0014E4  1027               	iorwf	sense_can@conductOnFall+1,w,c
  1601  0014E6  B4D8               	btfsc	status,2,c
  1602  0014E8  D005               	goto	l3543
  1603                           
  1604                           ;adc.c: 80: return 2;
  1605  0014EA  0E00               	movlw	0
  1606  0014EC  6E20               	movwf	?_sense_can+1,c
  1607  0014EE  0E02               	movlw	2
  1608  0014F0  6E1F               	movwf	?_sense_can,c
  1609  0014F2  0012               	return	
  1610  0014F4                     l3543:
  1611                           
  1612                           ;adc.c: 81: }
  1613                           ;adc.c: 83: for (int i = 0; i < 10000; i++) {
  1614  0014F4  0E00               	movlw	0
  1615  0014F6  6E2B               	movwf	sense_can@i_350+1,c
  1616  0014F8  0E00               	movlw	0
  1617  0014FA  6E2A               	movwf	sense_can@i_350,c
  1618  0014FC                     l3545:
  1619  0014FC  BE2B               	btfsc	sense_can@i_350+1,7,c
  1620  0014FE  D006               	goto	l3549
  1621  001500  0E10               	movlw	16
  1622  001502  5C2A               	subwf	sense_can@i_350,w,c
  1623  001504  0E27               	movlw	39
  1624  001506  582B               	subwfb	sense_can@i_350+1,w,c
  1625  001508  B0D8               	btfsc	status,0,c
  1626  00150A  D01E               	goto	l3565
  1627  00150C                     l3549:
  1628                           
  1629                           ;adc.c: 84: readADC(0);
  1630  00150C  0E00               	movlw	0
  1631  00150E  EC81  F012         	call	_readADC
  1632                           
  1633                           ;adc.c: 85: if (ADRESH > H_max) {
  1634  001512  50C4               	movf	4036,w,c	;volatile
  1635  001514  6E21               	movwf	??_sense_can& (0+255),c
  1636  001516  6A22               	clrf	(??_sense_can+1)& (0+255),c
  1637  001518  5021               	movf	??_sense_can,w,c
  1638  00151A  5C30               	subwf	sense_can@H_max,w,c
  1639  00151C  5031               	movf	sense_can@H_max+1,w,c
  1640  00151E  0A80               	xorlw	128
  1641  001520  6E23               	movwf	(??_sense_can+2)& (0+255),c
  1642  001522  5022               	movf	??_sense_can+1,w,c
  1643  001524  0A80               	xorlw	128
  1644  001526  5823               	subwfb	(??_sense_can+2)& (0+255),w,c
  1645  001528  B0D8               	btfsc	status,0,c
  1646  00152A  D003               	goto	l3555
  1647                           
  1648                           ;adc.c: 86: H_max = ADRESH;
  1649  00152C  CFC4 F030          	movff	4036,sense_can@H_max	;volatile
  1650  001530  6A31               	clrf	sense_can@H_max+1,c
  1651  001532                     l3555:
  1652                           
  1653                           ;adc.c: 87: }
  1654                           ;adc.c: 89: if (ADRESH > 30){
  1655  001532  0E1E               	movlw	30
  1656  001534  64C4               	cpfsgt	4036,c	;volatile
  1657  001536  D005               	goto	l3561
  1658                           
  1659                           ;adc.c: 90: return 2;
  1660  001538  0E00               	movlw	0
  1661  00153A  6E20               	movwf	?_sense_can+1,c
  1662  00153C  0E02               	movlw	2
  1663  00153E  6E1F               	movwf	?_sense_can,c
  1664  001540  0012               	return	
  1665  001542                     l3561:
  1666  001542  4A2A               	infsnz	sense_can@i_350,f,c
  1667  001544  2A2B               	incf	sense_can@i_350+1,f,c
  1668  001546  D7DA               	goto	l3545
  1669  001548                     l3565:
  1670                           
  1671                           ;adc.c: 91: }
  1672                           ;adc.c: 92: }
  1673                           ;adc.c: 94: if (H_max >= 0xA0) {
  1674  001548  BE31               	btfsc	sense_can@H_max+1,7,c
  1675  00154A  D00B               	goto	l3573
  1676  00154C  5031               	movf	sense_can@H_max+1,w,c
  1677  00154E  E104               	bnz	u3190
  1678  001550  0EA0               	movlw	160
  1679  001552  5C30               	subwf	sense_can@H_max,w,c
  1680  001554  A0D8               	btfss	status,0,c
  1681  001556  D005               	goto	l3573
  1682  001558                     u3190:
  1683                           
  1684                           ;adc.c: 95: return 2;
  1685  001558  0E00               	movlw	0
  1686  00155A  6E20               	movwf	?_sense_can+1,c
  1687  00155C  0E02               	movlw	2
  1688  00155E  6E1F               	movwf	?_sense_can,c
  1689                           
  1690                           ;adc.c: 96: } else {
  1691  001560  0012               	return	
  1692  001562                     l3573:
  1693                           
  1694                           ;adc.c: 97: return 1;
  1695  001562  0E00               	movlw	0
  1696  001564  6E20               	movwf	?_sense_can+1,c
  1697  001566  0E01               	movlw	1
  1698  001568  6E1F               	movwf	?_sense_can,c
  1699                           
  1700                           ;adc.c: 98: }
  1701                           ;adc.c: 99: }
  1702  00156A  0012               	return	
  1703  00156C                     l3577:
  1704                           
  1705                           ;adc.c: 102: else{
  1706                           ;adc.c: 105: for (int i = 0; i < 10000; i++) {
  1707  00156C  0E00               	movlw	0
  1708  00156E  6E2D               	movwf	sense_can@i_351+1,c
  1709  001570  0E00               	movlw	0
  1710  001572  6E2C               	movwf	sense_can@i_351,c
  1711  001574                     l3579:
  1712  001574  BE2D               	btfsc	sense_can@i_351+1,7,c
  1713  001576  D006               	goto	l3583
  1714  001578  0E10               	movlw	16
  1715  00157A  5C2C               	subwf	sense_can@i_351,w,c
  1716  00157C  0E27               	movlw	39
  1717  00157E  582D               	subwfb	sense_can@i_351+1,w,c
  1718  001580  B0D8               	btfsc	status,0,c
  1719  001582  D01E               	goto	l3599
  1720  001584                     l3583:
  1721                           
  1722                           ;adc.c: 107: readADC(1);
  1723  001584  0E01               	movlw	1
  1724  001586  EC81  F012         	call	_readADC
  1725                           
  1726                           ;adc.c: 108: if (ADRESH > H_max) {
  1727  00158A  50C4               	movf	4036,w,c	;volatile
  1728  00158C  6E21               	movwf	??_sense_can& (0+255),c
  1729  00158E  6A22               	clrf	(??_sense_can+1)& (0+255),c
  1730  001590  5021               	movf	??_sense_can,w,c
  1731  001592  5C30               	subwf	sense_can@H_max,w,c
  1732  001594  5031               	movf	sense_can@H_max+1,w,c
  1733  001596  0A80               	xorlw	128
  1734  001598  6E23               	movwf	(??_sense_can+2)& (0+255),c
  1735  00159A  5022               	movf	??_sense_can+1,w,c
  1736  00159C  0A80               	xorlw	128
  1737  00159E  5823               	subwfb	(??_sense_can+2)& (0+255),w,c
  1738  0015A0  B0D8               	btfsc	status,0,c
  1739  0015A2  D003               	goto	l3589
  1740                           
  1741                           ;adc.c: 109: H_max = ADRESH;
  1742  0015A4  CFC4 F030          	movff	4036,sense_can@H_max	;volatile
  1743  0015A8  6A31               	clrf	sense_can@H_max+1,c
  1744  0015AA                     l3589:
  1745                           
  1746                           ;adc.c: 110: }
  1747                           ;adc.c: 111: if (ADRESH > 30){
  1748  0015AA  0E1E               	movlw	30
  1749  0015AC  64C4               	cpfsgt	4036,c	;volatile
  1750  0015AE  D005               	goto	l3595
  1751                           
  1752                           ;adc.c: 112: return 4;
  1753  0015B0  0E00               	movlw	0
  1754  0015B2  6E20               	movwf	?_sense_can+1,c
  1755  0015B4  0E04               	movlw	4
  1756  0015B6  6E1F               	movwf	?_sense_can,c
  1757  0015B8  0012               	return	
  1758  0015BA                     l3595:
  1759  0015BA  4A2C               	infsnz	sense_can@i_351,f,c
  1760  0015BC  2A2D               	incf	sense_can@i_351+1,f,c
  1761  0015BE  D7DA               	goto	l3579
  1762  0015C0                     l3599:
  1763                           
  1764                           ;adc.c: 113: }
  1765                           ;adc.c: 114: }
  1766                           ;adc.c: 115: if (H_max >= 0xA0) {
  1767  0015C0  BE31               	btfsc	sense_can@H_max+1,7,c
  1768  0015C2  D00B               	goto	l161
  1769  0015C4  5031               	movf	sense_can@H_max+1,w,c
  1770  0015C6  E104               	bnz	u3240
  1771  0015C8  0EA0               	movlw	160
  1772  0015CA  5C30               	subwf	sense_can@H_max,w,c
  1773  0015CC  A0D8               	btfss	status,0,c
  1774  0015CE  D005               	goto	l161
  1775  0015D0                     u3240:
  1776                           
  1777                           ;adc.c: 116: return 4;
  1778  0015D0  0E00               	movlw	0
  1779  0015D2  6E20               	movwf	?_sense_can+1,c
  1780  0015D4  0E04               	movlw	4
  1781  0015D6  6E1F               	movwf	?_sense_can,c
  1782  0015D8  0012               	return	
  1783  0015DA                     l161:
  1784                           
  1785                           ;adc.c: 117: }
  1786                           ;adc.c: 121: LATDbits.LATD0 = 0;
  1787  0015DA  908C               	bcf	3980,0,c	;volatile
  1788                           
  1789                           ;adc.c: 122: main_servo_control(0);
  1790  0015DC  0E00               	movlw	0
  1791  0015DE  6E1A               	movwf	main_servo_control@dir+1,c
  1792  0015E0  0E00               	movlw	0
  1793  0015E2  6E19               	movwf	main_servo_control@dir,c
  1794  0015E4  EC6D  F00E         	call	_main_servo_control	;wreg free
  1795                           
  1796                           ;adc.c: 123: side_servo_control(0);
  1797  0015E8  0E00               	movlw	0
  1798  0015EA  6E1A               	movwf	side_servo_control@dir+1,c
  1799  0015EC  0E00               	movlw	0
  1800  0015EE  6E19               	movwf	side_servo_control@dir,c
  1801  0015F0  EC7B  F00D         	call	_side_servo_control	;wreg free
  1802                           
  1803                           ;adc.c: 124: _delay((unsigned long)((500)*(8000000/4000.0)));
  1804  0015F4  0E06               	movlw	6
  1805  0015F6  6E22               	movwf	(??_sense_can+1)& (0+255),c
  1806  0015F8  0E13               	movlw	19
  1807  0015FA  6E21               	movwf	??_sense_can& (0+255),c
  1808  0015FC  0EAE               	movlw	174
  1809  0015FE                     u3737:
  1810  0015FE  2EE8               	decfsz	wreg,f,c
  1811  001600  D7FE               	bra	u3737
  1812  001602  2E21               	decfsz	??_sense_can& (0+255),f,c
  1813  001604  D7FC               	bra	u3737
  1814  001606  2E22               	decfsz	(??_sense_can+1)& (0+255),f,c
  1815  001608  D7FA               	bra	u3737
  1816                           
  1817                           ;adc.c: 125: main_servo_control(0);
  1818  00160A  0E00               	movlw	0
  1819  00160C  6E1A               	movwf	main_servo_control@dir+1,c
  1820  00160E  0E00               	movlw	0
  1821  001610  6E19               	movwf	main_servo_control@dir,c
  1822  001612  EC6D  F00E         	call	_main_servo_control	;wreg free
  1823                           
  1824                           ;adc.c: 126: side_servo_control(0);
  1825  001616  0E00               	movlw	0
  1826  001618  6E1A               	movwf	side_servo_control@dir+1,c
  1827  00161A  0E00               	movlw	0
  1828  00161C  6E19               	movwf	side_servo_control@dir,c
  1829  00161E  EC7B  F00D         	call	_side_servo_control	;wreg free
  1830                           
  1831                           ;adc.c: 128: LATDbits.LATD0 = 1;
  1832  001622  808C               	bsf	3980,0,c	;volatile
  1833                           
  1834                           ;adc.c: 131: for (int i = 0; i < 10000; i++) {
  1835  001624  0E00               	movlw	0
  1836  001626  6E2F               	movwf	sense_can@i_352+1,c
  1837  001628  0E00               	movlw	0
  1838  00162A  6E2E               	movwf	sense_can@i_352,c
  1839  00162C                     l3617:
  1840  00162C  BE2F               	btfsc	sense_can@i_352+1,7,c
  1841  00162E  D006               	goto	l3621
  1842  001630  0E10               	movlw	16
  1843  001632  5C2E               	subwf	sense_can@i_352,w,c
  1844  001634  0E27               	movlw	39
  1845  001636  582F               	subwfb	sense_can@i_352+1,w,c
  1846  001638  B0D8               	btfsc	status,0,c
  1847  00163A  D01E               	goto	l3637
  1848  00163C                     l3621:
  1849                           
  1850                           ;adc.c: 133: readADC(1);
  1851  00163C  0E01               	movlw	1
  1852  00163E  EC81  F012         	call	_readADC
  1853                           
  1854                           ;adc.c: 134: if (ADRESH > H_max) {
  1855  001642  50C4               	movf	4036,w,c	;volatile
  1856  001644  6E21               	movwf	??_sense_can& (0+255),c
  1857  001646  6A22               	clrf	(??_sense_can+1)& (0+255),c
  1858  001648  5021               	movf	??_sense_can,w,c
  1859  00164A  5C30               	subwf	sense_can@H_max,w,c
  1860  00164C  5031               	movf	sense_can@H_max+1,w,c
  1861  00164E  0A80               	xorlw	128
  1862  001650  6E23               	movwf	(??_sense_can+2)& (0+255),c
  1863  001652  5022               	movf	??_sense_can+1,w,c
  1864  001654  0A80               	xorlw	128
  1865  001656  5823               	subwfb	(??_sense_can+2)& (0+255),w,c
  1866  001658  B0D8               	btfsc	status,0,c
  1867  00165A  D003               	goto	l3627
  1868                           
  1869                           ;adc.c: 135: H_max = ADRESH;
  1870  00165C  CFC4 F030          	movff	4036,sense_can@H_max	;volatile
  1871  001660  6A31               	clrf	sense_can@H_max+1,c
  1872  001662                     l3627:
  1873                           
  1874                           ;adc.c: 136: }
  1875                           ;adc.c: 137: if (ADRESH > 30){
  1876  001662  0E1E               	movlw	30
  1877  001664  64C4               	cpfsgt	4036,c	;volatile
  1878  001666  D005               	goto	l3633
  1879                           
  1880                           ;adc.c: 138: return 4;
  1881  001668  0E00               	movlw	0
  1882  00166A  6E20               	movwf	?_sense_can+1,c
  1883  00166C  0E04               	movlw	4
  1884  00166E  6E1F               	movwf	?_sense_can,c
  1885  001670  0012               	return	
  1886  001672                     l3633:
  1887  001672  4A2E               	infsnz	sense_can@i_352,f,c
  1888  001674  2A2F               	incf	sense_can@i_352+1,f,c
  1889  001676  D7DA               	goto	l3617
  1890  001678                     l3637:
  1891                           
  1892                           ;adc.c: 139: }
  1893                           ;adc.c: 140: }
  1894                           ;adc.c: 141: if (H_max >= 0xA0) {
  1895  001678  BE31               	btfsc	sense_can@H_max+1,7,c
  1896  00167A  D00B               	goto	l3645
  1897  00167C  5031               	movf	sense_can@H_max+1,w,c
  1898  00167E  E104               	bnz	u3290
  1899  001680  0EA0               	movlw	160
  1900  001682  5C30               	subwf	sense_can@H_max,w,c
  1901  001684  A0D8               	btfss	status,0,c
  1902  001686  D005               	goto	l3645
  1903  001688                     u3290:
  1904                           
  1905                           ;adc.c: 142: return 4;
  1906  001688  0E00               	movlw	0
  1907  00168A  6E20               	movwf	?_sense_can+1,c
  1908  00168C  0E04               	movlw	4
  1909  00168E  6E1F               	movwf	?_sense_can,c
  1910                           
  1911                           ;adc.c: 143: }
  1912  001690  0012               	return	
  1913  001692                     l3645:
  1914                           
  1915                           ;adc.c: 146: else {
  1916                           ;adc.c: 147: return 3;
  1917  001692  0E00               	movlw	0
  1918  001694  6E20               	movwf	?_sense_can+1,c
  1919  001696  0E03               	movlw	3
  1920  001698  6E1F               	movwf	?_sense_can,c
  1921  00169A  0012               	return	
  1922  00169C                     __end_of_sense_can:
  1923                           	opt stack 0
  1924                           tblptru	equ	0xFF8
  1925                           postinc0	equ	0xFEE
  1926                           wreg	equ	0xFE8
  1927                           status	equ	0xFD8
  1928                           
  1929 ;; *************** function _readLightSensor *****************
  1930 ;; Defined at:
  1931 ;;		line 158 in file "adc.c"
  1932 ;; Parameters:    Size  Location     Type
  1933 ;;		None
  1934 ;; Auto vars:     Size  Location     Type
  1935 ;;  H_max           2   65[COMRAM] int 
  1936 ;;  i               2   63[COMRAM] int 
  1937 ;; Return value:  Size  Location     Type
  1938 ;;                  2   58[COMRAM] int 
  1939 ;; Registers used:
  1940 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1941 ;; Tracked objects:
  1942 ;;		On entry : 0/0
  1943 ;;		On exit  : 0/0
  1944 ;;		Unchanged: 0/0
  1945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1946 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1947 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1948 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1949 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1950 ;;Total ram usage:        9 bytes
  1951 ;; Hardware stack levels used:    1
  1952 ;; Hardware stack levels required when called:    7
  1953 ;; This function calls:
  1954 ;;		_lcdInst
  1955 ;;		_printf
  1956 ;;		_readADC
  1957 ;; This function is called by:
  1958 ;;		_sort
  1959 ;; This function uses a non-reentrant model
  1960 ;;
  1961                           
  1962                           	psect	text5
  1963  001F58                     __ptext5:
  1964                           	opt stack 0
  1965  001F58                     _readLightSensor:
  1966                           	opt stack 22
  1967                           
  1968                           ;adc.c: 159: int H_max = 0;
  1969                           
  1970                           ;incstack = 0
  1971  001F58  0E00               	movlw	0
  1972  001F5A  6E43               	movwf	readLightSensor@H_max+1,c
  1973  001F5C  0E00               	movlw	0
  1974  001F5E  6E42               	movwf	readLightSensor@H_max,c
  1975                           
  1976                           ;adc.c: 160: int i = 0;
  1977  001F60  0E00               	movlw	0
  1978  001F62  6E41               	movwf	readLightSensor@i+1,c
  1979  001F64  0E00               	movlw	0
  1980  001F66  6E40               	movwf	readLightSensor@i,c
  1981                           
  1982                           ;adc.c: 161: while(i < 50){
  1983  001F68  D030               	goto	l3669
  1984  001F6A                     l3651:
  1985                           
  1986                           ;adc.c: 162: lcdInst(0b10000000);;
  1987  001F6A  0E80               	movlw	128
  1988  001F6C  EC02  F013         	call	_lcdInst
  1989                           
  1990                           ;adc.c: 164: readADC(2);
  1991  001F70  0E02               	movlw	2
  1992  001F72  EC81  F012         	call	_readADC
  1993                           
  1994                           ;adc.c: 165: if (ADRESH > H_max) {
  1995  001F76  50C4               	movf	4036,w,c	;volatile
  1996  001F78  6E3D               	movwf	??_readLightSensor& (0+255),c
  1997  001F7A  6A3E               	clrf	(??_readLightSensor+1)& (0+255),c
  1998  001F7C  503D               	movf	??_readLightSensor,w,c
  1999  001F7E  5C42               	subwf	readLightSensor@H_max,w,c
  2000  001F80  5043               	movf	readLightSensor@H_max+1,w,c
  2001  001F82  0A80               	xorlw	128
  2002  001F84  6E3F               	movwf	(??_readLightSensor+2)& (0+255),c
  2003  001F86  503E               	movf	??_readLightSensor+1,w,c
  2004  001F88  0A80               	xorlw	128
  2005  001F8A  583F               	subwfb	(??_readLightSensor+2)& (0+255),w,c
  2006  001F8C  B0D8               	btfsc	status,0,c
  2007  001F8E  D003               	goto	l3657
  2008                           
  2009                           ;adc.c: 166: H_max = ADRESH;
  2010  001F90  CFC4 F042          	movff	4036,readLightSensor@H_max	;volatile
  2011  001F94  6A43               	clrf	readLightSensor@H_max+1,c
  2012  001F96                     l3657:
  2013                           
  2014                           ;adc.c: 167: }
  2015                           ;adc.c: 168: if (ADRESH < 0x20){
  2016  001F96  0E20               	movlw	32
  2017  001F98  60C4               	cpfslt	4036,c	;volatile
  2018  001F9A  D005               	goto	l3663
  2019                           
  2020                           ;adc.c: 169: return 1;
  2021  001F9C  0E00               	movlw	0
  2022  001F9E  6E3C               	movwf	?_readLightSensor+1,c
  2023  001FA0  0E01               	movlw	1
  2024  001FA2  6E3B               	movwf	?_readLightSensor,c
  2025  001FA4  0012               	return	
  2026  001FA6                     l3663:
  2027                           
  2028                           ;adc.c: 170: }
  2029                           ;adc.c: 171: printf("%x", ADRESH);
  2030  001FA6  0ECF               	movlw	low (STR_8+3)
  2031  001FA8  6E25               	movwf	printf@f,c
  2032  001FAA  0E10               	movlw	high (STR_8+3)
  2033  001FAC  6E26               	movwf	printf@f+1,c
  2034  001FAE  CFC4 F027          	movff	4036,?_printf+2	;volatile
  2035  001FB2  6A28               	clrf	?_printf+3,c
  2036  001FB4  EC6B  F008         	call	_printf	;wreg free
  2037                           
  2038                           ;adc.c: 172: _delay((unsigned long)((5)*(8000000/4000.0)));
  2039  001FB8  0E0D               	movlw	13
  2040  001FBA  6E3D               	movwf	??_readLightSensor& (0+255),c
  2041  001FBC  0EFC               	movlw	252
  2042  001FBE                     u3747:
  2043  001FBE  2EE8               	decfsz	wreg,f,c
  2044  001FC0  D7FE               	bra	u3747
  2045  001FC2  2E3D               	decfsz	??_readLightSensor& (0+255),f,c
  2046  001FC4  D7FC               	bra	u3747
  2047                           
  2048                           ;adc.c: 173: i++;
  2049  001FC6  4A40               	infsnz	readLightSensor@i,f,c
  2050  001FC8  2A41               	incf	readLightSensor@i+1,f,c
  2051  001FCA                     l3669:
  2052  001FCA  BE41               	btfsc	readLightSensor@i+1,7,c
  2053  001FCC  D7CE               	goto	l3651
  2054  001FCE  5041               	movf	readLightSensor@i+1,w,c
  2055  001FD0  E104               	bnz	l3671
  2056  001FD2  0E32               	movlw	50
  2057  001FD4  5C40               	subwf	readLightSensor@i,w,c
  2058  001FD6  A0D8               	btfss	status,0,c
  2059  001FD8  D7C8               	goto	l3651
  2060  001FDA                     l3671:
  2061                           
  2062                           ;adc.c: 174: }
  2063                           ;adc.c: 176: if(H_max >= 0x20){
  2064  001FDA  BE43               	btfsc	readLightSensor@H_max+1,7,c
  2065  001FDC  D00B               	goto	l3679
  2066  001FDE  5043               	movf	readLightSensor@H_max+1,w,c
  2067  001FE0  E104               	bnz	u3330
  2068  001FE2  0E20               	movlw	32
  2069  001FE4  5C42               	subwf	readLightSensor@H_max,w,c
  2070  001FE6  A0D8               	btfss	status,0,c
  2071  001FE8  D005               	goto	l3679
  2072  001FEA                     u3330:
  2073                           
  2074                           ;adc.c: 177: return 0;
  2075  001FEA  0E00               	movlw	0
  2076  001FEC  6E3C               	movwf	?_readLightSensor+1,c
  2077  001FEE  0E00               	movlw	0
  2078  001FF0  6E3B               	movwf	?_readLightSensor,c
  2079                           
  2080                           ;adc.c: 178: }
  2081  001FF2  0012               	return	
  2082  001FF4                     l3679:
  2083                           
  2084                           ;adc.c: 179: else{
  2085                           ;adc.c: 180: return 1;
  2086  001FF4  0E00               	movlw	0
  2087  001FF6  6E3C               	movwf	?_readLightSensor+1,c
  2088  001FF8  0E01               	movlw	1
  2089  001FFA  6E3B               	movwf	?_readLightSensor,c
  2090  001FFC  0012               	return	
  2091  001FFE                     __end_of_readLightSensor:
  2092                           	opt stack 0
  2093                           tblptru	equ	0xFF8
  2094                           postinc0	equ	0xFEE
  2095                           wreg	equ	0xFE8
  2096                           status	equ	0xFD8
  2097                           
  2098 ;; *************** function _move_can *****************
  2099 ;; Defined at:
  2100 ;;		line 79 in file "servo.c"
  2101 ;; Parameters:    Size  Location     Type
  2102 ;;  canType         2   30[COMRAM] int 
  2103 ;; Auto vars:     Size  Location     Type
  2104 ;;  i               2   40[COMRAM] int 
  2105 ;;  i               2   38[COMRAM] int 
  2106 ;;  i               2   36[COMRAM] int 
  2107 ;;  i               2   34[COMRAM] int 
  2108 ;; Return value:  Size  Location     Type
  2109 ;;                  1    wreg      void 
  2110 ;; Registers used:
  2111 ;;		wreg, status,2, status,0, cstack
  2112 ;; Tracked objects:
  2113 ;;		On entry : 0/0
  2114 ;;		On exit  : 0/0
  2115 ;;		Unchanged: 0/0
  2116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2117 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2118 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2119 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2120 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2121 ;;Total ram usage:       12 bytes
  2122 ;; Hardware stack levels used:    1
  2123 ;; Hardware stack levels required when called:    5
  2124 ;; This function calls:
  2125 ;;		_main_servo_control
  2126 ;;		_side_servo_control
  2127 ;; This function is called by:
  2128 ;;		_sort
  2129 ;; This function uses a non-reentrant model
  2130 ;;
  2131                           
  2132                           	psect	text6
  2133  00169C                     __ptext6:
  2134                           	opt stack 0
  2135  00169C                     _move_can:
  2136                           	opt stack 24
  2137                           
  2138                           ;servo.c: 80: if(canType == 2){
  2139                           
  2140                           ;incstack = 0
  2141  00169C  0E02               	movlw	2
  2142  00169E  181F               	xorwf	move_can@canType,w,c
  2143  0016A0  1020               	iorwf	move_can@canType+1,w,c
  2144  0016A2  A4D8               	btfss	status,2,c
  2145  0016A4  D042               	goto	l3731
  2146                           
  2147                           ;servo.c: 81: side_servo_control(1);
  2148  0016A6  0E00               	movlw	0
  2149  0016A8  6E1A               	movwf	side_servo_control@dir+1,c
  2150  0016AA  0E01               	movlw	1
  2151  0016AC  6E19               	movwf	side_servo_control@dir,c
  2152  0016AE  EC7B  F00D         	call	_side_servo_control	;wreg free
  2153                           
  2154                           ;servo.c: 82: _delay((unsigned long)((2000)*(8000000/4000.0)));
  2155  0016B2  0E15               	movlw	21
  2156  0016B4  6E22               	movwf	(??_move_can+1)& (0+255),c
  2157  0016B6  0E4B               	movlw	75
  2158  0016B8  6E21               	movwf	??_move_can& (0+255),c
  2159  0016BA  0EBE               	movlw	190
  2160  0016BC                     u3757:
  2161  0016BC  2EE8               	decfsz	wreg,f,c
  2162  0016BE  D7FE               	bra	u3757
  2163  0016C0  2E21               	decfsz	??_move_can& (0+255),f,c
  2164  0016C2  D7FC               	bra	u3757
  2165  0016C4  2E22               	decfsz	(??_move_can+1)& (0+255),f,c
  2166  0016C6  D7FA               	bra	u3757
  2167  0016C8  D000               	nop2	
  2168                           
  2169                           ;servo.c: 84: for (int i = 0; i<5; i++){
  2170  0016CA  0E00               	movlw	0
  2171  0016CC  6E24               	movwf	move_can@i+1,c
  2172  0016CE  0E00               	movlw	0
  2173  0016D0  6E23               	movwf	move_can@i,c
  2174  0016D2                     l3717:
  2175  0016D2  BE24               	btfsc	move_can@i+1,7,c
  2176  0016D4  D006               	goto	l3721
  2177  0016D6  5024               	movf	move_can@i+1,w,c
  2178  0016D8  E11B               	bnz	l3729
  2179  0016DA  0E05               	movlw	5
  2180  0016DC  5C23               	subwf	move_can@i,w,c
  2181  0016DE  B0D8               	btfsc	status,0,c
  2182  0016E0  D017               	goto	l3729
  2183  0016E2                     l3721:
  2184                           
  2185                           ;servo.c: 85: side_servo_control(1);
  2186  0016E2  0E00               	movlw	0
  2187  0016E4  6E1A               	movwf	side_servo_control@dir+1,c
  2188  0016E6  0E01               	movlw	1
  2189  0016E8  6E19               	movwf	side_servo_control@dir,c
  2190  0016EA  EC7B  F00D         	call	_side_servo_control	;wreg free
  2191                           
  2192                           ;servo.c: 86: main_servo_control(1);
  2193  0016EE  0E00               	movlw	0
  2194  0016F0  6E1A               	movwf	main_servo_control@dir+1,c
  2195  0016F2  0E01               	movlw	1
  2196  0016F4  6E19               	movwf	main_servo_control@dir,c
  2197  0016F6  EC6D  F00E         	call	_main_servo_control	;wreg free
  2198                           
  2199                           ;servo.c: 87: _delay((unsigned long)((10)*(8000000/4000.0)));
  2200  0016FA  0E1A               	movlw	26
  2201  0016FC  6E21               	movwf	??_move_can& (0+255),c
  2202  0016FE  0EF8               	movlw	248
  2203  001700                     u3767:
  2204  001700  2EE8               	decfsz	wreg,f,c
  2205  001702  D7FE               	bra	u3767
  2206  001704  2E21               	decfsz	??_move_can& (0+255),f,c
  2207  001706  D7FC               	bra	u3767
  2208  001708  D000               	nop2	
  2209  00170A  4A23               	infsnz	move_can@i,f,c
  2210  00170C  2A24               	incf	move_can@i+1,f,c
  2211  00170E  D7E1               	goto	l3717
  2212  001710                     l3729:
  2213                           
  2214                           ;servo.c: 88: }
  2215                           ;servo.c: 90: main_servo_control(0);
  2216  001710  0E00               	movlw	0
  2217  001712  6E1A               	movwf	main_servo_control@dir+1,c
  2218  001714  0E00               	movlw	0
  2219  001716  6E19               	movwf	main_servo_control@dir,c
  2220  001718  EC6D  F00E         	call	_main_servo_control	;wreg free
  2221                           
  2222                           ;servo.c: 91: side_servo_control(0);
  2223  00171C  0E00               	movlw	0
  2224  00171E  6E1A               	movwf	side_servo_control@dir+1,c
  2225  001720  0E00               	movlw	0
  2226  001722  6E19               	movwf	side_servo_control@dir,c
  2227  001724  EC7B  F00D         	call	_side_servo_control	;wreg free
  2228                           
  2229                           ;servo.c: 92: }
  2230  001728  0012               	return	
  2231  00172A                     l3731:
  2232                           
  2233                           ;servo.c: 93: else if(canType == 1){
  2234  00172A  041F               	decf	move_can@canType,w,c
  2235  00172C  1020               	iorwf	move_can@canType+1,w,c
  2236  00172E  A4D8               	btfss	status,2,c
  2237  001730  D042               	goto	l3753
  2238                           
  2239                           ;servo.c: 94: side_servo_control(2);
  2240  001732  0E00               	movlw	0
  2241  001734  6E1A               	movwf	side_servo_control@dir+1,c
  2242  001736  0E02               	movlw	2
  2243  001738  6E19               	movwf	side_servo_control@dir,c
  2244  00173A  EC7B  F00D         	call	_side_servo_control	;wreg free
  2245                           
  2246                           ;servo.c: 95: _delay((unsigned long)((2000)*(8000000/4000.0)));
  2247  00173E  0E15               	movlw	21
  2248  001740  6E22               	movwf	(??_move_can+1)& (0+255),c
  2249  001742  0E4B               	movlw	75
  2250  001744  6E21               	movwf	??_move_can& (0+255),c
  2251  001746  0EBE               	movlw	190
  2252  001748                     u3777:
  2253  001748  2EE8               	decfsz	wreg,f,c
  2254  00174A  D7FE               	bra	u3777
  2255  00174C  2E21               	decfsz	??_move_can& (0+255),f,c
  2256  00174E  D7FC               	bra	u3777
  2257  001750  2E22               	decfsz	(??_move_can+1)& (0+255),f,c
  2258  001752  D7FA               	bra	u3777
  2259  001754  D000               	nop2	
  2260                           
  2261                           ;servo.c: 97: for (int i = 0; i<5; i++){
  2262  001756  0E00               	movlw	0
  2263  001758  6E26               	movwf	move_can@i_636+1,c
  2264  00175A  0E00               	movlw	0
  2265  00175C  6E25               	movwf	move_can@i_636,c
  2266  00175E                     l3739:
  2267  00175E  BE26               	btfsc	move_can@i_636+1,7,c
  2268  001760  D006               	goto	l3743
  2269  001762  5026               	movf	move_can@i_636+1,w,c
  2270  001764  E11B               	bnz	l3751
  2271  001766  0E05               	movlw	5
  2272  001768  5C25               	subwf	move_can@i_636,w,c
  2273  00176A  B0D8               	btfsc	status,0,c
  2274  00176C  D017               	goto	l3751
  2275  00176E                     l3743:
  2276                           
  2277                           ;servo.c: 98: side_servo_control(2);
  2278  00176E  0E00               	movlw	0
  2279  001770  6E1A               	movwf	side_servo_control@dir+1,c
  2280  001772  0E02               	movlw	2
  2281  001774  6E19               	movwf	side_servo_control@dir,c
  2282  001776  EC7B  F00D         	call	_side_servo_control	;wreg free
  2283                           
  2284                           ;servo.c: 99: main_servo_control(1);
  2285  00177A  0E00               	movlw	0
  2286  00177C  6E1A               	movwf	main_servo_control@dir+1,c
  2287  00177E  0E01               	movlw	1
  2288  001780  6E19               	movwf	main_servo_control@dir,c
  2289  001782  EC6D  F00E         	call	_main_servo_control	;wreg free
  2290                           
  2291                           ;servo.c: 100: _delay((unsigned long)((10)*(8000000/4000.0)));
  2292  001786  0E1A               	movlw	26
  2293  001788  6E21               	movwf	??_move_can& (0+255),c
  2294  00178A  0EF8               	movlw	248
  2295  00178C                     u3787:
  2296  00178C  2EE8               	decfsz	wreg,f,c
  2297  00178E  D7FE               	bra	u3787
  2298  001790  2E21               	decfsz	??_move_can& (0+255),f,c
  2299  001792  D7FC               	bra	u3787
  2300  001794  D000               	nop2	
  2301  001796  4A25               	infsnz	move_can@i_636,f,c
  2302  001798  2A26               	incf	move_can@i_636+1,f,c
  2303  00179A  D7E1               	goto	l3739
  2304  00179C                     l3751:
  2305                           
  2306                           ;servo.c: 101: }
  2307                           ;servo.c: 104: main_servo_control(0);
  2308  00179C  0E00               	movlw	0
  2309  00179E  6E1A               	movwf	main_servo_control@dir+1,c
  2310  0017A0  0E00               	movlw	0
  2311  0017A2  6E19               	movwf	main_servo_control@dir,c
  2312  0017A4  EC6D  F00E         	call	_main_servo_control	;wreg free
  2313                           
  2314                           ;servo.c: 105: side_servo_control(0);
  2315  0017A8  0E00               	movlw	0
  2316  0017AA  6E1A               	movwf	side_servo_control@dir+1,c
  2317  0017AC  0E00               	movlw	0
  2318  0017AE  6E19               	movwf	side_servo_control@dir,c
  2319  0017B0  EC7B  F00D         	call	_side_servo_control	;wreg free
  2320                           
  2321                           ;servo.c: 107: }
  2322  0017B4  0012               	return	
  2323  0017B6                     l3753:
  2324                           
  2325                           ;servo.c: 108: else if (canType == 3){
  2326  0017B6  0E03               	movlw	3
  2327  0017B8  181F               	xorwf	move_can@canType,w,c
  2328  0017BA  1020               	iorwf	move_can@canType+1,w,c
  2329  0017BC  A4D8               	btfss	status,2,c
  2330  0017BE  D042               	goto	l3775
  2331                           
  2332                           ;servo.c: 110: side_servo_control(2);
  2333  0017C0  0E00               	movlw	0
  2334  0017C2  6E1A               	movwf	side_servo_control@dir+1,c
  2335  0017C4  0E02               	movlw	2
  2336  0017C6  6E19               	movwf	side_servo_control@dir,c
  2337  0017C8  EC7B  F00D         	call	_side_servo_control	;wreg free
  2338                           
  2339                           ;servo.c: 111: _delay((unsigned long)((2000)*(8000000/4000.0)));
  2340  0017CC  0E15               	movlw	21
  2341  0017CE  6E22               	movwf	(??_move_can+1)& (0+255),c
  2342  0017D0  0E4B               	movlw	75
  2343  0017D2  6E21               	movwf	??_move_can& (0+255),c
  2344  0017D4  0EBE               	movlw	190
  2345  0017D6                     u3797:
  2346  0017D6  2EE8               	decfsz	wreg,f,c
  2347  0017D8  D7FE               	bra	u3797
  2348  0017DA  2E21               	decfsz	??_move_can& (0+255),f,c
  2349  0017DC  D7FC               	bra	u3797
  2350  0017DE  2E22               	decfsz	(??_move_can+1)& (0+255),f,c
  2351  0017E0  D7FA               	bra	u3797
  2352  0017E2  D000               	nop2	
  2353                           
  2354                           ;servo.c: 112: for (int i = 0; i<5; i++){
  2355  0017E4  0E00               	movlw	0
  2356  0017E6  6E28               	movwf	move_can@i_637+1,c
  2357  0017E8  0E00               	movlw	0
  2358  0017EA  6E27               	movwf	move_can@i_637,c
  2359  0017EC                     l3761:
  2360  0017EC  BE28               	btfsc	move_can@i_637+1,7,c
  2361  0017EE  D006               	goto	l3765
  2362  0017F0  5028               	movf	move_can@i_637+1,w,c
  2363  0017F2  E11B               	bnz	l3773
  2364  0017F4  0E05               	movlw	5
  2365  0017F6  5C27               	subwf	move_can@i_637,w,c
  2366  0017F8  B0D8               	btfsc	status,0,c
  2367  0017FA  D017               	goto	l3773
  2368  0017FC                     l3765:
  2369                           
  2370                           ;servo.c: 113: side_servo_control(2);
  2371  0017FC  0E00               	movlw	0
  2372  0017FE  6E1A               	movwf	side_servo_control@dir+1,c
  2373  001800  0E02               	movlw	2
  2374  001802  6E19               	movwf	side_servo_control@dir,c
  2375  001804  EC7B  F00D         	call	_side_servo_control	;wreg free
  2376                           
  2377                           ;servo.c: 114: main_servo_control(2);
  2378  001808  0E00               	movlw	0
  2379  00180A  6E1A               	movwf	main_servo_control@dir+1,c
  2380  00180C  0E02               	movlw	2
  2381  00180E  6E19               	movwf	main_servo_control@dir,c
  2382  001810  EC6D  F00E         	call	_main_servo_control	;wreg free
  2383                           
  2384                           ;servo.c: 115: _delay((unsigned long)((10)*(8000000/4000.0)));
  2385  001814  0E1A               	movlw	26
  2386  001816  6E21               	movwf	??_move_can& (0+255),c
  2387  001818  0EF8               	movlw	248
  2388  00181A                     u3807:
  2389  00181A  2EE8               	decfsz	wreg,f,c
  2390  00181C  D7FE               	bra	u3807
  2391  00181E  2E21               	decfsz	??_move_can& (0+255),f,c
  2392  001820  D7FC               	bra	u3807
  2393  001822  D000               	nop2	
  2394  001824  4A27               	infsnz	move_can@i_637,f,c
  2395  001826  2A28               	incf	move_can@i_637+1,f,c
  2396  001828  D7E1               	goto	l3761
  2397  00182A                     l3773:
  2398                           
  2399                           ;servo.c: 116: }
  2400                           ;servo.c: 117: main_servo_control(0);
  2401  00182A  0E00               	movlw	0
  2402  00182C  6E1A               	movwf	main_servo_control@dir+1,c
  2403  00182E  0E00               	movlw	0
  2404  001830  6E19               	movwf	main_servo_control@dir,c
  2405  001832  EC6D  F00E         	call	_main_servo_control	;wreg free
  2406                           
  2407                           ;servo.c: 118: side_servo_control(0);
  2408  001836  0E00               	movlw	0
  2409  001838  6E1A               	movwf	side_servo_control@dir+1,c
  2410  00183A  0E00               	movlw	0
  2411  00183C  6E19               	movwf	side_servo_control@dir,c
  2412  00183E  EC7B  F00D         	call	_side_servo_control	;wreg free
  2413                           
  2414                           ;servo.c: 119: }
  2415  001842  0012               	return	
  2416  001844                     l3775:
  2417                           
  2418                           ;servo.c: 120: else if(canType == 4){
  2419  001844  0E04               	movlw	4
  2420  001846  181F               	xorwf	move_can@canType,w,c
  2421  001848  1020               	iorwf	move_can@canType+1,w,c
  2422  00184A  A4D8               	btfss	status,2,c
  2423  00184C  0012               	return	
  2424                           
  2425                           ;servo.c: 121: side_servo_control(1);
  2426  00184E  0E00               	movlw	0
  2427  001850  6E1A               	movwf	side_servo_control@dir+1,c
  2428  001852  0E01               	movlw	1
  2429  001854  6E19               	movwf	side_servo_control@dir,c
  2430  001856  EC7B  F00D         	call	_side_servo_control	;wreg free
  2431                           
  2432                           ;servo.c: 122: _delay((unsigned long)((2000)*(8000000/4000.0)));
  2433  00185A  0E15               	movlw	21
  2434  00185C  6E22               	movwf	(??_move_can+1)& (0+255),c
  2435  00185E  0E4B               	movlw	75
  2436  001860  6E21               	movwf	??_move_can& (0+255),c
  2437  001862  0EBE               	movlw	190
  2438  001864                     u3817:
  2439  001864  2EE8               	decfsz	wreg,f,c
  2440  001866  D7FE               	bra	u3817
  2441  001868  2E21               	decfsz	??_move_can& (0+255),f,c
  2442  00186A  D7FC               	bra	u3817
  2443  00186C  2E22               	decfsz	(??_move_can+1)& (0+255),f,c
  2444  00186E  D7FA               	bra	u3817
  2445  001870  D000               	nop2	
  2446                           
  2447                           ;servo.c: 123: for (int i = 0; i<5; i++){
  2448  001872  0E00               	movlw	0
  2449  001874  6E2A               	movwf	move_can@i_638+1,c
  2450  001876  0E00               	movlw	0
  2451  001878  6E29               	movwf	move_can@i_638,c
  2452  00187A                     l3783:
  2453  00187A  BE2A               	btfsc	move_can@i_638+1,7,c
  2454  00187C  D006               	goto	l3787
  2455  00187E  502A               	movf	move_can@i_638+1,w,c
  2456  001880  E11B               	bnz	l3795
  2457  001882  0E05               	movlw	5
  2458  001884  5C29               	subwf	move_can@i_638,w,c
  2459  001886  B0D8               	btfsc	status,0,c
  2460  001888  D017               	goto	l3795
  2461  00188A                     l3787:
  2462                           
  2463                           ;servo.c: 124: side_servo_control(1);
  2464  00188A  0E00               	movlw	0
  2465  00188C  6E1A               	movwf	side_servo_control@dir+1,c
  2466  00188E  0E01               	movlw	1
  2467  001890  6E19               	movwf	side_servo_control@dir,c
  2468  001892  EC7B  F00D         	call	_side_servo_control	;wreg free
  2469                           
  2470                           ;servo.c: 125: main_servo_control(2);
  2471  001896  0E00               	movlw	0
  2472  001898  6E1A               	movwf	main_servo_control@dir+1,c
  2473  00189A  0E02               	movlw	2
  2474  00189C  6E19               	movwf	main_servo_control@dir,c
  2475  00189E  EC6D  F00E         	call	_main_servo_control	;wreg free
  2476                           
  2477                           ;servo.c: 126: _delay((unsigned long)((10)*(8000000/4000.0)));
  2478  0018A2  0E1A               	movlw	26
  2479  0018A4  6E21               	movwf	??_move_can& (0+255),c
  2480  0018A6  0EF8               	movlw	248
  2481  0018A8                     u3827:
  2482  0018A8  2EE8               	decfsz	wreg,f,c
  2483  0018AA  D7FE               	bra	u3827
  2484  0018AC  2E21               	decfsz	??_move_can& (0+255),f,c
  2485  0018AE  D7FC               	bra	u3827
  2486  0018B0  D000               	nop2	
  2487  0018B2  4A29               	infsnz	move_can@i_638,f,c
  2488  0018B4  2A2A               	incf	move_can@i_638+1,f,c
  2489  0018B6  D7E1               	goto	l3783
  2490  0018B8                     l3795:
  2491                           
  2492                           ;servo.c: 127: }
  2493                           ;servo.c: 128: main_servo_control(0);
  2494  0018B8  0E00               	movlw	0
  2495  0018BA  6E1A               	movwf	main_servo_control@dir+1,c
  2496  0018BC  0E00               	movlw	0
  2497  0018BE  6E19               	movwf	main_servo_control@dir,c
  2498  0018C0  EC6D  F00E         	call	_main_servo_control	;wreg free
  2499                           
  2500                           ;servo.c: 129: side_servo_control(0);
  2501  0018C4  0E00               	movlw	0
  2502  0018C6  6E1A               	movwf	side_servo_control@dir+1,c
  2503  0018C8  0E00               	movlw	0
  2504  0018CA  6E19               	movwf	side_servo_control@dir,c
  2505  0018CC  EC7B  F00D         	call	_side_servo_control	;wreg free
  2506  0018D0  0012               	return	
  2507  0018D2                     __end_of_move_can:
  2508                           	opt stack 0
  2509                           tblptru	equ	0xFF8
  2510                           postinc0	equ	0xFEE
  2511                           wreg	equ	0xFE8
  2512                           status	equ	0xFD8
  2513                           
  2514 ;; *************** function _get_time *****************
  2515 ;; Defined at:
  2516 ;;		line 39 in file "time.c"
  2517 ;; Parameters:    Size  Location     Type
  2518 ;;  datime          2   27[COMRAM] PTR unsigned char 
  2519 ;;		 -> end_time(7), start_time(7), 
  2520 ;; Auto vars:     Size  Location     Type
  2521 ;;  i               2   30[COMRAM] int 
  2522 ;; Return value:  Size  Location     Type
  2523 ;;                  1    wreg      void 
  2524 ;; Registers used:
  2525 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2526 ;; Tracked objects:
  2527 ;;		On entry : 0/0
  2528 ;;		On exit  : 0/0
  2529 ;;		Unchanged: 0/0
  2530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2531 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2532 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2533 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2534 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2535 ;;Total ram usage:        5 bytes
  2536 ;; Hardware stack levels used:    1
  2537 ;; Hardware stack levels required when called:    6
  2538 ;; This function calls:
  2539 ;;		_I2C_Master_Read
  2540 ;;		_I2C_Master_Start
  2541 ;;		_I2C_Master_Stop
  2542 ;;		_I2C_Master_Write
  2543 ;; This function is called by:
  2544 ;;		_sort
  2545 ;; This function uses a non-reentrant model
  2546 ;;
  2547                           
  2548                           	psect	text7
  2549  001DB8                     __ptext7:
  2550                           	opt stack 0
  2551  001DB8                     _get_time:
  2552                           	opt stack 23
  2553                           
  2554                           ;time.c: 40: I2C_Master_Start();
  2555                           
  2556                           ;incstack = 0
  2557  001DB8  EC22  F013         	call	_I2C_Master_Start	;wreg free
  2558                           
  2559                           ;time.c: 41: I2C_Master_Write(0b11010000);
  2560  001DBC  0E00               	movlw	0
  2561  001DBE  6E1B               	movwf	I2C_Master_Write@d+1,c
  2562  001DC0  0ED0               	movlw	208
  2563  001DC2  6E1A               	movwf	I2C_Master_Write@d,c
  2564  001DC4  EC14  F013         	call	_I2C_Master_Write	;wreg free
  2565                           
  2566                           ;time.c: 42: I2C_Master_Write(0x00);
  2567  001DC8  0E00               	movlw	0
  2568  001DCA  6E1B               	movwf	I2C_Master_Write@d+1,c
  2569  001DCC  0E00               	movlw	0
  2570  001DCE  6E1A               	movwf	I2C_Master_Write@d,c
  2571  001DD0  EC14  F013         	call	_I2C_Master_Write	;wreg free
  2572                           
  2573                           ;time.c: 43: I2C_Master_Stop();
  2574  001DD4  EC1E  F013         	call	_I2C_Master_Stop	;wreg free
  2575                           
  2576                           ;time.c: 46: I2C_Master_Start();
  2577  001DD8  EC22  F013         	call	_I2C_Master_Start	;wreg free
  2578                           
  2579                           ;time.c: 47: I2C_Master_Write(0b11010001);
  2580  001DDC  0E00               	movlw	0
  2581  001DDE  6E1B               	movwf	I2C_Master_Write@d+1,c
  2582  001DE0  0ED1               	movlw	209
  2583  001DE2  6E1A               	movwf	I2C_Master_Write@d,c
  2584  001DE4  EC14  F013         	call	_I2C_Master_Write	;wreg free
  2585                           
  2586                           ;time.c: 48: for(int i = 0; i < 6; i++){
  2587  001DE8  0E00               	movlw	0
  2588  001DEA  6E20               	movwf	get_time@i+1,c
  2589  001DEC  0E00               	movlw	0
  2590  001DEE  6E1F               	movwf	get_time@i,c
  2591  001DF0                     l3687:
  2592  001DF0  BE20               	btfsc	get_time@i+1,7,c
  2593  001DF2  D006               	goto	l3691
  2594  001DF4  5020               	movf	get_time@i+1,w,c
  2595  001DF6  E12D               	bnz	l3699
  2596  001DF8  0E06               	movlw	6
  2597  001DFA  5C1F               	subwf	get_time@i,w,c
  2598  001DFC  B0D8               	btfsc	status,0,c
  2599  001DFE  D029               	goto	l3699
  2600  001E00                     l3691:
  2601                           
  2602                           ;time.c: 49: datime[i] = I2C_Master_Read(1);
  2603  001E00  501F               	movf	get_time@i,w,c
  2604  001E02  241C               	addwf	get_time@datime,w,c
  2605  001E04  6ED9               	movwf	fsr2l,c
  2606  001E06  5020               	movf	get_time@i+1,w,c
  2607  001E08  201D               	addwfc	get_time@datime+1,w,c
  2608  001E0A  6EDA               	movwf	fsr2h,c
  2609  001E0C  0E01               	movlw	1
  2610  001E0E  EC95  F012         	call	_I2C_Master_Read
  2611  001E12  6EDF               	movwf	indf2,c
  2612                           
  2613                           ;time.c: 50: datime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  2614  001E14  501F               	movf	get_time@i,w,c
  2615  001E16  241C               	addwf	get_time@datime,w,c
  2616  001E18  6ED9               	movwf	fsr2l,c
  2617  001E1A  5020               	movf	get_time@i+1,w,c
  2618  001E1C  201D               	addwfc	get_time@datime+1,w,c
  2619  001E1E  6EDA               	movwf	fsr2h,c
  2620  001E20  0E44               	movlw	low _time
  2621  001E22  241F               	addwf	get_time@i,w,c
  2622  001E24  6EE1               	movwf	fsr1l,c
  2623  001E26  0E00               	movlw	high _time
  2624  001E28  2020               	addwfc	get_time@i+1,w,c
  2625  001E2A  6EE2               	movwf	fsr1h,c
  2626  001E2C  50E7               	movf	indf1,w,c
  2627  001E2E  6E1E               	movwf	??_get_time& (0+255),c
  2628  001E30  381E               	swapf	??_get_time,w,c
  2629  001E32  0B0F               	andlw	15
  2630  001E34  0B0F               	andlw	15
  2631  001E36  0D0A               	mullw	10
  2632  001E38  0E44               	movlw	low _time
  2633  001E3A  241F               	addwf	get_time@i,w,c
  2634  001E3C  6EE1               	movwf	fsr1l,c
  2635  001E3E  0E00               	movlw	high _time
  2636  001E40  2020               	addwfc	get_time@i+1,w,c
  2637  001E42  6EE2               	movwf	fsr1h,c
  2638  001E44  50E7               	movf	indf1,w,c
  2639  001E46  0B0F               	andlw	15
  2640  001E48  24F3               	addwf	prodl,w,c
  2641  001E4A  6EDF               	movwf	indf2,c
  2642  001E4C  4A1F               	infsnz	get_time@i,f,c
  2643  001E4E  2A20               	incf	get_time@i+1,f,c
  2644  001E50  D7CF               	goto	l3687
  2645  001E52                     l3699:
  2646                           
  2647                           ;time.c: 52: }
  2648                           ;time.c: 53: datime[6] = I2C_Master_Read(0);
  2649  001E52  EE20 F006          	lfsr	2,6
  2650  001E56  501C               	movf	get_time@datime,w,c
  2651  001E58  26D9               	addwf	fsr2l,f,c
  2652  001E5A  501D               	movf	get_time@datime+1,w,c
  2653  001E5C  22DA               	addwfc	fsr2h,f,c
  2654  001E5E  0E00               	movlw	0
  2655  001E60  EC95  F012         	call	_I2C_Master_Read
  2656  001E64  6EDF               	movwf	indf2,c
  2657                           
  2658                           ;time.c: 54: I2C_Master_Stop();
  2659  001E66  EC1E  F013         	call	_I2C_Master_Stop	;wreg free
  2660                           
  2661                           ;time.c: 55: I2C_Master_Write(0b11010000);
  2662  001E6A  0E00               	movlw	0
  2663  001E6C  6E1B               	movwf	I2C_Master_Write@d+1,c
  2664  001E6E  0ED0               	movlw	208
  2665  001E70  6E1A               	movwf	I2C_Master_Write@d,c
  2666  001E72  EC14  F013         	call	_I2C_Master_Write	;wreg free
  2667                           
  2668                           ;time.c: 56: I2C_Master_Write(0x00);
  2669  001E76  0E00               	movlw	0
  2670  001E78  6E1B               	movwf	I2C_Master_Write@d+1,c
  2671  001E7A  0E00               	movlw	0
  2672  001E7C  6E1A               	movwf	I2C_Master_Write@d,c
  2673  001E7E  EC14  F013         	call	_I2C_Master_Write	;wreg free
  2674                           
  2675                           ;time.c: 57: I2C_Master_Stop();
  2676  001E82  EC1E  F013         	call	_I2C_Master_Stop	;wreg free
  2677  001E86  0012               	return		;funcret
  2678  001E88                     __end_of_get_time:
  2679                           	opt stack 0
  2680                           tblptru	equ	0xFF8
  2681                           prodl	equ	0xFF3
  2682                           postinc0	equ	0xFEE
  2683                           wreg	equ	0xFE8
  2684                           indf1	equ	0xFE7
  2685                           fsr1h	equ	0xFE2
  2686                           fsr1l	equ	0xFE1
  2687                           indf2	equ	0xFDF
  2688                           fsr2h	equ	0xFDA
  2689                           fsr2l	equ	0xFD9
  2690                           status	equ	0xFD8
  2691                           
  2692 ;; *************** function _gate *****************
  2693 ;; Defined at:
  2694 ;;		line 133 in file "servo.c"
  2695 ;; Parameters:    Size  Location     Type
  2696 ;;		None
  2697 ;; Auto vars:     Size  Location     Type
  2698 ;;  i               2    0        int 
  2699 ;; Return value:  Size  Location     Type
  2700 ;;                  1    wreg      void 
  2701 ;; Registers used:
  2702 ;;		wreg
  2703 ;; Tracked objects:
  2704 ;;		On entry : 0/0
  2705 ;;		On exit  : 0/0
  2706 ;;		Unchanged: 0/0
  2707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2710 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2711 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2712 ;;Total ram usage:        1 bytes
  2713 ;; Hardware stack levels used:    1
  2714 ;; Hardware stack levels required when called:    4
  2715 ;; This function calls:
  2716 ;;		Nothing
  2717 ;; This function is called by:
  2718 ;;		_sort
  2719 ;; This function uses a non-reentrant model
  2720 ;;
  2721                           
  2722                           	psect	text8
  2723  002350                     __ptext8:
  2724                           	opt stack 0
  2725  002350                     _gate:
  2726                           	opt stack 25
  2727                           
  2728                           ;servo.c: 134: int i;
  2729                           ;servo.c: 135: while(PORTBbits.RB3 == 1) {
  2730                           
  2731                           ;incstack = 0
  2732  002350  D011               	goto	l3821
  2733  002352                     l318:
  2734                           
  2735                           ;servo.c: 136: LATCbits.LATC2 = 1;
  2736  002352  848B               	bsf	3979,2,c	;volatile
  2737                           
  2738                           ;servo.c: 137: _delay((unsigned long)((1.68)*(8000000/4000.0)));
  2739  002354  0E05               	movlw	5
  2740  002356  6E19               	movwf	??_gate& (0+255),c
  2741  002358  0E5C               	movlw	92
  2742  00235A                     u3837:
  2743  00235A  2EE8               	decfsz	wreg,f,c
  2744  00235C  D7FE               	bra	u3837
  2745  00235E  2E19               	decfsz	??_gate& (0+255),f,c
  2746  002360  D7FC               	bra	u3837
  2747                           
  2748                           ;servo.c: 138: LATCbits.LATC2 = 0;
  2749  002362  948B               	bcf	3979,2,c	;volatile
  2750                           
  2751                           ;servo.c: 139: _delay((unsigned long)((18.32)*(8000000/4000.0)));
  2752  002364  0E30               	movlw	48
  2753  002366  6E19               	movwf	??_gate& (0+255),c
  2754  002368  0E94               	movlw	148
  2755  00236A                     u3847:
  2756  00236A  2EE8               	decfsz	wreg,f,c
  2757  00236C  D7FE               	bra	u3847
  2758  00236E  2E19               	decfsz	??_gate& (0+255),f,c
  2759  002370  D7FC               	bra	u3847
  2760  002372  D000               	nop2	
  2761  002374                     l3821:
  2762  002374  A681               	btfss	3969,3,c	;volatile
  2763  002376  D012               	goto	l3827
  2764  002378  D7EC               	goto	l318
  2765  00237A                     l321:
  2766                           
  2767                           ;servo.c: 143: LATCbits.LATC2 = 1;
  2768  00237A  848B               	bsf	3979,2,c	;volatile
  2769                           
  2770                           ;servo.c: 144: _delay((unsigned long)((1.68)*(8000000/4000.0)));
  2771  00237C  0E05               	movlw	5
  2772  00237E  6E19               	movwf	??_gate& (0+255),c
  2773  002380  0E5C               	movlw	92
  2774  002382                     u3857:
  2775  002382  2EE8               	decfsz	wreg,f,c
  2776  002384  D7FE               	bra	u3857
  2777  002386  2E19               	decfsz	??_gate& (0+255),f,c
  2778  002388  D7FC               	bra	u3857
  2779                           
  2780                           ;servo.c: 146: LATCbits.LATC2 = 0;
  2781  00238A  948B               	bcf	3979,2,c	;volatile
  2782                           
  2783                           ;servo.c: 147: _delay((unsigned long)((18.32)*(8000000/4000.0)));
  2784  00238C  0E30               	movlw	48
  2785  00238E  6E19               	movwf	??_gate& (0+255),c
  2786  002390  0E94               	movlw	148
  2787  002392                     u3867:
  2788  002392  2EE8               	decfsz	wreg,f,c
  2789  002394  D7FE               	bra	u3867
  2790  002396  2E19               	decfsz	??_gate& (0+255),f,c
  2791  002398  D7FC               	bra	u3867
  2792  00239A  D000               	nop2	
  2793  00239C                     l3827:
  2794  00239C  B681               	btfsc	3969,3,c	;volatile
  2795  00239E  0012               	return	
  2796  0023A0  D7EC               	goto	l321
  2797  0023A2                     __end_of_gate:
  2798                           	opt stack 0
  2799                           tblptru	equ	0xFF8
  2800                           prodl	equ	0xFF3
  2801                           postinc0	equ	0xFEE
  2802                           wreg	equ	0xFE8
  2803                           indf1	equ	0xFE7
  2804                           fsr1h	equ	0xFE2
  2805                           fsr1l	equ	0xFE1
  2806                           indf2	equ	0xFDF
  2807                           fsr2h	equ	0xFDA
  2808                           fsr2l	equ	0xFD9
  2809                           status	equ	0xFD8
  2810                           
  2811 ;; *************** function _initPIC *****************
  2812 ;; Defined at:
  2813 ;;		line 33 in file "initPic.c"
  2814 ;; Parameters:    Size  Location     Type
  2815 ;;		None
  2816 ;; Auto vars:     Size  Location     Type
  2817 ;;		None
  2818 ;; Return value:  Size  Location     Type
  2819 ;;                  2   82[None  ] int 
  2820 ;; Registers used:
  2821 ;;		wreg, status,2, status,0, cstack
  2822 ;; Tracked objects:
  2823 ;;		On entry : 0/0
  2824 ;;		On exit  : 0/0
  2825 ;;		Unchanged: 0/0
  2826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2830 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2831 ;;Total ram usage:        0 bytes
  2832 ;; Hardware stack levels used:    1
  2833 ;; Hardware stack levels required when called:    7
  2834 ;; This function calls:
  2835 ;;		_I2C_Master_Init
  2836 ;;		_I2C_Master_Start
  2837 ;;		_I2C_Master_Stop
  2838 ;;		_I2C_Master_Write
  2839 ;;		_initLCD
  2840 ;;		_main_servo_control
  2841 ;;		_side_servo_control
  2842 ;; This function is called by:
  2843 ;;		_main
  2844 ;; This function uses a non-reentrant model
  2845 ;;
  2846                           
  2847                           	psect	text9
  2848  001FFE                     __ptext9:
  2849                           	opt stack 0
  2850  001FFE                     _initPIC:
  2851                           	opt stack 23
  2852                           
  2853                           ;initPic.c: 34: TRISA = 0b11100111;
  2854                           
  2855                           ;incstack = 0
  2856  001FFE  0EE7               	movlw	231
  2857  002000  6E92               	movwf	3986,c	;volatile
  2858                           
  2859                           ;initPic.c: 35: TRISC = 0x11100110;
  2860  002002  0E10               	movlw	16
  2861  002004  6E94               	movwf	3988,c	;volatile
  2862                           
  2863                           ;initPic.c: 37: TRISC = 0x11100100;
  2864  002006  0E00               	movlw	0
  2865  002008  6E94               	movwf	3988,c	;volatile
  2866                           
  2867                           ;initPic.c: 38: TRISD = 0x00;
  2868  00200A  0E00               	movlw	0
  2869  00200C  6E95               	movwf	3989,c	;volatile
  2870                           
  2871                           ;initPic.c: 39: TRISB = 0b11111011;
  2872  00200E  0EFB               	movlw	251
  2873  002010  6E93               	movwf	3987,c	;volatile
  2874                           
  2875                           ;initPic.c: 40: TRISE = 0x00;
  2876  002012  0E00               	movlw	0
  2877  002014  6E96               	movwf	3990,c	;volatile
  2878                           
  2879                           ;initPic.c: 43: LATA = 0x00;
  2880  002016  0E00               	movlw	0
  2881  002018  6E89               	movwf	3977,c	;volatile
  2882                           
  2883                           ;initPic.c: 44: LATB = 0x00;
  2884  00201A  0E00               	movlw	0
  2885  00201C  6E8A               	movwf	3978,c	;volatile
  2886                           
  2887                           ;initPic.c: 45: LATC = 0x00;
  2888  00201E  0E00               	movlw	0
  2889  002020  6E8B               	movwf	3979,c	;volatile
  2890                           
  2891                           ;initPic.c: 46: LATD = 0x00;
  2892  002022  0E00               	movlw	0
  2893  002024  6E8C               	movwf	3980,c	;volatile
  2894                           
  2895                           ;initPic.c: 47: LATE = 0x00;
  2896  002026  0E00               	movlw	0
  2897  002028  6E8D               	movwf	3981,c	;volatile
  2898                           
  2899                           ;initPic.c: 49: ADCON0 = 0x00;
  2900  00202A  0E00               	movlw	0
  2901  00202C  6EC2               	movwf	4034,c	;volatile
  2902                           
  2903                           ;initPic.c: 50: ADCON1 = 0x0C;
  2904  00202E  0E0C               	movlw	12
  2905  002030  6EC1               	movwf	4033,c	;volatile
  2906                           
  2907                           ;initPic.c: 53: ADCON2 = 0b00110001;
  2908  002032  0E31               	movlw	49
  2909  002034  6EC0               	movwf	4032,c	;volatile
  2910                           
  2911                           ;initPic.c: 54: INT1IE = 1;
  2912  002036  86F0               	bsf	intcon3,3,c	;volatile
  2913                           
  2914                           ;initPic.c: 56: initLCD();
  2915  002038  EC1D  F012         	call	_initLCD	;wreg free
  2916                           
  2917                           ;initPic.c: 58: I2C_Master_Init(10000);
  2918  00203C  0E10               	movlw	16
  2919  00203E  6E26               	movwf	I2C_Master_Init@c,c
  2920  002040  0E27               	movlw	39
  2921  002042  6E27               	movwf	I2C_Master_Init@c+1,c
  2922  002044  0E00               	movlw	0
  2923  002046  6E28               	movwf	I2C_Master_Init@c+2,c
  2924  002048  0E00               	movlw	0
  2925  00204A  6E29               	movwf	I2C_Master_Init@c+3,c
  2926  00204C  ECF8  F010         	call	_I2C_Master_Init	;wreg free
  2927                           
  2928                           ;initPic.c: 59: I2C_Master_Start();
  2929  002050  EC22  F013         	call	_I2C_Master_Start	;wreg free
  2930                           
  2931                           ;initPic.c: 60: I2C_Master_Write(0b11010000);
  2932  002054  0E00               	movlw	0
  2933  002056  6E1B               	movwf	I2C_Master_Write@d+1,c
  2934  002058  0ED0               	movlw	208
  2935  00205A  6E1A               	movwf	I2C_Master_Write@d,c
  2936  00205C  EC14  F013         	call	_I2C_Master_Write	;wreg free
  2937                           
  2938                           ;initPic.c: 61: I2C_Master_Write(0x00);
  2939  002060  0E00               	movlw	0
  2940  002062  6E1B               	movwf	I2C_Master_Write@d+1,c
  2941  002064  0E00               	movlw	0
  2942  002066  6E1A               	movwf	I2C_Master_Write@d,c
  2943  002068  EC14  F013         	call	_I2C_Master_Write	;wreg free
  2944                           
  2945                           ;initPic.c: 62: I2C_Master_Stop();
  2946  00206C  EC1E  F013         	call	_I2C_Master_Stop	;wreg free
  2947                           
  2948                           ;initPic.c: 63: main_servo_control(0);
  2949  002070  0E00               	movlw	0
  2950  002072  6E1A               	movwf	main_servo_control@dir+1,c
  2951  002074  0E00               	movlw	0
  2952  002076  6E19               	movwf	main_servo_control@dir,c
  2953  002078  EC6D  F00E         	call	_main_servo_control	;wreg free
  2954                           
  2955                           ;initPic.c: 64: side_servo_control(0);
  2956  00207C  0E00               	movlw	0
  2957  00207E  6E1A               	movwf	side_servo_control@dir+1,c
  2958  002080  0E00               	movlw	0
  2959  002082  6E19               	movwf	side_servo_control@dir,c
  2960  002084  EC7B  F00D         	call	_side_servo_control	;wreg free
  2961                           
  2962                           ;initPic.c: 67: (INTCONbits.GIE = 1);
  2963  002088  8EF2               	bsf	intcon,7,c	;volatile
  2964  00208A  0012               	return		;funcret
  2965  00208C                     __end_of_initPIC:
  2966                           	opt stack 0
  2967                           tblptru	equ	0xFF8
  2968                           prodl	equ	0xFF3
  2969                           intcon	equ	0xFF2
  2970                           intcon3	equ	0xFF0
  2971                           postinc0	equ	0xFEE
  2972                           wreg	equ	0xFE8
  2973                           indf1	equ	0xFE7
  2974                           fsr1h	equ	0xFE2
  2975                           fsr1l	equ	0xFE1
  2976                           indf2	equ	0xFDF
  2977                           fsr2h	equ	0xFDA
  2978                           fsr2l	equ	0xFD9
  2979                           status	equ	0xFD8
  2980                           
  2981 ;; *************** function _side_servo_control *****************
  2982 ;; Defined at:
  2983 ;;		line 48 in file "servo.c"
  2984 ;; Parameters:    Size  Location     Type
  2985 ;;  dir             2   24[COMRAM] int 
  2986 ;; Auto vars:     Size  Location     Type
  2987 ;;  i               2   28[COMRAM] int 
  2988 ;; Return value:  Size  Location     Type
  2989 ;;                  1    wreg      void 
  2990 ;; Registers used:
  2991 ;;		wreg, status,2, status,0
  2992 ;; Tracked objects:
  2993 ;;		On entry : 0/0
  2994 ;;		On exit  : 0/0
  2995 ;;		Unchanged: 0/0
  2996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2997 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2998 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2999 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3000 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3001 ;;Total ram usage:        6 bytes
  3002 ;; Hardware stack levels used:    1
  3003 ;; Hardware stack levels required when called:    4
  3004 ;; This function calls:
  3005 ;;		Nothing
  3006 ;; This function is called by:
  3007 ;;		_sense_can
  3008 ;;		_sort
  3009 ;;		_move_can
  3010 ;;		_initPIC
  3011 ;; This function uses a non-reentrant model
  3012 ;;
  3013                           
  3014                           	psect	text10
  3015  001AF6                     __ptext10:
  3016                           	opt stack 0
  3017  001AF6                     _side_servo_control:
  3018                           	opt stack 25
  3019                           
  3020                           ;servo.c: 49: int i;
  3021                           ;servo.c: 50: if( dir == 0){
  3022                           
  3023                           ;incstack = 0
  3024  001AF6  5019               	movf	side_servo_control@dir,w,c
  3025  001AF8  101A               	iorwf	side_servo_control@dir+1,w,c
  3026  001AFA  A4D8               	btfss	status,2,c
  3027  001AFC  D026               	goto	l3317
  3028                           
  3029                           ;servo.c: 51: for (i = 0; i < 10; i++) {
  3030  001AFE  0E00               	movlw	0
  3031  001B00  6E1E               	movwf	side_servo_control@i+1,c
  3032  001B02  0E00               	movlw	0
  3033  001B04  6E1D               	movwf	side_servo_control@i,c
  3034  001B06  BE1E               	btfsc	side_servo_control@i+1,7,c
  3035  001B08  D008               	goto	l286
  3036  001B0A  501E               	movf	side_servo_control@i+1,w,c
  3037  001B0C  E105               	bnz	u2760
  3038  001B0E  0E0A               	movlw	10
  3039  001B10  5C1D               	subwf	side_servo_control@i,w,c
  3040  001B12  B0D8               	btfsc	status,0,c
  3041  001B14  0012               	return	
  3042  001B16  D001               	goto	l286
  3043  001B18                     u2760:
  3044  001B18  0012               	return	
  3045  001B1A                     l286:
  3046                           
  3047                           ;servo.c: 52: LATAbits.LATA3 = 1;
  3048  001B1A  8689               	bsf	3977,3,c	;volatile
  3049                           
  3050                           ;servo.c: 53: _delay((unsigned long)((1.5)*(8000000/4000.0)));
  3051  001B1C  0E04               	movlw	4
  3052  001B1E  6E1B               	movwf	??_side_servo_control& (0+255),c
  3053  001B20  0EE4               	movlw	228
  3054  001B22                     u3877:
  3055  001B22  2EE8               	decfsz	wreg,f,c
  3056  001B24  D7FE               	bra	u3877
  3057  001B26  2E1B               	decfsz	??_side_servo_control& (0+255),f,c
  3058  001B28  D7FC               	bra	u3877
  3059  001B2A  D000               	nop2	
  3060                           
  3061                           ;servo.c: 55: LATAbits.LATA3 = 0;
  3062  001B2C  9689               	bcf	3977,3,c	;volatile
  3063                           
  3064                           ;servo.c: 56: _delay((unsigned long)((18.5)*(8000000/4000.0)));
  3065  001B2E  0E31               	movlw	49
  3066  001B30  6E1B               	movwf	??_side_servo_control& (0+255),c
  3067  001B32  0E0C               	movlw	12
  3068  001B34                     u3887:
  3069  001B34  2EE8               	decfsz	wreg,f,c
  3070  001B36  D7FE               	bra	u3887
  3071  001B38  2E1B               	decfsz	??_side_servo_control& (0+255),f,c
  3072  001B3A  D7FC               	bra	u3887
  3073  001B3C  4A1D               	infsnz	side_servo_control@i,f,c
  3074  001B3E  2A1E               	incf	side_servo_control@i+1,f,c
  3075  001B40  BE1E               	btfsc	side_servo_control@i+1,7,c
  3076  001B42  D7EB               	goto	l286
  3077  001B44  501E               	movf	side_servo_control@i+1,w,c
  3078  001B46  E150               	bnz	l296
  3079  001B48  D7E2               	goto	L2
  3080  001B4A                     l3317:
  3081                           
  3082                           ;servo.c: 59: else if(dir == 1){
  3083  001B4A  0419               	decf	side_servo_control@dir,w,c
  3084  001B4C  101A               	iorwf	side_servo_control@dir+1,w,c
  3085  001B4E  A4D8               	btfss	status,2,c
  3086  001B50  D025               	goto	l3331
  3087                           
  3088                           ;servo.c: 60: for (i = 0; i < 10; i++) {
  3089  001B52  0E00               	movlw	0
  3090  001B54  6E1E               	movwf	side_servo_control@i+1,c
  3091  001B56  0E00               	movlw	0
  3092  001B58  6E1D               	movwf	side_servo_control@i,c
  3093  001B5A                     l3321:
  3094  001B5A  BE1E               	btfsc	side_servo_control@i+1,7,c
  3095  001B5C  D006               	goto	l290
  3096  001B5E  501E               	movf	side_servo_control@i+1,w,c
  3097  001B60  E143               	bnz	l296
  3098  001B62  0E0A               	movlw	10
  3099  001B64  5C1D               	subwf	side_servo_control@i,w,c
  3100  001B66  B0D8               	btfsc	status,0,c
  3101  001B68  0012               	return	
  3102  001B6A                     l290:
  3103                           
  3104                           ;servo.c: 61: LATAbits.LATA3 = 1;
  3105  001B6A  8689               	bsf	3977,3,c	;volatile
  3106                           
  3107                           ;servo.c: 62: _delay((unsigned long)((2)*(8000000/4000.0)));
  3108  001B6C  0E06               	movlw	6
  3109  001B6E  6E1B               	movwf	??_side_servo_control& (0+255),c
  3110  001B70  0E30               	movlw	48
  3111  001B72                     u3897:
  3112  001B72  2EE8               	decfsz	wreg,f,c
  3113  001B74  D7FE               	bra	u3897
  3114  001B76  2E1B               	decfsz	??_side_servo_control& (0+255),f,c
  3115  001B78  D7FC               	bra	u3897
  3116  001B7A  D000               	nop2	
  3117                           
  3118                           ;servo.c: 64: LATAbits.LATA3 = 0;
  3119  001B7C  9689               	bcf	3977,3,c	;volatile
  3120                           
  3121                           ;servo.c: 65: _delay((unsigned long)((118)*(8000000/4000.0)));
  3122  001B7E  0E02               	movlw	2
  3123  001B80  6E1C               	movwf	(??_side_servo_control+1)& (0+255),c
  3124  001B82  0E33               	movlw	51
  3125  001B84  6E1B               	movwf	??_side_servo_control& (0+255),c
  3126  001B86  0E7B               	movlw	123
  3127  001B88                     u3907:
  3128  001B88  2EE8               	decfsz	wreg,f,c
  3129  001B8A  D7FE               	bra	u3907
  3130  001B8C  2E1B               	decfsz	??_side_servo_control& (0+255),f,c
  3131  001B8E  D7FC               	bra	u3907
  3132  001B90  2E1C               	decfsz	(??_side_servo_control+1)& (0+255),f,c
  3133  001B92  D7FA               	bra	u3907
  3134  001B94  F000               	nop	
  3135  001B96  4A1D               	infsnz	side_servo_control@i,f,c
  3136  001B98  2A1E               	incf	side_servo_control@i+1,f,c
  3137  001B9A  D7DF               	goto	l3321
  3138  001B9C                     l3331:
  3139                           
  3140                           ;servo.c: 68: else if (dir == 2){
  3141  001B9C  0E02               	movlw	2
  3142  001B9E  1819               	xorwf	side_servo_control@dir,w,c
  3143  001BA0  101A               	iorwf	side_servo_control@dir+1,w,c
  3144  001BA2  A4D8               	btfss	status,2,c
  3145  001BA4  0012               	return	
  3146                           
  3147                           ;servo.c: 69: for (i = 0; i < 10; i++) {
  3148  001BA6  0E00               	movlw	0
  3149  001BA8  6E1E               	movwf	side_servo_control@i+1,c
  3150  001BAA  0E00               	movlw	0
  3151  001BAC  6E1D               	movwf	side_servo_control@i,c
  3152  001BAE                     l3335:
  3153  001BAE  BE1E               	btfsc	side_servo_control@i+1,7,c
  3154  001BB0  D006               	goto	l294
  3155  001BB2  501E               	movf	side_servo_control@i+1,w,c
  3156  001BB4  E119               	bnz	l296
  3157  001BB6  0E0A               	movlw	10
  3158  001BB8  5C1D               	subwf	side_servo_control@i,w,c
  3159  001BBA  B0D8               	btfsc	status,0,c
  3160  001BBC  0012               	return	
  3161  001BBE                     l294:
  3162                           
  3163                           ;servo.c: 70: LATAbits.LATA3 = 1;
  3164  001BBE  8689               	bsf	3977,3,c	;volatile
  3165                           
  3166                           ;servo.c: 71: _delay((unsigned long)((1.3)*(8000000/4000.0)));
  3167  001BC0  0E04               	movlw	4
  3168  001BC2  6E1B               	movwf	??_side_servo_control& (0+255),c
  3169  001BC4  0E5F               	movlw	95
  3170  001BC6                     u3917:
  3171  001BC6  2EE8               	decfsz	wreg,f,c
  3172  001BC8  D7FE               	bra	u3917
  3173  001BCA  2E1B               	decfsz	??_side_servo_control& (0+255),f,c
  3174  001BCC  D7FC               	bra	u3917
  3175  001BCE  F000               	nop	
  3176                           
  3177                           ;servo.c: 73: LATAbits.LATA3 = 0;
  3178  001BD0  9689               	bcf	3977,3,c	;volatile
  3179                           
  3180                           ;servo.c: 74: _delay((unsigned long)((18.7)*(8000000/4000.0)));
  3181  001BD2  0E31               	movlw	49
  3182  001BD4  6E1B               	movwf	??_side_servo_control& (0+255),c
  3183  001BD6  0E91               	movlw	145
  3184  001BD8                     u3927:
  3185  001BD8  2EE8               	decfsz	wreg,f,c
  3186  001BDA  D7FE               	bra	u3927
  3187  001BDC  2E1B               	decfsz	??_side_servo_control& (0+255),f,c
  3188  001BDE  D7FC               	bra	u3927
  3189  001BE0  F000               	nop	
  3190  001BE2  4A1D               	infsnz	side_servo_control@i,f,c
  3191  001BE4  2A1E               	incf	side_servo_control@i+1,f,c
  3192  001BE6  D7E3               	goto	l3335
  3193  001BE8                     l296:
  3194  001BE8  0012               	return		;funcret
  3195  001BEA                     __end_of_side_servo_control:
  3196                           	opt stack 0
  3197                           tblptru	equ	0xFF8
  3198                           prodl	equ	0xFF3
  3199                           intcon	equ	0xFF2
  3200                           intcon3	equ	0xFF0
  3201                           postinc0	equ	0xFEE
  3202                           wreg	equ	0xFE8
  3203                           indf1	equ	0xFE7
  3204                           fsr1h	equ	0xFE2
  3205                           fsr1l	equ	0xFE1
  3206                           indf2	equ	0xFDF
  3207                           fsr2h	equ	0xFDA
  3208                           fsr2l	equ	0xFD9
  3209                           status	equ	0xFD8
  3210                           
  3211 ;; *************** function _main_servo_control *****************
  3212 ;; Defined at:
  3213 ;;		line 17 in file "servo.c"
  3214 ;; Parameters:    Size  Location     Type
  3215 ;;  dir             2   24[COMRAM] int 
  3216 ;; Auto vars:     Size  Location     Type
  3217 ;;  i               2   27[COMRAM] int 
  3218 ;; Return value:  Size  Location     Type
  3219 ;;                  1    wreg      void 
  3220 ;; Registers used:
  3221 ;;		wreg, status,2, status,0
  3222 ;; Tracked objects:
  3223 ;;		On entry : 0/0
  3224 ;;		On exit  : 0/0
  3225 ;;		Unchanged: 0/0
  3226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3227 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3228 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3229 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3230 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3231 ;;Total ram usage:        5 bytes
  3232 ;; Hardware stack levels used:    1
  3233 ;; Hardware stack levels required when called:    4
  3234 ;; This function calls:
  3235 ;;		Nothing
  3236 ;; This function is called by:
  3237 ;;		_sense_can
  3238 ;;		_sort
  3239 ;;		_move_can
  3240 ;;		_initPIC
  3241 ;; This function uses a non-reentrant model
  3242 ;;
  3243                           
  3244                           	psect	text11
  3245  001CDA                     __ptext11:
  3246                           	opt stack 0
  3247  001CDA                     _main_servo_control:
  3248                           	opt stack 24
  3249                           
  3250                           ;servo.c: 18: int i;
  3251                           ;servo.c: 19: if( dir == 0){
  3252                           
  3253                           ;incstack = 0
  3254  001CDA  5019               	movf	main_servo_control@dir,w,c
  3255  001CDC  101A               	iorwf	main_servo_control@dir+1,w,c
  3256  001CDE  A4D8               	btfss	status,2,c
  3257  001CE0  D026               	goto	l3275
  3258                           
  3259                           ;servo.c: 20: for (i = 0; i < 10; i++) {
  3260  001CE2  0E00               	movlw	0
  3261  001CE4  6E1D               	movwf	main_servo_control@i+1,c
  3262  001CE6  0E00               	movlw	0
  3263  001CE8  6E1C               	movwf	main_servo_control@i,c
  3264  001CEA  BE1D               	btfsc	main_servo_control@i+1,7,c
  3265  001CEC  D008               	goto	l272
  3266  001CEE  501D               	movf	main_servo_control@i+1,w,c
  3267  001CF0  E105               	bnz	u2670
  3268  001CF2  0E0A               	movlw	10
  3269  001CF4  5C1C               	subwf	main_servo_control@i,w,c
  3270  001CF6  B0D8               	btfsc	status,0,c
  3271  001CF8  0012               	return	
  3272  001CFA  D001               	goto	l272
  3273  001CFC                     u2670:
  3274  001CFC  0012               	return	
  3275  001CFE                     l272:
  3276                           
  3277                           ;servo.c: 21: LATEbits.LATE0 = 1;
  3278  001CFE  808D               	bsf	3981,0,c	;volatile
  3279                           
  3280                           ;servo.c: 22: _delay((unsigned long)((1.5)*(8000000/4000.0)));
  3281  001D00  0E04               	movlw	4
  3282  001D02  6E1B               	movwf	??_main_servo_control& (0+255),c
  3283  001D04  0EE4               	movlw	228
  3284  001D06                     u3937:
  3285  001D06  2EE8               	decfsz	wreg,f,c
  3286  001D08  D7FE               	bra	u3937
  3287  001D0A  2E1B               	decfsz	??_main_servo_control& (0+255),f,c
  3288  001D0C  D7FC               	bra	u3937
  3289  001D0E  D000               	nop2	
  3290                           
  3291                           ;servo.c: 24: LATEbits.LATE0 = 0;
  3292  001D10  908D               	bcf	3981,0,c	;volatile
  3293                           
  3294                           ;servo.c: 25: _delay((unsigned long)((18.5)*(8000000/4000.0)));
  3295  001D12  0E31               	movlw	49
  3296  001D14  6E1B               	movwf	??_main_servo_control& (0+255),c
  3297  001D16  0E0C               	movlw	12
  3298  001D18                     u3947:
  3299  001D18  2EE8               	decfsz	wreg,f,c
  3300  001D1A  D7FE               	bra	u3947
  3301  001D1C  2E1B               	decfsz	??_main_servo_control& (0+255),f,c
  3302  001D1E  D7FC               	bra	u3947
  3303  001D20  4A1C               	infsnz	main_servo_control@i,f,c
  3304  001D22  2A1D               	incf	main_servo_control@i+1,f,c
  3305  001D24  BE1D               	btfsc	main_servo_control@i+1,7,c
  3306  001D26  D7EB               	goto	l272
  3307  001D28  501D               	movf	main_servo_control@i+1,w,c
  3308  001D2A  E145               	bnz	l282
  3309  001D2C  D7E2               	goto	L3
  3310  001D2E                     l3275:
  3311                           
  3312                           ;servo.c: 28: else if(dir == 1){
  3313  001D2E  0419               	decf	main_servo_control@dir,w,c
  3314  001D30  101A               	iorwf	main_servo_control@dir+1,w,c
  3315  001D32  A4D8               	btfss	status,2,c
  3316  001D34  D020               	goto	l3289
  3317                           
  3318                           ;servo.c: 29: for (i = 0; i < 10; i++) {
  3319  001D36  0E00               	movlw	0
  3320  001D38  6E1D               	movwf	main_servo_control@i+1,c
  3321  001D3A  0E00               	movlw	0
  3322  001D3C  6E1C               	movwf	main_servo_control@i,c
  3323  001D3E                     l3279:
  3324  001D3E  BE1D               	btfsc	main_servo_control@i+1,7,c
  3325  001D40  D006               	goto	l276
  3326  001D42  501D               	movf	main_servo_control@i+1,w,c
  3327  001D44  E138               	bnz	l282
  3328  001D46  0E0A               	movlw	10
  3329  001D48  5C1C               	subwf	main_servo_control@i,w,c
  3330  001D4A  B0D8               	btfsc	status,0,c
  3331  001D4C  0012               	return	
  3332  001D4E                     l276:
  3333                           
  3334                           ;servo.c: 30: LATEbits.LATE0 = 1;
  3335  001D4E  808D               	bsf	3981,0,c	;volatile
  3336                           
  3337                           ;servo.c: 31: _delay((unsigned long)((3.5)*(8000000/4000.0)));
  3338  001D50  0E0A               	movlw	10
  3339  001D52  6E1B               	movwf	??_main_servo_control& (0+255),c
  3340  001D54  0E16               	movlw	22
  3341  001D56                     u3957:
  3342  001D56  2EE8               	decfsz	wreg,f,c
  3343  001D58  D7FE               	bra	u3957
  3344  001D5A  2E1B               	decfsz	??_main_servo_control& (0+255),f,c
  3345  001D5C  D7FC               	bra	u3957
  3346                           
  3347                           ;servo.c: 33: LATEbits.LATE0 = 0;
  3348  001D5E  908D               	bcf	3981,0,c	;volatile
  3349                           
  3350                           ;servo.c: 34: _delay((unsigned long)((16.5)*(8000000/4000.0)));
  3351  001D60  0E2B               	movlw	43
  3352  001D62  6E1B               	movwf	??_main_servo_control& (0+255),c
  3353  001D64  0EDA               	movlw	218
  3354  001D66                     u3967:
  3355  001D66  2EE8               	decfsz	wreg,f,c
  3356  001D68  D7FE               	bra	u3967
  3357  001D6A  2E1B               	decfsz	??_main_servo_control& (0+255),f,c
  3358  001D6C  D7FC               	bra	u3967
  3359  001D6E  D000               	nop2	
  3360  001D70  4A1C               	infsnz	main_servo_control@i,f,c
  3361  001D72  2A1D               	incf	main_servo_control@i+1,f,c
  3362  001D74  D7E4               	goto	l3279
  3363  001D76                     l3289:
  3364                           
  3365                           ;servo.c: 37: else if (dir == 2){
  3366  001D76  0E02               	movlw	2
  3367  001D78  1819               	xorwf	main_servo_control@dir,w,c
  3368  001D7A  101A               	iorwf	main_servo_control@dir+1,w,c
  3369  001D7C  A4D8               	btfss	status,2,c
  3370  001D7E  0012               	return	
  3371                           
  3372                           ;servo.c: 38: for (i = 0; i < 10; i++) {
  3373  001D80  0E00               	movlw	0
  3374  001D82  6E1D               	movwf	main_servo_control@i+1,c
  3375  001D84  0E00               	movlw	0
  3376  001D86  6E1C               	movwf	main_servo_control@i,c
  3377  001D88                     l3293:
  3378  001D88  BE1D               	btfsc	main_servo_control@i+1,7,c
  3379  001D8A  D006               	goto	l280
  3380  001D8C  501D               	movf	main_servo_control@i+1,w,c
  3381  001D8E  E113               	bnz	l282
  3382  001D90  0E0A               	movlw	10
  3383  001D92  5C1C               	subwf	main_servo_control@i,w,c
  3384  001D94  B0D8               	btfsc	status,0,c
  3385  001D96  0012               	return	
  3386  001D98                     l280:
  3387                           
  3388                           ;servo.c: 39: LATEbits.LATE0 = 1;
  3389  001D98  808D               	bsf	3981,0,c	;volatile
  3390                           
  3391                           ;servo.c: 40: _delay((unsigned long)((0.15)*(8000000/4000.0)));
  3392  001D9A  0E64               	movlw	100
  3393  001D9C                     u3977:
  3394  001D9C  2EE8               	decfsz	wreg,f,c
  3395  001D9E  D7FE               	bra	u3977
  3396                           
  3397                           ;servo.c: 42: LATEbits.LATE0 = 0;
  3398  001DA0  908D               	bcf	3981,0,c	;volatile
  3399                           
  3400                           ;servo.c: 43: _delay((unsigned long)((19.85)*(8000000/4000.0)));
  3401  001DA2  0E34               	movlw	52
  3402  001DA4  6E1B               	movwf	??_main_servo_control& (0+255),c
  3403  001DA6  0E8E               	movlw	142
  3404  001DA8                     u3987:
  3405  001DA8  2EE8               	decfsz	wreg,f,c
  3406  001DAA  D7FE               	bra	u3987
  3407  001DAC  2E1B               	decfsz	??_main_servo_control& (0+255),f,c
  3408  001DAE  D7FC               	bra	u3987
  3409  001DB0  4A1C               	infsnz	main_servo_control@i,f,c
  3410  001DB2  2A1D               	incf	main_servo_control@i+1,f,c
  3411  001DB4  D7E9               	goto	l3293
  3412  001DB6                     l282:
  3413  001DB6  0012               	return		;funcret
  3414  001DB8                     __end_of_main_servo_control:
  3415                           	opt stack 0
  3416                           tblptru	equ	0xFF8
  3417                           prodl	equ	0xFF3
  3418                           intcon	equ	0xFF2
  3419                           intcon3	equ	0xFF0
  3420                           postinc0	equ	0xFEE
  3421                           wreg	equ	0xFE8
  3422                           indf1	equ	0xFE7
  3423                           fsr1h	equ	0xFE2
  3424                           fsr1l	equ	0xFE1
  3425                           indf2	equ	0xFDF
  3426                           fsr2h	equ	0xFDA
  3427                           fsr2l	equ	0xFD9
  3428                           status	equ	0xFD8
  3429                           
  3430 ;; *************** function _initLCD *****************
  3431 ;; Defined at:
  3432 ;;		line 14 in file "lcd.c"
  3433 ;; Parameters:    Size  Location     Type
  3434 ;;		None
  3435 ;; Auto vars:     Size  Location     Type
  3436 ;;		None
  3437 ;; Return value:  Size  Location     Type
  3438 ;;                  1    wreg      void 
  3439 ;; Registers used:
  3440 ;;		wreg, status,2, status,0, cstack
  3441 ;; Tracked objects:
  3442 ;;		On entry : 0/0
  3443 ;;		On exit  : 0/0
  3444 ;;		Unchanged: 0/0
  3445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3448 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3449 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3450 ;;Total ram usage:        1 bytes
  3451 ;; Hardware stack levels used:    1
  3452 ;; Hardware stack levels required when called:    6
  3453 ;; This function calls:
  3454 ;;		_lcdInst
  3455 ;; This function is called by:
  3456 ;;		_initPIC
  3457 ;; This function uses a non-reentrant model
  3458 ;;
  3459                           
  3460                           	psect	text12
  3461  00243A                     __ptext12:
  3462                           	opt stack 0
  3463  00243A                     _initLCD:
  3464                           	opt stack 23
  3465                           
  3466                           ;lcd.c: 15: _delay((unsigned long)((15)*(8000000/4000.0)));
  3467                           
  3468                           ;incstack = 0
  3469  00243A  0E27               	movlw	39
  3470  00243C  6E1C               	movwf	??_initLCD& (0+255),c
  3471  00243E  0EF5               	movlw	245
  3472  002440                     u3997:
  3473  002440  2EE8               	decfsz	wreg,f,c
  3474  002442  D7FE               	bra	u3997
  3475  002444  2E1C               	decfsz	??_initLCD& (0+255),f,c
  3476  002446  D7FC               	bra	u3997
  3477  002448  F000               	nop	
  3478                           
  3479                           ;lcd.c: 16: lcdInst(0b00110011);
  3480  00244A  0E33               	movlw	51
  3481  00244C  EC02  F013         	call	_lcdInst
  3482                           
  3483                           ;lcd.c: 17: lcdInst(0b00110010);
  3484  002450  0E32               	movlw	50
  3485  002452  EC02  F013         	call	_lcdInst
  3486                           
  3487                           ;lcd.c: 18: lcdInst(0b00101000);
  3488  002456  0E28               	movlw	40
  3489  002458  EC02  F013         	call	_lcdInst
  3490                           
  3491                           ;lcd.c: 19: lcdInst(0b00001111);
  3492  00245C  0E0F               	movlw	15
  3493  00245E  EC02  F013         	call	_lcdInst
  3494                           
  3495                           ;lcd.c: 20: lcdInst(0b00000110);
  3496  002462  0E06               	movlw	6
  3497  002464  EC02  F013         	call	_lcdInst
  3498                           
  3499                           ;lcd.c: 21: lcdInst(0b00000001);
  3500  002468  0E01               	movlw	1
  3501  00246A  EC02  F013         	call	_lcdInst
  3502                           
  3503                           ;lcd.c: 22: _delay((unsigned long)((15)*(8000000/4000.0)));
  3504  00246E  0E27               	movlw	39
  3505  002470  6E1C               	movwf	??_initLCD& (0+255),c
  3506  002472  0EF5               	movlw	245
  3507  002474                     u4007:
  3508  002474  2EE8               	decfsz	wreg,f,c
  3509  002476  D7FE               	bra	u4007
  3510  002478  2E1C               	decfsz	??_initLCD& (0+255),f,c
  3511  00247A  D7FC               	bra	u4007
  3512  00247C  F000               	nop	
  3513  00247E  0012               	return		;funcret
  3514  002480                     __end_of_initLCD:
  3515                           	opt stack 0
  3516                           tblptru	equ	0xFF8
  3517                           prodl	equ	0xFF3
  3518                           intcon	equ	0xFF2
  3519                           intcon3	equ	0xFF0
  3520                           postinc0	equ	0xFEE
  3521                           wreg	equ	0xFE8
  3522                           indf1	equ	0xFE7
  3523                           fsr1h	equ	0xFE2
  3524                           fsr1l	equ	0xFE1
  3525                           indf2	equ	0xFDF
  3526                           fsr2h	equ	0xFDA
  3527                           fsr2l	equ	0xFD9
  3528                           status	equ	0xFD8
  3529                           
  3530 ;; *************** function _I2C_Master_Init *****************
  3531 ;; Defined at:
  3532 ;;		line 13 in file "I2C.c"
  3533 ;; Parameters:    Size  Location     Type
  3534 ;;  c               4   37[COMRAM] const unsigned long 
  3535 ;; Auto vars:     Size  Location     Type
  3536 ;;		None
  3537 ;; Return value:  Size  Location     Type
  3538 ;;                  1    wreg      void 
  3539 ;; Registers used:
  3540 ;;		wreg, status,2, status,0, cstack
  3541 ;; Tracked objects:
  3542 ;;		On entry : 0/0
  3543 ;;		On exit  : 0/0
  3544 ;;		Unchanged: 0/0
  3545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3546 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3547 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3548 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3549 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3550 ;;Total ram usage:        8 bytes
  3551 ;; Hardware stack levels used:    1
  3552 ;; Hardware stack levels required when called:    5
  3553 ;; This function calls:
  3554 ;;		___lldiv
  3555 ;; This function is called by:
  3556 ;;		_initPIC
  3557 ;;		_set_time
  3558 ;; This function uses a non-reentrant model
  3559 ;;
  3560                           
  3561                           	psect	text13
  3562  0021F0                     __ptext13:
  3563                           	opt stack 0
  3564  0021F0                     _I2C_Master_Init:
  3565                           	opt stack 24
  3566                           
  3567                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  3568                           
  3569                           ;incstack = 0
  3570  0021F0  0E00               	movlw	0
  3571  0021F2  6EC7               	movwf	4039,c	;volatile
  3572                           
  3573                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  3574  0021F4  0E28               	movlw	40
  3575  0021F6  6EC6               	movwf	4038,c	;volatile
  3576                           
  3577                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  3578  0021F8  0E00               	movlw	0
  3579  0021FA  6EC5               	movwf	4037,c	;volatile
  3580                           
  3581                           ;I2C.c: 19: SSPADD = (8000000/(4*c))-1;
  3582  0021FC  0E00               	movlw	0
  3583  0021FE  6E19               	movwf	___lldiv@dividend,c
  3584  002200  0E12               	movlw	18
  3585  002202  6E1A               	movwf	___lldiv@dividend+1,c
  3586  002204  0E7A               	movlw	122
  3587  002206  6E1B               	movwf	___lldiv@dividend+2,c
  3588  002208  0E00               	movlw	0
  3589  00220A  6E1C               	movwf	___lldiv@dividend+3,c
  3590  00220C  C026  F02A         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  3591  002210  C027  F02B         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  3592  002214  C028  F02C         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  3593  002218  C029  F02D         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  3594  00221C  0E02               	movlw	2
  3595  00221E                     u1865:
  3596  00221E  90D8               	bcf	status,0,c
  3597  002220  362A               	rlcf	??_I2C_Master_Init,f,c
  3598  002222  362B               	rlcf	??_I2C_Master_Init+1,f,c
  3599  002224  362C               	rlcf	??_I2C_Master_Init+2,f,c
  3600  002226  362D               	rlcf	??_I2C_Master_Init+3,f,c
  3601  002228  2EE8               	decfsz	wreg,f,c
  3602  00222A  D7F9               	goto	u1865
  3603  00222C  C02A  F01D         	movff	??_I2C_Master_Init,___lldiv@divisor
  3604  002230  C02B  F01E         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  3605  002234  C02C  F01F         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  3606  002238  C02D  F020         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  3607  00223C  EC46  F010         	call	___lldiv	;wreg free
  3608  002240  0419               	decf	?___lldiv,w,c
  3609  002242  6EC8               	movwf	4040,c	;volatile
  3610                           
  3611                           ;I2C.c: 20: TRISC3 = 1;
  3612  002244  8694               	bsf	3988,3,c	;volatile
  3613                           
  3614                           ;I2C.c: 21: TRISC4 = 1;
  3615  002246  8894               	bsf	3988,4,c	;volatile
  3616  002248  0012               	return		;funcret
  3617  00224A                     __end_of_I2C_Master_Init:
  3618                           	opt stack 0
  3619                           tblptru	equ	0xFF8
  3620                           prodl	equ	0xFF3
  3621                           intcon	equ	0xFF2
  3622                           intcon3	equ	0xFF0
  3623                           postinc0	equ	0xFEE
  3624                           wreg	equ	0xFE8
  3625                           indf1	equ	0xFE7
  3626                           fsr1h	equ	0xFE2
  3627                           fsr1l	equ	0xFE1
  3628                           indf2	equ	0xFDF
  3629                           fsr2h	equ	0xFDA
  3630                           fsr2l	equ	0xFD9
  3631                           status	equ	0xFD8
  3632                           
  3633 ;; *************** function ___lldiv *****************
  3634 ;; Defined at:
  3635 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lldiv.c"
  3636 ;; Parameters:    Size  Location     Type
  3637 ;;  dividend        4   24[COMRAM] unsigned long 
  3638 ;;  divisor         4   28[COMRAM] unsigned long 
  3639 ;; Auto vars:     Size  Location     Type
  3640 ;;  quotient        4   32[COMRAM] unsigned long 
  3641 ;;  counter         1   36[COMRAM] unsigned char 
  3642 ;; Return value:  Size  Location     Type
  3643 ;;                  4   24[COMRAM] unsigned long 
  3644 ;; Registers used:
  3645 ;;		wreg, status,2, status,0
  3646 ;; Tracked objects:
  3647 ;;		On entry : 0/0
  3648 ;;		On exit  : 0/0
  3649 ;;		Unchanged: 0/0
  3650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3651 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3652 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3654 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3655 ;;Total ram usage:       13 bytes
  3656 ;; Hardware stack levels used:    1
  3657 ;; Hardware stack levels required when called:    4
  3658 ;; This function calls:
  3659 ;;		Nothing
  3660 ;; This function is called by:
  3661 ;;		_I2C_Master_Init
  3662 ;; This function uses a non-reentrant model
  3663 ;;
  3664                           
  3665                           	psect	text14
  3666  00208C                     __ptext14:
  3667                           	opt stack 0
  3668  00208C                     ___lldiv:
  3669                           	opt stack 24
  3670                           
  3671                           ;incstack = 0
  3672  00208C  0E00               	movlw	0
  3673  00208E  6E21               	movwf	___lldiv@quotient,c
  3674  002090  0E00               	movlw	0
  3675  002092  6E22               	movwf	___lldiv@quotient+1,c
  3676  002094  0E00               	movlw	0
  3677  002096  6E23               	movwf	___lldiv@quotient+2,c
  3678  002098  0E00               	movlw	0
  3679  00209A  6E24               	movwf	___lldiv@quotient+3,c
  3680  00209C  501D               	movf	___lldiv@divisor,w,c
  3681  00209E  101E               	iorwf	___lldiv@divisor+1,w,c
  3682  0020A0  101F               	iorwf	___lldiv@divisor+2,w,c
  3683  0020A2  1020               	iorwf	___lldiv@divisor+3,w,c
  3684  0020A4  B4D8               	btfsc	status,2,c
  3685  0020A6  D02A               	goto	l895
  3686  0020A8  0E01               	movlw	1
  3687  0020AA  6E25               	movwf	___lldiv@counter,c
  3688  0020AC  D006               	goto	l2491
  3689  0020AE                     l2489:
  3690  0020AE  90D8               	bcf	status,0,c
  3691  0020B0  361D               	rlcf	___lldiv@divisor,f,c
  3692  0020B2  361E               	rlcf	___lldiv@divisor+1,f,c
  3693  0020B4  361F               	rlcf	___lldiv@divisor+2,f,c
  3694  0020B6  3620               	rlcf	___lldiv@divisor+3,f,c
  3695  0020B8  2A25               	incf	___lldiv@counter,f,c
  3696  0020BA                     l2491:
  3697  0020BA  AE20               	btfss	___lldiv@divisor+3,7,c
  3698  0020BC  D7F8               	goto	l2489
  3699  0020BE                     l2493:
  3700  0020BE  90D8               	bcf	status,0,c
  3701  0020C0  3621               	rlcf	___lldiv@quotient,f,c
  3702  0020C2  3622               	rlcf	___lldiv@quotient+1,f,c
  3703  0020C4  3623               	rlcf	___lldiv@quotient+2,f,c
  3704  0020C6  3624               	rlcf	___lldiv@quotient+3,f,c
  3705  0020C8  501D               	movf	___lldiv@divisor,w,c
  3706  0020CA  5C19               	subwf	___lldiv@dividend,w,c
  3707  0020CC  501E               	movf	___lldiv@divisor+1,w,c
  3708  0020CE  581A               	subwfb	___lldiv@dividend+1,w,c
  3709  0020D0  501F               	movf	___lldiv@divisor+2,w,c
  3710  0020D2  581B               	subwfb	___lldiv@dividend+2,w,c
  3711  0020D4  5020               	movf	___lldiv@divisor+3,w,c
  3712  0020D6  581C               	subwfb	___lldiv@dividend+3,w,c
  3713  0020D8  A0D8               	btfss	status,0,c
  3714  0020DA  D009               	goto	l2501
  3715  0020DC  501D               	movf	___lldiv@divisor,w,c
  3716  0020DE  5E19               	subwf	___lldiv@dividend,f,c
  3717  0020E0  501E               	movf	___lldiv@divisor+1,w,c
  3718  0020E2  5A1A               	subwfb	___lldiv@dividend+1,f,c
  3719  0020E4  501F               	movf	___lldiv@divisor+2,w,c
  3720  0020E6  5A1B               	subwfb	___lldiv@dividend+2,f,c
  3721  0020E8  5020               	movf	___lldiv@divisor+3,w,c
  3722  0020EA  5A1C               	subwfb	___lldiv@dividend+3,f,c
  3723  0020EC  8021               	bsf	___lldiv@quotient,0,c
  3724  0020EE                     l2501:
  3725  0020EE  90D8               	bcf	status,0,c
  3726  0020F0  3220               	rrcf	___lldiv@divisor+3,f,c
  3727  0020F2  321F               	rrcf	___lldiv@divisor+2,f,c
  3728  0020F4  321E               	rrcf	___lldiv@divisor+1,f,c
  3729  0020F6  321D               	rrcf	___lldiv@divisor,f,c
  3730  0020F8  2E25               	decfsz	___lldiv@counter,f,c
  3731  0020FA  D7E1               	goto	l2493
  3732  0020FC                     l895:
  3733  0020FC  C021  F019         	movff	___lldiv@quotient,?___lldiv
  3734  002100  C022  F01A         	movff	___lldiv@quotient+1,?___lldiv+1
  3735  002104  C023  F01B         	movff	___lldiv@quotient+2,?___lldiv+2
  3736  002108  C024  F01C         	movff	___lldiv@quotient+3,?___lldiv+3
  3737  00210C  0012               	return		;funcret
  3738  00210E                     __end_of___lldiv:
  3739                           	opt stack 0
  3740                           tblptru	equ	0xFF8
  3741                           prodl	equ	0xFF3
  3742                           intcon	equ	0xFF2
  3743                           intcon3	equ	0xFF0
  3744                           postinc0	equ	0xFEE
  3745                           wreg	equ	0xFE8
  3746                           indf1	equ	0xFE7
  3747                           fsr1h	equ	0xFE2
  3748                           fsr1l	equ	0xFE1
  3749                           indf2	equ	0xFDF
  3750                           fsr2h	equ	0xFDA
  3751                           fsr2l	equ	0xFD9
  3752                           status	equ	0xFD8
  3753                           
  3754 ;; *************** function _display_time *****************
  3755 ;; Defined at:
  3756 ;;		line 126 in file "picState.c"
  3757 ;; Parameters:    Size  Location     Type
  3758 ;;		None
  3759 ;; Auto vars:     Size  Location     Type
  3760 ;;  i               1   60[COMRAM] unsigned char 
  3761 ;; Return value:  Size  Location     Type
  3762 ;;                  2   88[None  ] int 
  3763 ;; Registers used:
  3764 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3765 ;; Tracked objects:
  3766 ;;		On entry : 0/0
  3767 ;;		On exit  : 0/0
  3768 ;;		Unchanged: 0/0
  3769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3771 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3772 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3773 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3774 ;;Total ram usage:        3 bytes
  3775 ;; Hardware stack levels used:    1
  3776 ;; Hardware stack levels required when called:    7
  3777 ;; This function calls:
  3778 ;;		_I2C_Master_Read
  3779 ;;		_I2C_Master_Start
  3780 ;;		_I2C_Master_Stop
  3781 ;;		_I2C_Master_Write
  3782 ;;		_lcdInst
  3783 ;;		_printf
  3784 ;; This function is called by:
  3785 ;;		_main
  3786 ;; This function uses a non-reentrant model
  3787 ;;
  3788                           
  3789                           	psect	text15
  3790  001BEA                     __ptext15:
  3791                           	opt stack 0
  3792  001BEA                     _display_time:
  3793                           	opt stack 23
  3794                           
  3795                           ;picState.c: 128: lcdInst(0x01);;
  3796                           
  3797                           ;incstack = 0
  3798  001BEA  0E01               	movlw	1
  3799  001BEC  EC02  F013         	call	_lcdInst
  3800                           
  3801                           ;picState.c: 129: _delay((unsigned long)((300)*(8000000/4000.0)));
  3802  001BF0  0E04               	movlw	4
  3803  001BF2  6E3C               	movwf	(??_display_time+1)& (0+255),c
  3804  001BF4  0E0C               	movlw	12
  3805  001BF6  6E3B               	movwf	??_display_time& (0+255),c
  3806  001BF8  0E34               	movlw	52
  3807  001BFA                     u4017:
  3808  001BFA  2EE8               	decfsz	wreg,f,c
  3809  001BFC  D7FE               	bra	u4017
  3810  001BFE  2E3B               	decfsz	??_display_time& (0+255),f,c
  3811  001C00  D7FC               	bra	u4017
  3812  001C02  2E3C               	decfsz	(??_display_time+1)& (0+255),f,c
  3813  001C04  D7FA               	bra	u4017
  3814                           
  3815                           ;picState.c: 130: while (mode == 1) {
  3816  001C06  D065               	goto	l3911
  3817  001C08                     l3879:
  3818                           
  3819                           ;picState.c: 131: I2C_Master_Start();
  3820  001C08  EC22  F013         	call	_I2C_Master_Start	;wreg free
  3821                           
  3822                           ;picState.c: 132: I2C_Master_Write(0b11010001);
  3823  001C0C  0E00               	movlw	0
  3824  001C0E  6E1B               	movwf	I2C_Master_Write@d+1,c
  3825  001C10  0ED1               	movlw	209
  3826  001C12  6E1A               	movwf	I2C_Master_Write@d,c
  3827  001C14  EC14  F013         	call	_I2C_Master_Write	;wreg free
  3828                           
  3829                           ;picState.c: 133: for (unsigned char i = 0; i < 0x06; i++) {
  3830  001C18  0E00               	movlw	0
  3831  001C1A  6E3D               	movwf	display_time@i,c
  3832  001C1C                     l3883:
  3833  001C1C  0E05               	movlw	5
  3834  001C1E  643D               	cpfsgt	display_time@i,c
  3835  001C20  D001               	goto	l3887
  3836  001C22  D00E               	goto	l3893
  3837  001C24                     l3887:
  3838                           
  3839                           ;picState.c: 134: time[i] = I2C_Master_Read(1);
  3840  001C24  503D               	movf	display_time@i,w,c
  3841  001C26  0D01               	mullw	1
  3842  001C28  0E44               	movlw	low _time
  3843  001C2A  24F3               	addwf	prodl,w,c
  3844  001C2C  6ED9               	movwf	fsr2l,c
  3845  001C2E  0E00               	movlw	high _time
  3846  001C30  20F4               	addwfc	prodh,w,c
  3847  001C32  6EDA               	movwf	fsr2h,c
  3848  001C34  0E01               	movlw	1
  3849  001C36  EC95  F012         	call	_I2C_Master_Read
  3850  001C3A  6EDF               	movwf	indf2,c
  3851  001C3C  2A3D               	incf	display_time@i,f,c
  3852  001C3E  D7EE               	goto	l3883
  3853  001C40                     l3893:
  3854                           
  3855                           ;picState.c: 135: }
  3856                           ;picState.c: 136: time[6] = I2C_Master_Read(0);
  3857  001C40  0E00               	movlw	0
  3858  001C42  EC95  F012         	call	_I2C_Master_Read
  3859  001C46  6E4A               	movwf	_time+6,c
  3860                           
  3861                           ;picState.c: 137: I2C_Master_Stop();
  3862  001C48  EC1E  F013         	call	_I2C_Master_Stop	;wreg free
  3863                           
  3864                           ;picState.c: 138: lcdInst(0b10000000);;
  3865  001C4C  0E80               	movlw	128
  3866  001C4E  EC02  F013         	call	_lcdInst
  3867                           
  3868                           ;picState.c: 139: printf("%02x/%02x/%02x", time[6], time[5],
  3869                           ;picState.c: 140: time[4]);
  3870  001C52  0E94               	movlw	low STR_12
  3871  001C54  6E25               	movwf	printf@f,c
  3872  001C56  0E10               	movlw	high STR_12
  3873  001C58  6E26               	movwf	printf@f+1,c
  3874  001C5A  C04A  F027         	movff	_time+6,?_printf+2
  3875  001C5E  6A28               	clrf	?_printf+3,c
  3876  001C60  C049  F029         	movff	_time+5,?_printf+4
  3877  001C64  6A2A               	clrf	?_printf+5,c
  3878  001C66  C048  F02B         	movff	_time+4,?_printf+6
  3879  001C6A  6A2C               	clrf	?_printf+7,c
  3880  001C6C  EC6B  F008         	call	_printf	;wreg free
  3881                           
  3882                           ;picState.c: 141: lcdInst(0b11000000);;
  3883  001C70  0EC0               	movlw	192
  3884  001C72  EC02  F013         	call	_lcdInst
  3885                           
  3886                           ;picState.c: 142: printf("%02x:%02x:%02x", time[2], time[1],
  3887                           ;picState.c: 143: time[0]);
  3888  001C76  0EA3               	movlw	low STR_13
  3889  001C78  6E25               	movwf	printf@f,c
  3890  001C7A  0E10               	movlw	high STR_13
  3891  001C7C  6E26               	movwf	printf@f+1,c
  3892  001C7E  C046  F027         	movff	_time+2,?_printf+2
  3893  001C82  6A28               	clrf	?_printf+3,c
  3894  001C84  C045  F029         	movff	_time+1,?_printf+4
  3895  001C88  6A2A               	clrf	?_printf+5,c
  3896  001C8A  C044  F02B         	movff	_time,?_printf+6
  3897  001C8E  6A2C               	clrf	?_printf+7,c
  3898  001C90  EC6B  F008         	call	_printf	;wreg free
  3899                           
  3900                           ;picState.c: 145: I2C_Master_Start();
  3901  001C94  EC22  F013         	call	_I2C_Master_Start	;wreg free
  3902                           
  3903                           ;picState.c: 146: I2C_Master_Write(0b11010000);
  3904  001C98  0E00               	movlw	0
  3905  001C9A  6E1B               	movwf	I2C_Master_Write@d+1,c
  3906  001C9C  0ED0               	movlw	208
  3907  001C9E  6E1A               	movwf	I2C_Master_Write@d,c
  3908  001CA0  EC14  F013         	call	_I2C_Master_Write	;wreg free
  3909                           
  3910                           ;picState.c: 147: I2C_Master_Write(0x00);
  3911  001CA4  0E00               	movlw	0
  3912  001CA6  6E1B               	movwf	I2C_Master_Write@d+1,c
  3913  001CA8  0E00               	movlw	0
  3914  001CAA  6E1A               	movwf	I2C_Master_Write@d,c
  3915  001CAC  EC14  F013         	call	_I2C_Master_Write	;wreg free
  3916                           
  3917                           ;picState.c: 148: I2C_Master_Stop();
  3918  001CB0  EC1E  F013         	call	_I2C_Master_Stop	;wreg free
  3919                           
  3920                           ;picState.c: 150: _delay((unsigned long)((990)*(8000000/4000.0)));
  3921  001CB4  0E0B               	movlw	11
  3922  001CB6  6E3C               	movwf	(??_display_time+1)& (0+255),c
  3923  001CB8  0E0C               	movlw	12
  3924  001CBA  6E3B               	movwf	??_display_time& (0+255),c
  3925  001CBC  0E64               	movlw	100
  3926  001CBE                     u4027:
  3927  001CBE  2EE8               	decfsz	wreg,f,c
  3928  001CC0  D7FE               	bra	u4027
  3929  001CC2  2E3B               	decfsz	??_display_time& (0+255),f,c
  3930  001CC4  D7FC               	bra	u4027
  3931  001CC6  2E3C               	decfsz	(??_display_time+1)& (0+255),f,c
  3932  001CC8  D7FA               	bra	u4027
  3933  001CCA  D000               	nop2	
  3934                           
  3935                           ;picState.c: 151: lcdInst(0b10000000);;
  3936  001CCC  0E80               	movlw	128
  3937  001CCE  EC02  F013         	call	_lcdInst
  3938  001CD2                     l3911:
  3939  001CD2  0458               	decf	_mode,w,c
  3940  001CD4  A4D8               	btfss	status,2,c
  3941  001CD6  0012               	return	
  3942  001CD8  D797               	goto	l3879
  3943  001CDA                     __end_of_display_time:
  3944                           	opt stack 0
  3945                           tblptru	equ	0xFF8
  3946                           prodh	equ	0xFF4
  3947                           prodl	equ	0xFF3
  3948                           intcon	equ	0xFF2
  3949                           intcon3	equ	0xFF0
  3950                           postinc0	equ	0xFEE
  3951                           wreg	equ	0xFE8
  3952                           indf1	equ	0xFE7
  3953                           fsr1h	equ	0xFE2
  3954                           fsr1l	equ	0xFE1
  3955                           indf2	equ	0xFDF
  3956                           fsr2h	equ	0xFDA
  3957                           fsr2l	equ	0xFD9
  3958                           status	equ	0xFD8
  3959                           
  3960 ;; *************** function _I2C_Master_Write *****************
  3961 ;; Defined at:
  3962 ;;		line 47 in file "I2C.c"
  3963 ;; Parameters:    Size  Location     Type
  3964 ;;  d               2   25[COMRAM] unsigned int 
  3965 ;; Auto vars:     Size  Location     Type
  3966 ;;		None
  3967 ;; Return value:  Size  Location     Type
  3968 ;;                  1    wreg      void 
  3969 ;; Registers used:
  3970 ;;		wreg, status,2, status,0, cstack
  3971 ;; Tracked objects:
  3972 ;;		On entry : 0/0
  3973 ;;		On exit  : 0/0
  3974 ;;		Unchanged: 0/0
  3975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3976 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3979 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3980 ;;Total ram usage:        2 bytes
  3981 ;; Hardware stack levels used:    1
  3982 ;; Hardware stack levels required when called:    5
  3983 ;; This function calls:
  3984 ;;		_I2C_Master_Wait
  3985 ;; This function is called by:
  3986 ;;		_display_time
  3987 ;;		_initPIC
  3988 ;;		_get_time
  3989 ;;		_set_time
  3990 ;; This function uses a non-reentrant model
  3991 ;;
  3992                           
  3993                           	psect	text16
  3994  002628                     __ptext16:
  3995                           	opt stack 0
  3996  002628                     _I2C_Master_Write:
  3997                           	opt stack 23
  3998                           
  3999                           ;I2C.c: 49: I2C_Master_Wait();
  4000                           
  4001                           ;incstack = 0
  4002  002628  ECEA  F012         	call	_I2C_Master_Wait	;wreg free
  4003                           
  4004                           ;I2C.c: 50: SSPBUF = d;
  4005  00262C  C01A  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  4006  002630  0012               	return		;funcret
  4007  002632                     __end_of_I2C_Master_Write:
  4008                           	opt stack 0
  4009                           tblptru	equ	0xFF8
  4010                           prodh	equ	0xFF4
  4011                           prodl	equ	0xFF3
  4012                           intcon	equ	0xFF2
  4013                           intcon3	equ	0xFF0
  4014                           postinc0	equ	0xFEE
  4015                           wreg	equ	0xFE8
  4016                           indf1	equ	0xFE7
  4017                           fsr1h	equ	0xFE2
  4018                           fsr1l	equ	0xFE1
  4019                           indf2	equ	0xFDF
  4020                           fsr2h	equ	0xFDA
  4021                           fsr2l	equ	0xFD9
  4022                           status	equ	0xFD8
  4023                           
  4024 ;; *************** function _I2C_Master_Stop *****************
  4025 ;; Defined at:
  4026 ;;		line 41 in file "I2C.c"
  4027 ;; Parameters:    Size  Location     Type
  4028 ;;		None
  4029 ;; Auto vars:     Size  Location     Type
  4030 ;;		None
  4031 ;; Return value:  Size  Location     Type
  4032 ;;                  1    wreg      void 
  4033 ;; Registers used:
  4034 ;;		wreg, status,2, status,0, cstack
  4035 ;; Tracked objects:
  4036 ;;		On entry : 0/0
  4037 ;;		On exit  : 0/0
  4038 ;;		Unchanged: 0/0
  4039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4043 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4044 ;;Total ram usage:        0 bytes
  4045 ;; Hardware stack levels used:    1
  4046 ;; Hardware stack levels required when called:    5
  4047 ;; This function calls:
  4048 ;;		_I2C_Master_Wait
  4049 ;; This function is called by:
  4050 ;;		_display_time
  4051 ;;		_initPIC
  4052 ;;		_get_time
  4053 ;;		_set_time
  4054 ;; This function uses a non-reentrant model
  4055 ;;
  4056                           
  4057                           	psect	text17
  4058  00263C                     __ptext17:
  4059                           	opt stack 0
  4060  00263C                     _I2C_Master_Stop:
  4061                           	opt stack 23
  4062                           
  4063                           ;I2C.c: 43: I2C_Master_Wait();
  4064                           
  4065                           ;incstack = 0
  4066  00263C  ECEA  F012         	call	_I2C_Master_Wait	;wreg free
  4067                           
  4068                           ;I2C.c: 44: PEN = 1;
  4069  002640  84C5               	bsf	4037,2,c	;volatile
  4070  002642  0012               	return		;funcret
  4071  002644                     __end_of_I2C_Master_Stop:
  4072                           	opt stack 0
  4073                           tblptru	equ	0xFF8
  4074                           prodh	equ	0xFF4
  4075                           prodl	equ	0xFF3
  4076                           intcon	equ	0xFF2
  4077                           intcon3	equ	0xFF0
  4078                           postinc0	equ	0xFEE
  4079                           wreg	equ	0xFE8
  4080                           indf1	equ	0xFE7
  4081                           fsr1h	equ	0xFE2
  4082                           fsr1l	equ	0xFE1
  4083                           indf2	equ	0xFDF
  4084                           fsr2h	equ	0xFDA
  4085                           fsr2l	equ	0xFD9
  4086                           status	equ	0xFD8
  4087                           
  4088 ;; *************** function _I2C_Master_Start *****************
  4089 ;; Defined at:
  4090 ;;		line 29 in file "I2C.c"
  4091 ;; Parameters:    Size  Location     Type
  4092 ;;		None
  4093 ;; Auto vars:     Size  Location     Type
  4094 ;;		None
  4095 ;; Return value:  Size  Location     Type
  4096 ;;                  1    wreg      void 
  4097 ;; Registers used:
  4098 ;;		wreg, status,2, status,0, cstack
  4099 ;; Tracked objects:
  4100 ;;		On entry : 0/0
  4101 ;;		On exit  : 0/0
  4102 ;;		Unchanged: 0/0
  4103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4107 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4108 ;;Total ram usage:        0 bytes
  4109 ;; Hardware stack levels used:    1
  4110 ;; Hardware stack levels required when called:    5
  4111 ;; This function calls:
  4112 ;;		_I2C_Master_Wait
  4113 ;; This function is called by:
  4114 ;;		_display_time
  4115 ;;		_initPIC
  4116 ;;		_get_time
  4117 ;;		_set_time
  4118 ;; This function uses a non-reentrant model
  4119 ;;
  4120                           
  4121                           	psect	text18
  4122  002644                     __ptext18:
  4123                           	opt stack 0
  4124  002644                     _I2C_Master_Start:
  4125                           	opt stack 23
  4126                           
  4127                           ;I2C.c: 31: I2C_Master_Wait();
  4128                           
  4129                           ;incstack = 0
  4130  002644  ECEA  F012         	call	_I2C_Master_Wait	;wreg free
  4131                           
  4132                           ;I2C.c: 32: SEN = 1;
  4133  002648  80C5               	bsf	4037,0,c	;volatile
  4134  00264A  0012               	return		;funcret
  4135  00264C                     __end_of_I2C_Master_Start:
  4136                           	opt stack 0
  4137                           tblptru	equ	0xFF8
  4138                           prodh	equ	0xFF4
  4139                           prodl	equ	0xFF3
  4140                           intcon	equ	0xFF2
  4141                           intcon3	equ	0xFF0
  4142                           postinc0	equ	0xFEE
  4143                           wreg	equ	0xFE8
  4144                           indf1	equ	0xFE7
  4145                           fsr1h	equ	0xFE2
  4146                           fsr1l	equ	0xFE1
  4147                           indf2	equ	0xFDF
  4148                           fsr2h	equ	0xFDA
  4149                           fsr2l	equ	0xFD9
  4150                           status	equ	0xFD8
  4151                           
  4152 ;; *************** function _I2C_Master_Read *****************
  4153 ;; Defined at:
  4154 ;;		line 53 in file "I2C.c"
  4155 ;; Parameters:    Size  Location     Type
  4156 ;;  a               1    wreg     unsigned char 
  4157 ;; Auto vars:     Size  Location     Type
  4158 ;;  a               1   25[COMRAM] unsigned char 
  4159 ;;  temp            1   26[COMRAM] unsigned char 
  4160 ;; Return value:  Size  Location     Type
  4161 ;;                  1    wreg      unsigned char 
  4162 ;; Registers used:
  4163 ;;		wreg, status,2, status,0, cstack
  4164 ;; Tracked objects:
  4165 ;;		On entry : 0/0
  4166 ;;		On exit  : 0/0
  4167 ;;		Unchanged: 0/0
  4168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4170 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4172 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4173 ;;Total ram usage:        2 bytes
  4174 ;; Hardware stack levels used:    1
  4175 ;; Hardware stack levels required when called:    5
  4176 ;; This function calls:
  4177 ;;		_I2C_Master_Wait
  4178 ;; This function is called by:
  4179 ;;		_display_time
  4180 ;;		_get_time
  4181 ;; This function uses a non-reentrant model
  4182 ;;
  4183                           
  4184                           	psect	text19
  4185  00252A                     __ptext19:
  4186                           	opt stack 0
  4187  00252A                     _I2C_Master_Read:
  4188                           	opt stack 23
  4189                           
  4190                           ;incstack = 0
  4191                           ;I2C_Master_Read@a stored from wreg
  4192  00252A  6E1A               	movwf	I2C_Master_Read@a,c
  4193                           
  4194                           ;I2C.c: 55: unsigned char temp;
  4195                           ;I2C.c: 56: I2C_Master_Wait();
  4196  00252C  ECEA  F012         	call	_I2C_Master_Wait	;wreg free
  4197                           
  4198                           ;I2C.c: 57: RCEN = 1;
  4199  002530  86C5               	bsf	4037,3,c	;volatile
  4200                           
  4201                           ;I2C.c: 58: I2C_Master_Wait();
  4202  002532  ECEA  F012         	call	_I2C_Master_Wait	;wreg free
  4203                           
  4204                           ;I2C.c: 59: temp = SSPBUF;
  4205  002536  CFC9 F01B          	movff	4041,I2C_Master_Read@temp	;volatile
  4206                           
  4207                           ;I2C.c: 60: I2C_Master_Wait();
  4208  00253A  ECEA  F012         	call	_I2C_Master_Wait	;wreg free
  4209                           
  4210                           ;I2C.c: 61: ACKDT = (a)?0:1;
  4211  00253E  501A               	movf	I2C_Master_Read@a,w,c
  4212  002540  A4D8               	btfss	status,2,c
  4213  002542  D002               	goto	u2630
  4214  002544  8AC5               	bsf	4037,5,c	;volatile
  4215  002546  D001               	goto	l3243
  4216  002548                     u2630:
  4217  002548  9AC5               	bcf	4037,5,c	;volatile
  4218  00254A                     l3243:
  4219                           
  4220                           ;I2C.c: 62: ACKEN = 1;
  4221  00254A  88C5               	bsf	4037,4,c	;volatile
  4222                           
  4223                           ;I2C.c: 63: return temp;
  4224  00254C  501B               	movf	I2C_Master_Read@temp,w,c
  4225  00254E  0012               	return	
  4226  002550                     __end_of_I2C_Master_Read:
  4227                           	opt stack 0
  4228                           tblptru	equ	0xFF8
  4229                           prodh	equ	0xFF4
  4230                           prodl	equ	0xFF3
  4231                           intcon	equ	0xFF2
  4232                           intcon3	equ	0xFF0
  4233                           postinc0	equ	0xFEE
  4234                           wreg	equ	0xFE8
  4235                           indf1	equ	0xFE7
  4236                           fsr1h	equ	0xFE2
  4237                           fsr1l	equ	0xFE1
  4238                           indf2	equ	0xFDF
  4239                           fsr2h	equ	0xFDA
  4240                           fsr2l	equ	0xFD9
  4241                           status	equ	0xFD8
  4242                           
  4243 ;; *************** function _I2C_Master_Wait *****************
  4244 ;; Defined at:
  4245 ;;		line 24 in file "I2C.c"
  4246 ;; Parameters:    Size  Location     Type
  4247 ;;		None
  4248 ;; Auto vars:     Size  Location     Type
  4249 ;;		None
  4250 ;; Return value:  Size  Location     Type
  4251 ;;                  1    wreg      void 
  4252 ;; Registers used:
  4253 ;;		wreg, status,2, status,0
  4254 ;; Tracked objects:
  4255 ;;		On entry : 0/0
  4256 ;;		On exit  : 0/0
  4257 ;;		Unchanged: 0/0
  4258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4261 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4262 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4263 ;;Total ram usage:        1 bytes
  4264 ;; Hardware stack levels used:    1
  4265 ;; Hardware stack levels required when called:    4
  4266 ;; This function calls:
  4267 ;;		Nothing
  4268 ;; This function is called by:
  4269 ;;		_I2C_Master_Start
  4270 ;;		_I2C_Master_Stop
  4271 ;;		_I2C_Master_Write
  4272 ;;		_I2C_Master_Read
  4273 ;;		_I2C_Master_RepeatedStart
  4274 ;; This function uses a non-reentrant model
  4275 ;;
  4276                           
  4277                           	psect	text20
  4278  0025D4                     __ptext20:
  4279                           	opt stack 0
  4280  0025D4                     _I2C_Master_Wait:
  4281                           	opt stack 23
  4282  0025D4                     l34:
  4283  0025D4  B4C7               	btfsc	4039,2,c	;volatile
  4284  0025D6  D7FE               	goto	l34
  4285  0025D8  CFC5 F019          	movff	4037,??_I2C_Master_Wait	;volatile
  4286  0025DC  0E1F               	movlw	31
  4287  0025DE  1619               	andwf	??_I2C_Master_Wait,f,c
  4288  0025E0  B4D8               	btfsc	status,2,c
  4289  0025E2  0012               	return	
  4290  0025E4  D7F7               	goto	l34
  4291  0025E6                     __end_of_I2C_Master_Wait:
  4292                           	opt stack 0
  4293                           tblptru	equ	0xFF8
  4294                           prodh	equ	0xFF4
  4295                           prodl	equ	0xFF3
  4296                           intcon	equ	0xFF2
  4297                           intcon3	equ	0xFF0
  4298                           postinc0	equ	0xFEE
  4299                           wreg	equ	0xFE8
  4300                           indf1	equ	0xFE7
  4301                           fsr1h	equ	0xFE2
  4302                           fsr1l	equ	0xFE1
  4303                           indf2	equ	0xFDF
  4304                           fsr2h	equ	0xFDA
  4305                           fsr2l	equ	0xFD9
  4306                           status	equ	0xFD8
  4307                           
  4308 ;; *************** function _display_sorting_time *****************
  4309 ;; Defined at:
  4310 ;;		line 156 in file "picState.c"
  4311 ;; Parameters:    Size  Location     Type
  4312 ;;		None
  4313 ;; Auto vars:     Size  Location     Type
  4314 ;;  i               2   60[COMRAM] int 
  4315 ;; Return value:  Size  Location     Type
  4316 ;;                  2   92[None  ] int 
  4317 ;; Registers used:
  4318 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4319 ;; Tracked objects:
  4320 ;;		On entry : 0/0
  4321 ;;		On exit  : 0/0
  4322 ;;		Unchanged: 0/0
  4323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4325 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4326 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4327 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4328 ;;Total ram usage:        4 bytes
  4329 ;; Hardware stack levels used:    1
  4330 ;; Hardware stack levels required when called:    7
  4331 ;; This function calls:
  4332 ;;		_lcdInst
  4333 ;;		_printf
  4334 ;; This function is called by:
  4335 ;;		_main
  4336 ;; This function uses a non-reentrant model
  4337 ;;
  4338                           
  4339                           	psect	text21
  4340  00224A                     __ptext21:
  4341                           	opt stack 0
  4342  00224A                     _display_sorting_time:
  4343                           	opt stack 23
  4344                           
  4345                           ;picState.c: 157: lcdInst(0x01);;
  4346                           
  4347                           ;incstack = 0
  4348  00224A  0E01               	movlw	1
  4349  00224C  EC02  F013         	call	_lcdInst
  4350                           
  4351                           ;picState.c: 158: _delay((unsigned long)((10)*(8000000/4000.0)));
  4352  002250  0E1A               	movlw	26
  4353  002252  6E3B               	movwf	??_display_sorting_time& (0+255),c
  4354  002254  0EF8               	movlw	248
  4355  002256                     u4037:
  4356  002256  2EE8               	decfsz	wreg,f,c
  4357  002258  D7FE               	bra	u4037
  4358  00225A  2E3B               	decfsz	??_display_sorting_time& (0+255),f,c
  4359  00225C  D7FC               	bra	u4037
  4360  00225E  D000               	nop2	
  4361                           
  4362                           ;picState.c: 159: LATCbits.LATC1 = 0;
  4363  002260  928B               	bcf	3979,1,c	;volatile
  4364                           
  4365                           ;picState.c: 160: int i = passed_time;
  4366  002262  C057  F03D         	movff	_passed_time,display_sorting_time@i
  4367  002266  6A3E               	clrf	display_sorting_time@i+1,c
  4368                           
  4369                           ;picState.c: 161: printf("Time used: %d s", i);
  4370  002268  0E75               	movlw	low STR_14
  4371  00226A  6E25               	movwf	printf@f,c
  4372  00226C  0E10               	movlw	high STR_14
  4373  00226E  6E26               	movwf	printf@f+1,c
  4374  002270  C03D  F027         	movff	display_sorting_time@i,?_printf+2
  4375  002274  C03E  F028         	movff	display_sorting_time@i+1,?_printf+3
  4376  002278  EC6B  F008         	call	_printf	;wreg free
  4377                           
  4378                           ;picState.c: 162: lcdInst(0b11000000);;
  4379  00227C  0EC0               	movlw	192
  4380  00227E  EC02  F013         	call	_lcdInst
  4381                           
  4382                           ;picState.c: 163: _delay((unsigned long)((500)*(8000000/4000.0)));
  4383  002282  0E06               	movlw	6
  4384  002284  6E3C               	movwf	(??_display_sorting_time+1)& (0+255),c
  4385  002286  0E13               	movlw	19
  4386  002288  6E3B               	movwf	??_display_sorting_time& (0+255),c
  4387  00228A  0EAE               	movlw	174
  4388  00228C                     u4047:
  4389  00228C  2EE8               	decfsz	wreg,f,c
  4390  00228E  D7FE               	bra	u4047
  4391  002290  2E3B               	decfsz	??_display_sorting_time& (0+255),f,c
  4392  002292  D7FC               	bra	u4047
  4393  002294  2E3C               	decfsz	(??_display_sorting_time+1)& (0+255),f,c
  4394  002296  D7FA               	bra	u4047
  4395                           
  4396                           ;picState.c: 164: flag = 0;
  4397  002298  0E00               	movlw	0
  4398  00229A  6E56               	movwf	_flag+1,c
  4399  00229C  0E00               	movlw	0
  4400  00229E  6E55               	movwf	_flag,c
  4401                           
  4402                           ;picState.c: 165: LATDbits.LATD0 = 0;
  4403  0022A0  908C               	bcf	3980,0,c	;volatile
  4404  0022A2  0012               	return		;funcret
  4405  0022A4                     __end_of_display_sorting_time:
  4406                           	opt stack 0
  4407                           tblptru	equ	0xFF8
  4408                           prodh	equ	0xFF4
  4409                           prodl	equ	0xFF3
  4410                           intcon	equ	0xFF2
  4411                           intcon3	equ	0xFF0
  4412                           postinc0	equ	0xFEE
  4413                           wreg	equ	0xFE8
  4414                           indf1	equ	0xFE7
  4415                           fsr1h	equ	0xFE2
  4416                           fsr1l	equ	0xFE1
  4417                           indf2	equ	0xFDF
  4418                           fsr2h	equ	0xFDA
  4419                           fsr2l	equ	0xFD9
  4420                           status	equ	0xFD8
  4421                           
  4422 ;; *************** function _debug *****************
  4423 ;; Defined at:
  4424 ;;		line 42 in file "picState.c"
  4425 ;; Parameters:    Size  Location     Type
  4426 ;;		None
  4427 ;; Auto vars:     Size  Location     Type
  4428 ;;  i               2   59[COMRAM] int 
  4429 ;; Return value:  Size  Location     Type
  4430 ;;                  2   94[None  ] int 
  4431 ;; Registers used:
  4432 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4433 ;; Tracked objects:
  4434 ;;		On entry : 0/0
  4435 ;;		On exit  : 0/0
  4436 ;;		Unchanged: 0/0
  4437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4439 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4440 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4441 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4442 ;;Total ram usage:        3 bytes
  4443 ;; Hardware stack levels used:    1
  4444 ;; Hardware stack levels required when called:    7
  4445 ;; This function calls:
  4446 ;;		_lcdInst
  4447 ;;		_printf
  4448 ;;		_readADC
  4449 ;; This function is called by:
  4450 ;;		_main
  4451 ;; This function uses a non-reentrant model
  4452 ;;
  4453                           
  4454                           	psect	text22
  4455  0024C2                     __ptext22:
  4456                           	opt stack 0
  4457  0024C2                     _debug:
  4458                           	opt stack 23
  4459                           
  4460                           ;picState.c: 49: int i = 0;
  4461                           
  4462                           ;incstack = 0
  4463  0024C2  0E00               	movlw	0
  4464  0024C4  6E3D               	movwf	debug@i+1,c
  4465  0024C6  0E00               	movlw	0
  4466  0024C8  6E3C               	movwf	debug@i,c
  4467  0024CA                     l3975:
  4468                           
  4469                           ;picState.c: 51: lcdInst(0b10000000);;
  4470  0024CA  0E80               	movlw	128
  4471  0024CC  EC02  F013         	call	_lcdInst
  4472                           
  4473                           ;picState.c: 52: readADC(2);
  4474  0024D0  0E02               	movlw	2
  4475  0024D2  EC81  F012         	call	_readADC
  4476                           
  4477                           ;picState.c: 53: printf("%x %x", ADRESH,ADRESL);
  4478  0024D6  0ECC               	movlw	low STR_8
  4479  0024D8  6E25               	movwf	printf@f,c
  4480  0024DA  0E10               	movlw	high STR_8
  4481  0024DC  6E26               	movwf	printf@f+1,c
  4482  0024DE  CFC4 F027          	movff	4036,?_printf+2	;volatile
  4483  0024E2  6A28               	clrf	?_printf+3,c
  4484  0024E4  CFC3 F029          	movff	4035,?_printf+4	;volatile
  4485  0024E8  6A2A               	clrf	?_printf+5,c
  4486  0024EA  EC6B  F008         	call	_printf	;wreg free
  4487                           
  4488                           ;picState.c: 54: _delay((unsigned long)((50)*(8000000/4000.0)));
  4489  0024EE  0E82               	movlw	130
  4490  0024F0  6E3B               	movwf	??_debug& (0+255),c
  4491  0024F2  0EDE               	movlw	222
  4492  0024F4                     u4057:
  4493  0024F4  2EE8               	decfsz	wreg,f,c
  4494  0024F6  D7FE               	bra	u4057
  4495  0024F8  2E3B               	decfsz	??_debug& (0+255),f,c
  4496  0024FA  D7FC               	bra	u4057
  4497                           
  4498                           ;picState.c: 55: i++;
  4499  0024FC  4A3C               	infsnz	debug@i,f,c
  4500  0024FE  2A3D               	incf	debug@i+1,f,c
  4501  002500  D7E4               	goto	l3975
  4502  002502                     __end_of_debug:
  4503                           	opt stack 0
  4504                           tblptru	equ	0xFF8
  4505                           prodh	equ	0xFF4
  4506                           prodl	equ	0xFF3
  4507                           intcon	equ	0xFF2
  4508                           intcon3	equ	0xFF0
  4509                           postinc0	equ	0xFEE
  4510                           wreg	equ	0xFE8
  4511                           indf1	equ	0xFE7
  4512                           fsr1h	equ	0xFE2
  4513                           fsr1l	equ	0xFE1
  4514                           indf2	equ	0xFDF
  4515                           fsr2h	equ	0xFDA
  4516                           fsr2l	equ	0xFD9
  4517                           status	equ	0xFD8
  4518                           
  4519 ;; *************** function _readADC *****************
  4520 ;; Defined at:
  4521 ;;		line 21 in file "adc.c"
  4522 ;; Parameters:    Size  Location     Type
  4523 ;;  channel         1    wreg     unsigned char 
  4524 ;; Auto vars:     Size  Location     Type
  4525 ;;  channel         1   25[COMRAM] unsigned char 
  4526 ;; Return value:  Size  Location     Type
  4527 ;;                  1    wreg      void 
  4528 ;; Registers used:
  4529 ;;		wreg, status,2, status,0
  4530 ;; Tracked objects:
  4531 ;;		On entry : 0/0
  4532 ;;		On exit  : 0/0
  4533 ;;		Unchanged: 0/0
  4534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4536 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4537 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4538 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4539 ;;Total ram usage:        2 bytes
  4540 ;; Hardware stack levels used:    1
  4541 ;; Hardware stack levels required when called:    4
  4542 ;; This function calls:
  4543 ;;		Nothing
  4544 ;; This function is called by:
  4545 ;;		_sense_can
  4546 ;;		_readLightSensor
  4547 ;;		_debug
  4548 ;; This function uses a non-reentrant model
  4549 ;;
  4550                           
  4551                           	psect	text23
  4552  002502                     __ptext23:
  4553                           	opt stack 0
  4554  002502                     _readADC:
  4555                           	opt stack 24
  4556                           
  4557                           ;incstack = 0
  4558                           ;readADC@channel stored from wreg
  4559  002502  6E1A               	movwf	readADC@channel,c
  4560                           
  4561                           ;adc.c: 22: ADCON0 = 0x00;
  4562  002504  0E00               	movlw	0
  4563  002506  6EC2               	movwf	4034,c	;volatile
  4564                           
  4565                           ;adc.c: 23: ADCON0 = (ADCON0 & 0X3C)|((channel & 0x0F)<<2);
  4566  002508  C01A  F019         	movff	readADC@channel,??_readADC
  4567  00250C  0E0F               	movlw	15
  4568  00250E  1619               	andwf	??_readADC,f,c
  4569  002510  90D8               	bcf	status,0,c
  4570  002512  3619               	rlcf	??_readADC,f,c
  4571  002514  90D8               	bcf	status,0,c
  4572  002516  3619               	rlcf	??_readADC,f,c
  4573  002518  50C2               	movf	4034,w,c	;volatile
  4574  00251A  0B3C               	andlw	60
  4575  00251C  1019               	iorwf	??_readADC,w,c
  4576  00251E  6EC2               	movwf	4034,c	;volatile
  4577                           
  4578                           ;adc.c: 24: ADON = 1;
  4579  002520  80C2               	bsf	4034,0,c	;volatile
  4580                           
  4581                           ;adc.c: 25: ADCON0bits.GO = 1;
  4582  002522  82C2               	bsf	4034,1,c	;volatile
  4583  002524                     l134:
  4584  002524  A2C2               	btfss	4034,1,c	;volatile
  4585  002526  0012               	return	
  4586  002528  D7FD               	goto	l134
  4587  00252A                     __end_of_readADC:
  4588                           	opt stack 0
  4589                           tblptru	equ	0xFF8
  4590                           prodh	equ	0xFF4
  4591                           prodl	equ	0xFF3
  4592                           intcon	equ	0xFF2
  4593                           intcon3	equ	0xFF0
  4594                           postinc0	equ	0xFEE
  4595                           wreg	equ	0xFE8
  4596                           indf1	equ	0xFE7
  4597                           fsr1h	equ	0xFE2
  4598                           fsr1l	equ	0xFE1
  4599                           indf2	equ	0xFDF
  4600                           fsr2h	equ	0xFDA
  4601                           fsr2l	equ	0xFD9
  4602                           status	equ	0xFD8
  4603                           
  4604 ;; *************** function _printf *****************
  4605 ;; Defined at:
  4606 ;;		line 464 in file "/Applications/microchip/xc8/v1.41/sources/common/doprnt.c"
  4607 ;; Parameters:    Size  Location     Type
  4608 ;;  f               2   36[COMRAM] PTR const unsigned char 
  4609 ;;		 -> STR_14(16), STR_13(15), STR_12(15), STR_11(3), 
  4610 ;;		 -> STR_10(20), STR_9(16), STR_8(6), STR_7(10), 
  4611 ;;		 -> STR_6(15), STR_5(7), STR_4(21), STR_3(13), 
  4612 ;;		 -> STR_2(9), STR_1(3), 
  4613 ;; Auto vars:     Size  Location     Type
  4614 ;;  idx             1   48[COMRAM] unsigned char 
  4615 ;;  tmpval          4    0        struct .
  4616 ;;  cp              3    0        PTR const unsigned char 
  4617 ;;  width           2   55[COMRAM] int 
  4618 ;;  val             2   52[COMRAM] unsigned int 
  4619 ;;  ap              2   49[COMRAM] PTR void [1]
  4620 ;;		 -> ?_printf(2), 
  4621 ;;  len             2    0        unsigned int 
  4622 ;;  c               1   57[COMRAM] char 
  4623 ;;  flag            1   54[COMRAM] unsigned char 
  4624 ;;  prec            1   51[COMRAM] char 
  4625 ;; Return value:  Size  Location     Type
  4626 ;;                  2   36[COMRAM] int 
  4627 ;; Registers used:
  4628 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4629 ;; Tracked objects:
  4630 ;;		On entry : 0/0
  4631 ;;		On exit  : 0/0
  4632 ;;		Unchanged: 0/0
  4633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4634 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4635 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4636 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4637 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4638 ;;Total ram usage:       22 bytes
  4639 ;; Hardware stack levels used:    1
  4640 ;; Hardware stack levels required when called:    6
  4641 ;; This function calls:
  4642 ;;		___lwdiv
  4643 ;;		___lwmod
  4644 ;;		___wmul
  4645 ;;		_isdigit
  4646 ;;		_putch
  4647 ;; This function is called by:
  4648 ;;		_readLightSensor
  4649 ;;		_welcome
  4650 ;;		_debug
  4651 ;;		_sort
  4652 ;;		_display_time
  4653 ;;		_display_sorting_time
  4654 ;; This function uses a non-reentrant model
  4655 ;;
  4656                           
  4657                           	psect	text24
  4658  0010D6                     __ptext24:
  4659                           	opt stack 0
  4660  0010D6                     _printf:
  4661                           	opt stack 23
  4662                           
  4663                           ;doprnt.c: 466: va_list ap;
  4664                           ;doprnt.c: 499: signed char c;
  4665                           ;doprnt.c: 501: int width;
  4666                           ;doprnt.c: 506: signed char prec;
  4667                           ;doprnt.c: 508: unsigned char flag;
  4668                           ;doprnt.c: 523: union {
  4669                           ;doprnt.c: 524: unsigned long vd;
  4670                           ;doprnt.c: 525: double integ;
  4671                           ;doprnt.c: 526: } tmpval;
  4672                           ;doprnt.c: 528: unsigned int val;
  4673                           ;doprnt.c: 529: unsigned len;
  4674                           ;doprnt.c: 530: const char * cp;
  4675                           ;doprnt.c: 533: *ap = __va_start();
  4676                           
  4677                           ;incstack = 0
  4678  0010D6  0E27               	movlw	low (?_printf+2)
  4679  0010D8  6E32               	movwf	printf@ap,c
  4680  0010DA  0E00               	movlw	high (?_printf+2)
  4681  0010DC  6E33               	movwf	printf@ap+1,c
  4682                           
  4683                           ;doprnt.c: 536: while(c = *f++) {
  4684  0010DE  D174               	goto	l3473
  4685  0010E0                     l3347:
  4686                           
  4687                           ;doprnt.c: 538: if(c != '%')
  4688  0010E0  0E25               	movlw	37
  4689  0010E2  183A               	xorwf	printf@c,w,c
  4690  0010E4  B4D8               	btfsc	status,2,c
  4691  0010E6  D004               	goto	l3351
  4692                           
  4693                           ;doprnt.c: 540: {
  4694                           ;doprnt.c: 541: (putch(c) );
  4695  0010E8  503A               	movf	printf@c,w,c
  4696  0010EA  ECFC  F012         	call	_putch
  4697                           
  4698                           ;doprnt.c: 542: continue;
  4699  0010EE  D16C               	goto	l3473
  4700  0010F0                     l3351:
  4701                           
  4702                           ;doprnt.c: 543: }
  4703                           ;doprnt.c: 546: width = 0;
  4704  0010F0  0E00               	movlw	0
  4705  0010F2  6E39               	movwf	printf@width+1,c
  4706  0010F4  0E00               	movlw	0
  4707  0010F6  6E38               	movwf	printf@width,c
  4708                           
  4709                           ;doprnt.c: 548: flag = 0;
  4710  0010F8  0E00               	movlw	0
  4711  0010FA  6E37               	movwf	printf@flag,c
  4712                           
  4713                           ;doprnt.c: 551: switch(*f) {
  4714                           
  4715                           ;doprnt.c: 550: for(;;) {
  4716  0010FC  D003               	goto	l3357
  4717  0010FE                     l3353:
  4718                           
  4719                           ;doprnt.c: 580: flag |= 0x04;
  4720  0010FE  8437               	bsf	printf@flag,2,c
  4721                           
  4722                           ;doprnt.c: 581: f++;
  4723  001100  4A25               	infsnz	printf@f,f,c
  4724  001102  2A26               	incf	printf@f+1,f,c
  4725  001104                     l3357:
  4726  001104  C025  FFF6         	movff	printf@f,tblptrl
  4727  001108  C026  FFF7         	movff	printf@f+1,tblptrh
  4728  00110C                     	if	0	;tblptru may be non-zero
  4729  00110C                     	endif
  4730  00110C                     	if	0	;tblptru may be non-zero
  4731  00110C                     	endif
  4732  00110C  0008               	tblrd		*
  4733  00110E  50F5               	movf	tablat,w,c
  4734                           
  4735                           ; Switch size 1, requested type "space"
  4736                           ; Number of cases is 1, Range of values is 48 to 48
  4737                           ; switch strategies available:
  4738                           ; Name         Instructions Cycles
  4739                           ; simple_byte            4     3 (average)
  4740                           ;	Chosen strategy is simple_byte
  4741  001110  0A30               	xorlw	48	; case 48
  4742  001112  B4D8               	btfsc	status,2,c
  4743  001114  D7F4               	goto	l3353
  4744                           
  4745                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4746                           
  4747                           ;doprnt.c: 586: }
  4748                           
  4749                           ;doprnt.c: 585: break;
  4750  001116  C025  FFF6         	movff	printf@f,tblptrl
  4751  00111A  C026  FFF7         	movff	printf@f+1,tblptrh
  4752  00111E                     	if	0	;tblptru may be non-zero
  4753  00111E                     	endif
  4754  00111E                     	if	0	;tblptru may be non-zero
  4755  00111E                     	endif
  4756  00111E  0008               	tblrd		*
  4757  001120  50F5               	movf	tablat,w,c
  4758  001122  ECCE  F012         	call	_isdigit
  4759  001126  A0D8               	btfss	status,0,c
  4760  001128  D035               	goto	l3375
  4761                           
  4762                           ;doprnt.c: 598: width = 0;
  4763  00112A  0E00               	movlw	0
  4764  00112C  6E39               	movwf	printf@width+1,c
  4765  00112E  0E00               	movlw	0
  4766  001130  6E38               	movwf	printf@width,c
  4767  001132                     l3363:
  4768                           
  4769                           ;doprnt.c: 600: width *= 10;
  4770  001132  C038  F019         	movff	printf@width,___wmul@multiplier
  4771  001136  C039  F01A         	movff	printf@width+1,___wmul@multiplier+1
  4772  00113A  0E00               	movlw	0
  4773  00113C  6E1C               	movwf	___wmul@multiplicand+1,c
  4774  00113E  0E0A               	movlw	10
  4775  001140  6E1B               	movwf	___wmul@multiplicand,c
  4776  001142  ECA8  F012         	call	___wmul	;wreg free
  4777  001146  C019  F038         	movff	?___wmul,printf@width
  4778  00114A  C01A  F039         	movff	?___wmul+1,printf@width+1
  4779                           
  4780                           ;doprnt.c: 601: width += *f++ - '0';
  4781  00114E  0ED0               	movlw	208
  4782  001150  6E2D               	movwf	??_printf& (0+255),c
  4783  001152  0EFF               	movlw	255
  4784  001154  6E2E               	movwf	(??_printf+1)& (0+255),c
  4785  001156  C025  FFF6         	movff	printf@f,tblptrl
  4786  00115A  C026  FFF7         	movff	printf@f+1,tblptrh
  4787  00115E                     	if	0	;tblptru may be non-zero
  4788  00115E                     	endif
  4789  00115E                     	if	0	;tblptru may be non-zero
  4790  00115E                     	endif
  4791  00115E  0008               	tblrd		*
  4792  001160  50F5               	movf	tablat,w,c
  4793  001162  6E2F               	movwf	(??_printf+2)& (0+255),c
  4794  001164  6A30               	clrf	(??_printf+3)& (0+255),c
  4795  001166  502D               	movf	??_printf,w,c
  4796  001168  262F               	addwf	??_printf+2,f,c
  4797  00116A  502E               	movf	??_printf+1,w,c
  4798  00116C  2230               	addwfc	??_printf+3,f,c
  4799  00116E  502F               	movf	??_printf+2,w,c
  4800  001170  2638               	addwf	printf@width,f,c
  4801  001172  5030               	movf	??_printf+3,w,c
  4802  001174  2239               	addwfc	printf@width+1,f,c
  4803  001176  4A25               	infsnz	printf@f,f,c
  4804  001178  2A26               	incf	printf@f+1,f,c
  4805                           
  4806                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4807  00117A  C025  FFF6         	movff	printf@f,tblptrl
  4808  00117E  C026  FFF7         	movff	printf@f+1,tblptrh
  4809  001182                     	if	0	;tblptru may be non-zero
  4810  001182                     	endif
  4811  001182                     	if	0	;tblptru may be non-zero
  4812  001182                     	endif
  4813  001182  0008               	tblrd		*
  4814  001184  50F5               	movf	tablat,w,c
  4815  001186  ECCE  F012         	call	_isdigit
  4816  00118A  A0D8               	btfss	status,0,c
  4817  00118C  D003               	goto	l3375
  4818  00118E  D7D1               	goto	l3363
  4819  001190                     l3371:
  4820                           
  4821                           ;doprnt.c: 721: flag |= 0x80;
  4822  001190  8E37               	bsf	printf@flag,7,c
  4823                           
  4824                           ;doprnt.c: 723: break;
  4825  001192  D017               	goto	l503
  4826  001194                     l3375:
  4827  001194  C025  FFF6         	movff	printf@f,tblptrl
  4828  001198  C026  FFF7         	movff	printf@f+1,tblptrh
  4829  00119C  4A25               	infsnz	printf@f,f,c
  4830  00119E  2A26               	incf	printf@f+1,f,c
  4831  0011A0                     	if	0	;tblptru may be non-zero
  4832  0011A0                     	endif
  4833  0011A0                     	if	0	;tblptru may be non-zero
  4834  0011A0                     	endif
  4835  0011A0  0008               	tblrd		*
  4836  0011A2  CFF5 F03A          	movff	tablat,printf@c
  4837  0011A6  503A               	movf	printf@c,w,c
  4838                           
  4839                           ; Switch size 1, requested type "space"
  4840                           ; Number of cases is 4, Range of values is 0 to 120
  4841                           ; switch strategies available:
  4842                           ; Name         Instructions Cycles
  4843                           ; simple_byte           13     7 (average)
  4844                           ;	Chosen strategy is simple_byte
  4845  0011A8  0A00               	xorlw	0	; case 0
  4846  0011AA  B4D8               	btfsc	status,2,c
  4847  0011AC  0012               	return	
  4848  0011AE  0A64               	xorlw	100	; case 100
  4849  0011B0  B4D8               	btfsc	status,2,c
  4850  0011B2  D007               	goto	l503
  4851  0011B4  0A0D               	xorlw	13	; case 105
  4852  0011B6  B4D8               	btfsc	status,2,c
  4853  0011B8  D004               	goto	l503
  4854  0011BA  0A11               	xorlw	17	; case 120
  4855  0011BC  B4D8               	btfsc	status,2,c
  4856  0011BE  D7E8               	goto	l3371
  4857  0011C0  D103               	goto	l3473
  4858  0011C2                     l503:
  4859                           
  4860                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  4861  0011C2  BE37               	btfsc	printf@flag,7,c
  4862  0011C4  D015               	goto	l3387
  4863                           
  4864                           ;doprnt.c: 1253: {
  4865                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4866  0011C6  C032  FFD9         	movff	printf@ap,fsr2l
  4867  0011CA  C033  FFDA         	movff	printf@ap+1,fsr2h
  4868  0011CE  CFDE F035          	movff	postinc2,printf@val
  4869  0011D2  CFDD F036          	movff	postdec2,printf@val+1
  4870  0011D6  0E02               	movlw	2
  4871  0011D8  2632               	addwf	printf@ap,f,c
  4872  0011DA  0E00               	movlw	0
  4873  0011DC  2233               	addwfc	printf@ap+1,f,c
  4874                           
  4875                           ;doprnt.c: 1261: if((int)val < 0) {
  4876  0011DE  AE36               	btfss	printf@val+1,7,c
  4877  0011E0  D044               	goto	l3421
  4878                           
  4879                           ;doprnt.c: 1262: flag |= 0x03;
  4880  0011E2  0E03               	movlw	3
  4881  0011E4  1237               	iorwf	printf@flag,f,c
  4882                           
  4883                           ;doprnt.c: 1263: val = -val;
  4884  0011E6  6C35               	negf	printf@val,c
  4885  0011E8  1E36               	comf	printf@val+1,f,c
  4886  0011EA  B0D8               	btfsc	status,0,c
  4887  0011EC  2A36               	incf	printf@val+1,f,c
  4888                           
  4889                           ;doprnt.c: 1264: }
  4890                           ;doprnt.c: 1266: }
  4891  0011EE  D03D               	goto	l3421
  4892  0011F0                     l3387:
  4893                           
  4894                           ;doprnt.c: 1268: else
  4895                           ;doprnt.c: 1273: {
  4896                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4897  0011F0  C032  FFD9         	movff	printf@ap,fsr2l
  4898  0011F4  C033  FFDA         	movff	printf@ap+1,fsr2h
  4899  0011F8  CFDE F035          	movff	postinc2,printf@val
  4900  0011FC  CFDD F036          	movff	postdec2,printf@val+1
  4901  001200  0E02               	movlw	2
  4902  001202  2632               	addwf	printf@ap,f,c
  4903  001204  0E00               	movlw	0
  4904  001206  2233               	addwfc	printf@ap+1,f,c
  4905                           
  4906                           ;doprnt.c: 1287: }
  4907                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  4908  001208  D030               	goto	l3421
  4909  00120A                     l3391:
  4910                           
  4911                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4912  00120A  0E01               	movlw	1
  4913  00120C  6E3A               	movwf	printf@c,c
  4914  00120E                     l3393:
  4915  00120E  0E05               	movlw	5
  4916  001210  183A               	xorwf	printf@c,w,c
  4917  001212  B4D8               	btfsc	status,2,c
  4918  001214  D032               	goto	l3423
  4919                           
  4920                           ;doprnt.c: 1306: if(val < dpowers[c])
  4921  001216  503A               	movf	printf@c,w,c
  4922  001218  0D02               	mullw	2
  4923  00121A  0E12               	movlw	low _dpowers
  4924  00121C  24F3               	addwf	prodl,w,c
  4925  00121E  6EF6               	movwf	tblptrl,c
  4926  001220  0E10               	movlw	high _dpowers
  4927  001222  20F4               	addwfc	prodh,w,c
  4928  001224  6EF7               	movwf	tblptrh,c
  4929  001226                     	if	0	;There are less than 3 active tblptr bytes
  4930  001226                     	endif
  4931  001226  0009               	tblrd		*+
  4932  001228  50F5               	movf	tablat,w,c
  4933  00122A  5C35               	subwf	printf@val,w,c
  4934  00122C  0009               	tblrd		*+
  4935  00122E  50F5               	movf	tablat,w,c
  4936  001230  5836               	subwfb	printf@val+1,w,c
  4937  001232  A0D8               	btfss	status,0,c
  4938  001234  D022               	goto	l3423
  4939                           
  4940                           ;doprnt.c: 1307: break;
  4941  001236  2A3A               	incf	printf@c,f,c
  4942  001238  D7EA               	goto	l3393
  4943  00123A                     l3405:
  4944                           
  4945                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4946  00123A  0E01               	movlw	1
  4947  00123C  6E3A               	movwf	printf@c,c
  4948  00123E                     l3407:
  4949  00123E  0E04               	movlw	4
  4950  001240  183A               	xorwf	printf@c,w,c
  4951  001242  B4D8               	btfsc	status,2,c
  4952  001244  D01A               	goto	l3423
  4953                           
  4954                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4955  001246  503A               	movf	printf@c,w,c
  4956  001248  0D02               	mullw	2
  4957  00124A  0E1C               	movlw	low _hexpowers
  4958  00124C  24F3               	addwf	prodl,w,c
  4959  00124E  6EF6               	movwf	tblptrl,c
  4960  001250  0E10               	movlw	high _hexpowers
  4961  001252  20F4               	addwfc	prodh,w,c
  4962  001254  6EF7               	movwf	tblptrh,c
  4963  001256                     	if	0	;There are less than 3 active tblptr bytes
  4964  001256                     	endif
  4965  001256  0009               	tblrd		*+
  4966  001258  50F5               	movf	tablat,w,c
  4967  00125A  5C35               	subwf	printf@val,w,c
  4968  00125C  0009               	tblrd		*+
  4969  00125E  50F5               	movf	tablat,w,c
  4970  001260  5836               	subwfb	printf@val+1,w,c
  4971  001262  A0D8               	btfss	status,0,c
  4972  001264  D00A               	goto	l3423
  4973                           
  4974                           ;doprnt.c: 1318: break;
  4975  001266  2A3A               	incf	printf@c,f,c
  4976  001268  D7EA               	goto	l3407
  4977  00126A                     l3421:
  4978  00126A  5037               	movf	printf@flag,w,c
  4979  00126C  0B80               	andlw	128
  4980                           
  4981                           ; Switch size 1, requested type "space"
  4982                           ; Number of cases is 2, Range of values is 0 to 128
  4983                           ; switch strategies available:
  4984                           ; Name         Instructions Cycles
  4985                           ; simple_byte            7     4 (average)
  4986                           ;	Chosen strategy is simple_byte
  4987  00126E  0A00               	xorlw	0	; case 0
  4988  001270  B4D8               	btfsc	status,2,c
  4989  001272  D7CB               	goto	l3391
  4990  001274  0A80               	xorlw	128	; case 128
  4991  001276  B4D8               	btfsc	status,2,c
  4992  001278  D7E0               	goto	l3405
  4993  00127A                     l3423:
  4994                           
  4995                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4996  00127A  5038               	movf	printf@width,w,c
  4997  00127C  1039               	iorwf	printf@width+1,w,c
  4998  00127E  B4D8               	btfsc	status,2,c
  4999  001280  D009               	goto	l3429
  5000  001282  C037  F02D         	movff	printf@flag,??_printf
  5001  001286  0E03               	movlw	3
  5002  001288  162D               	andwf	??_printf,f,c
  5003  00128A  B4D8               	btfsc	status,2,c
  5004  00128C  D003               	goto	l3429
  5005                           
  5006                           ;doprnt.c: 1346: width--;
  5007  00128E  0638               	decf	printf@width,f,c
  5008  001290  A0D8               	btfss	status,0,c
  5009  001292  0639               	decf	printf@width+1,f,c
  5010  001294                     l3429:
  5011                           
  5012                           ;doprnt.c: 1381: if(width > c)
  5013  001294  0E80               	movlw	128
  5014  001296  BE3A               	btfsc	printf@c,7,c
  5015  001298  0E7F               	movlw	127
  5016  00129A  6E2D               	movwf	??_printf& (0+255),c
  5017  00129C  5038               	movf	printf@width,w,c
  5018  00129E  5C3A               	subwf	printf@c,w,c
  5019  0012A0  5039               	movf	printf@width+1,w,c
  5020  0012A2  0A80               	xorlw	128
  5021  0012A4  582D               	subwfb	??_printf& (0+255),w,c
  5022  0012A6  B0D8               	btfsc	status,0,c
  5023  0012A8  D007               	goto	l3433
  5024                           
  5025                           ;doprnt.c: 1382: width -= c;
  5026  0012AA  503A               	movf	printf@c,w,c
  5027  0012AC  5E38               	subwf	printf@width,f,c
  5028  0012AE  0E00               	movlw	0
  5029  0012B0  BE3A               	btfsc	printf@c,7,c
  5030  0012B2  0EFF               	movlw	255
  5031  0012B4  5A39               	subwfb	printf@width+1,f,c
  5032  0012B6  D004               	goto	l3435
  5033  0012B8                     l3433:
  5034                           
  5035                           ;doprnt.c: 1383: else
  5036                           ;doprnt.c: 1384: width = 0;
  5037  0012B8  0E00               	movlw	0
  5038  0012BA  6E39               	movwf	printf@width+1,c
  5039  0012BC  0E00               	movlw	0
  5040  0012BE  6E38               	movwf	printf@width,c
  5041  0012C0                     l3435:
  5042                           
  5043                           ;doprnt.c: 1387: if(flag & 0x04) {
  5044  0012C0  A437               	btfss	printf@flag,2,c
  5045  0012C2  D014               	goto	l3447
  5046                           
  5047                           ;doprnt.c: 1392: if(flag & 0x03)
  5048  0012C4  C037  F02D         	movff	printf@flag,??_printf
  5049  0012C8  0E03               	movlw	3
  5050  0012CA  162D               	andwf	??_printf,f,c
  5051  0012CC  B4D8               	btfsc	status,2,c
  5052  0012CE  D003               	goto	l3441
  5053                           
  5054                           ;doprnt.c: 1393: (putch('-') );
  5055  0012D0  0E2D               	movlw	45
  5056  0012D2  ECFC  F012         	call	_putch
  5057  0012D6                     l3441:
  5058                           
  5059                           ;doprnt.c: 1415: if(width)
  5060  0012D6  5038               	movf	printf@width,w,c
  5061  0012D8  1039               	iorwf	printf@width+1,w,c
  5062  0012DA  B4D8               	btfsc	status,2,c
  5063  0012DC  D01E               	goto	l3457
  5064                           
  5065                           ;doprnt.c: 1417: (putch('0') );
  5066                           
  5067                           ;doprnt.c: 1416: do
  5068  0012DE  0E30               	movlw	48
  5069  0012E0  ECFC  F012         	call	_putch
  5070                           
  5071                           ;doprnt.c: 1418: while(--width);
  5072  0012E4  0638               	decf	printf@width,f,c
  5073  0012E6  A0D8               	btfss	status,0,c
  5074  0012E8  0639               	decf	printf@width+1,f,c
  5075  0012EA  D7F5               	goto	l3441
  5076  0012EC                     l3447:
  5077                           
  5078                           ;doprnt.c: 1422: {
  5079                           ;doprnt.c: 1424: if(width
  5080                           ;doprnt.c: 1428: )
  5081  0012EC  5038               	movf	printf@width,w,c
  5082  0012EE  1039               	iorwf	printf@width+1,w,c
  5083  0012F0  B4D8               	btfsc	status,2,c
  5084  0012F2  D00A               	goto	l3453
  5085  0012F4                     l3449:
  5086                           
  5087                           ;doprnt.c: 1430: (putch(' ') );
  5088  0012F4  0E20               	movlw	32
  5089  0012F6  ECFC  F012         	call	_putch
  5090                           
  5091                           ;doprnt.c: 1431: while(--width);
  5092  0012FA  0638               	decf	printf@width,f,c
  5093  0012FC  A0D8               	btfss	status,0,c
  5094  0012FE  0639               	decf	printf@width+1,f,c
  5095  001300  5038               	movf	printf@width,w,c
  5096  001302  1039               	iorwf	printf@width+1,w,c
  5097  001304  A4D8               	btfss	status,2,c
  5098  001306  D7F6               	goto	l3449
  5099  001308                     l3453:
  5100                           
  5101                           ;doprnt.c: 1438: if(flag & 0x03)
  5102  001308  C037  F02D         	movff	printf@flag,??_printf
  5103  00130C  0E03               	movlw	3
  5104  00130E  162D               	andwf	??_printf,f,c
  5105  001310  B4D8               	btfsc	status,2,c
  5106  001312  D003               	goto	l3457
  5107                           
  5108                           ;doprnt.c: 1439: (putch('-') );
  5109  001314  0E2D               	movlw	45
  5110  001316  ECFC  F012         	call	_putch
  5111  00131A                     l3457:
  5112                           
  5113                           ;doprnt.c: 1469: }
  5114                           ;doprnt.c: 1472: prec = c;
  5115  00131A  C03A  F034         	movff	printf@c,printf@prec
  5116                           
  5117                           ;doprnt.c: 1474: while(prec--) {
  5118  00131E  D050               	goto	l3471
  5119  001320                     l3459:
  5120                           
  5121                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5122  001320  5034               	movf	printf@prec,w,c
  5123  001322  0D02               	mullw	2
  5124  001324  0E12               	movlw	low _dpowers
  5125  001326  24F3               	addwf	prodl,w,c
  5126  001328  6EF6               	movwf	tblptrl,c
  5127  00132A  0E10               	movlw	high _dpowers
  5128  00132C  20F4               	addwfc	prodh,w,c
  5129  00132E  6EF7               	movwf	tblptrh,c
  5130  001330                     	if	0	;There are less than 3 active tblptr bytes
  5131  001330                     	endif
  5132  001330  0009               	tblrd		*+
  5133  001332  CFF5 F01B          	movff	tablat,___lwdiv@divisor
  5134  001336  000A               	tblrd		*-
  5135  001338  CFF5 F01C          	movff	tablat,___lwdiv@divisor+1
  5136  00133C  C035  F019         	movff	printf@val,___lwdiv@dividend
  5137  001340  C036  F01A         	movff	printf@val+1,___lwdiv@dividend+1
  5138  001344  ECD1  F011         	call	___lwdiv	;wreg free
  5139  001348  C019  F020         	movff	?___lwdiv,___lwmod@dividend
  5140  00134C  C01A  F021         	movff	?___lwdiv+1,___lwmod@dividend+1
  5141  001350  0E00               	movlw	0
  5142  001352  6E23               	movwf	___lwmod@divisor+1,c
  5143  001354  0E0A               	movlw	10
  5144  001356  6E22               	movwf	___lwmod@divisor,c
  5145  001358  EC40  F012         	call	___lwmod	;wreg free
  5146  00135C  5020               	movf	?___lwmod,w,c
  5147  00135E  0F30               	addlw	48
  5148  001360  6E3A               	movwf	printf@c,c
  5149                           
  5150                           ;doprnt.c: 1491: break;
  5151  001362  D02B               	goto	l3469
  5152  001364                     l3461:
  5153                           
  5154                           ;doprnt.c: 1499: {
  5155                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  5156  001364  C035  F019         	movff	printf@val,___lwdiv@dividend
  5157  001368  C036  F01A         	movff	printf@val+1,___lwdiv@dividend+1
  5158  00136C  5034               	movf	printf@prec,w,c
  5159  00136E  0D02               	mullw	2
  5160  001370  0E1C               	movlw	low _hexpowers
  5161  001372  24F3               	addwf	prodl,w,c
  5162  001374  6EF6               	movwf	tblptrl,c
  5163  001376  0E10               	movlw	high _hexpowers
  5164  001378  20F4               	addwfc	prodh,w,c
  5165  00137A  6EF7               	movwf	tblptrh,c
  5166  00137C                     	if	0	;There are less than 3 active tblptr bytes
  5167  00137C                     	endif
  5168  00137C  0009               	tblrd		*+
  5169  00137E  CFF5 F01B          	movff	tablat,___lwdiv@divisor
  5170  001382  000A               	tblrd		*-
  5171  001384  CFF5 F01C          	movff	tablat,___lwdiv@divisor+1
  5172  001388  ECD1  F011         	call	___lwdiv	;wreg free
  5173  00138C  5019               	movf	?___lwdiv,w,c
  5174  00138E  0B0F               	andlw	15
  5175  001390  6E31               	movwf	printf@idx,c
  5176                           
  5177                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  5178  001392  5031               	movf	printf@idx,w,c
  5179  001394  0D01               	mullw	1
  5180  001396  0E54               	movlw	low STR_15
  5181  001398  24F3               	addwf	prodl,w,c
  5182  00139A  6EF6               	movwf	tblptrl,c
  5183  00139C  0E10               	movlw	high STR_15
  5184  00139E  20F4               	addwfc	prodh,w,c
  5185  0013A0  6EF7               	movwf	tblptrh,c
  5186  0013A2                     	if	0	;There are less than 3 active tblptr bytes
  5187  0013A2                     	endif
  5188  0013A2  0008               	tblrd		*
  5189  0013A4  CFF5 F03A          	movff	tablat,printf@c
  5190                           
  5191                           ;doprnt.c: 1523: }
  5192                           
  5193                           ;doprnt.c: 1508: }
  5194                           ;doprnt.c: 1510: break;
  5195  0013A8  D008               	goto	l3469
  5196  0013AA                     l3467:
  5197  0013AA  5037               	movf	printf@flag,w,c
  5198  0013AC  0B80               	andlw	128
  5199                           
  5200                           ; Switch size 1, requested type "space"
  5201                           ; Number of cases is 2, Range of values is 0 to 128
  5202                           ; switch strategies available:
  5203                           ; Name         Instructions Cycles
  5204                           ; simple_byte            7     4 (average)
  5205                           ;	Chosen strategy is simple_byte
  5206  0013AE  0A00               	xorlw	0	; case 0
  5207  0013B0  B4D8               	btfsc	status,2,c
  5208  0013B2  D7B6               	goto	l3459
  5209  0013B4  0A80               	xorlw	128	; case 128
  5210  0013B6  B4D8               	btfsc	status,2,c
  5211  0013B8  D7D5               	goto	l3461
  5212  0013BA                     l3469:
  5213                           
  5214                           ;doprnt.c: 1524: (putch(c) );
  5215  0013BA  503A               	movf	printf@c,w,c
  5216  0013BC  ECFC  F012         	call	_putch
  5217  0013C0                     l3471:
  5218  0013C0  0634               	decf	printf@prec,f,c
  5219  0013C2  2834               	incf	printf@prec,w,c
  5220  0013C4  A4D8               	btfss	status,2,c
  5221  0013C6  D7F1               	goto	l3467
  5222  0013C8                     l3473:
  5223  0013C8  C025  FFF6         	movff	printf@f,tblptrl
  5224  0013CC  C026  FFF7         	movff	printf@f+1,tblptrh
  5225  0013D0  4A25               	infsnz	printf@f,f,c
  5226  0013D2  2A26               	incf	printf@f+1,f,c
  5227  0013D4                     	if	0	;tblptru may be non-zero
  5228  0013D4                     	endif
  5229  0013D4                     	if	0	;tblptru may be non-zero
  5230  0013D4                     	endif
  5231  0013D4  0008               	tblrd		*
  5232  0013D6  CFF5 F03A          	movff	tablat,printf@c
  5233  0013DA  503A               	movf	printf@c,w,c
  5234  0013DC  B4D8               	btfsc	status,2,c
  5235  0013DE  0012               	return	
  5236  0013E0  D67F               	goto	l3347
  5237  0013E2                     __end_of_printf:
  5238                           	opt stack 0
  5239                           tblptru	equ	0xFF8
  5240                           tblptrh	equ	0xFF7
  5241                           tblptrl	equ	0xFF6
  5242                           tablat	equ	0xFF5
  5243                           prodh	equ	0xFF4
  5244                           prodl	equ	0xFF3
  5245                           intcon	equ	0xFF2
  5246                           intcon3	equ	0xFF0
  5247                           postinc0	equ	0xFEE
  5248                           wreg	equ	0xFE8
  5249                           indf1	equ	0xFE7
  5250                           fsr1h	equ	0xFE2
  5251                           fsr1l	equ	0xFE1
  5252                           indf2	equ	0xFDF
  5253                           postinc2	equ	0xFDE
  5254                           postdec2	equ	0xFDD
  5255                           fsr2h	equ	0xFDA
  5256                           fsr2l	equ	0xFD9
  5257                           status	equ	0xFD8
  5258                           
  5259 ;; *************** function _putch *****************
  5260 ;; Defined at:
  5261 ;;		line 30 in file "lcd.c"
  5262 ;; Parameters:    Size  Location     Type
  5263 ;;  data            1    wreg     unsigned char 
  5264 ;; Auto vars:     Size  Location     Type
  5265 ;;  data            1   26[COMRAM] unsigned char 
  5266 ;; Return value:  Size  Location     Type
  5267 ;;                  1    wreg      void 
  5268 ;; Registers used:
  5269 ;;		wreg, status,2, status,0, cstack
  5270 ;; Tracked objects:
  5271 ;;		On entry : 0/0
  5272 ;;		On exit  : 0/0
  5273 ;;		Unchanged: 0/0
  5274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5276 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5278 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5279 ;;Total ram usage:        1 bytes
  5280 ;; Hardware stack levels used:    1
  5281 ;; Hardware stack levels required when called:    5
  5282 ;; This function calls:
  5283 ;;		_lcdNibble
  5284 ;; This function is called by:
  5285 ;;		_printf
  5286 ;; This function uses a non-reentrant model
  5287 ;;
  5288                           
  5289                           	psect	text25
  5290  0025F8                     __ptext25:
  5291                           	opt stack 0
  5292  0025F8                     _putch:
  5293                           	opt stack 23
  5294                           
  5295                           ;incstack = 0
  5296                           ;putch@data stored from wreg
  5297  0025F8  6E1B               	movwf	putch@data,c
  5298                           
  5299                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  5300  0025FA  848C               	bsf	3980,2,c	;volatile
  5301                           
  5302                           ;lcd.c: 32: lcdNibble(data);
  5303  0025FC  501B               	movf	putch@data,w,c
  5304  0025FE  EC52  F011         	call	_lcdNibble
  5305  002602  0012               	return		;funcret
  5306  002604                     __end_of_putch:
  5307                           	opt stack 0
  5308                           tblptru	equ	0xFF8
  5309                           tblptrh	equ	0xFF7
  5310                           tblptrl	equ	0xFF6
  5311                           tablat	equ	0xFF5
  5312                           prodh	equ	0xFF4
  5313                           prodl	equ	0xFF3
  5314                           intcon	equ	0xFF2
  5315                           intcon3	equ	0xFF0
  5316                           postinc0	equ	0xFEE
  5317                           wreg	equ	0xFE8
  5318                           indf1	equ	0xFE7
  5319                           fsr1h	equ	0xFE2
  5320                           fsr1l	equ	0xFE1
  5321                           indf2	equ	0xFDF
  5322                           postinc2	equ	0xFDE
  5323                           postdec2	equ	0xFDD
  5324                           fsr2h	equ	0xFDA
  5325                           fsr2l	equ	0xFD9
  5326                           status	equ	0xFD8
  5327                           
  5328 ;; *************** function _isdigit *****************
  5329 ;; Defined at:
  5330 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/isdigit.c"
  5331 ;; Parameters:    Size  Location     Type
  5332 ;;  c               1    wreg     unsigned char 
  5333 ;; Auto vars:     Size  Location     Type
  5334 ;;  c               1   26[COMRAM] unsigned char 
  5335 ;; Return value:  Size  Location     Type
  5336 ;;		None               void
  5337 ;; Registers used:
  5338 ;;		wreg, status,2, status,0
  5339 ;; Tracked objects:
  5340 ;;		On entry : 0/0
  5341 ;;		On exit  : 0/0
  5342 ;;		Unchanged: 0/0
  5343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5345 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5346 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5347 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5348 ;;Total ram usage:        3 bytes
  5349 ;; Hardware stack levels used:    1
  5350 ;; Hardware stack levels required when called:    4
  5351 ;; This function calls:
  5352 ;;		Nothing
  5353 ;; This function is called by:
  5354 ;;		_printf
  5355 ;; This function uses a non-reentrant model
  5356 ;;
  5357                           
  5358                           	psect	text26
  5359  00259C                     __ptext26:
  5360                           	opt stack 0
  5361  00259C                     _isdigit:
  5362                           	opt stack 24
  5363                           
  5364                           ;incstack = 0
  5365                           ;isdigit@c stored from wreg
  5366  00259C  6E1B               	movwf	isdigit@c,c
  5367  00259E  0E00               	movlw	0
  5368  0025A0  6E1A               	movwf	_isdigit$1112,c
  5369  0025A2  0E3A               	movlw	58
  5370  0025A4  601B               	cpfslt	isdigit@c,c
  5371  0025A6  D005               	goto	l3175
  5372  0025A8  0E2F               	movlw	47
  5373  0025AA  641B               	cpfsgt	isdigit@c,c
  5374  0025AC  D002               	goto	l3175
  5375  0025AE  0E01               	movlw	1
  5376  0025B0  6E1A               	movwf	_isdigit$1112,c
  5377  0025B2                     l3175:
  5378  0025B2  C01A  F019         	movff	_isdigit$1112,??_isdigit
  5379  0025B6  3019               	rrcf	??_isdigit,w,c
  5380  0025B8  0012               	return	
  5381  0025BA                     __end_of_isdigit:
  5382                           	opt stack 0
  5383                           tblptru	equ	0xFF8
  5384                           tblptrh	equ	0xFF7
  5385                           tblptrl	equ	0xFF6
  5386                           tablat	equ	0xFF5
  5387                           prodh	equ	0xFF4
  5388                           prodl	equ	0xFF3
  5389                           intcon	equ	0xFF2
  5390                           intcon3	equ	0xFF0
  5391                           postinc0	equ	0xFEE
  5392                           wreg	equ	0xFE8
  5393                           indf1	equ	0xFE7
  5394                           fsr1h	equ	0xFE2
  5395                           fsr1l	equ	0xFE1
  5396                           indf2	equ	0xFDF
  5397                           postinc2	equ	0xFDE
  5398                           postdec2	equ	0xFDD
  5399                           fsr2h	equ	0xFDA
  5400                           fsr2l	equ	0xFD9
  5401                           status	equ	0xFD8
  5402                           
  5403 ;; *************** function ___wmul *****************
  5404 ;; Defined at:
  5405 ;;		line 15 in file "/Applications/microchip/xc8/v1.41/sources/common/Umul16.c"
  5406 ;; Parameters:    Size  Location     Type
  5407 ;;  multiplier      2   24[COMRAM] unsigned int 
  5408 ;;  multiplicand    2   26[COMRAM] unsigned int 
  5409 ;; Auto vars:     Size  Location     Type
  5410 ;;  product         2   28[COMRAM] unsigned int 
  5411 ;; Return value:  Size  Location     Type
  5412 ;;                  2   24[COMRAM] unsigned int 
  5413 ;; Registers used:
  5414 ;;		wreg, status,2, status,0, prodl, prodh
  5415 ;; Tracked objects:
  5416 ;;		On entry : 0/0
  5417 ;;		On exit  : 0/0
  5418 ;;		Unchanged: 0/0
  5419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5420 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5421 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5423 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5424 ;;Total ram usage:        6 bytes
  5425 ;; Hardware stack levels used:    1
  5426 ;; Hardware stack levels required when called:    4
  5427 ;; This function calls:
  5428 ;;		Nothing
  5429 ;; This function is called by:
  5430 ;;		_printf
  5431 ;; This function uses a non-reentrant model
  5432 ;;
  5433                           
  5434                           	psect	text27
  5435  002550                     __ptext27:
  5436                           	opt stack 0
  5437  002550                     ___wmul:
  5438                           	opt stack 24
  5439                           
  5440                           ;incstack = 0
  5441  002550  5019               	movf	___wmul@multiplier,w,c
  5442  002552  021B               	mulwf	___wmul@multiplicand,c
  5443  002554  CFF3 F01D          	movff	prodl,___wmul@product
  5444  002558  CFF4 F01E          	movff	prodh,___wmul@product+1
  5445  00255C  5019               	movf	___wmul@multiplier,w,c
  5446  00255E  021C               	mulwf	___wmul@multiplicand+1,c
  5447  002560  50F3               	movf	prodl,w,c
  5448  002562  261E               	addwf	___wmul@product+1,f,c
  5449  002564  501A               	movf	___wmul@multiplier+1,w,c
  5450  002566  021B               	mulwf	___wmul@multiplicand,c
  5451  002568  50F3               	movf	prodl,w,c
  5452  00256A  261E               	addwf	___wmul@product+1,f,c
  5453  00256C  C01D  F019         	movff	___wmul@product,?___wmul
  5454  002570  C01E  F01A         	movff	___wmul@product+1,?___wmul+1
  5455  002574  0012               	return	
  5456  002576                     __end_of___wmul:
  5457                           	opt stack 0
  5458                           tblptru	equ	0xFF8
  5459                           tblptrh	equ	0xFF7
  5460                           tblptrl	equ	0xFF6
  5461                           tablat	equ	0xFF5
  5462                           prodh	equ	0xFF4
  5463                           prodl	equ	0xFF3
  5464                           intcon	equ	0xFF2
  5465                           intcon3	equ	0xFF0
  5466                           postinc0	equ	0xFEE
  5467                           wreg	equ	0xFE8
  5468                           indf1	equ	0xFE7
  5469                           fsr1h	equ	0xFE2
  5470                           fsr1l	equ	0xFE1
  5471                           indf2	equ	0xFDF
  5472                           postinc2	equ	0xFDE
  5473                           postdec2	equ	0xFDD
  5474                           fsr2h	equ	0xFDA
  5475                           fsr2l	equ	0xFD9
  5476                           status	equ	0xFD8
  5477                           
  5478 ;; *************** function ___lwmod *****************
  5479 ;; Defined at:
  5480 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwmod.c"
  5481 ;; Parameters:    Size  Location     Type
  5482 ;;  dividend        2   31[COMRAM] unsigned int 
  5483 ;;  divisor         2   33[COMRAM] unsigned int 
  5484 ;; Auto vars:     Size  Location     Type
  5485 ;;  counter         1   35[COMRAM] unsigned char 
  5486 ;; Return value:  Size  Location     Type
  5487 ;;                  2   31[COMRAM] unsigned int 
  5488 ;; Registers used:
  5489 ;;		wreg, status,2, status,0
  5490 ;; Tracked objects:
  5491 ;;		On entry : 0/0
  5492 ;;		On exit  : 0/0
  5493 ;;		Unchanged: 0/0
  5494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5495 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5496 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5498 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5499 ;;Total ram usage:        5 bytes
  5500 ;; Hardware stack levels used:    1
  5501 ;; Hardware stack levels required when called:    4
  5502 ;; This function calls:
  5503 ;;		Nothing
  5504 ;; This function is called by:
  5505 ;;		_printf
  5506 ;; This function uses a non-reentrant model
  5507 ;;
  5508                           
  5509                           	psect	text28
  5510  002480                     __ptext28:
  5511                           	opt stack 0
  5512  002480                     ___lwmod:
  5513                           	opt stack 24
  5514                           
  5515                           ;incstack = 0
  5516  002480  5022               	movf	___lwmod@divisor,w,c
  5517  002482  1023               	iorwf	___lwmod@divisor+1,w,c
  5518  002484  B4D8               	btfsc	status,2,c
  5519  002486  D018               	goto	l958
  5520  002488  0E01               	movlw	1
  5521  00248A  6E24               	movwf	___lwmod@counter,c
  5522  00248C  D004               	goto	l3213
  5523  00248E                     l3211:
  5524  00248E  90D8               	bcf	status,0,c
  5525  002490  3622               	rlcf	___lwmod@divisor,f,c
  5526  002492  3623               	rlcf	___lwmod@divisor+1,f,c
  5527  002494  2A24               	incf	___lwmod@counter,f,c
  5528  002496                     l3213:
  5529  002496  AE23               	btfss	___lwmod@divisor+1,7,c
  5530  002498  D7FA               	goto	l3211
  5531  00249A                     l3215:
  5532  00249A  5022               	movf	___lwmod@divisor,w,c
  5533  00249C  5C20               	subwf	___lwmod@dividend,w,c
  5534  00249E  5023               	movf	___lwmod@divisor+1,w,c
  5535  0024A0  5821               	subwfb	___lwmod@dividend+1,w,c
  5536  0024A2  A0D8               	btfss	status,0,c
  5537  0024A4  D004               	goto	l3219
  5538  0024A6  5022               	movf	___lwmod@divisor,w,c
  5539  0024A8  5E20               	subwf	___lwmod@dividend,f,c
  5540  0024AA  5023               	movf	___lwmod@divisor+1,w,c
  5541  0024AC  5A21               	subwfb	___lwmod@dividend+1,f,c
  5542  0024AE                     l3219:
  5543  0024AE  90D8               	bcf	status,0,c
  5544  0024B0  3223               	rrcf	___lwmod@divisor+1,f,c
  5545  0024B2  3222               	rrcf	___lwmod@divisor,f,c
  5546  0024B4  2E24               	decfsz	___lwmod@counter,f,c
  5547  0024B6  D7F1               	goto	l3215
  5548  0024B8                     l958:
  5549  0024B8  C020  F020         	movff	___lwmod@dividend,?___lwmod
  5550  0024BC  C021  F021         	movff	___lwmod@dividend+1,?___lwmod+1
  5551  0024C0  0012               	return		;funcret
  5552  0024C2                     __end_of___lwmod:
  5553                           	opt stack 0
  5554                           tblptru	equ	0xFF8
  5555                           tblptrh	equ	0xFF7
  5556                           tblptrl	equ	0xFF6
  5557                           tablat	equ	0xFF5
  5558                           prodh	equ	0xFF4
  5559                           prodl	equ	0xFF3
  5560                           intcon	equ	0xFF2
  5561                           intcon3	equ	0xFF0
  5562                           postinc0	equ	0xFEE
  5563                           wreg	equ	0xFE8
  5564                           indf1	equ	0xFE7
  5565                           fsr1h	equ	0xFE2
  5566                           fsr1l	equ	0xFE1
  5567                           indf2	equ	0xFDF
  5568                           postinc2	equ	0xFDE
  5569                           postdec2	equ	0xFDD
  5570                           fsr2h	equ	0xFDA
  5571                           fsr2l	equ	0xFD9
  5572                           status	equ	0xFD8
  5573                           
  5574 ;; *************** function ___lwdiv *****************
  5575 ;; Defined at:
  5576 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwdiv.c"
  5577 ;; Parameters:    Size  Location     Type
  5578 ;;  dividend        2   24[COMRAM] unsigned int 
  5579 ;;  divisor         2   26[COMRAM] unsigned int 
  5580 ;; Auto vars:     Size  Location     Type
  5581 ;;  quotient        2   29[COMRAM] unsigned int 
  5582 ;;  counter         1   28[COMRAM] unsigned char 
  5583 ;; Return value:  Size  Location     Type
  5584 ;;                  2   24[COMRAM] unsigned int 
  5585 ;; Registers used:
  5586 ;;		wreg, status,2, status,0
  5587 ;; Tracked objects:
  5588 ;;		On entry : 0/0
  5589 ;;		On exit  : 0/0
  5590 ;;		Unchanged: 0/0
  5591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5592 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5593 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5595 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5596 ;;Total ram usage:        7 bytes
  5597 ;; Hardware stack levels used:    1
  5598 ;; Hardware stack levels required when called:    4
  5599 ;; This function calls:
  5600 ;;		Nothing
  5601 ;; This function is called by:
  5602 ;;		_printf
  5603 ;; This function uses a non-reentrant model
  5604 ;;
  5605                           
  5606                           	psect	text29
  5607  0023A2                     __ptext29:
  5608                           	opt stack 0
  5609  0023A2                     ___lwdiv:
  5610                           	opt stack 24
  5611                           
  5612                           ;incstack = 0
  5613  0023A2  0E00               	movlw	0
  5614  0023A4  6E1F               	movwf	___lwdiv@quotient+1,c
  5615  0023A6  0E00               	movlw	0
  5616  0023A8  6E1E               	movwf	___lwdiv@quotient,c
  5617  0023AA  501B               	movf	___lwdiv@divisor,w,c
  5618  0023AC  101C               	iorwf	___lwdiv@divisor+1,w,c
  5619  0023AE  B4D8               	btfsc	status,2,c
  5620  0023B0  D01C               	goto	l948
  5621  0023B2  0E01               	movlw	1
  5622  0023B4  6E1D               	movwf	___lwdiv@counter,c
  5623  0023B6  D004               	goto	l3193
  5624  0023B8                     l3191:
  5625  0023B8  90D8               	bcf	status,0,c
  5626  0023BA  361B               	rlcf	___lwdiv@divisor,f,c
  5627  0023BC  361C               	rlcf	___lwdiv@divisor+1,f,c
  5628  0023BE  2A1D               	incf	___lwdiv@counter,f,c
  5629  0023C0                     l3193:
  5630  0023C0  AE1C               	btfss	___lwdiv@divisor+1,7,c
  5631  0023C2  D7FA               	goto	l3191
  5632  0023C4                     l3195:
  5633  0023C4  90D8               	bcf	status,0,c
  5634  0023C6  361E               	rlcf	___lwdiv@quotient,f,c
  5635  0023C8  361F               	rlcf	___lwdiv@quotient+1,f,c
  5636  0023CA  501B               	movf	___lwdiv@divisor,w,c
  5637  0023CC  5C19               	subwf	___lwdiv@dividend,w,c
  5638  0023CE  501C               	movf	___lwdiv@divisor+1,w,c
  5639  0023D0  581A               	subwfb	___lwdiv@dividend+1,w,c
  5640  0023D2  A0D8               	btfss	status,0,c
  5641  0023D4  D005               	goto	l3203
  5642  0023D6  501B               	movf	___lwdiv@divisor,w,c
  5643  0023D8  5E19               	subwf	___lwdiv@dividend,f,c
  5644  0023DA  501C               	movf	___lwdiv@divisor+1,w,c
  5645  0023DC  5A1A               	subwfb	___lwdiv@dividend+1,f,c
  5646  0023DE  801E               	bsf	___lwdiv@quotient,0,c
  5647  0023E0                     l3203:
  5648  0023E0  90D8               	bcf	status,0,c
  5649  0023E2  321C               	rrcf	___lwdiv@divisor+1,f,c
  5650  0023E4  321B               	rrcf	___lwdiv@divisor,f,c
  5651  0023E6  2E1D               	decfsz	___lwdiv@counter,f,c
  5652  0023E8  D7ED               	goto	l3195
  5653  0023EA                     l948:
  5654  0023EA  C01E  F019         	movff	___lwdiv@quotient,?___lwdiv
  5655  0023EE  C01F  F01A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5656  0023F2  0012               	return		;funcret
  5657  0023F4                     __end_of___lwdiv:
  5658                           	opt stack 0
  5659                           tblptru	equ	0xFF8
  5660                           tblptrh	equ	0xFF7
  5661                           tblptrl	equ	0xFF6
  5662                           tablat	equ	0xFF5
  5663                           prodh	equ	0xFF4
  5664                           prodl	equ	0xFF3
  5665                           intcon	equ	0xFF2
  5666                           intcon3	equ	0xFF0
  5667                           postinc0	equ	0xFEE
  5668                           wreg	equ	0xFE8
  5669                           indf1	equ	0xFE7
  5670                           fsr1h	equ	0xFE2
  5671                           fsr1l	equ	0xFE1
  5672                           indf2	equ	0xFDF
  5673                           postinc2	equ	0xFDE
  5674                           postdec2	equ	0xFDD
  5675                           fsr2h	equ	0xFDA
  5676                           fsr2l	equ	0xFD9
  5677                           status	equ	0xFD8
  5678                           
  5679 ;; *************** function _lcdInst *****************
  5680 ;; Defined at:
  5681 ;;		line 25 in file "lcd.c"
  5682 ;; Parameters:    Size  Location     Type
  5683 ;;  data            1    wreg     unsigned char 
  5684 ;; Auto vars:     Size  Location     Type
  5685 ;;  data            1   26[COMRAM] unsigned char 
  5686 ;; Return value:  Size  Location     Type
  5687 ;;                  1    wreg      void 
  5688 ;; Registers used:
  5689 ;;		wreg, status,2, status,0, cstack
  5690 ;; Tracked objects:
  5691 ;;		On entry : 0/0
  5692 ;;		On exit  : 0/0
  5693 ;;		Unchanged: 0/0
  5694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5696 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5698 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5699 ;;Total ram usage:        1 bytes
  5700 ;; Hardware stack levels used:    1
  5701 ;; Hardware stack levels required when called:    5
  5702 ;; This function calls:
  5703 ;;		_lcdNibble
  5704 ;; This function is called by:
  5705 ;;		_initLCD
  5706 ;;		_readLightSensor
  5707 ;;		_welcome
  5708 ;;		_debug
  5709 ;;		_sort
  5710 ;;		_display_time
  5711 ;;		_display_sorting_time
  5712 ;; This function uses a non-reentrant model
  5713 ;;
  5714                           
  5715                           	psect	text30
  5716  002604                     __ptext30:
  5717                           	opt stack 0
  5718  002604                     _lcdInst:
  5719                           	opt stack 24
  5720                           
  5721                           ;incstack = 0
  5722                           ;lcdInst@data stored from wreg
  5723  002604  6E1B               	movwf	lcdInst@data,c
  5724                           
  5725                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  5726  002606  948C               	bcf	3980,2,c	;volatile
  5727                           
  5728                           ;lcd.c: 27: lcdNibble(data);
  5729  002608  501B               	movf	lcdInst@data,w,c
  5730  00260A  EC52  F011         	call	_lcdNibble
  5731  00260E  0012               	return		;funcret
  5732  002610                     __end_of_lcdInst:
  5733                           	opt stack 0
  5734                           tblptru	equ	0xFF8
  5735                           tblptrh	equ	0xFF7
  5736                           tblptrl	equ	0xFF6
  5737                           tablat	equ	0xFF5
  5738                           prodh	equ	0xFF4
  5739                           prodl	equ	0xFF3
  5740                           intcon	equ	0xFF2
  5741                           intcon3	equ	0xFF0
  5742                           postinc0	equ	0xFEE
  5743                           wreg	equ	0xFE8
  5744                           indf1	equ	0xFE7
  5745                           fsr1h	equ	0xFE2
  5746                           fsr1l	equ	0xFE1
  5747                           indf2	equ	0xFDF
  5748                           postinc2	equ	0xFDE
  5749                           postdec2	equ	0xFDD
  5750                           fsr2h	equ	0xFDA
  5751                           fsr2l	equ	0xFD9
  5752                           status	equ	0xFD8
  5753                           
  5754 ;; *************** function _lcdNibble *****************
  5755 ;; Defined at:
  5756 ;;		line 35 in file "lcd.c"
  5757 ;; Parameters:    Size  Location     Type
  5758 ;;  data            1    wreg     unsigned char 
  5759 ;; Auto vars:     Size  Location     Type
  5760 ;;  data            1   25[COMRAM] unsigned char 
  5761 ;;  temp            1   24[COMRAM] unsigned char 
  5762 ;; Return value:  Size  Location     Type
  5763 ;;                  1    wreg      void 
  5764 ;; Registers used:
  5765 ;;		wreg, status,2, status,0
  5766 ;; Tracked objects:
  5767 ;;		On entry : 0/0
  5768 ;;		On exit  : 0/0
  5769 ;;		Unchanged: 0/0
  5770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5772 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5774 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5775 ;;Total ram usage:        2 bytes
  5776 ;; Hardware stack levels used:    1
  5777 ;; Hardware stack levels required when called:    4
  5778 ;; This function calls:
  5779 ;;		Nothing
  5780 ;; This function is called by:
  5781 ;;		_lcdInst
  5782 ;;		_putch
  5783 ;; This function uses a non-reentrant model
  5784 ;;
  5785                           
  5786                           	psect	text31
  5787  0022A4                     __ptext31:
  5788                           	opt stack 0
  5789  0022A4                     _lcdNibble:
  5790                           	opt stack 23
  5791                           
  5792                           ;incstack = 0
  5793                           ;lcdNibble@data stored from wreg
  5794  0022A4  6E1A               	movwf	lcdNibble@data,c
  5795                           
  5796                           ;lcd.c: 37: char temp = data & 0xF0;
  5797  0022A6  501A               	movf	lcdNibble@data,w,c
  5798  0022A8  0BF0               	andlw	240
  5799  0022AA  6E19               	movwf	lcdNibble@temp,c
  5800                           
  5801                           ;lcd.c: 38: LATD = LATD & 0x0F;
  5802  0022AC  508C               	movf	3980,w,c	;volatile
  5803  0022AE  0B0F               	andlw	15
  5804  0022B0  6E8C               	movwf	3980,c	;volatile
  5805                           
  5806                           ;lcd.c: 39: LATD = temp | LATD;
  5807  0022B2  5019               	movf	lcdNibble@temp,w,c
  5808  0022B4  108C               	iorwf	3980,w,c	;volatile
  5809  0022B6  6E8C               	movwf	3980,c	;volatile
  5810                           
  5811                           ;lcd.c: 41: LATDbits.LATD3 = 0;
  5812  0022B8  968C               	bcf	3980,3,c	;volatile
  5813                           
  5814                           ;lcd.c: 42: _delay((unsigned long)((25)*(8000000/4000000.0)));
  5815  0022BA  0E10               	movlw	16
  5816  0022BC                     u4067:
  5817  0022BC  2EE8               	decfsz	wreg,f,c
  5818  0022BE  D7FE               	bra	u4067
  5819  0022C0  D000               	nop2	
  5820                           
  5821                           ;lcd.c: 43: LATDbits.LATD3 = 1;
  5822  0022C2  868C               	bsf	3980,3,c	;volatile
  5823                           
  5824                           ;lcd.c: 44: _delay((unsigned long)((25)*(8000000/4000000.0)));
  5825  0022C4  0E10               	movlw	16
  5826  0022C6                     u4077:
  5827  0022C6  2EE8               	decfsz	wreg,f,c
  5828  0022C8  D7FE               	bra	u4077
  5829  0022CA  D000               	nop2	
  5830                           
  5831                           ;lcd.c: 46: data = data << 4;
  5832  0022CC  381A               	swapf	lcdNibble@data,w,c
  5833  0022CE  0BF0               	andlw	240
  5834  0022D0  6E1A               	movwf	lcdNibble@data,c
  5835                           
  5836                           ;lcd.c: 48: temp = data & 0xF0;
  5837  0022D2  501A               	movf	lcdNibble@data,w,c
  5838  0022D4  0BF0               	andlw	240
  5839  0022D6  6E19               	movwf	lcdNibble@temp,c
  5840                           
  5841                           ;lcd.c: 49: LATD = LATD & 0x0F;
  5842  0022D8  508C               	movf	3980,w,c	;volatile
  5843  0022DA  0B0F               	andlw	15
  5844  0022DC  6E8C               	movwf	3980,c	;volatile
  5845                           
  5846                           ;lcd.c: 50: LATD = temp | LATD;
  5847  0022DE  5019               	movf	lcdNibble@temp,w,c
  5848  0022E0  108C               	iorwf	3980,w,c	;volatile
  5849  0022E2  6E8C               	movwf	3980,c	;volatile
  5850                           
  5851                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  5852  0022E4  968C               	bcf	3980,3,c	;volatile
  5853                           
  5854                           ;lcd.c: 53: _delay((unsigned long)((25)*(8000000/4000000.0)));
  5855  0022E6  0E10               	movlw	16
  5856  0022E8                     u4087:
  5857  0022E8  2EE8               	decfsz	wreg,f,c
  5858  0022EA  D7FE               	bra	u4087
  5859  0022EC  D000               	nop2	
  5860                           
  5861                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  5862  0022EE  868C               	bsf	3980,3,c	;volatile
  5863                           
  5864                           ;lcd.c: 55: _delay((unsigned long)((25)*(8000000/4000000.0)));
  5865  0022F0  0E10               	movlw	16
  5866  0022F2                     u4097:
  5867  0022F2  2EE8               	decfsz	wreg,f,c
  5868  0022F4  D7FE               	bra	u4097
  5869  0022F6  D000               	nop2	
  5870  0022F8  0012               	return		;funcret
  5871  0022FA                     __end_of_lcdNibble:
  5872                           	opt stack 0
  5873                           tblptru	equ	0xFF8
  5874                           tblptrh	equ	0xFF7
  5875                           tblptrl	equ	0xFF6
  5876                           tablat	equ	0xFF5
  5877                           prodh	equ	0xFF4
  5878                           prodl	equ	0xFF3
  5879                           intcon	equ	0xFF2
  5880                           intcon3	equ	0xFF0
  5881                           postinc0	equ	0xFEE
  5882                           wreg	equ	0xFE8
  5883                           indf1	equ	0xFE7
  5884                           fsr1h	equ	0xFE2
  5885                           fsr1l	equ	0xFE1
  5886                           indf2	equ	0xFDF
  5887                           postinc2	equ	0xFDE
  5888                           postdec2	equ	0xFDD
  5889                           fsr2h	equ	0xFDA
  5890                           fsr2l	equ	0xFD9
  5891                           status	equ	0xFD8
  5892                           
  5893 ;; *************** function _interrupt_handler *****************
  5894 ;; Defined at:
  5895 ;;		line 23 in file "interrupt.c"
  5896 ;; Parameters:    Size  Location     Type
  5897 ;;		None
  5898 ;; Auto vars:     Size  Location     Type
  5899 ;;  keypress        1   23[COMRAM] unsigned char 
  5900 ;; Return value:  Size  Location     Type
  5901 ;;                  1    wreg      void 
  5902 ;; Registers used:
  5903 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5904 ;; Tracked objects:
  5905 ;;		On entry : 0/0
  5906 ;;		On exit  : 0/0
  5907 ;;		Unchanged: 0/0
  5908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5910 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5911 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5912 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5913 ;;Total ram usage:       16 bytes
  5914 ;; Hardware stack levels used:    1
  5915 ;; Hardware stack levels required when called:    3
  5916 ;; This function calls:
  5917 ;;		i2_get_time
  5918 ;;		i2_lcdInst
  5919 ;;		i2_putch
  5920 ;; This function is called by:
  5921 ;;		Interrupt level 2
  5922 ;; This function uses a non-reentrant model
  5923 ;;
  5924                           
  5925                           	psect	intcode
  5926  000008                     __pintcode:
  5927                           	opt stack 0
  5928  000008                     _interrupt_handler:
  5929                           	opt stack 22
  5930                           
  5931                           ;incstack = 0
  5932  000008  8267               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5933  00000A  ED69  F00C         	call	int_func,f	;refresh shadow registers
  5934                           tblptru	equ	0xFF8
  5935                           tblptrh	equ	0xFF7
  5936                           tblptrl	equ	0xFF6
  5937                           tablat	equ	0xFF5
  5938                           prodh	equ	0xFF4
  5939                           prodl	equ	0xFF3
  5940                           intcon	equ	0xFF2
  5941                           intcon3	equ	0xFF0
  5942                           postinc0	equ	0xFEE
  5943                           wreg	equ	0xFE8
  5944                           indf1	equ	0xFE7
  5945                           fsr1h	equ	0xFE2
  5946                           fsr1l	equ	0xFE1
  5947                           indf2	equ	0xFDF
  5948                           postinc2	equ	0xFDE
  5949                           postdec2	equ	0xFDD
  5950                           fsr2h	equ	0xFDA
  5951                           fsr2l	equ	0xFD9
  5952                           status	equ	0xFD8
  5953                           
  5954                           	psect	intcode_body
  5955  0018D2                     __pintcode_body:
  5956                           	opt stack 22
  5957  0018D2                     int_func:
  5958                           	opt stack 22
  5959  0018D2  0006               	pop		; remove dummy address from shadow register refresh
  5960  0018D4  CFFA F00A          	movff	pclath,??_interrupt_handler+1
  5961  0018D8  CFFB F00B          	movff	pclatu,??_interrupt_handler+2
  5962  0018DC  CFE9 F00C          	movff	fsr0l,??_interrupt_handler+3
  5963  0018E0  CFEA F00D          	movff	fsr0h,??_interrupt_handler+4
  5964  0018E4  CFE1 F00E          	movff	fsr1l,??_interrupt_handler+5
  5965  0018E8  CFE2 F00F          	movff	fsr1h,??_interrupt_handler+6
  5966  0018EC  CFD9 F010          	movff	fsr2l,??_interrupt_handler+7
  5967  0018F0  CFDA F011          	movff	fsr2h,??_interrupt_handler+8
  5968  0018F4  CFF3 F012          	movff	prodl,??_interrupt_handler+9
  5969  0018F8  CFF4 F013          	movff	prodh,??_interrupt_handler+10
  5970  0018FC  CFF6 F014          	movff	tblptrl,??_interrupt_handler+11
  5971  001900  CFF7 F015          	movff	tblptrh,??_interrupt_handler+12
  5972  001904  CFF8 F016          	movff	tblptru,??_interrupt_handler+13
  5973  001908  CFF5 F017          	movff	tablat,??_interrupt_handler+14
  5974                           
  5975                           ;interrupt.c: 24: if (INT1IF) {
  5976  00190C  A0F0               	btfss	intcon3,0,c	;volatile
  5977  00190E  D04C               	goto	i2l3139
  5978                           
  5979                           ;interrupt.c: 25: lcdInst(0b11000000);;
  5980  001910  0EC0               	movlw	192
  5981  001912  EC0E  F013         	call	i2_lcdInst
  5982                           
  5983                           ;interrupt.c: 26: unsigned char keypress = (PORTB & 0xF0) >> 4;
  5984  001916  3881               	swapf	3969,w,c	;volatile
  5985  001918  0B0F               	andlw	15
  5986  00191A  0B0F               	andlw	15
  5987  00191C  6E18               	movwf	interrupt_handler@keypress,c
  5988                           
  5989                           ;interrupt.c: 27: putch(keys[keypress]);
  5990  00191E  5018               	movf	interrupt_handler@keypress,w,c
  5991  001920  0D01               	mullw	1
  5992  001922  0E01               	movlw	low _keys
  5993  001924  24F3               	addwf	prodl,w,c
  5994  001926  6EF6               	movwf	tblptrl,c
  5995  001928  0E10               	movlw	high _keys
  5996  00192A  20F4               	addwfc	prodh,w,c
  5997  00192C  6EF7               	movwf	tblptrh,c
  5998  00192E                     	if	0	;There are less than 3 active tblptr bytes
  5999  00192E                     	endif
  6000  00192E  0008               	tblrd		*
  6001  001930  50F5               	movf	tablat,w,c
  6002  001932  EC08  F013         	call	i2_putch
  6003                           
  6004                           ;interrupt.c: 28: if (mode == 2) {
  6005  001936  0E02               	movlw	2
  6006  001938  1858               	xorwf	_mode,w,c
  6007  00193A  A4D8               	btfss	status,2,c
  6008  00193C  D013               	goto	i2l3117
  6009                           
  6010                           ;interrupt.c: 29: get_time(end_time);
  6011  00193E  0E59               	movlw	low _end_time
  6012  001940  6E04               	movwf	i2get_time@datime,c
  6013  001942  0E00               	movlw	high _end_time
  6014  001944  6E05               	movwf	i2get_time@datime+1,c
  6015  001946  EC44  F00F         	call	i2_get_time	;wreg free
  6016                           
  6017                           ;interrupt.c: 30: passed_time =
  6018                           ;interrupt.c: 31: (end_time[1] - start_time[1]) * 60 + (end_time[0] - start_time[0]);
  6019  00194A  5060               	movf	_start_time,w,c
  6020  00194C  0800               	sublw	0
  6021  00194E  6E09               	movwf	??_interrupt_handler& (0+255),c
  6022  001950  5061               	movf	_start_time+1,w,c
  6023  001952  0800               	sublw	0
  6024  001954  245A               	addwf	_end_time+1,w,c
  6025  001956  0D3C               	mullw	60
  6026  001958  50F3               	movf	prodl,w,c
  6027  00195A  2409               	addwf	??_interrupt_handler,w,c
  6028  00195C  2459               	addwf	_end_time,w,c
  6029  00195E  6E57               	movwf	_passed_time,c
  6030                           
  6031                           ;interrupt.c: 32: mode = 3;
  6032  001960  0E03               	movlw	3
  6033  001962  D021               	goto	L7
  6034  001964                     i2l3117:
  6035  001964  5018               	movf	interrupt_handler@keypress,w,c
  6036  001966  A4D8               	btfss	status,2,c
  6037  001968  D005               	goto	i2l3123
  6038                           
  6039                           ;interrupt.c: 37: if (mode == 0) {
  6040  00196A  5058               	movf	_mode,w,c
  6041  00196C  A4D8               	btfss	status,2,c
  6042  00196E  D01C               	goto	i2l3139
  6043                           
  6044                           ;interrupt.c: 38: mode = 1;
  6045  001970  0E01               	movlw	1
  6046  001972  D019               	goto	L7
  6047  001974                     i2l3123:
  6048  001974  0E03               	movlw	3
  6049  001976  1818               	xorwf	interrupt_handler@keypress,w,c
  6050  001978  A4D8               	btfss	status,2,c
  6051  00197A  D00B               	goto	i2l3131
  6052                           
  6053                           ;interrupt.c: 42: if (mode == 0) {
  6054  00197C  5058               	movf	_mode,w,c
  6055  00197E  A4D8               	btfss	status,2,c
  6056  001980  D013               	goto	i2l3139
  6057                           
  6058                           ;interrupt.c: 43: get_time(end_time);
  6059  001982  0E59               	movlw	low _end_time
  6060  001984  6E04               	movwf	i2get_time@datime,c
  6061  001986  0E00               	movlw	high _end_time
  6062  001988  6E05               	movwf	i2get_time@datime+1,c
  6063  00198A  EC44  F00F         	call	i2_get_time	;wreg free
  6064                           
  6065                           ;interrupt.c: 44: mode = 2;
  6066  00198E  0E02               	movlw	2
  6067  001990  D00A               	goto	L7
  6068  001992                     i2l3131:
  6069                           
  6070                           ;interrupt.c: 48: else if (keypress == 0x1) {
  6071  001992  0418               	decf	interrupt_handler@keypress,w,c
  6072  001994  A4D8               	btfss	status,2,c
  6073  001996  D002               	goto	i2l3135
  6074                           
  6075                           ;interrupt.c: 49: mode = 0;
  6076  001998  0E00               	movlw	0
  6077  00199A  D005               	goto	L7
  6078  00199C                     i2l3135:
  6079  00199C  0E02               	movlw	2
  6080  00199E  1818               	xorwf	interrupt_handler@keypress,w,c
  6081  0019A0  A4D8               	btfss	status,2,c
  6082  0019A2  D002               	goto	i2l3139
  6083                           
  6084                           ;interrupt.c: 52: mode = 99;
  6085  0019A4  0E63               	movlw	99
  6086  0019A6                     L7:
  6087  0019A6  6E58               	movwf	_mode,c
  6088  0019A8                     i2l3139:
  6089                           
  6090                           ;interrupt.c: 53: }
  6091                           ;interrupt.c: 54: }
  6092                           ;interrupt.c: 55: INT1IF = 0;
  6093  0019A8  90F0               	bcf	intcon3,0,c	;volatile
  6094  0019AA  C017  FFF5         	movff	??_interrupt_handler+14,tablat
  6095  0019AE  C016  FFF8         	movff	??_interrupt_handler+13,tblptru
  6096  0019B2  C015  FFF7         	movff	??_interrupt_handler+12,tblptrh
  6097  0019B6  C014  FFF6         	movff	??_interrupt_handler+11,tblptrl
  6098  0019BA  C013  FFF4         	movff	??_interrupt_handler+10,prodh
  6099  0019BE  C012  FFF3         	movff	??_interrupt_handler+9,prodl
  6100  0019C2  C011  FFDA         	movff	??_interrupt_handler+8,fsr2h
  6101  0019C6  C010  FFD9         	movff	??_interrupt_handler+7,fsr2l
  6102  0019CA  C00F  FFE2         	movff	??_interrupt_handler+6,fsr1h
  6103  0019CE  C00E  FFE1         	movff	??_interrupt_handler+5,fsr1l
  6104  0019D2  C00D  FFEA         	movff	??_interrupt_handler+4,fsr0h
  6105  0019D6  C00C  FFE9         	movff	??_interrupt_handler+3,fsr0l
  6106  0019DA  C00B  FFFB         	movff	??_interrupt_handler+2,pclatu
  6107  0019DE  C00A  FFFA         	movff	??_interrupt_handler+1,pclath
  6108  0019E2  9267               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6109  0019E4  0011               	retfie		f
  6110  0019E6                     __end_of_interrupt_handler:
  6111                           	opt stack 0
  6112                           pclatu	equ	0xFFB
  6113                           pclath	equ	0xFFA
  6114                           tblptru	equ	0xFF8
  6115                           tblptrh	equ	0xFF7
  6116                           tblptrl	equ	0xFF6
  6117                           tablat	equ	0xFF5
  6118                           prodh	equ	0xFF4
  6119                           prodl	equ	0xFF3
  6120                           intcon	equ	0xFF2
  6121                           intcon3	equ	0xFF0
  6122                           postinc0	equ	0xFEE
  6123                           fsr0h	equ	0xFEA
  6124                           fsr0l	equ	0xFE9
  6125                           wreg	equ	0xFE8
  6126                           indf1	equ	0xFE7
  6127                           fsr1h	equ	0xFE2
  6128                           fsr1l	equ	0xFE1
  6129                           indf2	equ	0xFDF
  6130                           postinc2	equ	0xFDE
  6131                           postdec2	equ	0xFDD
  6132                           fsr2h	equ	0xFDA
  6133                           fsr2l	equ	0xFD9
  6134                           status	equ	0xFD8
  6135                           
  6136 ;; *************** function i2_putch *****************
  6137 ;; Defined at:
  6138 ;;		line 30 in file "lcd.c"
  6139 ;; Parameters:    Size  Location     Type
  6140 ;;  data            1    wreg     unsigned char 
  6141 ;; Auto vars:     Size  Location     Type
  6142 ;;  data            1    2[COMRAM] unsigned char 
  6143 ;; Return value:  Size  Location     Type
  6144 ;;                  1    wreg      void 
  6145 ;; Registers used:
  6146 ;;		wreg, status,2, status,0, cstack
  6147 ;; Tracked objects:
  6148 ;;		On entry : 0/0
  6149 ;;		On exit  : 0/0
  6150 ;;		Unchanged: 0/0
  6151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6153 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6155 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6156 ;;Total ram usage:        1 bytes
  6157 ;; Hardware stack levels used:    1
  6158 ;; Hardware stack levels required when called:    1
  6159 ;; This function calls:
  6160 ;;		i2_lcdNibble
  6161 ;; This function is called by:
  6162 ;;		_interrupt_handler
  6163 ;; This function uses a non-reentrant model
  6164 ;;
  6165                           
  6166                           	psect	text33
  6167  002610                     __ptext33:
  6168                           	opt stack 0
  6169  002610                     i2_putch:
  6170                           	opt stack 23
  6171                           
  6172                           ;incstack = 0
  6173                           ;i2putch@data stored from wreg
  6174  002610  6E03               	movwf	i2putch@data,c
  6175                           
  6176                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  6177  002612  848C               	bsf	3980,2,c	;volatile
  6178                           
  6179                           ;lcd.c: 32: lcdNibble(data);
  6180  002614  5003               	movf	i2putch@data,w,c
  6181  002616  EC7D  F011         	call	i2_lcdNibble
  6182  00261A  0012               	return		;funcret
  6183  00261C                     __end_ofi2_putch:
  6184                           	opt stack 0
  6185                           pclatu	equ	0xFFB
  6186                           pclath	equ	0xFFA
  6187                           tblptru	equ	0xFF8
  6188                           tblptrh	equ	0xFF7
  6189                           tblptrl	equ	0xFF6
  6190                           tablat	equ	0xFF5
  6191                           prodh	equ	0xFF4
  6192                           prodl	equ	0xFF3
  6193                           intcon	equ	0xFF2
  6194                           intcon3	equ	0xFF0
  6195                           postinc0	equ	0xFEE
  6196                           fsr0h	equ	0xFEA
  6197                           fsr0l	equ	0xFE9
  6198                           wreg	equ	0xFE8
  6199                           indf1	equ	0xFE7
  6200                           fsr1h	equ	0xFE2
  6201                           fsr1l	equ	0xFE1
  6202                           indf2	equ	0xFDF
  6203                           postinc2	equ	0xFDE
  6204                           postdec2	equ	0xFDD
  6205                           fsr2h	equ	0xFDA
  6206                           fsr2l	equ	0xFD9
  6207                           status	equ	0xFD8
  6208                           
  6209 ;; *************** function i2_lcdInst *****************
  6210 ;; Defined at:
  6211 ;;		line 25 in file "lcd.c"
  6212 ;; Parameters:    Size  Location     Type
  6213 ;;  data            1    wreg     unsigned char 
  6214 ;; Auto vars:     Size  Location     Type
  6215 ;;  data            1    2[COMRAM] unsigned char 
  6216 ;; Return value:  Size  Location     Type
  6217 ;;                  1    wreg      void 
  6218 ;; Registers used:
  6219 ;;		wreg, status,2, status,0, cstack
  6220 ;; Tracked objects:
  6221 ;;		On entry : 0/0
  6222 ;;		On exit  : 0/0
  6223 ;;		Unchanged: 0/0
  6224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6226 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6228 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6229 ;;Total ram usage:        1 bytes
  6230 ;; Hardware stack levels used:    1
  6231 ;; Hardware stack levels required when called:    1
  6232 ;; This function calls:
  6233 ;;		i2_lcdNibble
  6234 ;; This function is called by:
  6235 ;;		_interrupt_handler
  6236 ;; This function uses a non-reentrant model
  6237 ;;
  6238                           
  6239                           	psect	text34
  6240  00261C                     __ptext34:
  6241                           	opt stack 0
  6242  00261C                     i2_lcdInst:
  6243                           	opt stack 23
  6244                           
  6245                           ;incstack = 0
  6246                           ;i2lcdInst@data stored from wreg
  6247  00261C  6E03               	movwf	i2lcdInst@data,c
  6248                           
  6249                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  6250  00261E  948C               	bcf	3980,2,c	;volatile
  6251                           
  6252                           ;lcd.c: 27: lcdNibble(data);
  6253  002620  5003               	movf	i2lcdInst@data,w,c
  6254  002622  EC7D  F011         	call	i2_lcdNibble
  6255  002626  0012               	return		;funcret
  6256  002628                     __end_ofi2_lcdInst:
  6257                           	opt stack 0
  6258                           pclatu	equ	0xFFB
  6259                           pclath	equ	0xFFA
  6260                           tblptru	equ	0xFF8
  6261                           tblptrh	equ	0xFF7
  6262                           tblptrl	equ	0xFF6
  6263                           tablat	equ	0xFF5
  6264                           prodh	equ	0xFF4
  6265                           prodl	equ	0xFF3
  6266                           intcon	equ	0xFF2
  6267                           intcon3	equ	0xFF0
  6268                           postinc0	equ	0xFEE
  6269                           fsr0h	equ	0xFEA
  6270                           fsr0l	equ	0xFE9
  6271                           wreg	equ	0xFE8
  6272                           indf1	equ	0xFE7
  6273                           fsr1h	equ	0xFE2
  6274                           fsr1l	equ	0xFE1
  6275                           indf2	equ	0xFDF
  6276                           postinc2	equ	0xFDE
  6277                           postdec2	equ	0xFDD
  6278                           fsr2h	equ	0xFDA
  6279                           fsr2l	equ	0xFD9
  6280                           status	equ	0xFD8
  6281                           
  6282 ;; *************** function i2_lcdNibble *****************
  6283 ;; Defined at:
  6284 ;;		line 35 in file "lcd.c"
  6285 ;; Parameters:    Size  Location     Type
  6286 ;;  data            1    wreg     unsigned char 
  6287 ;; Auto vars:     Size  Location     Type
  6288 ;;  data            1    1[COMRAM] unsigned char 
  6289 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  6290 ;; Return value:  Size  Location     Type
  6291 ;;                  1    wreg      void 
  6292 ;; Registers used:
  6293 ;;		wreg, status,2, status,0
  6294 ;; Tracked objects:
  6295 ;;		On entry : 0/0
  6296 ;;		On exit  : 0/0
  6297 ;;		Unchanged: 0/0
  6298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6300 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6302 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6303 ;;Total ram usage:        2 bytes
  6304 ;; Hardware stack levels used:    1
  6305 ;; This function calls:
  6306 ;;		Nothing
  6307 ;; This function is called by:
  6308 ;;		i2_lcdInst
  6309 ;;		i2_putch
  6310 ;; This function uses a non-reentrant model
  6311 ;;
  6312                           
  6313                           	psect	text35
  6314  0022FA                     __ptext35:
  6315                           	opt stack 0
  6316  0022FA                     i2_lcdNibble:
  6317                           	opt stack 23
  6318                           
  6319                           ;incstack = 0
  6320                           ;i2lcdNibble@data stored from wreg
  6321  0022FA  6E02               	movwf	i2lcdNibble@data,c
  6322                           
  6323                           ;lcd.c: 37: char temp = data & 0xF0;
  6324  0022FC  5002               	movf	i2lcdNibble@data,w,c
  6325  0022FE  0BF0               	andlw	240
  6326  002300  6E01               	movwf	i2lcdNibble@temp,c
  6327                           
  6328                           ;lcd.c: 38: LATD = LATD & 0x0F;
  6329  002302  508C               	movf	3980,w,c	;volatile
  6330  002304  0B0F               	andlw	15
  6331  002306  6E8C               	movwf	3980,c	;volatile
  6332                           
  6333                           ;lcd.c: 39: LATD = temp | LATD;
  6334  002308  5001               	movf	i2lcdNibble@temp,w,c
  6335  00230A  108C               	iorwf	3980,w,c	;volatile
  6336  00230C  6E8C               	movwf	3980,c	;volatile
  6337                           
  6338                           ;lcd.c: 41: LATDbits.LATD3 = 0;
  6339  00230E  968C               	bcf	3980,3,c	;volatile
  6340                           
  6341                           ;lcd.c: 42: _delay((unsigned long)((25)*(8000000/4000000.0)));
  6342  002310  0E10               	movlw	16
  6343  002312                     i2u410_47:
  6344  002312  2EE8               	decfsz	wreg,f,c
  6345  002314  D7FE               	bra	i2u410_47
  6346  002316  D000               	nop2	
  6347                           
  6348                           ;lcd.c: 43: LATDbits.LATD3 = 1;
  6349  002318  868C               	bsf	3980,3,c	;volatile
  6350                           
  6351                           ;lcd.c: 44: _delay((unsigned long)((25)*(8000000/4000000.0)));
  6352  00231A  0E10               	movlw	16
  6353  00231C                     i2u411_47:
  6354  00231C  2EE8               	decfsz	wreg,f,c
  6355  00231E  D7FE               	bra	i2u411_47
  6356  002320  D000               	nop2	
  6357                           
  6358                           ;lcd.c: 46: data = data << 4;
  6359  002322  3802               	swapf	i2lcdNibble@data,w,c
  6360  002324  0BF0               	andlw	240
  6361  002326  6E02               	movwf	i2lcdNibble@data,c
  6362                           
  6363                           ;lcd.c: 48: temp = data & 0xF0;
  6364  002328  5002               	movf	i2lcdNibble@data,w,c
  6365  00232A  0BF0               	andlw	240
  6366  00232C  6E01               	movwf	i2lcdNibble@temp,c
  6367                           
  6368                           ;lcd.c: 49: LATD = LATD & 0x0F;
  6369  00232E  508C               	movf	3980,w,c	;volatile
  6370  002330  0B0F               	andlw	15
  6371  002332  6E8C               	movwf	3980,c	;volatile
  6372                           
  6373                           ;lcd.c: 50: LATD = temp | LATD;
  6374  002334  5001               	movf	i2lcdNibble@temp,w,c
  6375  002336  108C               	iorwf	3980,w,c	;volatile
  6376  002338  6E8C               	movwf	3980,c	;volatile
  6377                           
  6378                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  6379  00233A  968C               	bcf	3980,3,c	;volatile
  6380                           
  6381                           ;lcd.c: 53: _delay((unsigned long)((25)*(8000000/4000000.0)));
  6382  00233C  0E10               	movlw	16
  6383  00233E                     i2u412_47:
  6384  00233E  2EE8               	decfsz	wreg,f,c
  6385  002340  D7FE               	bra	i2u412_47
  6386  002342  D000               	nop2	
  6387                           
  6388                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  6389  002344  868C               	bsf	3980,3,c	;volatile
  6390                           
  6391                           ;lcd.c: 55: _delay((unsigned long)((25)*(8000000/4000000.0)));
  6392  002346  0E10               	movlw	16
  6393  002348                     i2u413_47:
  6394  002348  2EE8               	decfsz	wreg,f,c
  6395  00234A  D7FE               	bra	i2u413_47
  6396  00234C  D000               	nop2	
  6397  00234E  0012               	return		;funcret
  6398  002350                     __end_ofi2_lcdNibble:
  6399                           	opt stack 0
  6400                           pclatu	equ	0xFFB
  6401                           pclath	equ	0xFFA
  6402                           tblptru	equ	0xFF8
  6403                           tblptrh	equ	0xFF7
  6404                           tblptrl	equ	0xFF6
  6405                           tablat	equ	0xFF5
  6406                           prodh	equ	0xFF4
  6407                           prodl	equ	0xFF3
  6408                           intcon	equ	0xFF2
  6409                           intcon3	equ	0xFF0
  6410                           postinc0	equ	0xFEE
  6411                           fsr0h	equ	0xFEA
  6412                           fsr0l	equ	0xFE9
  6413                           wreg	equ	0xFE8
  6414                           indf1	equ	0xFE7
  6415                           fsr1h	equ	0xFE2
  6416                           fsr1l	equ	0xFE1
  6417                           indf2	equ	0xFDF
  6418                           postinc2	equ	0xFDE
  6419                           postdec2	equ	0xFDD
  6420                           fsr2h	equ	0xFDA
  6421                           fsr2l	equ	0xFD9
  6422                           status	equ	0xFD8
  6423                           
  6424 ;; *************** function i2_get_time *****************
  6425 ;; Defined at:
  6426 ;;		line 39 in file "time.c"
  6427 ;; Parameters:    Size  Location     Type
  6428 ;;  datime          2    3[COMRAM] PTR unsigned char 
  6429 ;;		 -> end_time(7), start_time(7), 
  6430 ;; Auto vars:     Size  Location     Type
  6431 ;;  get_time        2    6[COMRAM] int 
  6432 ;; Return value:  Size  Location     Type
  6433 ;;                  1    wreg      void 
  6434 ;; Registers used:
  6435 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6436 ;; Tracked objects:
  6437 ;;		On entry : 0/0
  6438 ;;		On exit  : 0/0
  6439 ;;		Unchanged: 0/0
  6440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6441 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6442 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6443 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6444 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6445 ;;Total ram usage:        5 bytes
  6446 ;; Hardware stack levels used:    1
  6447 ;; Hardware stack levels required when called:    2
  6448 ;; This function calls:
  6449 ;;		i2_I2C_Master_Read
  6450 ;;		i2_I2C_Master_Start
  6451 ;;		i2_I2C_Master_Stop
  6452 ;;		i2_I2C_Master_Write
  6453 ;; This function is called by:
  6454 ;;		_interrupt_handler
  6455 ;; This function uses a non-reentrant model
  6456 ;;
  6457                           
  6458                           	psect	text36
  6459  001E88                     __ptext36:
  6460                           	opt stack 0
  6461  001E88                     i2_get_time:
  6462                           	opt stack 22
  6463                           
  6464                           ;time.c: 40: I2C_Master_Start();
  6465                           
  6466                           ;incstack = 0
  6467  001E88  EC2A  F013         	call	i2_I2C_Master_Start	;wreg free
  6468                           
  6469                           ;time.c: 41: I2C_Master_Write(0b11010000);
  6470  001E8C  0E00               	movlw	0
  6471  001E8E  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6472  001E90  0ED0               	movlw	208
  6473  001E92  6E02               	movwf	i2I2C_Master_Write@d,c
  6474  001E94  EC19  F013         	call	i2_I2C_Master_Write	;wreg free
  6475                           
  6476                           ;time.c: 42: I2C_Master_Write(0x00);
  6477  001E98  0E00               	movlw	0
  6478  001E9A  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6479  001E9C  0E00               	movlw	0
  6480  001E9E  6E02               	movwf	i2I2C_Master_Write@d,c
  6481  001EA0  EC19  F013         	call	i2_I2C_Master_Write	;wreg free
  6482                           
  6483                           ;time.c: 43: I2C_Master_Stop();
  6484  001EA4  EC26  F013         	call	i2_I2C_Master_Stop	;wreg free
  6485                           
  6486                           ;time.c: 46: I2C_Master_Start();
  6487  001EA8  EC2A  F013         	call	i2_I2C_Master_Start	;wreg free
  6488                           
  6489                           ;time.c: 47: I2C_Master_Write(0b11010001);
  6490  001EAC  0E00               	movlw	0
  6491  001EAE  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6492  001EB0  0ED1               	movlw	209
  6493  001EB2  6E02               	movwf	i2I2C_Master_Write@d,c
  6494  001EB4  EC19  F013         	call	i2_I2C_Master_Write	;wreg free
  6495                           
  6496                           ;time.c: 48: for(int i = 0; i < 6; i++){
  6497  001EB8  0E00               	movlw	0
  6498  001EBA  6E08               	movwf	i2get_time@i+1,c
  6499  001EBC  0E00               	movlw	0
  6500  001EBE  6E07               	movwf	i2get_time@i,c
  6501  001EC0                     i2l3037:
  6502  001EC0  BE08               	btfsc	i2get_time@i+1,7,c
  6503  001EC2  D006               	goto	i2l3041
  6504  001EC4  5008               	movf	i2get_time@i+1,w,c
  6505  001EC6  E12D               	bnz	i2l3049
  6506  001EC8  0E06               	movlw	6
  6507  001ECA  5C07               	subwf	i2get_time@i,w,c
  6508  001ECC  B0D8               	btfsc	status,0,c
  6509  001ECE  D029               	goto	i2l3049
  6510  001ED0                     i2l3041:
  6511                           
  6512                           ;time.c: 49: datime[i] = I2C_Master_Read(1);
  6513  001ED0  5007               	movf	i2get_time@i,w,c
  6514  001ED2  2404               	addwf	i2get_time@datime,w,c
  6515  001ED4  6ED9               	movwf	fsr2l,c
  6516  001ED6  5008               	movf	i2get_time@i+1,w,c
  6517  001ED8  2005               	addwfc	i2get_time@datime+1,w,c
  6518  001EDA  6EDA               	movwf	fsr2h,c
  6519  001EDC  0E01               	movlw	1
  6520  001EDE  ECBB  F012         	call	i2_I2C_Master_Read
  6521  001EE2  6EDF               	movwf	indf2,c
  6522                           
  6523                           ;time.c: 50: datime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  6524  001EE4  5007               	movf	i2get_time@i,w,c
  6525  001EE6  2404               	addwf	i2get_time@datime,w,c
  6526  001EE8  6ED9               	movwf	fsr2l,c
  6527  001EEA  5008               	movf	i2get_time@i+1,w,c
  6528  001EEC  2005               	addwfc	i2get_time@datime+1,w,c
  6529  001EEE  6EDA               	movwf	fsr2h,c
  6530  001EF0  0E44               	movlw	low _time
  6531  001EF2  2407               	addwf	i2get_time@i,w,c
  6532  001EF4  6EE1               	movwf	fsr1l,c
  6533  001EF6  0E00               	movlw	high _time
  6534  001EF8  2008               	addwfc	i2get_time@i+1,w,c
  6535  001EFA  6EE2               	movwf	fsr1h,c
  6536  001EFC  50E7               	movf	indf1,w,c
  6537  001EFE  6E06               	movwf	??i2_get_time& (0+255),c
  6538  001F00  3806               	swapf	??i2_get_time,w,c
  6539  001F02  0B0F               	andlw	15
  6540  001F04  0B0F               	andlw	15
  6541  001F06  0D0A               	mullw	10
  6542  001F08  0E44               	movlw	low _time
  6543  001F0A  2407               	addwf	i2get_time@i,w,c
  6544  001F0C  6EE1               	movwf	fsr1l,c
  6545  001F0E  0E00               	movlw	high _time
  6546  001F10  2008               	addwfc	i2get_time@i+1,w,c
  6547  001F12  6EE2               	movwf	fsr1h,c
  6548  001F14  50E7               	movf	indf1,w,c
  6549  001F16  0B0F               	andlw	15
  6550  001F18  24F3               	addwf	prodl,w,c
  6551  001F1A  6EDF               	movwf	indf2,c
  6552  001F1C  4A07               	infsnz	i2get_time@i,f,c
  6553  001F1E  2A08               	incf	i2get_time@i+1,f,c
  6554  001F20  D7CF               	goto	i2l3037
  6555  001F22                     i2l3049:
  6556                           
  6557                           ;time.c: 52: }
  6558                           ;time.c: 53: datime[6] = I2C_Master_Read(0);
  6559  001F22  EE20 F006          	lfsr	2,6
  6560  001F26  5004               	movf	i2get_time@datime,w,c
  6561  001F28  26D9               	addwf	fsr2l,f,c
  6562  001F2A  5005               	movf	i2get_time@datime+1,w,c
  6563  001F2C  22DA               	addwfc	fsr2h,f,c
  6564  001F2E  0E00               	movlw	0
  6565  001F30  ECBB  F012         	call	i2_I2C_Master_Read
  6566  001F34  6EDF               	movwf	indf2,c
  6567                           
  6568                           ;time.c: 54: I2C_Master_Stop();
  6569  001F36  EC26  F013         	call	i2_I2C_Master_Stop	;wreg free
  6570                           
  6571                           ;time.c: 55: I2C_Master_Write(0b11010000);
  6572  001F3A  0E00               	movlw	0
  6573  001F3C  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6574  001F3E  0ED0               	movlw	208
  6575  001F40  6E02               	movwf	i2I2C_Master_Write@d,c
  6576  001F42  EC19  F013         	call	i2_I2C_Master_Write	;wreg free
  6577                           
  6578                           ;time.c: 56: I2C_Master_Write(0x00);
  6579  001F46  0E00               	movlw	0
  6580  001F48  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6581  001F4A  0E00               	movlw	0
  6582  001F4C  6E02               	movwf	i2I2C_Master_Write@d,c
  6583  001F4E  EC19  F013         	call	i2_I2C_Master_Write	;wreg free
  6584                           
  6585                           ;time.c: 57: I2C_Master_Stop();
  6586  001F52  EC26  F013         	call	i2_I2C_Master_Stop	;wreg free
  6587  001F56  0012               	return		;funcret
  6588  001F58                     __end_ofi2_get_time:
  6589                           	opt stack 0
  6590                           pclatu	equ	0xFFB
  6591                           pclath	equ	0xFFA
  6592                           tblptru	equ	0xFF8
  6593                           tblptrh	equ	0xFF7
  6594                           tblptrl	equ	0xFF6
  6595                           tablat	equ	0xFF5
  6596                           prodh	equ	0xFF4
  6597                           prodl	equ	0xFF3
  6598                           intcon	equ	0xFF2
  6599                           intcon3	equ	0xFF0
  6600                           postinc0	equ	0xFEE
  6601                           fsr0h	equ	0xFEA
  6602                           fsr0l	equ	0xFE9
  6603                           wreg	equ	0xFE8
  6604                           indf1	equ	0xFE7
  6605                           fsr1h	equ	0xFE2
  6606                           fsr1l	equ	0xFE1
  6607                           indf2	equ	0xFDF
  6608                           postinc2	equ	0xFDE
  6609                           postdec2	equ	0xFDD
  6610                           fsr2h	equ	0xFDA
  6611                           fsr2l	equ	0xFD9
  6612                           status	equ	0xFD8
  6613                           
  6614 ;; *************** function i2_I2C_Master_Write *****************
  6615 ;; Defined at:
  6616 ;;		line 47 in file "I2C.c"
  6617 ;; Parameters:    Size  Location     Type
  6618 ;;  d               2    1[COMRAM] unsigned int 
  6619 ;; Auto vars:     Size  Location     Type
  6620 ;;		None
  6621 ;; Return value:  Size  Location     Type
  6622 ;;                  1    wreg      void 
  6623 ;; Registers used:
  6624 ;;		wreg, status,2, status,0, cstack
  6625 ;; Tracked objects:
  6626 ;;		On entry : 0/0
  6627 ;;		On exit  : 0/0
  6628 ;;		Unchanged: 0/0
  6629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6630 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6633 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6634 ;;Total ram usage:        2 bytes
  6635 ;; Hardware stack levels used:    1
  6636 ;; Hardware stack levels required when called:    1
  6637 ;; This function calls:
  6638 ;;		i2_I2C_Master_Wait
  6639 ;; This function is called by:
  6640 ;;		i2_get_time
  6641 ;; This function uses a non-reentrant model
  6642 ;;
  6643                           
  6644                           	psect	text37
  6645  002632                     __ptext37:
  6646                           	opt stack 0
  6647  002632                     i2_I2C_Master_Write:
  6648                           	opt stack 22
  6649                           
  6650                           ;I2C.c: 49: I2C_Master_Wait();
  6651                           
  6652                           ;incstack = 0
  6653  002632  ECF3  F012         	call	i2_I2C_Master_Wait	;wreg free
  6654                           
  6655                           ;I2C.c: 50: SSPBUF = d;
  6656  002636  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
  6657  00263A  0012               	return		;funcret
  6658  00263C                     __end_ofi2_I2C_Master_Write:
  6659                           	opt stack 0
  6660                           pclatu	equ	0xFFB
  6661                           pclath	equ	0xFFA
  6662                           tblptru	equ	0xFF8
  6663                           tblptrh	equ	0xFF7
  6664                           tblptrl	equ	0xFF6
  6665                           tablat	equ	0xFF5
  6666                           prodh	equ	0xFF4
  6667                           prodl	equ	0xFF3
  6668                           intcon	equ	0xFF2
  6669                           intcon3	equ	0xFF0
  6670                           postinc0	equ	0xFEE
  6671                           fsr0h	equ	0xFEA
  6672                           fsr0l	equ	0xFE9
  6673                           wreg	equ	0xFE8
  6674                           indf1	equ	0xFE7
  6675                           fsr1h	equ	0xFE2
  6676                           fsr1l	equ	0xFE1
  6677                           indf2	equ	0xFDF
  6678                           postinc2	equ	0xFDE
  6679                           postdec2	equ	0xFDD
  6680                           fsr2h	equ	0xFDA
  6681                           fsr2l	equ	0xFD9
  6682                           status	equ	0xFD8
  6683                           
  6684 ;; *************** function i2_I2C_Master_Stop *****************
  6685 ;; Defined at:
  6686 ;;		line 41 in file "I2C.c"
  6687 ;; Parameters:    Size  Location     Type
  6688 ;;		None
  6689 ;; Auto vars:     Size  Location     Type
  6690 ;;		None
  6691 ;; Return value:  Size  Location     Type
  6692 ;;                  1    wreg      void 
  6693 ;; Registers used:
  6694 ;;		wreg, status,2, status,0, cstack
  6695 ;; Tracked objects:
  6696 ;;		On entry : 0/0
  6697 ;;		On exit  : 0/0
  6698 ;;		Unchanged: 0/0
  6699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6703 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6704 ;;Total ram usage:        0 bytes
  6705 ;; Hardware stack levels used:    1
  6706 ;; Hardware stack levels required when called:    1
  6707 ;; This function calls:
  6708 ;;		i2_I2C_Master_Wait
  6709 ;; This function is called by:
  6710 ;;		i2_get_time
  6711 ;; This function uses a non-reentrant model
  6712 ;;
  6713                           
  6714                           	psect	text38
  6715  00264C                     __ptext38:
  6716                           	opt stack 0
  6717  00264C                     i2_I2C_Master_Stop:
  6718                           	opt stack 22
  6719                           
  6720                           ;I2C.c: 43: I2C_Master_Wait();
  6721                           
  6722                           ;incstack = 0
  6723  00264C  ECF3  F012         	call	i2_I2C_Master_Wait	;wreg free
  6724                           
  6725                           ;I2C.c: 44: PEN = 1;
  6726  002650  84C5               	bsf	4037,2,c	;volatile
  6727  002652  0012               	return		;funcret
  6728  002654                     __end_ofi2_I2C_Master_Stop:
  6729                           	opt stack 0
  6730                           pclatu	equ	0xFFB
  6731                           pclath	equ	0xFFA
  6732                           tblptru	equ	0xFF8
  6733                           tblptrh	equ	0xFF7
  6734                           tblptrl	equ	0xFF6
  6735                           tablat	equ	0xFF5
  6736                           prodh	equ	0xFF4
  6737                           prodl	equ	0xFF3
  6738                           intcon	equ	0xFF2
  6739                           intcon3	equ	0xFF0
  6740                           postinc0	equ	0xFEE
  6741                           fsr0h	equ	0xFEA
  6742                           fsr0l	equ	0xFE9
  6743                           wreg	equ	0xFE8
  6744                           indf1	equ	0xFE7
  6745                           fsr1h	equ	0xFE2
  6746                           fsr1l	equ	0xFE1
  6747                           indf2	equ	0xFDF
  6748                           postinc2	equ	0xFDE
  6749                           postdec2	equ	0xFDD
  6750                           fsr2h	equ	0xFDA
  6751                           fsr2l	equ	0xFD9
  6752                           status	equ	0xFD8
  6753                           
  6754 ;; *************** function i2_I2C_Master_Start *****************
  6755 ;; Defined at:
  6756 ;;		line 29 in file "I2C.c"
  6757 ;; Parameters:    Size  Location     Type
  6758 ;;		None
  6759 ;; Auto vars:     Size  Location     Type
  6760 ;;		None
  6761 ;; Return value:  Size  Location     Type
  6762 ;;                  1    wreg      void 
  6763 ;; Registers used:
  6764 ;;		wreg, status,2, status,0, cstack
  6765 ;; Tracked objects:
  6766 ;;		On entry : 0/0
  6767 ;;		On exit  : 0/0
  6768 ;;		Unchanged: 0/0
  6769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6773 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6774 ;;Total ram usage:        0 bytes
  6775 ;; Hardware stack levels used:    1
  6776 ;; Hardware stack levels required when called:    1
  6777 ;; This function calls:
  6778 ;;		i2_I2C_Master_Wait
  6779 ;; This function is called by:
  6780 ;;		i2_get_time
  6781 ;; This function uses a non-reentrant model
  6782 ;;
  6783                           
  6784                           	psect	text39
  6785  002654                     __ptext39:
  6786                           	opt stack 0
  6787  002654                     i2_I2C_Master_Start:
  6788                           	opt stack 22
  6789                           
  6790                           ;I2C.c: 31: I2C_Master_Wait();
  6791                           
  6792                           ;incstack = 0
  6793  002654  ECF3  F012         	call	i2_I2C_Master_Wait	;wreg free
  6794                           
  6795                           ;I2C.c: 32: SEN = 1;
  6796  002658  80C5               	bsf	4037,0,c	;volatile
  6797  00265A  0012               	return		;funcret
  6798  00265C                     __end_ofi2_I2C_Master_Start:
  6799                           	opt stack 0
  6800                           pclatu	equ	0xFFB
  6801                           pclath	equ	0xFFA
  6802                           tblptru	equ	0xFF8
  6803                           tblptrh	equ	0xFF7
  6804                           tblptrl	equ	0xFF6
  6805                           tablat	equ	0xFF5
  6806                           prodh	equ	0xFF4
  6807                           prodl	equ	0xFF3
  6808                           intcon	equ	0xFF2
  6809                           intcon3	equ	0xFF0
  6810                           postinc0	equ	0xFEE
  6811                           fsr0h	equ	0xFEA
  6812                           fsr0l	equ	0xFE9
  6813                           wreg	equ	0xFE8
  6814                           indf1	equ	0xFE7
  6815                           fsr1h	equ	0xFE2
  6816                           fsr1l	equ	0xFE1
  6817                           indf2	equ	0xFDF
  6818                           postinc2	equ	0xFDE
  6819                           postdec2	equ	0xFDD
  6820                           fsr2h	equ	0xFDA
  6821                           fsr2l	equ	0xFD9
  6822                           status	equ	0xFD8
  6823                           
  6824 ;; *************** function i2_I2C_Master_Read *****************
  6825 ;; Defined at:
  6826 ;;		line 53 in file "I2C.c"
  6827 ;; Parameters:    Size  Location     Type
  6828 ;;  a               1    wreg     unsigned char 
  6829 ;; Auto vars:     Size  Location     Type
  6830 ;;  a               1    1[COMRAM] unsigned char 
  6831 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
  6832 ;; Return value:  Size  Location     Type
  6833 ;;                  1    wreg      unsigned char 
  6834 ;; Registers used:
  6835 ;;		wreg, status,2, status,0, cstack
  6836 ;; Tracked objects:
  6837 ;;		On entry : 0/0
  6838 ;;		On exit  : 0/0
  6839 ;;		Unchanged: 0/0
  6840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6842 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6844 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6845 ;;Total ram usage:        2 bytes
  6846 ;; Hardware stack levels used:    1
  6847 ;; Hardware stack levels required when called:    1
  6848 ;; This function calls:
  6849 ;;		i2_I2C_Master_Wait
  6850 ;; This function is called by:
  6851 ;;		i2_get_time
  6852 ;; This function uses a non-reentrant model
  6853 ;;
  6854                           
  6855                           	psect	text40
  6856  002576                     __ptext40:
  6857                           	opt stack 0
  6858  002576                     i2_I2C_Master_Read:
  6859                           	opt stack 22
  6860                           
  6861                           ;incstack = 0
  6862                           ;i2I2C_Master_Read@a stored from wreg
  6863  002576  6E02               	movwf	i2I2C_Master_Read@a,c
  6864                           
  6865                           ;I2C.c: 55: unsigned char temp;
  6866                           ;I2C.c: 56: I2C_Master_Wait();
  6867  002578  ECF3  F012         	call	i2_I2C_Master_Wait	;wreg free
  6868                           
  6869                           ;I2C.c: 57: RCEN = 1;
  6870  00257C  86C5               	bsf	4037,3,c	;volatile
  6871                           
  6872                           ;I2C.c: 58: I2C_Master_Wait();
  6873  00257E  ECF3  F012         	call	i2_I2C_Master_Wait	;wreg free
  6874                           
  6875                           ;I2C.c: 59: temp = SSPBUF;
  6876  002582  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
  6877                           
  6878                           ;I2C.c: 60: I2C_Master_Wait();
  6879  002586  ECF3  F012         	call	i2_I2C_Master_Wait	;wreg free
  6880                           
  6881                           ;I2C.c: 61: ACKDT = (a)?0:1;
  6882  00258A  5002               	movf	i2I2C_Master_Read@a,w,c
  6883  00258C  A4D8               	btfss	status,2,c
  6884  00258E  D002               	goto	i2u228_40
  6885  002590  8AC5               	bsf	4037,5,c	;volatile
  6886  002592  D001               	goto	i2l2845
  6887  002594                     i2u228_40:
  6888  002594  9AC5               	bcf	4037,5,c	;volatile
  6889  002596                     i2l2845:
  6890                           
  6891                           ;I2C.c: 62: ACKEN = 1;
  6892  002596  88C5               	bsf	4037,4,c	;volatile
  6893                           
  6894                           ;I2C.c: 63: return temp;
  6895  002598  5003               	movf	i2I2C_Master_Read@temp,w,c
  6896  00259A  0012               	return	
  6897  00259C                     __end_ofi2_I2C_Master_Read:
  6898                           	opt stack 0
  6899                           pclatu	equ	0xFFB
  6900                           pclath	equ	0xFFA
  6901                           tblptru	equ	0xFF8
  6902                           tblptrh	equ	0xFF7
  6903                           tblptrl	equ	0xFF6
  6904                           tablat	equ	0xFF5
  6905                           prodh	equ	0xFF4
  6906                           prodl	equ	0xFF3
  6907                           intcon	equ	0xFF2
  6908                           intcon3	equ	0xFF0
  6909                           postinc0	equ	0xFEE
  6910                           fsr0h	equ	0xFEA
  6911                           fsr0l	equ	0xFE9
  6912                           wreg	equ	0xFE8
  6913                           indf1	equ	0xFE7
  6914                           fsr1h	equ	0xFE2
  6915                           fsr1l	equ	0xFE1
  6916                           indf2	equ	0xFDF
  6917                           postinc2	equ	0xFDE
  6918                           postdec2	equ	0xFDD
  6919                           fsr2h	equ	0xFDA
  6920                           fsr2l	equ	0xFD9
  6921                           status	equ	0xFD8
  6922                           
  6923 ;; *************** function i2_I2C_Master_Wait *****************
  6924 ;; Defined at:
  6925 ;;		line 24 in file "I2C.c"
  6926 ;; Parameters:    Size  Location     Type
  6927 ;;		None
  6928 ;; Auto vars:     Size  Location     Type
  6929 ;;		None
  6930 ;; Return value:  Size  Location     Type
  6931 ;;                  1    wreg      void 
  6932 ;; Registers used:
  6933 ;;		wreg, status,2, status,0
  6934 ;; Tracked objects:
  6935 ;;		On entry : 0/0
  6936 ;;		On exit  : 0/0
  6937 ;;		Unchanged: 0/0
  6938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6941 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6942 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6943 ;;Total ram usage:        1 bytes
  6944 ;; Hardware stack levels used:    1
  6945 ;; This function calls:
  6946 ;;		Nothing
  6947 ;; This function is called by:
  6948 ;;		i2_I2C_Master_Start
  6949 ;;		i2_I2C_Master_Stop
  6950 ;;		i2_I2C_Master_Write
  6951 ;;		i2_I2C_Master_Read
  6952 ;; This function uses a non-reentrant model
  6953 ;;
  6954                           
  6955                           	psect	text41
  6956  0025E6                     __ptext41:
  6957                           	opt stack 0
  6958  0025E6                     i2_I2C_Master_Wait:
  6959                           	opt stack 22
  6960  0025E6                     i2l34:
  6961  0025E6  B4C7               	btfsc	4039,2,c	;volatile
  6962  0025E8  D7FE               	goto	i2l34
  6963  0025EA  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
  6964  0025EE  0E1F               	movlw	31
  6965  0025F0  1601               	andwf	??i2_I2C_Master_Wait,f,c
  6966  0025F2  B4D8               	btfsc	status,2,c
  6967  0025F4  0012               	return	
  6968  0025F6  D7F7               	goto	i2l34
  6969  0025F8                     __end_ofi2_I2C_Master_Wait:
  6970                           	opt stack 0
  6971                           pclatu	equ	0xFFB
  6972                           pclath	equ	0xFFA
  6973                           tblptru	equ	0xFF8
  6974                           tblptrh	equ	0xFF7
  6975                           tblptrl	equ	0xFF6
  6976                           tablat	equ	0xFF5
  6977                           prodh	equ	0xFF4
  6978                           prodl	equ	0xFF3
  6979                           intcon	equ	0xFF2
  6980                           intcon3	equ	0xFF0
  6981                           postinc0	equ	0xFEE
  6982                           fsr0h	equ	0xFEA
  6983                           fsr0l	equ	0xFE9
  6984                           wreg	equ	0xFE8
  6985                           indf1	equ	0xFE7
  6986                           fsr1h	equ	0xFE2
  6987                           fsr1l	equ	0xFE1
  6988                           indf2	equ	0xFDF
  6989                           postinc2	equ	0xFDE
  6990                           postdec2	equ	0xFDD
  6991                           fsr2h	equ	0xFDA
  6992                           fsr2l	equ	0xFD9
  6993                           status	equ	0xFD8
  6994                           pclatu	equ	0xFFB
  6995                           pclath	equ	0xFFA
  6996                           tblptru	equ	0xFF8
  6997                           tblptrh	equ	0xFF7
  6998                           tblptrl	equ	0xFF6
  6999                           tablat	equ	0xFF5
  7000                           prodh	equ	0xFF4
  7001                           prodl	equ	0xFF3
  7002                           intcon	equ	0xFF2
  7003                           intcon3	equ	0xFF0
  7004                           postinc0	equ	0xFEE
  7005                           fsr0h	equ	0xFEA
  7006                           fsr0l	equ	0xFE9
  7007                           wreg	equ	0xFE8
  7008                           indf1	equ	0xFE7
  7009                           fsr1h	equ	0xFE2
  7010                           fsr1l	equ	0xFE1
  7011                           indf2	equ	0xFDF
  7012                           postinc2	equ	0xFDE
  7013                           postdec2	equ	0xFDD
  7014                           fsr2h	equ	0xFDA
  7015                           fsr2l	equ	0xFD9
  7016                           status	equ	0xFD8
  7017                           
  7018                           	psect	rparam
  7019  0000                     pclatu	equ	0xFFB
  7020                           pclath	equ	0xFFA
  7021                           tblptru	equ	0xFF8
  7022                           tblptrh	equ	0xFF7
  7023                           tblptrl	equ	0xFF6
  7024                           tablat	equ	0xFF5
  7025                           prodh	equ	0xFF4
  7026                           prodl	equ	0xFF3
  7027                           intcon	equ	0xFF2
  7028                           intcon3	equ	0xFF0
  7029                           postinc0	equ	0xFEE
  7030                           fsr0h	equ	0xFEA
  7031                           fsr0l	equ	0xFE9
  7032                           wreg	equ	0xFE8
  7033                           indf1	equ	0xFE7
  7034                           fsr1h	equ	0xFE2
  7035                           fsr1l	equ	0xFE1
  7036                           indf2	equ	0xFDF
  7037                           postinc2	equ	0xFDE
  7038                           postdec2	equ	0xFDD
  7039                           fsr2h	equ	0xFDA
  7040                           fsr2l	equ	0xFD9
  7041                           status	equ	0xFD8
  7042                           
  7043                           	psect	temp
  7044  000067                     btemp:
  7045                           	opt stack 0
  7046  000067                     	ds	1
  7047  0000                     int$flags	set	btemp
  7048                           pclatu	equ	0xFFB
  7049                           pclath	equ	0xFFA
  7050                           tblptru	equ	0xFF8
  7051                           tblptrh	equ	0xFF7
  7052                           tblptrl	equ	0xFF6
  7053                           tablat	equ	0xFF5
  7054                           prodh	equ	0xFF4
  7055                           prodl	equ	0xFF3
  7056                           intcon	equ	0xFF2
  7057                           intcon3	equ	0xFF0
  7058                           postinc0	equ	0xFEE
  7059                           fsr0h	equ	0xFEA
  7060                           fsr0l	equ	0xFE9
  7061                           wreg	equ	0xFE8
  7062                           indf1	equ	0xFE7
  7063                           fsr1h	equ	0xFE2
  7064                           fsr1l	equ	0xFE1
  7065                           indf2	equ	0xFDF
  7066                           postinc2	equ	0xFDE
  7067                           postdec2	equ	0xFDD
  7068                           fsr2h	equ	0xFDA
  7069                           fsr2l	equ	0xFD9
  7070                           status	equ	0xFD8


Data Sizes:
    Strings     170
    Constant    42
    Data        0
    BSS         35
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     67     102
    BANK0           128     10      10
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_14(CODE[16]), STR_13(CODE[15]), STR_12(CODE[15]), STR_11(CODE[3]), 
		 -> STR_10(CODE[20]), STR_9(CODE[16]), STR_8(CODE[6]), STR_7(CODE[10]), 
		 -> STR_6(CODE[15]), STR_5(CODE[7]), STR_4(CODE[21]), STR_3(CODE[13]), 
		 -> STR_2(CODE[9]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    get_time@datime	PTR unsigned char  size(2) Largest target is 7
		 -> end_time(COMRAM[7]), start_time(COMRAM[7]), 


Critical Paths under _main in COMRAM

    _welcome->_printf
    _sort->_readLightSensor
    _sense_can->_side_servo_control
    _readLightSensor->_printf
    _move_can->_side_servo_control
    _get_time->_I2C_Master_Read
    _get_time->_I2C_Master_Write
    _initPIC->_I2C_Master_Init
    _initLCD->_lcdInst
    _I2C_Master_Init->___lldiv
    _display_time->_printf
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _display_sorting_time->_printf
    _debug->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _interrupt_handler in COMRAM

    _interrupt_handler->i2_get_time
    i2_putch->i2_lcdNibble
    i2_lcdInst->i2_lcdNibble
    i2_get_time->i2_I2C_Master_Read
    i2_get_time->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_sort

Critical Paths under _interrupt_handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interrupt_handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interrupt_handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interrupt_handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interrupt_handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interrupt_handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interrupt_handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interrupt_handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interrupt_handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interrupt_handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interrupt_handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   43272
                              _debug
               _display_sorting_time
                       _display_time
                            _initPIC
                               _sort
                            _welcome
 ---------------------------------------------------------------------------------
 (1) _welcome                                              2     2      0    4219
                                             58 COMRAM     2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _sort                                                10    10      0   20493
                                              0 BANK0     10    10      0
                               _gate
                           _get_time
                            _lcdInst
                 _main_servo_control
                           _move_can
                             _printf
                    _readLightSensor
                          _sense_can
                             _shaker
                 _side_servo_control
 ---------------------------------------------------------------------------------
 (2) _shaker                                               3     3      0      47
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _sense_can                                           19    17      2    3695
                                             30 COMRAM    19    17      2
                 _main_servo_control
                            _readADC
                 _side_servo_control
 ---------------------------------------------------------------------------------
 (2) _readLightSensor                                      9     7      2    4346
                                             58 COMRAM     9     7      2
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _move_can                                            12    10      2    3531
                                             30 COMRAM    12    10      2
                 _main_servo_control
                 _side_servo_control
 ---------------------------------------------------------------------------------
 (2) _get_time                                             5     3      2    1523
                                             27 COMRAM     5     3      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _gate                                                 3     3      0       0
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initPIC                                              0     0      0    4665
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                 _main_servo_control
                 _side_servo_control
 ---------------------------------------------------------------------------------
 (2) _side_servo_control                                   6     4      2    1683
                                             24 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _main_servo_control                                   5     3      2    1375
                                             24 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     135
                                             27 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     440
                                             37 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     290
                                             24 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _display_time                                         3     3      0    5395
                                             58 COMRAM     3     3      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2    1032
                                             25 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      45
                                             25 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _display_sorting_time                                 4     4      0    4253
                                             58 COMRAM     4     4      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _debug                                                3     3      0    4247
                                             58 COMRAM     3     3      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _readADC                                              2     2      0      22
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    4084
                                             36 COMRAM    22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                             26 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     386
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                             31 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     549
                                             24 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                             26 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _interrupt_handler                                   16    16      0     830
                                              8 COMRAM    16    16      0
                         i2_get_time
                          i2_lcdInst
                            i2_putch
 ---------------------------------------------------------------------------------
 (7) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) i2_get_time                                           5     3      2     449
                                              3 COMRAM     5     3      2
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Write                                   2     0      2     152
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _debug
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _readADC
   _display_sorting_time
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _display_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _initPIC
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _initLCD
       _lcdInst
         _lcdNibble
     _main_servo_control
     _side_servo_control
   _sort
     _gate
     _get_time
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _main_servo_control
     _move_can
       _main_servo_control
       _side_servo_control
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _readLightSensor
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _readADC
     _sense_can
       _main_servo_control
       _readADC
       _side_servo_control
     _shaker
     _side_servo_control
   _welcome
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble

 _interrupt_handler (ROOT)
   i2_get_time
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait
   i2_lcdInst
     i2_lcdNibble
   i2_putch
     i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      A       A       5        7.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     43      66       1       81.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      70      34        0.0%
DATA                 0      0      70       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Apr 10 02:05:42 2017

           i2_I2C_Master_Start 2654             i2_I2C_Master_Write 2632                             l34 25D4  
          ___wmul@multiplicand 001B                    __CFG_BORV$3 000000                   __CFG_CP0$OFF 000000  
                 __CFG_CP1$OFF 000000                   __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000  
                  __CFG_OSC$HS 000000                _readLightSensor 1F58                            l134 2524  
                          l321 237A                            l161 15DA                            l318 2352  
                          l503 11C2                            l280 1D98                            l272 1CFE  
                          l417 21AC                            l282 1DB6                            l290 1B6A  
                          l419 21EE                            l276 1D4E                            l294 1BBE  
                          l286 1B1A             _side_servo_control 1AF6                            l296 1BE8  
                          l948 23EA                            l958 24B8                            l895 20FC  
                 __CFG_CPB$OFF 000000                            _PEN 007E2A                   __CFG_CPD$OFF 000000  
                          _SEN 007E28                  ?_display_time 0001            ?i2_I2C_Master_Start 0001  
          ?i2_I2C_Master_Write 0002   __end_of_display_sorting_time 22A4                            prod 000FF3  
                          wreg 000FE8               sense_can@cansize 0024                    _total_count 004B  
          ?_side_servo_control 0019                   __CFG_LVP$OFF 000000                   __CFG_WDT$OFF 000000  
                         l3203 23E0                           l3211 248E                           l4003 241E  
                         l3213 2496                           l2501 20EE                           l3215 249A  
                         l4007 242C                           l3321 1B5A                           l3219 24AE  
                         l3243 254A                           l3331 1B9C                           l3405 123A  
                         l3421 126A                           l3317 1B4A                           l3501 1438  
                         l3191 23B8                           l3175 25B2                           l3407 123E  
                         l3423 127A                           l3351 10F0                           l3335 1BAE  
                         l3193 23C0                           l3441 12D6                           l3433 12B8  
                         l3353 10FE                           l3505 1446                           l3513 1464  
                         l3195 23C4                           l3435 12C0                           l3371 1190  
                         l3363 1132                           l3347 10E0                           l2491 20BA  
                         l3275 1D2E                           l3461 1364                           l3453 1308  
                         l3429 1294                           l3357 1104                           l2493 20BE  
                         l3293 1D88                           l3621 163C                           l3509 145E  
                         l3471 13C0                           l3447 12EC                           l3391 120A  
                         l3375 1194                           l3279 1D3E                           l3543 14F4  
                         l3519 1488                           l3449 12F4                           l3457 131A  
                         l3393 120E                           l3473 13C8                           l2489 20AE  
                         l3289 1D76                           l3721 16E2                           l3633 1672  
                         l3617 162C                           l3561 1542                           l3545 14FC  
                         l3459 1320                           l3467 13AA                           l3387 11F0  
                         l3731 172A                           l3651 1F6A                           l3627 1662  
                         l3555 1532                           l3491 1402                     i2_get_time 1E88  
                         l3469 13BA                           l3821 2374                           l3717 16D2  
                         l3645 1692                           l3637 1678                           l3573 1562  
                         l3565 1548                           l3549 150C                           l3911 1CD2  
                         l3751 179C                           l3743 176E                           l3671 1FDA  
                         l3663 1FA6                           l3583 1584                           l3495 1412  
                         l3761 17EC                           l3753 17B6                           l3729 1710  
                         l3657 1F96                           l3577 156C                           l3827 239C  
                         l3691 1E00                           l3739 175E                           l3595 15BA  
                         l3579 1574                           l3773 182A                           l3765 17FC  
                         l3669 1FCA                           l3589 15AA                           l3687 1DF0  
                         l3783 187A                           l3775 1844                           l3679 1FF4  
                         l3599 15C0                           l3943 1ABE                           l3929 1A58  
                         l3953 1AEC                           l3873 2184                           l3883 1C1C  
                         l3699 1E52                           l3795 18B8                           l3787 188A  
                         l3893 1C40                           l3975 24CA                           l3887 1C24  
                         l3879 1C08                           l3799 219C                           l3991 23F8  
                         l3995 2404                           l3999 2410                           _ADON 007E10  
                         STR_1 10CF                           STR_2 10BC                           STR_3 1087  
                         STR_4 102B                           STR_5 10C5                           STR_6 1085  
                         STR_7 10B2                           STR_8 10CC                           STR_9 1065  
                         u3100 1456                           _LATA 000F89                           _LATB 000F8A  
                         _LATC 000F8B                           _LATD 000F8C                           _LATE 000F8D  
                         u4007 2474                           u3240 15D0                           u4017 1BFA  
                         u3330 1FEA                           u4027 1CBE                           u4037 2256  
                         u2630 2548                           u3190 1558                           u4047 228C  
                         u4057 24F4                           u3290 1688                           u4067 22BC  
                         u4077 22C6                           u2670 1CFC                           u4087 22E8  
                         u2760 1B18                           u4097 22F2                           u1865 221E  
                         u3707 21DE                           u3717 146E                           u3807 181A  
                         u3727 14B4                           u3817 1864                           u3737 15FE  
                         u3657 2124                           u3907 1B88                           u3827 18A8  
                         u3747 1FBE                           u3667 1A18                           _RCEN 007E2B  
                         u3917 1BC6                           u3837 235A                           u3757 16BC  
                         u3677 1AD2                           u3927 1BD8                           u3847 236A  
                         u3767 1700                           u3687 21B6                           u3937 1D06  
                         u3857 2382                           u3777 1748                           u3697 21CA  
                         i2l34 25E6                           u3947 1D18                           u3867 2392  
                         u3787 178C                           u3957 1D56                           u3877 1B22  
                         u3797 17D6                           u3967 1D66                           u3887 1B34  
                         u3977 1D9C                           u3897 1B72                           u3987 1DA8  
                         u3997 2440                           _RSEN 007E29                           _flag 0055  
                         _gate 2350                           _main 23F4                           _mode 0058  
                         _keys 1001                           _time 0044                           fsr0h 000FEA  
                         fsr1h 000FE2                           fsr2h 000FDA                           fsr0l 000FE9  
                         indf1 000FE7                           indf2 000FDF                           fsr1l 000FE1  
                         fsr2l 000FD9                           _sort 19E6                           btemp 0067  
         ??i2_I2C_Master_Start 0002           ??i2_I2C_Master_Write 0004                           prodh 000FF4  
                         prodl 000FF3                           start 000E                  __CFG_IESO$OFF 000000  
              __end_ofi2_putch 261C                  __CFG_MCLRE$ON 000000                   ___param_bank 000000  
         ??_side_servo_control 001B                    i2_lcdNibble 22FA               ?_I2C_Master_Init 0026  
             ?_I2C_Master_Read 0001               ?_I2C_Master_Wait 0001               ?_I2C_Master_Stop 0001  
                        ?_gate 0001                          ?_main 0001                          _ACKEN 007E2C  
                        _ACKDT 007E2D                 ??_display_time 003B                          STR_10 1040  
                        STR_11 10D2                          STR_12 1094                          STR_13 10A3  
                        STR_14 1075                          STR_15 1054                          ?_sort 0001  
              __end_of___lldiv 210E                __end_of___lwdiv 23F4                __end_of___lwmod 24C2  
                        _PORTB 000F81                          _TRISA 000F92                          _TRISB 000F93  
                        _TRISC 000F94                          _TRISD 000F95                          _TRISE 000F96  
                __CFG_PWRT$OFF 000000                  __CFG_WRT0$OFF 000000                  __CFG_WRT1$OFF 000000  
                __CFG_WRT2$OFF 000000                  __CFG_WRT3$OFF 000000                __end_of_lcdInst 2610  
               __CFG_EBTR0$OFF 000000                 __CFG_FCMEN$OFF 000000                 __CFG_EBTR1$OFF 000000  
               __CFG_EBTR2$OFF 000000                 __CFG_EBTR3$OFF 000000                  __CFG_WRTB$OFF 000000  
                __CFG_WRTC$OFF 000000                  __CFG_WRTD$OFF 000000                __end_of_readADC 252A  
              __end_of_initLCD 2480                 __CFG_EBTRB$OFF 000000                          _debug 24C2  
              __end_of_initPIC 208C                __end_of_dpowers 101C                __end_of_isdigit 25BA  
                        _putch 25F8                          pclath 000FFA                          tablat 000FF5  
              __end_of_welcome 218C                          status 000FD8                 __CFG_PBADEN$ON 000000  
              __initialization 25BA                   __end_of_gate 23A2             __size_ofi2_lcdInst 000C  
      __end_of_readLightSensor 1FFE                   __end_of_main 243A                   __end_of_keys 1012  
                 __end_of_sort 1AF6          main_servo_control@dir 0019                         ??_gate 0019  
                       ??_main 0044                         ??_sort 0080                  __activetblptr 000002  
                  i2get_time@i 0007              ?_I2C_Master_Start 0001              ?_I2C_Master_Write 001A  
                       ?_debug 0001             ??_I2C_Master_Start 001A                         _ADCON0 000FC2  
                       _ADCON1 000FC1             ??_I2C_Master_Write 001C                         _ADCON2 000FC0  
                       _ADRESH 000FC4                         _ADRESL 000FC3                i2lcdNibble@data 0002  
                  ?i2_get_time 0004                         ?_putch 0001                i2lcdNibble@temp 0001  
                       _INT1IE 007F83                         _INT1IF 007F80                         i2l3041 1ED0  
                       i2l3131 1992                         i2l3123 1974                         i2l3037 1EC0  
                       i2l3117 1964                         i2l3135 199C                         i2l3049 1F22  
                       i2l3139 19A8                         i2l2845 2596                      ??i2_putch 0003  
             i2get_time@datime 0004                         _SSPADD 000FC8                         _TRISC3 007CA3  
                       _TRISC4 007CA4                         _SSPBUF 000FC9                 __CFG_XINST$OFF 000000  
         _display_sorting_time 224A               __end_of_get_time 1E88                         ___wmul 2550  
               __CFG_STVREN$ON 000000     __end_of_main_servo_control 1DB8                      ??___lldiv 0021  
                    ??___lwdiv 001D                      ??___lwmod 0024                         debug@i 003C  
                       clear_0 25C0                         _shaker 218C                      ??_lcdInst 001B  
                       _printf 10D6                      ??_readADC 0019                      ??_initLCD 001C  
                    ??_initPIC 002E               __end_of_move_can 18D2                      ??_isdigit 0019  
                 __mediumconst 0000                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8                      ??_welcome 003B                  display_time@i 003D  
            __end_ofi2_lcdInst 2628               readLightSensor@i 0040                     __accesstop 0080  
      __end_of__initialization 25C6           __end_of_display_time 1CDA                  ___rparam_used 000001  
        ?_display_sorting_time 0001                 __pcstackCOMRAM 0001               ?_readLightSensor 003B  
                __end_of_debug 2502                  __end_of_putch 2604            __size_ofi2_get_time 00D0  
       sense_can@conductOnFall 0026            main_servo_control@i 001C             __size_of_lcdNibble 0056  
                  i2putch@data 0003                        ??_debug 003B                        ??_putch 001B  
               _soup_can_label 004F                   ?i2_lcdNibble 0001                        ?___wmul 0019  
               get_time@datime 001C                        ?_shaker 0001                        ?_printf 0025  
           __size_of_sense_can 02BA            side_servo_control@i 001D                        _SSPCON1 000FC6  
                      _SSPCON2 000FC5                        _SSPSTAT 000FC7                      ?_get_time 001C  
                      i2_putch 2610         ??_display_sorting_time 003B    __size_ofi2_I2C_Master_Start 0008  
            __end_of_lcdNibble 22FA    __size_ofi2_I2C_Master_Write 000A                        __Hparam 0000  
                    ?_move_can 001F                        __Lparam 0000    __size_of_side_servo_control 00F4  
                      ___lldiv 208C                __size_of___wmul 0026                        ___lwdiv 23A2  
                      ___lwmod 2480                   __psmallconst 1000                        __pcinit 25BA  
                      __ramtop 1000                __size_of_shaker 0064                        _lcdInst 2604  
                      __ptext0 23F4                        __ptext1 210E                        __ptext2 19E6  
                      __ptext3 218C                        __ptext4 13E2                        __ptext5 1F58  
                      __ptext6 169C                        __ptext7 1DB8                        __ptext8 2350  
                      __ptext9 1FFE                __size_of_printf 030C                        _readADC 2502  
                      _initLCD 243A              __end_of_hexpowers 1024                        _initPIC 1FFE  
                      _dpowers 1012                        _isdigit 259C       __size_of_I2C_Master_Init 005A  
     __size_of_I2C_Master_Read 0026       __size_of_I2C_Master_Wait 0012       __size_of_I2C_Master_Stop 0008  
                      _welcome 210E                   ??i2_get_time 0006                     ??_get_time 001E  
               __pintcode_body 18D2          __size_of_display_time 00F0           end_of_initialization 25C6  
              move_can@canType 001F                  __Lmediumconst 0000                        int_func 18D2  
            __end_of_sense_can 169C                        shaker@i 001A      __size_of_I2C_Master_Start 0008  
    __size_of_I2C_Master_Write 000A                ___lldiv@divisor 001D                ___lldiv@counter 0025  
                   ??_move_can 0021                        printf@c 003A                        printf@f 0025  
             I2C_Master_Init@c 0026               I2C_Master_Read@a 001A                        postdec2 000FDD  
                   _timeSetter 1024                        postinc0 000FEE                        postinc2 000FDE  
                      sort@can 0088                        sort@tap 0082                        sort@tin 0084  
           __end_ofi2_get_time 1F58                      _PORTBbits 000F81          side_servo_control@dir 0019  
                 _display_time 1BEA                 sense_can@H_max 0030             _main_servo_control 1CDA  
               sense_can@i_350 002A                 sense_can@i_351 002C                 sense_can@i_352 002E  
            i2_I2C_Master_Read 2576              i2_I2C_Master_Wait 25E6              i2_I2C_Master_Stop 264C  
               _pop_can_no_tap 0051             ?i2_I2C_Master_Read 0001             ?i2_I2C_Master_Wait 0001  
           ?i2_I2C_Master_Stop 0001                     _start_time 0060            ?_main_servo_control 0019  
                    i2_lcdInst 261C                    printf@width 0038            ??i2_I2C_Master_Read 0002  
          ??i2_I2C_Master_Wait 0001            ??i2_I2C_Master_Stop 0002                 __end_of___wmul 2576  
         __size_ofi2_lcdNibble 0056           ??_main_servo_control 001B                  i2lcdInst@data 0003  
               __end_of_shaker 21F0                 __end_of_printf 13E2      __end_ofi2_I2C_Master_Read 259C  
    __end_ofi2_I2C_Master_Wait 25F8            start_initialization 25BA      __end_ofi2_I2C_Master_Stop 2654  
        i2I2C_Master_Read@temp 0003              ??_I2C_Master_Init 002A              ??_I2C_Master_Read 001A  
                  sort@noLabel 0086              ??_I2C_Master_Wait 0019                     ?i2_lcdInst 0001  
            ??_I2C_Master_Stop 001A                       ??___wmul 001D                  move_can@i_636 0025  
                move_can@i_637 0027                  move_can@i_638 0029               __CFG_LPT1OSC$OFF 000000  
                     ??_shaker 0019                       ??_printf 002D              _soup_can_no_label 004D  
     __size_of_readLightSensor 00A6                    __pbssCOMRAM 0044                  __pcstackBANK0 0080  
                 _isdigit$1112 001A                       ?i2_putch 0001              __size_of_get_time 00D0  
             _I2C_Master_Start 2644            i2I2C_Master_Write@d 0002               _I2C_Master_Write 2628  
             ___lwdiv@dividend 0019              __CFG_CCP2MX$PORTC 000000                      __pintcode 0008  
    interrupt_handler@keypress 0018                      _lcdNibble 22A4              __size_of_move_can 0236  
                     ?___lldiv 0019                       ?___lwdiv 0019                       ?___lwmod 0020  
                     ?_lcdInst 0001              _interrupt_handler 0008                       ?_readADC 0001  
                     ?_initLCD 0001                       ?_initPIC 0001                    __smallconst 1000  
                     ?_isdigit 0001     __size_ofi2_I2C_Master_Read 0026     __size_ofi2_I2C_Master_Wait 0012  
   __size_ofi2_I2C_Master_Stop 0008             ?_interrupt_handler 0001                       ?_welcome 0001  
                    _hexpowers 101C               ___lwdiv@quotient 001E                 __size_of_debug 0040  
               __size_of_putch 000C            ??_interrupt_handler 0009     __end_ofi2_I2C_Master_Start 265C  
   __end_ofi2_I2C_Master_Write 263C                    ??i2_lcdInst 0003                     sense_can@i 0028  
               ___wmul@product 001D                       _LATAbits 000F89                       _LATBbits 000F8A  
                     _LATCbits 000F8B                       _LATDbits 000F8C                       _LATEbits 000F8D  
   __end_of_side_servo_control 1BEA  __size_of_display_sorting_time 005A                       i2u410_47 2312  
                     i2u411_47 231C                       i2u228_40 2594                       i2u412_47 233E  
                     i2u413_47 2348                      _sense_can 13E2               __CFG_WDTPS$32768 000000  
                   ?_lcdNibble 0001      __end_of_interrupt_handler 19E6                     _ADCON0bits 000FC2  
            ___wmul@multiplier 0019                  lcdNibble@data 001A                     printf@flag 0037  
                lcdNibble@temp 0019                     printf@prec 0034                      get_time@i 001F  
          I2C_Master_Read@temp 001B              ??_readLightSensor 003D               __size_ofi2_putch 000C  
                     __Hrparam 0000                       __Lrparam 0000                     ?_sense_can 001F  
           __CFG_BOREN$SBORDIS 000000               __size_of___lldiv 0082               __size_of___lwdiv 0052  
             __size_of___lwmod 0042                 readADC@channel 001A             i2I2C_Master_Read@a 0002  
             __size_of_lcdInst 000C                _I2C_Master_Init 21F0               __size_of_readADC 0028  
              _I2C_Master_Read 252A               __size_of_initLCD 0046               __size_of_initPIC 008E  
              _I2C_Master_Wait 25D4                _I2C_Master_Stop 263C               __size_of_isdigit 001E  
              ___lwdiv@divisor 001B                ___lwdiv@counter 001D                       __ptext10 1AF6  
                     __ptext11 1CDA                       __ptext20 25D4                       __ptext12 243A  
                     __ptext21 224A                       __ptext13 21F0                       __ptext30 2604  
                     __ptext22 24C2                       __ptext14 208C                       __ptext31 22A4  
                     __ptext23 2502                       __ptext15 1BEA                       __ptext40 2576  
                     __ptext24 10D6                       __ptext16 2628                       __ptext41 25E6  
                     __ptext33 2610                       __ptext25 25F8                       __ptext17 263C  
                     __ptext34 261C                       __ptext26 259C                       __ptext18 2644  
                     __ptext35 22FA                       __ptext27 2550                       __ptext19 252A  
                     __ptext36 1E88                       __ptext28 2480                       __ptext37 2632  
                     __ptext29 23A2                       __ptext38 264C                       __ptext39 2654  
                     _end_time 0059               __size_of_welcome 007E                       _get_time 1DB8  
                    move_can@i 0023                  __size_of_gate 0052                  __size_of_main 0046  
         readLightSensor@H_max 0042                  __size_of_sort 0110                       _move_can 169C  
                ??i2_lcdNibble 0001                    ??_lcdNibble 0019                       int$flags 0067  
                  _passed_time 0057                      printf@idx 0031                      printf@val 0035  
   __size_of_interrupt_handler 19DE    __size_of_main_servo_control 00DE                      putch@data 001B  
     __end_of_I2C_Master_Start 264C       __end_of_I2C_Master_Write 2632                     _INTCONbits 000FF2  
                     isdigit@c 001B                       intlevel2 0000             __end_of_timeSetter 102B  
             ___lwmod@dividend 0020               ___lldiv@dividend 0019          display_sorting_time@i 003D  
                  ??_sense_can 0021                    _pop_can_tap 0053                       printf@ap 0032  
      __end_of_I2C_Master_Init 224A        __end_of_I2C_Master_Read 2550        __end_of_I2C_Master_Wait 25E6  
      __end_of_I2C_Master_Stop 2644                    lcdInst@data 001B            __end_ofi2_lcdNibble 2350  
             ___lldiv@quotient 0021              I2C_Master_Write@d 001A                ___lwmod@divisor 0022  
              ___lwmod@counter 0024  
