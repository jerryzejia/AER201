

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Mar 29 03:41:05 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1
    34                           	psect	text25,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1
    40                           	psect	text30,global,reloc=2,class=CODE,delta=1
    41                           	psect	text31,global,reloc=2,class=CODE,delta=1
    42                           	psect	text32,global,reloc=2,class=CODE,delta=1
    43                           	psect	text33,global,reloc=2,class=CODE,delta=1
    44                           	psect	text34,global,reloc=2,class=CODE,delta=1
    45                           	psect	text35,global,reloc=2,class=CODE,delta=1
    46                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    47                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    48                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    49  0000                     
    50                           ; Version 1.41
    51                           ; Generated 25/01/2017 GMT
    52                           ; 
    53                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    54                           ; All rights reserved.
    55                           ; 
    56                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    57                           ; 
    58                           ; Redistribution and use in source and binary forms, with or without modification, are
    59                           ; permitted provided that the following conditions are met:
    60                           ; 
    61                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    62                           ;        conditions and the following disclaimer.
    63                           ; 
    64                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    65                           ;        of conditions and the following disclaimer in the documentation and/or other
    66                           ;        materials provided with the distribution.
    67                           ; 
    68                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    69                           ;        software without specific prior written permission.
    70                           ; 
    71                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    72                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    73                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    74                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    75                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    76                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    77                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    78                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    79                           ; 
    80                           ; 
    81                           ; Code-generator required, PIC18F4620 Definitions
    82                           ; 
    83                           ; SFR Addresses
    84  0000                     
    85                           	psect	smallconst
    86  001000                     __psmallconst:
    87                           	opt stack 0
    88  001000  00                 	db	0
    89  001001                     _keys:
    90                           	opt stack 0
    91  001001  31                 	db	49
    92  001002  32                 	db	50
    93  001003  33                 	db	51
    94  001004  41                 	db	65
    95  001005  34                 	db	52
    96  001006  35                 	db	53
    97  001007  36                 	db	54
    98  001008  42                 	db	66
    99  001009  37                 	db	55
   100  00100A  38                 	db	56
   101  00100B  39                 	db	57
   102  00100C  43                 	db	67
   103  00100D  2A                 	db	42
   104  00100E  30                 	db	48
   105  00100F  23                 	db	35
   106  001010  44                 	db	68
   107  001011  00                 	db	0
   108  001012                     __end_of_keys:
   109                           	opt stack 0
   110  001012                     _dpowers:
   111                           	opt stack 0
   112  001012  0001               	dw	1
   113  001014  000A               	dw	10
   114  001016  0064               	dw	100
   115  001018  03E8               	dw	1000
   116  00101A  2710               	dw	10000
   117  00101C                     __end_of_dpowers:
   118                           	opt stack 0
   119  00101C                     _hexpowers:
   120                           	opt stack 0
   121  00101C  0001               	dw	1
   122  00101E  0010               	dw	16
   123  001020  0100               	dw	256
   124  001022  1000               	dw	4096
   125  001024                     __end_of_hexpowers:
   126                           	opt stack 0
   127  001024                     _timeSetter:
   128                           	opt stack 0
   129  001024  00                 	db	0
   130  001025  19                 	db	25
   131  001026  15                 	db	21
   132  001027  04                 	db	4
   133  001028  25                 	db	37
   134  001029  01                 	db	1
   135  00102A  17                 	db	23
   136  00102B                     __end_of_timeSetter:
   137                           	opt stack 0
   138  0000                     _PORTB	set	3969
   139  0000                     _LATE	set	3981
   140  0000                     _LATC	set	3979
   141  0000                     _LATB	set	3978
   142  0000                     _LATA	set	3977
   143  0000                     _TRISB	set	3987
   144  0000                     _TRISD	set	3989
   145  0000                     _TRISC	set	3988
   146  0000                     _TRISA	set	3986
   147  0000                     _LATAbits	set	3977
   148  0000                     _LATBbits	set	3978
   149  0000                     _LATCbits	set	3979
   150  0000                     _PORTBbits	set	3969
   151  0000                     _LATD	set	3980
   152  0000                     _LATDbits	set	3980
   153  0000                     _TRISC4	set	31908
   154  0000                     _TRISC3	set	31907
   155  0000                     _ADCON2	set	4032
   156  0000                     _ADCON1	set	4033
   157  0000                     _ADRESL	set	4035
   158  0000                     _ADRESH	set	4036
   159  0000                     _ADCON0bits	set	4034
   160  0000                     _ADCON0	set	4034
   161  0000                     _SSPBUF	set	4041
   162  0000                     _SSPADD	set	4040
   163  0000                     _SSPCON2	set	4037
   164  0000                     _SSPCON1	set	4038
   165  0000                     _SSPSTAT	set	4039
   166  0000                     _ADON	set	32272
   167  0000                     _ACKEN	set	32300
   168  0000                     _ACKDT	set	32301
   169  0000                     _RCEN	set	32299
   170  0000                     _PEN	set	32298
   171  0000                     _RSEN	set	32297
   172  0000                     _SEN	set	32296
   173  0000                     _TMR0L	set	4054
   174  0000                     _TMR0H	set	4055
   175  0000                     _T0CON	set	4053
   176  0000                     _TMR0ON	set	32431
   177  0000                     _INTCONbits	set	4082
   178  0000                     _INT1IF	set	32640
   179  0000                     _INT1IE	set	32643
   180  00102B                     STR_3:
   181  00102B  32                 	db	50	;'2'
   182  00102C  20                 	db	32
   183  00102D  42                 	db	66	;'B'
   184  00102E  61                 	db	97	;'a'
   185  00102F  63                 	db	99	;'c'
   186  001030  6B                 	db	107	;'k'
   187  001031  20                 	db	32
   188  001032  74                 	db	116	;'t'
   189  001033  6F                 	db	111	;'o'
   190  001034  20                 	db	32
   191  001035  73                 	db	115	;'s'
   192  001036  74                 	db	116	;'t'
   193  001037  61                 	db	97	;'a'
   194  001038  72                 	db	114	;'r'
   195  001039  74                 	db	116	;'t'
   196  00103A  20                 	db	32
   197  00103B  6D                 	db	109	;'m'
   198  00103C  65                 	db	101	;'e'
   199  00103D  6E                 	db	110	;'n'
   200  00103E  75                 	db	117	;'u'
   201  00103F  00                 	db	0
   202  001040                     STR_9:
   203  001040  50                 	db	80	;'P'
   204  001041  72                 	db	114	;'r'
   205  001042  65                 	db	101	;'e'
   206  001043  73                 	db	115	;'s'
   207  001044  73                 	db	115	;'s'
   208  001045  20                 	db	32
   209  001046  31                 	db	49	;'1'
   210  001047  2F                 	db	47
   211  001048  32                 	db	50	;'2'
   212  001049  2F                 	db	47
   213  00104A  41                 	db	65	;'A'
   214  00104B  20                 	db	32
   215  00104C  74                 	db	116	;'t'
   216  00104D  6F                 	db	111	;'o'
   217  00104E  20                 	db	32
   218  00104F  73                 	db	115	;'s'
   219  001050  74                 	db	116	;'t'
   220  001051  6F                 	db	111	;'o'
   221  001052  70                 	db	112	;'p'
   222  001053  00                 	db	0
   223  001054                     STR_15:
   224  001054  30                 	db	48	;'0'
   225  001055  31                 	db	49	;'1'
   226  001056  32                 	db	50	;'2'
   227  001057  33                 	db	51	;'3'
   228  001058  34                 	db	52	;'4'
   229  001059  35                 	db	53	;'5'
   230  00105A  36                 	db	54	;'6'
   231  00105B  37                 	db	55	;'7'
   232  00105C  38                 	db	56	;'8'
   233  00105D  39                 	db	57	;'9'
   234  00105E  61                 	db	97	;'a'
   235  00105F  62                 	db	98	;'b'
   236  001060  63                 	db	99	;'c'
   237  001061  64                 	db	100	;'d'
   238  001062  65                 	db	101	;'e'
   239  001063  66                 	db	102	;'f'
   240  001064  00                 	db	0
   241  001065                     STR_8:
   242  001065  53                 	db	83	;'S'
   243  001066  6F                 	db	111	;'o'
   244  001067  72                 	db	114	;'r'
   245  001068  74                 	db	116	;'t'
   246  001069  69                 	db	105	;'i'
   247  00106A  6E                 	db	110	;'n'
   248  00106B  67                 	db	103	;'g'
   249  00106C  20                 	db	32
   250  00106D  53                 	db	83	;'S'
   251  00106E  74                 	db	116	;'t'
   252  00106F  61                 	db	97	;'a'
   253  001070  72                 	db	114	;'r'
   254  001071  74                 	db	116	;'t'
   255  001072  65                 	db	101	;'e'
   256  001073  64                 	db	100	;'d'
   257  001074  00                 	db	0
   258  001075                     STR_12:
   259  001075  54                 	db	84	;'T'
   260  001076  69                 	db	105	;'i'
   261  001077  6D                 	db	109	;'m'
   262  001078  65                 	db	101	;'e'
   263  001079  20                 	db	32
   264  00107A  75                 	db	117	;'u'
   265  00107B  73                 	db	115	;'s'
   266  00107C  65                 	db	101	;'e'
   267  00107D  64                 	db	100	;'d'
   268  00107E  3A                 	db	58	;':'
   269  00107F  20                 	db	32
   270  001080  25                 	db	37
   271  001081  64                 	db	100	;'d'
   272  001082  20                 	db	32
   273  001083  73                 	db	115	;'s'
   274  001084  00                 	db	0
   275  001085                     STR_5:
   276  001085  20                 	db	32
   277  001086  20                 	db	32
   278  001087  20                 	db	32
   279  001088  20                 	db	32
   280  001089  20                 	db	32
   281  00108A  20                 	db	32
   282  00108B  20                 	db	32
   283  00108C  20                 	db	32
   284  00108D  20                 	db	32
   285  00108E  20                 	db	32
   286  00108F  20                 	db	32
   287  001090  20                 	db	32
   288  001091  20                 	db	32
   289  001092  20                 	db	32
   290  001093  00                 	db	0
   291  001094                     STR_10:
   292  001094  25                 	db	37
   293  001095  30                 	db	48	;'0'
   294  001096  32                 	db	50	;'2'
   295  001097  78                 	db	120	;'x'
   296  001098  2F                 	db	47
   297  001099  25                 	db	37
   298  00109A  30                 	db	48	;'0'
   299  00109B  32                 	db	50	;'2'
   300  00109C  78                 	db	120	;'x'
   301  00109D  2F                 	db	47
   302  00109E  25                 	db	37
   303  00109F  30                 	db	48	;'0'
   304  0010A0  32                 	db	50	;'2'
   305  0010A1  78                 	db	120	;'x'
   306  0010A2  00                 	db	0
   307  0010A3                     STR_11:
   308  0010A3  25                 	db	37
   309  0010A4  30                 	db	48	;'0'
   310  0010A5  32                 	db	50	;'2'
   311  0010A6  78                 	db	120	;'x'
   312  0010A7  3A                 	db	58	;':'
   313  0010A8  25                 	db	37
   314  0010A9  30                 	db	48	;'0'
   315  0010AA  32                 	db	50	;'2'
   316  0010AB  78                 	db	120	;'x'
   317  0010AC  3A                 	db	58	;':'
   318  0010AD  25                 	db	37
   319  0010AE  30                 	db	48	;'0'
   320  0010AF  32                 	db	50	;'2'
   321  0010B0  78                 	db	120	;'x'
   322  0010B1  00                 	db	0
   323  0010B2  54                 	db	84	;'T'
   324  0010B3  49                 	db	73	;'I'
   325  0010B4  4D                 	db	77	;'M'
   326  0010B5  45                 	db	69	;'E'
   327  0010B6  20                 	db	32
   328  0010B7  25                 	db	37
   329  0010B8  64                 	db	100	;'d'
   330  0010B9  3A                 	db	58	;':'
   331  0010BA  25                 	db	37
   332  0010BB  30                 	db	48	;'0'
   333  0010BC  32                 	db	50	;'2'
   334  0010BD  64                 	db	100	;'d'
   335  0010BE  00                 	db	0
   336  0010BF  53                 	db	83	;'S'
   337  0010C0  4F                 	db	79	;'O'
   338  0010C1  52                 	db	82	;'R'
   339  0010C2  54                 	db	84	;'T'
   340  0010C3  49                 	db	73	;'I'
   341  0010C4  4E                 	db	78	;'N'
   342  0010C5  47                 	db	71	;'G'
   343  0010C6  2E                 	db	46
   344  0010C7  2E                 	db	46
   345  0010C8  2E                 	db	46
   346  0010C9  00                 	db	0
   347  0010CA                     STR_6:
   348  0010CA  41                 	db	65	;'A'
   349  0010CB  20                 	db	32
   350  0010CC  53                 	db	83	;'S'
   351  0010CD  6F                 	db	111	;'o'
   352  0010CE  72                 	db	114	;'r'
   353  0010CF  74                 	db	116	;'t'
   354  0010D0  69                 	db	105	;'i'
   355  0010D1  6E                 	db	110	;'n'
   356  0010D2  67                 	db	103	;'g'
   357  0010D3  00                 	db	0
   358  0010D4                     STR_1:
   359  0010D4  57                 	db	87	;'W'
   360  0010D5  65                 	db	101	;'e'
   361  0010D6  6C                 	db	108	;'l'
   362  0010D7  63                 	db	99	;'c'
   363  0010D8  6F                 	db	111	;'o'
   364  0010D9  6D                 	db	109	;'m'
   365  0010DA  65                 	db	101	;'e'
   366  0010DB  21                 	db	33
   367  0010DC  00                 	db	0
   368  0010DD                     STR_4:
   369  0010DD  31                 	db	49	;'1'
   370  0010DE  20                 	db	32
   371  0010DF  54                 	db	84	;'T'
   372  0010E0  69                 	db	105	;'i'
   373  0010E1  6D                 	db	109	;'m'
   374  0010E2  65                 	db	101	;'e'
   375  0010E3  00                 	db	0
   376  0010E4                     STR_7:
   377  0010E4  25                 	db	37
   378  0010E5  78                 	db	120	;'x'
   379  0010E6  00                 	db	0
   380  0000                     
   381                           ; #config settings
   382  0010E7  00                 	db	0	; dummy byte at the end
   383  0000                     
   384                           	psect	cinit
   385  001D4E                     __pcinit:
   386                           	opt stack 0
   387  001D4E                     start_initialization:
   388                           	opt stack 0
   389  001D4E                     __initialization:
   390                           	opt stack 0
   391                           
   392                           ; Clear objects allocated to COMRAM (35 bytes)
   393  001D4E  EE00  F043         	lfsr	0,__pbssCOMRAM
   394  001D52  0E23               	movlw	35
   395  001D54                     clear_0:
   396  001D54  6AEE               	clrf	postinc0,c
   397  001D56  06E8               	decf	wreg,f,c
   398  001D58  E1FD               	bnz	clear_0
   399  001D5A                     end_of_initialization:
   400                           	opt stack 0
   401  001D5A                     __end_of__initialization:
   402                           	opt stack 0
   403  001D5A  9066               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   404  001D5C  9266               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   405  001D5E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   406  001D60  6EF8               	movwf	tblptru,c
   407  001D62  0100               	movlb	0
   408  001D64  EFE6  F00D         	goto	_main	;jump to C main() function
   409                           tblptru	equ	0xFF8
   410                           postinc0	equ	0xFEE
   411                           wreg	equ	0xFE8
   412                           
   413                           	psect	bssCOMRAM
   414  000043                     __pbssCOMRAM:
   415                           	opt stack 0
   416  000043                     _time:
   417                           	opt stack 0
   418  000043                     	ds	7
   419  00004A                     _total_count:
   420                           	opt stack 0
   421  00004A                     	ds	2
   422  00004C                     _soup_can_no_label:
   423                           	opt stack 0
   424  00004C                     	ds	2
   425  00004E                     _soup_can_label:
   426                           	opt stack 0
   427  00004E                     	ds	2
   428  000050                     _pop_can_no_tap:
   429                           	opt stack 0
   430  000050                     	ds	2
   431  000052                     _pop_can_tap:
   432                           	opt stack 0
   433  000052                     	ds	2
   434  000054                     _flag:
   435                           	opt stack 0
   436  000054                     	ds	2
   437  000056                     _passed_time:
   438                           	opt stack 0
   439  000056                     	ds	1
   440  000057                     _mode:
   441                           	opt stack 0
   442  000057                     	ds	1
   443  000058                     _end_time:
   444                           	opt stack 0
   445  000058                     	ds	7
   446  00005F                     _start_time:
   447                           	opt stack 0
   448  00005F                     	ds	7
   449                           tblptru	equ	0xFF8
   450                           postinc0	equ	0xFEE
   451                           wreg	equ	0xFE8
   452                           
   453                           	psect	cstackCOMRAM
   454  000001                     __pcstackCOMRAM:
   455                           	opt stack 0
   456  000001                     ??i2_I2C_Master_Wait:
   457  000001                     i2lcdNibble@temp:
   458                           	opt stack 0
   459                           
   460                           ; 1 bytes @ 0x0
   461  000001                     	ds	1
   462  000002                     i2I2C_Master_Read@a:
   463                           	opt stack 0
   464  000002                     i2lcdNibble@data:
   465                           	opt stack 0
   466  000002                     i2I2C_Master_Write@d:
   467                           	opt stack 0
   468                           
   469                           ; 2 bytes @ 0x1
   470  000002                     	ds	1
   471  000003                     i2I2C_Master_Read@temp:
   472                           	opt stack 0
   473  000003                     i2lcdInst@data:
   474                           	opt stack 0
   475  000003                     i2putch@data:
   476                           	opt stack 0
   477                           
   478                           ; 1 bytes @ 0x2
   479  000003                     	ds	1
   480  000004                     i2get_time@datime:
   481                           	opt stack 0
   482                           
   483                           ; 2 bytes @ 0x3
   484  000004                     	ds	2
   485  000006                     ??i2_get_time:
   486                           
   487                           ; 1 bytes @ 0x5
   488  000006                     	ds	1
   489  000007                     i2get_time@i:
   490                           	opt stack 0
   491                           
   492                           ; 2 bytes @ 0x6
   493  000007                     	ds	2
   494  000009                     ??_interrupt_handler:
   495                           
   496                           ; 1 bytes @ 0x8
   497  000009                     	ds	15
   498  000018                     interrupt_handler@keypress:
   499                           	opt stack 0
   500                           
   501                           ; 1 bytes @ 0x17
   502  000018                     	ds	1
   503  000019                     ??_shaker:
   504  000019                     ??_isdigit:
   505  000019                     ??_I2C_Master_Wait:
   506  000019                     ??_readADC:
   507  000019                     ?___wmul:
   508                           	opt stack 0
   509  000019                     ?___lwdiv:
   510                           	opt stack 0
   511  000019                     ?___lldiv:
   512                           	opt stack 0
   513  000019                     lcdNibble@temp:
   514                           	opt stack 0
   515  000019                     ___wmul@multiplier:
   516                           	opt stack 0
   517  000019                     ___lwdiv@dividend:
   518                           	opt stack 0
   519  000019                     ___lldiv@dividend:
   520                           	opt stack 0
   521                           
   522                           ; 4 bytes @ 0x18
   523  000019                     	ds	1
   524  00001A                     I2C_Master_Read@a:
   525                           	opt stack 0
   526  00001A                     lcdNibble@data:
   527                           	opt stack 0
   528  00001A                     readADC@channel:
   529                           	opt stack 0
   530  00001A                     _isdigit$1070:
   531                           	opt stack 0
   532  00001A                     I2C_Master_Write@d:
   533                           	opt stack 0
   534  00001A                     shaker@i:
   535                           	opt stack 0
   536                           
   537                           ; 2 bytes @ 0x19
   538  00001A                     	ds	1
   539  00001B                     I2C_Master_Read@temp:
   540                           	opt stack 0
   541  00001B                     lcdInst@data:
   542                           	opt stack 0
   543  00001B                     putch@data:
   544                           	opt stack 0
   545  00001B                     isdigit@c:
   546                           	opt stack 0
   547  00001B                     ___wmul@multiplicand:
   548                           	opt stack 0
   549  00001B                     ___lwdiv@divisor:
   550                           	opt stack 0
   551                           
   552                           ; 2 bytes @ 0x1A
   553  00001B                     	ds	1
   554  00001C                     ??_initLCD:
   555  00001C                     get_time@datime:
   556                           	opt stack 0
   557                           
   558                           ; 2 bytes @ 0x1B
   559  00001C                     	ds	1
   560  00001D                     ___wmul@product:
   561                           	opt stack 0
   562  00001D                     ___lwdiv@quotient:
   563                           	opt stack 0
   564  00001D                     ___lldiv@divisor:
   565                           	opt stack 0
   566                           
   567                           ; 4 bytes @ 0x1C
   568  00001D                     	ds	1
   569  00001E                     ??_get_time:
   570                           
   571                           ; 1 bytes @ 0x1D
   572  00001E                     	ds	1
   573  00001F                     ___lwdiv@counter:
   574                           	opt stack 0
   575  00001F                     get_time@i:
   576                           	opt stack 0
   577                           
   578                           ; 2 bytes @ 0x1E
   579  00001F                     	ds	1
   580  000020                     ?___lwmod:
   581                           	opt stack 0
   582  000020                     ___lwmod@dividend:
   583                           	opt stack 0
   584                           
   585                           ; 2 bytes @ 0x1F
   586  000020                     	ds	1
   587  000021                     ___lldiv@quotient:
   588                           	opt stack 0
   589                           
   590                           ; 4 bytes @ 0x20
   591  000021                     	ds	1
   592  000022                     ___lwmod@divisor:
   593                           	opt stack 0
   594                           
   595                           ; 2 bytes @ 0x21
   596  000022                     	ds	2
   597  000024                     ___lwmod@counter:
   598                           	opt stack 0
   599                           
   600                           ; 1 bytes @ 0x23
   601  000024                     	ds	1
   602  000025                     ?_printf:
   603                           	opt stack 0
   604  000025                     ___lldiv@counter:
   605                           	opt stack 0
   606  000025                     printf@f:
   607                           	opt stack 0
   608                           
   609                           ; 2 bytes @ 0x24
   610  000025                     	ds	1
   611  000026                     I2C_Master_Init@c:
   612                           	opt stack 0
   613                           
   614                           ; 4 bytes @ 0x25
   615  000026                     	ds	4
   616  00002A                     ??_I2C_Master_Init:
   617                           
   618                           ; 1 bytes @ 0x29
   619  00002A                     	ds	3
   620  00002D                     ??_printf:
   621                           
   622                           ; 1 bytes @ 0x2C
   623  00002D                     	ds	1
   624  00002E                     
   625                           ; 1 bytes @ 0x2D
   626  00002E                     	ds	3
   627  000031                     printf@idx:
   628                           	opt stack 0
   629                           
   630                           ; 1 bytes @ 0x30
   631  000031                     	ds	1
   632  000032                     printf@ap:
   633                           	opt stack 0
   634                           
   635                           ; 2 bytes @ 0x31
   636  000032                     	ds	2
   637  000034                     printf@prec:
   638                           	opt stack 0
   639                           
   640                           ; 1 bytes @ 0x33
   641  000034                     	ds	1
   642  000035                     printf@val:
   643                           	opt stack 0
   644                           
   645                           ; 2 bytes @ 0x34
   646  000035                     	ds	2
   647  000037                     printf@flag:
   648                           	opt stack 0
   649                           
   650                           ; 1 bytes @ 0x36
   651  000037                     	ds	1
   652  000038                     printf@width:
   653                           	opt stack 0
   654                           
   655                           ; 2 bytes @ 0x37
   656  000038                     	ds	2
   657  00003A                     printf@c:
   658                           	opt stack 0
   659                           
   660                           ; 1 bytes @ 0x39
   661  00003A                     	ds	1
   662  00003B                     ??_welcome:
   663  00003B                     ??_display_time:
   664  00003B                     ??_sort:
   665  00003B                     ??_display_sorting_time:
   666  00003B                     ??_debug:
   667                           
   668                           ; 1 bytes @ 0x3A
   669  00003B                     	ds	1
   670  00003C                     display_sorting_time@i:
   671                           	opt stack 0
   672                           
   673                           ; 2 bytes @ 0x3B
   674  00003C                     	ds	1
   675  00003D                     display_time@i:
   676                           	opt stack 0
   677  00003D                     sort@tap:
   678                           	opt stack 0
   679                           
   680                           ; 2 bytes @ 0x3C
   681  00003D                     	ds	1
   682  00003E                     debug@H_max:
   683                           	opt stack 0
   684                           
   685                           ; 2 bytes @ 0x3D
   686  00003E                     	ds	1
   687  00003F                     sort@tin:
   688                           	opt stack 0
   689                           
   690                           ; 2 bytes @ 0x3E
   691  00003F                     	ds	1
   692  000040                     debug@i:
   693                           	opt stack 0
   694                           
   695                           ; 2 bytes @ 0x3F
   696  000040                     	ds	1
   697  000041                     sort@noLabel:
   698                           	opt stack 0
   699                           
   700                           ; 2 bytes @ 0x40
   701  000041                     	ds	2
   702  000043                     tblptru	equ	0xFF8
   703                           postinc0	equ	0xFEE
   704                           wreg	equ	0xFE8
   705                           
   706                           ; 1 bytes @ 0x42
   707 ;;
   708 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   709 ;;
   710 ;; *************** function _main *****************
   711 ;; Defined at:
   712 ;;		line 21 in file "main.c"
   713 ;; Parameters:    Size  Location     Type
   714 ;;		None
   715 ;; Auto vars:     Size  Location     Type
   716 ;;		None
   717 ;; Return value:  Size  Location     Type
   718 ;;                  1    wreg      void 
   719 ;; Registers used:
   720 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   721 ;; Tracked objects:
   722 ;;		On entry : 0/0
   723 ;;		On exit  : 0/0
   724 ;;		Unchanged: 0/0
   725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   729 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   730 ;;Total ram usage:        0 bytes
   731 ;; Hardware stack levels required when called:    8
   732 ;; This function calls:
   733 ;;		_debug
   734 ;;		_display_sorting_time
   735 ;;		_display_time
   736 ;;		_initPIC
   737 ;;		_sort
   738 ;;		_welcome
   739 ;; This function is called by:
   740 ;;		Startup code after reset
   741 ;; This function uses a non-reentrant model
   742 ;;
   743                           
   744                           	psect	text0
   745  001BCC                     __ptext0:
   746                           	opt stack 0
   747  001BCC                     _main:
   748                           	opt stack 23
   749                           
   750                           ;main.c: 22: initPIC();
   751                           
   752                           ;incstack = 0
   753  001BCC  ECB2  F00C         	call	_initPIC	;wreg free
   754  001BD0                     l2423:
   755                           
   756                           ;main.c: 24: if (mode == 0) {
   757  001BD0  5057               	movf	_mode,w,c
   758  001BD2  A4D8               	btfss	status,2,c
   759  001BD4  D003               	goto	l2427
   760                           
   761                           ;main.c: 25: welcome();
   762  001BD6  EC75  F00C         	call	_welcome	;wreg free
   763                           
   764                           ;main.c: 27: } else if (mode == 1) {
   765  001BDA  D7FA               	goto	l2423
   766  001BDC                     l2427:
   767  001BDC  0457               	decf	_mode,w,c
   768  001BDE  A4D8               	btfss	status,2,c
   769  001BE0  D003               	goto	l2431
   770                           
   771                           ;main.c: 28: display_time();
   772  001BE2  EC7E  F00A         	call	_display_time	;wreg free
   773                           
   774                           ;main.c: 29: }
   775  001BE6  D7F4               	goto	l2423
   776  001BE8                     l2431:
   777                           
   778                           ;main.c: 31: else if (mode == 2) {
   779  001BE8  0E02               	movlw	2
   780  001BEA  1857               	xorwf	_mode,w,c
   781  001BEC  A4D8               	btfss	status,2,c
   782  001BEE  D003               	goto	l2435
   783                           
   784                           ;main.c: 32: sort();
   785  001BF0  ECAA  F00B         	call	_sort	;wreg free
   786                           
   787                           ;main.c: 33: }
   788  001BF4  D7ED               	goto	l2423
   789  001BF6                     l2435:
   790                           
   791                           ;main.c: 35: else if (mode == 3) {
   792  001BF6  0E03               	movlw	3
   793  001BF8  1857               	xorwf	_mode,w,c
   794  001BFA  A4D8               	btfss	status,2,c
   795  001BFC  D003               	goto	l2439
   796                           
   797                           ;main.c: 36: display_sorting_time();
   798  001BFE  ECBF  F00D         	call	_display_sorting_time	;wreg free
   799                           
   800                           ;main.c: 37: }
   801  001C02  D7E6               	goto	l2423
   802  001C04                     l2439:
   803                           
   804                           ;main.c: 39: else if (mode == 99) {
   805  001C04  0E63               	movlw	99
   806  001C06  1857               	xorwf	_mode,w,c
   807  001C08  A4D8               	btfss	status,2,c
   808  001C0A  D7E2               	goto	l2423
   809                           
   810                           ;main.c: 40: debug();
   811  001C0C  EC36  F00C         	call	_debug	;wreg free
   812  001C10  D7DF               	goto	l2423
   813  001C12                     __end_of_main:
   814                           	opt stack 0
   815                           tblptru	equ	0xFF8
   816                           postinc0	equ	0xFEE
   817                           wreg	equ	0xFE8
   818                           status	equ	0xFD8
   819                           
   820 ;; *************** function _welcome *****************
   821 ;; Defined at:
   822 ;;		line 20 in file "picState.c"
   823 ;; Parameters:    Size  Location     Type
   824 ;;		None
   825 ;; Auto vars:     Size  Location     Type
   826 ;;		None
   827 ;; Return value:  Size  Location     Type
   828 ;;                  2   86[None  ] int 
   829 ;; Registers used:
   830 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   831 ;; Tracked objects:
   832 ;;		On entry : 0/0
   833 ;;		On exit  : 0/0
   834 ;;		Unchanged: 0/0
   835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   838 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   839 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   840 ;;Total ram usage:        2 bytes
   841 ;; Hardware stack levels used:    1
   842 ;; Hardware stack levels required when called:    7
   843 ;; This function calls:
   844 ;;		_lcdInst
   845 ;;		_printf
   846 ;; This function is called by:
   847 ;;		_main
   848 ;; This function uses a non-reentrant model
   849 ;;
   850                           
   851                           	psect	text1
   852  0018EA                     __ptext1:
   853                           	opt stack 0
   854  0018EA                     _welcome:
   855                           	opt stack 23
   856                           
   857                           ;picState.c: 21: lcdInst(0x01);;
   858                           
   859                           ;incstack = 0
   860  0018EA  0E01               	movlw	1
   861  0018EC  ECCC  F00E         	call	_lcdInst
   862                           
   863                           ;picState.c: 22: lcdInst(0b10000000);;
   864  0018F0  0E80               	movlw	128
   865  0018F2  ECCC  F00E         	call	_lcdInst
   866                           
   867                           ;picState.c: 23: _delay((unsigned long)((200)*(8000000/4000.0)));
   868  0018F6  0E03               	movlw	3
   869  0018F8  6E3C               	movwf	(??_welcome+1)& (0+255),c
   870  0018FA  0E08               	movlw	8
   871  0018FC  6E3B               	movwf	??_welcome& (0+255),c
   872  0018FE  0E77               	movlw	119
   873  001900                     u1747:
   874  001900  2EE8               	decfsz	wreg,f,c
   875  001902  D7FE               	bra	u1747
   876  001904  2E3B               	decfsz	??_welcome& (0+255),f,c
   877  001906  D7FC               	bra	u1747
   878  001908  2E3C               	decfsz	(??_welcome+1)& (0+255),f,c
   879  00190A  D7FA               	bra	u1747
   880  00190C  F000               	nop	
   881                           
   882                           ;picState.c: 24: printf("Welcome!");
   883  00190E  0ED4               	movlw	low STR_1
   884  001910  6E25               	movwf	printf@f,c
   885  001912  0E10               	movlw	high STR_1
   886  001914  6E26               	movwf	printf@f+1,c
   887  001916  EC74  F008         	call	_printf	;wreg free
   888                           
   889                           ;picState.c: 25: printf("            ");
   890  00191A  0E87               	movlw	low (STR_5+2)
   891  00191C  6E25               	movwf	printf@f,c
   892  00191E  0E10               	movlw	high (STR_5+2)
   893  001920  6E26               	movwf	printf@f+1,c
   894  001922  EC74  F008         	call	_printf	;wreg free
   895                           
   896                           ;picState.c: 26: printf("2 Back to start menu");
   897  001926  0E2B               	movlw	low STR_3
   898  001928  6E25               	movwf	printf@f,c
   899  00192A  0E10               	movlw	high STR_3
   900  00192C  6E26               	movwf	printf@f+1,c
   901  00192E  EC74  F008         	call	_printf	;wreg free
   902                           
   903                           ;picState.c: 27: lcdInst(0b11000000);;
   904  001932  0EC0               	movlw	192
   905  001934  ECCC  F00E         	call	_lcdInst
   906                           
   907                           ;picState.c: 28: printf("1 Time");
   908  001938  0EDD               	movlw	low STR_4
   909  00193A  6E25               	movwf	printf@f,c
   910  00193C  0E10               	movlw	high STR_4
   911  00193E  6E26               	movwf	printf@f+1,c
   912  001940  EC74  F008         	call	_printf	;wreg free
   913                           
   914                           ;picState.c: 29: printf("              ");
   915  001944  0E85               	movlw	low STR_5
   916  001946  6E25               	movwf	printf@f,c
   917  001948  0E10               	movlw	high STR_5
   918  00194A  6E26               	movwf	printf@f+1,c
   919  00194C  EC74  F008         	call	_printf	;wreg free
   920                           
   921                           ;picState.c: 30: printf("A Sorting");
   922  001950  0ECA               	movlw	low STR_6
   923  001952  6E25               	movwf	printf@f,c
   924  001954  0E10               	movlw	high STR_6
   925  001956  6E26               	movwf	printf@f+1,c
   926  001958  EC74  F008         	call	_printf	;wreg free
   927  00195C                     l2291:
   928  00195C  5057               	movf	_mode,w,c
   929  00195E  A4D8               	btfss	status,2,c
   930  001960  0012               	return	
   931  001962  D7FC               	goto	l2291
   932  001964                     __end_of_welcome:
   933                           	opt stack 0
   934                           tblptru	equ	0xFF8
   935                           postinc0	equ	0xFEE
   936                           wreg	equ	0xFE8
   937                           status	equ	0xFD8
   938                           
   939 ;; *************** function _sort *****************
   940 ;; Defined at:
   941 ;;		line 66 in file "picState.c"
   942 ;; Parameters:    Size  Location     Type
   943 ;;		None
   944 ;; Auto vars:     Size  Location     Type
   945 ;;  noLabel         2   64[COMRAM] int 
   946 ;;  tin             2   62[COMRAM] int 
   947 ;;  tap             2   60[COMRAM] int 
   948 ;; Return value:  Size  Location     Type
   949 ;;                  2   90[None  ] int 
   950 ;; Registers used:
   951 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   952 ;; Tracked objects:
   953 ;;		On entry : 0/0
   954 ;;		On exit  : 0/0
   955 ;;		Unchanged: 0/0
   956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   958 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   959 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   960 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   961 ;;Total ram usage:        8 bytes
   962 ;; Hardware stack levels used:    1
   963 ;; Hardware stack levels required when called:    7
   964 ;; This function calls:
   965 ;;		_get_time
   966 ;;		_lcdInst
   967 ;;		_printf
   968 ;;		_shaker
   969 ;; This function is called by:
   970 ;;		_main
   971 ;; This function uses a non-reentrant model
   972 ;;
   973                           
   974                           	psect	text2
   975  001754                     __ptext2:
   976                           	opt stack 0
   977  001754                     _sort:
   978                           	opt stack 23
   979                           
   980                           ;picState.c: 68: int tap = 0;
   981                           
   982                           ;incstack = 0
   983  001754  0E00               	movlw	0
   984  001756  6E3E               	movwf	sort@tap+1,c
   985  001758  0E00               	movlw	0
   986  00175A  6E3D               	movwf	sort@tap,c
   987                           
   988                           ;picState.c: 69: int tin = 0;
   989  00175C  0E00               	movlw	0
   990  00175E  6E40               	movwf	sort@tin+1,c
   991  001760  0E00               	movlw	0
   992  001762  6E3F               	movwf	sort@tin,c
   993                           
   994                           ;picState.c: 70: int noLabel = 0;
   995  001764  0E00               	movlw	0
   996  001766  6E42               	movwf	sort@noLabel+1,c
   997  001768  0E00               	movlw	0
   998  00176A  6E41               	movwf	sort@noLabel,c
   999                           
  1000                           ;picState.c: 71: lcdInst(0x01);;
  1001  00176C  0E01               	movlw	1
  1002  00176E  ECCC  F00E         	call	_lcdInst
  1003                           
  1004                           ;picState.c: 72: _delay((unsigned long)((100)*(8000000/4000.0)));
  1005  001772  0E02               	movlw	2
  1006  001774  6E3C               	movwf	(??_sort+1)& (0+255),c
  1007  001776  0E04               	movlw	4
  1008  001778  6E3B               	movwf	??_sort& (0+255),c
  1009  00177A  0EBA               	movlw	186
  1010  00177C                     u1757:
  1011  00177C  2EE8               	decfsz	wreg,f,c
  1012  00177E  D7FE               	bra	u1757
  1013  001780  2E3B               	decfsz	??_sort& (0+255),f,c
  1014  001782  D7FC               	bra	u1757
  1015  001784  2E3C               	decfsz	(??_sort+1)& (0+255),f,c
  1016  001786  D7FA               	bra	u1757
  1017  001788  D000               	nop2	
  1018                           
  1019                           ;picState.c: 73: printf("Sorting Started");
  1020  00178A  0E65               	movlw	low STR_8
  1021  00178C  6E25               	movwf	printf@f,c
  1022  00178E  0E10               	movlw	high STR_8
  1023  001790  6E26               	movwf	printf@f+1,c
  1024  001792  EC74  F008         	call	_printf	;wreg free
  1025                           
  1026                           ;picState.c: 74: lcdInst(0b11000000);;
  1027  001796  0EC0               	movlw	192
  1028  001798  ECCC  F00E         	call	_lcdInst
  1029                           
  1030                           ;picState.c: 75: printf("Press 1/2/A to stop");
  1031  00179C  0E40               	movlw	low STR_9
  1032  00179E  6E25               	movwf	printf@f,c
  1033  0017A0  0E10               	movlw	high STR_9
  1034  0017A2  6E26               	movwf	printf@f+1,c
  1035  0017A4  EC74  F008         	call	_printf	;wreg free
  1036                           
  1037                           ;picState.c: 76: get_time(start_time);
  1038  0017A8  0E5F               	movlw	low _start_time
  1039  0017AA  6E1C               	movwf	get_time@datime,c
  1040  0017AC  0E00               	movlw	high _start_time
  1041  0017AE  6E1D               	movwf	get_time@datime+1,c
  1042  0017B0  ECF6  F00A         	call	_get_time	;wreg free
  1043                           
  1044                           ;picState.c: 77: lcdInst(0b10000000);;
  1045  0017B4  0E80               	movlw	128
  1046  0017B6  ECCC  F00E         	call	_lcdInst
  1047                           
  1048                           ;picState.c: 79: while (mode == 2) {
  1049  0017BA  D012               	goto	l2355
  1050  0017BC                     l2347:
  1051                           
  1052                           ;picState.c: 96: shaker();
  1053  0017BC  EC97  F00D         	call	_shaker	;wreg free
  1054                           
  1055                           ;picState.c: 97: LATDbits.LATD0 = 0;
  1056  0017C0  908C               	bcf	3980,0,c	;volatile
  1057                           
  1058                           ;picState.c: 98: _delay((unsigned long)((500)*(8000000/4000.0)));
  1059  0017C2  0E06               	movlw	6
  1060  0017C4  6E3C               	movwf	(??_sort+1)& (0+255),c
  1061  0017C6  0E13               	movlw	19
  1062  0017C8  6E3B               	movwf	??_sort& (0+255),c
  1063  0017CA  0EAE               	movlw	174
  1064  0017CC                     u1767:
  1065  0017CC  2EE8               	decfsz	wreg,f,c
  1066  0017CE  D7FE               	bra	u1767
  1067  0017D0  2E3B               	decfsz	??_sort& (0+255),f,c
  1068  0017D2  D7FC               	bra	u1767
  1069  0017D4  2E3C               	decfsz	(??_sort+1)& (0+255),f,c
  1070  0017D6  D7FA               	bra	u1767
  1071                           
  1072                           ;picState.c: 99: flag = 0;
  1073  0017D8  0E00               	movlw	0
  1074  0017DA  6E55               	movwf	_flag+1,c
  1075  0017DC  0E00               	movlw	0
  1076  0017DE  6E54               	movwf	_flag,c
  1077  0017E0                     l2355:
  1078  0017E0  0E02               	movlw	2
  1079  0017E2  1857               	xorwf	_mode,w,c
  1080  0017E4  A4D8               	btfss	status,2,c
  1081  0017E6  0012               	return	
  1082  0017E8  D7E9               	goto	l2347
  1083  0017EA                     __end_of_sort:
  1084                           	opt stack 0
  1085                           tblptru	equ	0xFF8
  1086                           postinc0	equ	0xFEE
  1087                           wreg	equ	0xFE8
  1088                           status	equ	0xFD8
  1089                           
  1090 ;; *************** function _shaker *****************
  1091 ;; Defined at:
  1092 ;;		line 18 in file "motor.c"
  1093 ;; Parameters:    Size  Location     Type
  1094 ;;		None
  1095 ;; Auto vars:     Size  Location     Type
  1096 ;;  i               2   25[COMRAM] int 
  1097 ;; Return value:  Size  Location     Type
  1098 ;;                  1    wreg      void 
  1099 ;; Registers used:
  1100 ;;		wreg, status,2, status,0
  1101 ;; Tracked objects:
  1102 ;;		On entry : 0/0
  1103 ;;		On exit  : 0/0
  1104 ;;		Unchanged: 0/0
  1105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1107 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1108 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1109 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1110 ;;Total ram usage:        3 bytes
  1111 ;; Hardware stack levels used:    1
  1112 ;; Hardware stack levels required when called:    4
  1113 ;; This function calls:
  1114 ;;		Nothing
  1115 ;; This function is called by:
  1116 ;;		_sort
  1117 ;; This function uses a non-reentrant model
  1118 ;;
  1119                           
  1120                           	psect	text3
  1121  001B2E                     __ptext3:
  1122                           	opt stack 0
  1123  001B2E                     _shaker:
  1124                           	opt stack 25
  1125                           
  1126                           ;motor.c: 19: int i = 0;
  1127                           
  1128                           ;incstack = 0
  1129  001B2E  0E00               	movlw	0
  1130  001B30  6E1B               	movwf	shaker@i+1,c
  1131  001B32  0E00               	movlw	0
  1132  001B34  6E1A               	movwf	shaker@i,c
  1133                           
  1134                           ;motor.c: 20: for (i = 0; i<100; i++){
  1135  001B36  0E00               	movlw	0
  1136  001B38  6E1B               	movwf	shaker@i+1,c
  1137  001B3A  0E00               	movlw	0
  1138  001B3C  6E1A               	movwf	shaker@i,c
  1139  001B3E                     l1443:
  1140  001B3E  BE1B               	btfsc	shaker@i+1,7,c
  1141  001B40  D006               	goto	l383
  1142  001B42  501B               	movf	shaker@i+1,w,c
  1143  001B44  E11B               	bnz	l385
  1144  001B46  0E64               	movlw	100
  1145  001B48  5C1A               	subwf	shaker@i,w,c
  1146  001B4A  B0D8               	btfsc	status,0,c
  1147  001B4C  0012               	return	
  1148  001B4E                     l383:
  1149                           
  1150                           ;motor.c: 21: LATBbits.LATB2 = 1;
  1151  001B4E  848A               	bsf	3978,2,c	;volatile
  1152                           
  1153                           ;motor.c: 22: LATCbits.LATC1 = 1;
  1154  001B50  828B               	bsf	3979,1,c	;volatile
  1155                           
  1156                           ;motor.c: 24: _delay((unsigned long)((10)*(8000000/4000.0)));
  1157  001B52  0E1A               	movlw	26
  1158  001B54  6E19               	movwf	??_shaker& (0+255),c
  1159  001B56  0EF8               	movlw	248
  1160  001B58                     u1777:
  1161  001B58  2EE8               	decfsz	wreg,f,c
  1162  001B5A  D7FE               	bra	u1777
  1163  001B5C  2E19               	decfsz	??_shaker& (0+255),f,c
  1164  001B5E  D7FC               	bra	u1777
  1165  001B60  D000               	nop2	
  1166                           
  1167                           ;motor.c: 26: LATBbits.LATB2 = 0;
  1168  001B62  948A               	bcf	3978,2,c	;volatile
  1169                           
  1170                           ;motor.c: 27: LATCbits.LATC1 = 0;
  1171  001B64  928B               	bcf	3979,1,c	;volatile
  1172                           
  1173                           ;motor.c: 29: _delay((unsigned long)((10)*(8000000/4000.0)));
  1174  001B66  0E1A               	movlw	26
  1175  001B68  6E19               	movwf	??_shaker& (0+255),c
  1176  001B6A  0EF8               	movlw	248
  1177  001B6C                     u1787:
  1178  001B6C  2EE8               	decfsz	wreg,f,c
  1179  001B6E  D7FE               	bra	u1787
  1180  001B70  2E19               	decfsz	??_shaker& (0+255),f,c
  1181  001B72  D7FC               	bra	u1787
  1182  001B74  D000               	nop2	
  1183  001B76  4A1A               	infsnz	shaker@i,f,c
  1184  001B78  2A1B               	incf	shaker@i+1,f,c
  1185  001B7A  D7E1               	goto	l1443
  1186  001B7C                     l385:
  1187  001B7C  0012               	return		;funcret
  1188  001B7E                     __end_of_shaker:
  1189                           	opt stack 0
  1190                           tblptru	equ	0xFF8
  1191                           postinc0	equ	0xFEE
  1192                           wreg	equ	0xFE8
  1193                           status	equ	0xFD8
  1194                           
  1195 ;; *************** function _get_time *****************
  1196 ;; Defined at:
  1197 ;;		line 39 in file "time.c"
  1198 ;; Parameters:    Size  Location     Type
  1199 ;;  datime          2   27[COMRAM] PTR unsigned char 
  1200 ;;		 -> end_time(7), start_time(7), 
  1201 ;; Auto vars:     Size  Location     Type
  1202 ;;  i               2   30[COMRAM] int 
  1203 ;; Return value:  Size  Location     Type
  1204 ;;                  1    wreg      void 
  1205 ;; Registers used:
  1206 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1207 ;; Tracked objects:
  1208 ;;		On entry : 0/0
  1209 ;;		On exit  : 0/0
  1210 ;;		Unchanged: 0/0
  1211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1212 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1213 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1214 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1215 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1216 ;;Total ram usage:        5 bytes
  1217 ;; Hardware stack levels used:    1
  1218 ;; Hardware stack levels required when called:    6
  1219 ;; This function calls:
  1220 ;;		_I2C_Master_Read
  1221 ;;		_I2C_Master_Start
  1222 ;;		_I2C_Master_Stop
  1223 ;;		_I2C_Master_Write
  1224 ;; This function is called by:
  1225 ;;		_sort
  1226 ;;		_initSortTimer
  1227 ;;		_getSortTime
  1228 ;; This function uses a non-reentrant model
  1229 ;;
  1230                           
  1231                           	psect	text4
  1232  0015EC                     __ptext4:
  1233                           	opt stack 0
  1234  0015EC                     _get_time:
  1235                           	opt stack 23
  1236                           
  1237                           ;time.c: 40: I2C_Master_Start();
  1238                           
  1239                           ;incstack = 0
  1240  0015EC  ECEC  F00E         	call	_I2C_Master_Start	;wreg free
  1241                           
  1242                           ;time.c: 41: I2C_Master_Write(0b11010000);
  1243  0015F0  0E00               	movlw	0
  1244  0015F2  6E1B               	movwf	I2C_Master_Write@d+1,c
  1245  0015F4  0ED0               	movlw	208
  1246  0015F6  6E1A               	movwf	I2C_Master_Write@d,c
  1247  0015F8  ECDE  F00E         	call	_I2C_Master_Write	;wreg free
  1248                           
  1249                           ;time.c: 42: I2C_Master_Write(0x00);
  1250  0015FC  0E00               	movlw	0
  1251  0015FE  6E1B               	movwf	I2C_Master_Write@d+1,c
  1252  001600  0E00               	movlw	0
  1253  001602  6E1A               	movwf	I2C_Master_Write@d,c
  1254  001604  ECDE  F00E         	call	_I2C_Master_Write	;wreg free
  1255                           
  1256                           ;time.c: 43: I2C_Master_Stop();
  1257  001608  ECE8  F00E         	call	_I2C_Master_Stop	;wreg free
  1258                           
  1259                           ;time.c: 46: I2C_Master_Start();
  1260  00160C  ECEC  F00E         	call	_I2C_Master_Start	;wreg free
  1261                           
  1262                           ;time.c: 47: I2C_Master_Write(0b11010001);
  1263  001610  0E00               	movlw	0
  1264  001612  6E1B               	movwf	I2C_Master_Write@d+1,c
  1265  001614  0ED1               	movlw	209
  1266  001616  6E1A               	movwf	I2C_Master_Write@d,c
  1267  001618  ECDE  F00E         	call	_I2C_Master_Write	;wreg free
  1268                           
  1269                           ;time.c: 48: for(int i = 0; i < 6; i++){
  1270  00161C  0E00               	movlw	0
  1271  00161E  6E20               	movwf	get_time@i+1,c
  1272  001620  0E00               	movlw	0
  1273  001622  6E1F               	movwf	get_time@i,c
  1274  001624                     l2195:
  1275  001624  BE20               	btfsc	get_time@i+1,7,c
  1276  001626  D006               	goto	l2199
  1277  001628  5020               	movf	get_time@i+1,w,c
  1278  00162A  E12D               	bnz	l2207
  1279  00162C  0E06               	movlw	6
  1280  00162E  5C1F               	subwf	get_time@i,w,c
  1281  001630  B0D8               	btfsc	status,0,c
  1282  001632  D029               	goto	l2207
  1283  001634                     l2199:
  1284                           
  1285                           ;time.c: 49: datime[i] = I2C_Master_Read(1);
  1286  001634  501F               	movf	get_time@i,w,c
  1287  001636  241C               	addwf	get_time@datime,w,c
  1288  001638  6ED9               	movwf	fsr2l,c
  1289  00163A  5020               	movf	get_time@i+1,w,c
  1290  00163C  201D               	addwfc	get_time@datime+1,w,c
  1291  00163E  6EDA               	movwf	fsr2h,c
  1292  001640  0E01               	movlw	1
  1293  001642  EC4D  F00E         	call	_I2C_Master_Read
  1294  001646  6EDF               	movwf	indf2,c
  1295                           
  1296                           ;time.c: 50: datime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  1297  001648  501F               	movf	get_time@i,w,c
  1298  00164A  241C               	addwf	get_time@datime,w,c
  1299  00164C  6ED9               	movwf	fsr2l,c
  1300  00164E  5020               	movf	get_time@i+1,w,c
  1301  001650  201D               	addwfc	get_time@datime+1,w,c
  1302  001652  6EDA               	movwf	fsr2h,c
  1303  001654  0E43               	movlw	low _time
  1304  001656  241F               	addwf	get_time@i,w,c
  1305  001658  6EE1               	movwf	fsr1l,c
  1306  00165A  0E00               	movlw	high _time
  1307  00165C  2020               	addwfc	get_time@i+1,w,c
  1308  00165E  6EE2               	movwf	fsr1h,c
  1309  001660  50E7               	movf	indf1,w,c
  1310  001662  6E1E               	movwf	??_get_time& (0+255),c
  1311  001664  381E               	swapf	??_get_time,w,c
  1312  001666  0B0F               	andlw	15
  1313  001668  0B0F               	andlw	15
  1314  00166A  0D0A               	mullw	10
  1315  00166C  0E43               	movlw	low _time
  1316  00166E  241F               	addwf	get_time@i,w,c
  1317  001670  6EE1               	movwf	fsr1l,c
  1318  001672  0E00               	movlw	high _time
  1319  001674  2020               	addwfc	get_time@i+1,w,c
  1320  001676  6EE2               	movwf	fsr1h,c
  1321  001678  50E7               	movf	indf1,w,c
  1322  00167A  0B0F               	andlw	15
  1323  00167C  24F3               	addwf	prodl,w,c
  1324  00167E  6EDF               	movwf	indf2,c
  1325  001680  4A1F               	infsnz	get_time@i,f,c
  1326  001682  2A20               	incf	get_time@i+1,f,c
  1327  001684  D7CF               	goto	l2195
  1328  001686                     l2207:
  1329                           
  1330                           ;time.c: 52: }
  1331                           ;time.c: 53: datime[6] = I2C_Master_Read(0);
  1332  001686  EE20 F006          	lfsr	2,6
  1333  00168A  501C               	movf	get_time@datime,w,c
  1334  00168C  26D9               	addwf	fsr2l,f,c
  1335  00168E  501D               	movf	get_time@datime+1,w,c
  1336  001690  22DA               	addwfc	fsr2h,f,c
  1337  001692  0E00               	movlw	0
  1338  001694  EC4D  F00E         	call	_I2C_Master_Read
  1339  001698  6EDF               	movwf	indf2,c
  1340                           
  1341                           ;time.c: 54: I2C_Master_Stop();
  1342  00169A  ECE8  F00E         	call	_I2C_Master_Stop	;wreg free
  1343  00169E  0012               	return		;funcret
  1344  0016A0                     __end_of_get_time:
  1345                           	opt stack 0
  1346                           tblptru	equ	0xFF8
  1347                           prodl	equ	0xFF3
  1348                           postinc0	equ	0xFEE
  1349                           wreg	equ	0xFE8
  1350                           indf1	equ	0xFE7
  1351                           fsr1h	equ	0xFE2
  1352                           fsr1l	equ	0xFE1
  1353                           indf2	equ	0xFDF
  1354                           fsr2h	equ	0xFDA
  1355                           fsr2l	equ	0xFD9
  1356                           status	equ	0xFD8
  1357                           
  1358 ;; *************** function _initPIC *****************
  1359 ;; Defined at:
  1360 ;;		line 33 in file "initPic.c"
  1361 ;; Parameters:    Size  Location     Type
  1362 ;;		None
  1363 ;; Auto vars:     Size  Location     Type
  1364 ;;		None
  1365 ;; Return value:  Size  Location     Type
  1366 ;;                  2   82[None  ] int 
  1367 ;; Registers used:
  1368 ;;		wreg, status,2, status,0, cstack
  1369 ;; Tracked objects:
  1370 ;;		On entry : 0/0
  1371 ;;		On exit  : 0/0
  1372 ;;		Unchanged: 0/0
  1373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1377 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1378 ;;Total ram usage:        0 bytes
  1379 ;; Hardware stack levels used:    1
  1380 ;; Hardware stack levels required when called:    7
  1381 ;; This function calls:
  1382 ;;		_I2C_Master_Init
  1383 ;;		_I2C_Master_Start
  1384 ;;		_I2C_Master_Stop
  1385 ;;		_I2C_Master_Write
  1386 ;;		_initLCD
  1387 ;; This function is called by:
  1388 ;;		_main
  1389 ;; This function uses a non-reentrant model
  1390 ;;
  1391                           
  1392                           	psect	text5
  1393  001964                     __ptext5:
  1394                           	opt stack 0
  1395  001964                     _initPIC:
  1396                           	opt stack 23
  1397                           
  1398                           ;initPic.c: 34: TRISA = 0b11110011;
  1399                           
  1400                           ;incstack = 0
  1401  001964  0EF3               	movlw	243
  1402  001966  6E92               	movwf	3986,c	;volatile
  1403                           
  1404                           ;initPic.c: 35: TRISC = 0x11100110;
  1405  001968  0E10               	movlw	16
  1406  00196A  6E94               	movwf	3988,c	;volatile
  1407                           
  1408                           ;initPic.c: 37: TRISC = 0x11100100;
  1409  00196C  0E00               	movlw	0
  1410  00196E  6E94               	movwf	3988,c	;volatile
  1411                           
  1412                           ;initPic.c: 38: TRISD = 0x00;
  1413  001970  0E00               	movlw	0
  1414  001972  6E95               	movwf	3989,c	;volatile
  1415                           
  1416                           ;initPic.c: 39: TRISB = 0b11111011;
  1417  001974  0EFB               	movlw	251
  1418  001976  6E93               	movwf	3987,c	;volatile
  1419                           
  1420                           ;initPic.c: 43: LATA = 0x00;
  1421  001978  0E00               	movlw	0
  1422  00197A  6E89               	movwf	3977,c	;volatile
  1423                           
  1424                           ;initPic.c: 44: LATB = 0x00;
  1425  00197C  0E00               	movlw	0
  1426  00197E  6E8A               	movwf	3978,c	;volatile
  1427                           
  1428                           ;initPic.c: 45: LATC = 0x00;
  1429  001980  0E00               	movlw	0
  1430  001982  6E8B               	movwf	3979,c	;volatile
  1431                           
  1432                           ;initPic.c: 46: LATD = 0x00;
  1433  001984  0E00               	movlw	0
  1434  001986  6E8C               	movwf	3980,c	;volatile
  1435                           
  1436                           ;initPic.c: 47: LATE = 0x00;
  1437  001988  0E00               	movlw	0
  1438  00198A  6E8D               	movwf	3981,c	;volatile
  1439                           
  1440                           ;initPic.c: 49: ADCON0 = 0x00;
  1441  00198C  0E00               	movlw	0
  1442  00198E  6EC2               	movwf	4034,c	;volatile
  1443                           
  1444                           ;initPic.c: 50: ADCON1 = 0x09;
  1445  001990  0E09               	movlw	9
  1446  001992  6EC1               	movwf	4033,c	;volatile
  1447                           
  1448                           ;initPic.c: 53: ADCON2 = 0b00110001;
  1449  001994  0E31               	movlw	49
  1450  001996  6EC0               	movwf	4032,c	;volatile
  1451                           
  1452                           ;initPic.c: 54: INT1IE = 1;
  1453  001998  86F0               	bsf	intcon3,3,c	;volatile
  1454                           
  1455                           ;initPic.c: 56: initLCD();
  1456  00199A  EC09  F00E         	call	_initLCD	;wreg free
  1457                           
  1458                           ;initPic.c: 57: I2C_Master_Init(10000);
  1459  00199E  0E10               	movlw	16
  1460  0019A0  6E26               	movwf	I2C_Master_Init@c,c
  1461  0019A2  0E27               	movlw	39
  1462  0019A4  6E27               	movwf	I2C_Master_Init@c+1,c
  1463  0019A6  0E00               	movlw	0
  1464  0019A8  6E28               	movwf	I2C_Master_Init@c+2,c
  1465  0019AA  0E00               	movlw	0
  1466  0019AC  6E29               	movwf	I2C_Master_Init@c+3,c
  1467  0019AE  ECEB  F00C         	call	_I2C_Master_Init	;wreg free
  1468                           
  1469                           ;initPic.c: 58: I2C_Master_Start();
  1470  0019B2  ECEC  F00E         	call	_I2C_Master_Start	;wreg free
  1471                           
  1472                           ;initPic.c: 59: I2C_Master_Write(0b11010000);
  1473  0019B6  0E00               	movlw	0
  1474  0019B8  6E1B               	movwf	I2C_Master_Write@d+1,c
  1475  0019BA  0ED0               	movlw	208
  1476  0019BC  6E1A               	movwf	I2C_Master_Write@d,c
  1477  0019BE  ECDE  F00E         	call	_I2C_Master_Write	;wreg free
  1478                           
  1479                           ;initPic.c: 60: I2C_Master_Write(0x00);
  1480  0019C2  0E00               	movlw	0
  1481  0019C4  6E1B               	movwf	I2C_Master_Write@d+1,c
  1482  0019C6  0E00               	movlw	0
  1483  0019C8  6E1A               	movwf	I2C_Master_Write@d,c
  1484  0019CA  ECDE  F00E         	call	_I2C_Master_Write	;wreg free
  1485                           
  1486                           ;initPic.c: 61: I2C_Master_Stop();
  1487  0019CE  ECE8  F00E         	call	_I2C_Master_Stop	;wreg free
  1488                           
  1489                           ;initPic.c: 65: (INTCONbits.GIE = 1);
  1490  0019D2  8EF2               	bsf	intcon,7,c	;volatile
  1491  0019D4  0012               	return		;funcret
  1492  0019D6                     __end_of_initPIC:
  1493                           	opt stack 0
  1494                           tblptru	equ	0xFF8
  1495                           prodl	equ	0xFF3
  1496                           intcon	equ	0xFF2
  1497                           intcon3	equ	0xFF0
  1498                           postinc0	equ	0xFEE
  1499                           wreg	equ	0xFE8
  1500                           indf1	equ	0xFE7
  1501                           fsr1h	equ	0xFE2
  1502                           fsr1l	equ	0xFE1
  1503                           indf2	equ	0xFDF
  1504                           fsr2h	equ	0xFDA
  1505                           fsr2l	equ	0xFD9
  1506                           status	equ	0xFD8
  1507                           
  1508 ;; *************** function _initLCD *****************
  1509 ;; Defined at:
  1510 ;;		line 14 in file "lcd.c"
  1511 ;; Parameters:    Size  Location     Type
  1512 ;;		None
  1513 ;; Auto vars:     Size  Location     Type
  1514 ;;		None
  1515 ;; Return value:  Size  Location     Type
  1516 ;;                  1    wreg      void 
  1517 ;; Registers used:
  1518 ;;		wreg, status,2, status,0, cstack
  1519 ;; Tracked objects:
  1520 ;;		On entry : 0/0
  1521 ;;		On exit  : 0/0
  1522 ;;		Unchanged: 0/0
  1523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1525 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1526 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1527 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1528 ;;Total ram usage:        1 bytes
  1529 ;; Hardware stack levels used:    1
  1530 ;; Hardware stack levels required when called:    6
  1531 ;; This function calls:
  1532 ;;		_lcdInst
  1533 ;; This function is called by:
  1534 ;;		_initPIC
  1535 ;; This function uses a non-reentrant model
  1536 ;;
  1537                           
  1538                           	psect	text6
  1539  001C12                     __ptext6:
  1540                           	opt stack 0
  1541  001C12                     _initLCD:
  1542                           	opt stack 23
  1543                           
  1544                           ;lcd.c: 15: _delay((unsigned long)((15)*(8000000/4000.0)));
  1545                           
  1546                           ;incstack = 0
  1547  001C12  0E27               	movlw	39
  1548  001C14  6E1C               	movwf	??_initLCD& (0+255),c
  1549  001C16  0EF5               	movlw	245
  1550  001C18                     u1797:
  1551  001C18  2EE8               	decfsz	wreg,f,c
  1552  001C1A  D7FE               	bra	u1797
  1553  001C1C  2E1C               	decfsz	??_initLCD& (0+255),f,c
  1554  001C1E  D7FC               	bra	u1797
  1555  001C20  F000               	nop	
  1556                           
  1557                           ;lcd.c: 16: lcdInst(0b00110011);
  1558  001C22  0E33               	movlw	51
  1559  001C24  ECCC  F00E         	call	_lcdInst
  1560                           
  1561                           ;lcd.c: 17: lcdInst(0b00110010);
  1562  001C28  0E32               	movlw	50
  1563  001C2A  ECCC  F00E         	call	_lcdInst
  1564                           
  1565                           ;lcd.c: 18: lcdInst(0b00101000);
  1566  001C2E  0E28               	movlw	40
  1567  001C30  ECCC  F00E         	call	_lcdInst
  1568                           
  1569                           ;lcd.c: 19: lcdInst(0b00001111);
  1570  001C34  0E0F               	movlw	15
  1571  001C36  ECCC  F00E         	call	_lcdInst
  1572                           
  1573                           ;lcd.c: 20: lcdInst(0b00000110);
  1574  001C3A  0E06               	movlw	6
  1575  001C3C  ECCC  F00E         	call	_lcdInst
  1576                           
  1577                           ;lcd.c: 21: lcdInst(0b00000001);
  1578  001C40  0E01               	movlw	1
  1579  001C42  ECCC  F00E         	call	_lcdInst
  1580                           
  1581                           ;lcd.c: 22: _delay((unsigned long)((15)*(8000000/4000.0)));
  1582  001C46  0E27               	movlw	39
  1583  001C48  6E1C               	movwf	??_initLCD& (0+255),c
  1584  001C4A  0EF5               	movlw	245
  1585  001C4C                     u1807:
  1586  001C4C  2EE8               	decfsz	wreg,f,c
  1587  001C4E  D7FE               	bra	u1807
  1588  001C50  2E1C               	decfsz	??_initLCD& (0+255),f,c
  1589  001C52  D7FC               	bra	u1807
  1590  001C54  F000               	nop	
  1591  001C56  0012               	return		;funcret
  1592  001C58                     __end_of_initLCD:
  1593                           	opt stack 0
  1594                           tblptru	equ	0xFF8
  1595                           prodl	equ	0xFF3
  1596                           intcon	equ	0xFF2
  1597                           intcon3	equ	0xFF0
  1598                           postinc0	equ	0xFEE
  1599                           wreg	equ	0xFE8
  1600                           indf1	equ	0xFE7
  1601                           fsr1h	equ	0xFE2
  1602                           fsr1l	equ	0xFE1
  1603                           indf2	equ	0xFDF
  1604                           fsr2h	equ	0xFDA
  1605                           fsr2l	equ	0xFD9
  1606                           status	equ	0xFD8
  1607                           
  1608 ;; *************** function _I2C_Master_Init *****************
  1609 ;; Defined at:
  1610 ;;		line 13 in file "I2C.c"
  1611 ;; Parameters:    Size  Location     Type
  1612 ;;  c               4   37[COMRAM] const unsigned long 
  1613 ;; Auto vars:     Size  Location     Type
  1614 ;;		None
  1615 ;; Return value:  Size  Location     Type
  1616 ;;                  1    wreg      void 
  1617 ;; Registers used:
  1618 ;;		wreg, status,2, status,0, cstack
  1619 ;; Tracked objects:
  1620 ;;		On entry : 0/0
  1621 ;;		On exit  : 0/0
  1622 ;;		Unchanged: 0/0
  1623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1624 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1626 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1627 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1628 ;;Total ram usage:        8 bytes
  1629 ;; Hardware stack levels used:    1
  1630 ;; Hardware stack levels required when called:    5
  1631 ;; This function calls:
  1632 ;;		___lldiv
  1633 ;; This function is called by:
  1634 ;;		_initPIC
  1635 ;;		_set_time
  1636 ;; This function uses a non-reentrant model
  1637 ;;
  1638                           
  1639                           	psect	text7
  1640  0019D6                     __ptext7:
  1641                           	opt stack 0
  1642  0019D6                     _I2C_Master_Init:
  1643                           	opt stack 24
  1644                           
  1645                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  1646                           
  1647                           ;incstack = 0
  1648  0019D6  0E00               	movlw	0
  1649  0019D8  6EC7               	movwf	4039,c	;volatile
  1650                           
  1651                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  1652  0019DA  0E28               	movlw	40
  1653  0019DC  6EC6               	movwf	4038,c	;volatile
  1654                           
  1655                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  1656  0019DE  0E00               	movlw	0
  1657  0019E0  6EC5               	movwf	4037,c	;volatile
  1658                           
  1659                           ;I2C.c: 19: SSPADD = (8000000/(4*c))-1;
  1660  0019E2  0E00               	movlw	0
  1661  0019E4  6E19               	movwf	___lldiv@dividend,c
  1662  0019E6  0E12               	movlw	18
  1663  0019E8  6E1A               	movwf	___lldiv@dividend+1,c
  1664  0019EA  0E7A               	movlw	122
  1665  0019EC  6E1B               	movwf	___lldiv@dividend+2,c
  1666  0019EE  0E00               	movlw	0
  1667  0019F0  6E1C               	movwf	___lldiv@dividend+3,c
  1668  0019F2  C026  F02A         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  1669  0019F6  C027  F02B         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  1670  0019FA  C028  F02C         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  1671  0019FE  C029  F02D         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  1672  001A02  0E02               	movlw	2
  1673  001A04                     u1205:
  1674  001A04  90D8               	bcf	status,0,c
  1675  001A06  362A               	rlcf	??_I2C_Master_Init,f,c
  1676  001A08  362B               	rlcf	??_I2C_Master_Init+1,f,c
  1677  001A0A  362C               	rlcf	??_I2C_Master_Init+2,f,c
  1678  001A0C  362D               	rlcf	??_I2C_Master_Init+3,f,c
  1679  001A0E  2EE8               	decfsz	wreg,f,c
  1680  001A10  D7F9               	goto	u1205
  1681  001A12  C02A  F01D         	movff	??_I2C_Master_Init,___lldiv@divisor
  1682  001A16  C02B  F01E         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  1683  001A1A  C02C  F01F         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  1684  001A1E  C02D  F020         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  1685  001A22  ECF5  F00B         	call	___lldiv	;wreg free
  1686  001A26  0419               	decf	?___lldiv,w,c
  1687  001A28  6EC8               	movwf	4040,c	;volatile
  1688                           
  1689                           ;I2C.c: 20: TRISC3 = 1;
  1690  001A2A  8694               	bsf	3988,3,c	;volatile
  1691                           
  1692                           ;I2C.c: 21: TRISC4 = 1;
  1693  001A2C  8894               	bsf	3988,4,c	;volatile
  1694  001A2E  0012               	return		;funcret
  1695  001A30                     __end_of_I2C_Master_Init:
  1696                           	opt stack 0
  1697                           tblptru	equ	0xFF8
  1698                           prodl	equ	0xFF3
  1699                           intcon	equ	0xFF2
  1700                           intcon3	equ	0xFF0
  1701                           postinc0	equ	0xFEE
  1702                           wreg	equ	0xFE8
  1703                           indf1	equ	0xFE7
  1704                           fsr1h	equ	0xFE2
  1705                           fsr1l	equ	0xFE1
  1706                           indf2	equ	0xFDF
  1707                           fsr2h	equ	0xFDA
  1708                           fsr2l	equ	0xFD9
  1709                           status	equ	0xFD8
  1710                           
  1711 ;; *************** function ___lldiv *****************
  1712 ;; Defined at:
  1713 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lldiv.c"
  1714 ;; Parameters:    Size  Location     Type
  1715 ;;  dividend        4   24[COMRAM] unsigned long 
  1716 ;;  divisor         4   28[COMRAM] unsigned long 
  1717 ;; Auto vars:     Size  Location     Type
  1718 ;;  quotient        4   32[COMRAM] unsigned long 
  1719 ;;  counter         1   36[COMRAM] unsigned char 
  1720 ;; Return value:  Size  Location     Type
  1721 ;;                  4   24[COMRAM] unsigned long 
  1722 ;; Registers used:
  1723 ;;		wreg, status,2, status,0
  1724 ;; Tracked objects:
  1725 ;;		On entry : 0/0
  1726 ;;		On exit  : 0/0
  1727 ;;		Unchanged: 0/0
  1728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1729 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1730 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1732 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1733 ;;Total ram usage:       13 bytes
  1734 ;; Hardware stack levels used:    1
  1735 ;; Hardware stack levels required when called:    4
  1736 ;; This function calls:
  1737 ;;		Nothing
  1738 ;; This function is called by:
  1739 ;;		_I2C_Master_Init
  1740 ;; This function uses a non-reentrant model
  1741 ;;
  1742                           
  1743                           	psect	text8
  1744  0017EA                     __ptext8:
  1745                           	opt stack 0
  1746  0017EA                     ___lldiv:
  1747                           	opt stack 24
  1748                           
  1749                           ;incstack = 0
  1750  0017EA  0E00               	movlw	0
  1751  0017EC  6E21               	movwf	___lldiv@quotient,c
  1752  0017EE  0E00               	movlw	0
  1753  0017F0  6E22               	movwf	___lldiv@quotient+1,c
  1754  0017F2  0E00               	movlw	0
  1755  0017F4  6E23               	movwf	___lldiv@quotient+2,c
  1756  0017F6  0E00               	movlw	0
  1757  0017F8  6E24               	movwf	___lldiv@quotient+3,c
  1758  0017FA  501D               	movf	___lldiv@divisor,w,c
  1759  0017FC  101E               	iorwf	___lldiv@divisor+1,w,c
  1760  0017FE  101F               	iorwf	___lldiv@divisor+2,w,c
  1761  001800  1020               	iorwf	___lldiv@divisor+3,w,c
  1762  001802  B4D8               	btfsc	status,2,c
  1763  001804  D02A               	goto	l861
  1764  001806  0E01               	movlw	1
  1765  001808  6E25               	movwf	___lldiv@counter,c
  1766  00180A  D006               	goto	l1997
  1767  00180C                     l1995:
  1768  00180C  90D8               	bcf	status,0,c
  1769  00180E  361D               	rlcf	___lldiv@divisor,f,c
  1770  001810  361E               	rlcf	___lldiv@divisor+1,f,c
  1771  001812  361F               	rlcf	___lldiv@divisor+2,f,c
  1772  001814  3620               	rlcf	___lldiv@divisor+3,f,c
  1773  001816  2A25               	incf	___lldiv@counter,f,c
  1774  001818                     l1997:
  1775  001818  AE20               	btfss	___lldiv@divisor+3,7,c
  1776  00181A  D7F8               	goto	l1995
  1777  00181C                     l1999:
  1778  00181C  90D8               	bcf	status,0,c
  1779  00181E  3621               	rlcf	___lldiv@quotient,f,c
  1780  001820  3622               	rlcf	___lldiv@quotient+1,f,c
  1781  001822  3623               	rlcf	___lldiv@quotient+2,f,c
  1782  001824  3624               	rlcf	___lldiv@quotient+3,f,c
  1783  001826  501D               	movf	___lldiv@divisor,w,c
  1784  001828  5C19               	subwf	___lldiv@dividend,w,c
  1785  00182A  501E               	movf	___lldiv@divisor+1,w,c
  1786  00182C  581A               	subwfb	___lldiv@dividend+1,w,c
  1787  00182E  501F               	movf	___lldiv@divisor+2,w,c
  1788  001830  581B               	subwfb	___lldiv@dividend+2,w,c
  1789  001832  5020               	movf	___lldiv@divisor+3,w,c
  1790  001834  581C               	subwfb	___lldiv@dividend+3,w,c
  1791  001836  A0D8               	btfss	status,0,c
  1792  001838  D009               	goto	l2007
  1793  00183A  501D               	movf	___lldiv@divisor,w,c
  1794  00183C  5E19               	subwf	___lldiv@dividend,f,c
  1795  00183E  501E               	movf	___lldiv@divisor+1,w,c
  1796  001840  5A1A               	subwfb	___lldiv@dividend+1,f,c
  1797  001842  501F               	movf	___lldiv@divisor+2,w,c
  1798  001844  5A1B               	subwfb	___lldiv@dividend+2,f,c
  1799  001846  5020               	movf	___lldiv@divisor+3,w,c
  1800  001848  5A1C               	subwfb	___lldiv@dividend+3,f,c
  1801  00184A  8021               	bsf	___lldiv@quotient,0,c
  1802  00184C                     l2007:
  1803  00184C  90D8               	bcf	status,0,c
  1804  00184E  3220               	rrcf	___lldiv@divisor+3,f,c
  1805  001850  321F               	rrcf	___lldiv@divisor+2,f,c
  1806  001852  321E               	rrcf	___lldiv@divisor+1,f,c
  1807  001854  321D               	rrcf	___lldiv@divisor,f,c
  1808  001856  2E25               	decfsz	___lldiv@counter,f,c
  1809  001858  D7E1               	goto	l1999
  1810  00185A                     l861:
  1811  00185A  C021  F019         	movff	___lldiv@quotient,?___lldiv
  1812  00185E  C022  F01A         	movff	___lldiv@quotient+1,?___lldiv+1
  1813  001862  C023  F01B         	movff	___lldiv@quotient+2,?___lldiv+2
  1814  001866  C024  F01C         	movff	___lldiv@quotient+3,?___lldiv+3
  1815  00186A  0012               	return		;funcret
  1816  00186C                     __end_of___lldiv:
  1817                           	opt stack 0
  1818                           tblptru	equ	0xFF8
  1819                           prodl	equ	0xFF3
  1820                           intcon	equ	0xFF2
  1821                           intcon3	equ	0xFF0
  1822                           postinc0	equ	0xFEE
  1823                           wreg	equ	0xFE8
  1824                           indf1	equ	0xFE7
  1825                           fsr1h	equ	0xFE2
  1826                           fsr1l	equ	0xFE1
  1827                           indf2	equ	0xFDF
  1828                           fsr2h	equ	0xFDA
  1829                           fsr2l	equ	0xFD9
  1830                           status	equ	0xFD8
  1831                           
  1832 ;; *************** function _display_time *****************
  1833 ;; Defined at:
  1834 ;;		line 104 in file "picState.c"
  1835 ;; Parameters:    Size  Location     Type
  1836 ;;		None
  1837 ;; Auto vars:     Size  Location     Type
  1838 ;;  i               1   60[COMRAM] unsigned char 
  1839 ;; Return value:  Size  Location     Type
  1840 ;;                  2   88[None  ] int 
  1841 ;; Registers used:
  1842 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1843 ;; Tracked objects:
  1844 ;;		On entry : 0/0
  1845 ;;		On exit  : 0/0
  1846 ;;		Unchanged: 0/0
  1847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1849 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1850 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1851 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1852 ;;Total ram usage:        3 bytes
  1853 ;; Hardware stack levels used:    1
  1854 ;; Hardware stack levels required when called:    7
  1855 ;; This function calls:
  1856 ;;		_I2C_Master_Read
  1857 ;;		_I2C_Master_Start
  1858 ;;		_I2C_Master_Stop
  1859 ;;		_I2C_Master_Write
  1860 ;;		_lcdInst
  1861 ;;		_printf
  1862 ;; This function is called by:
  1863 ;;		_main
  1864 ;; This function uses a non-reentrant model
  1865 ;;
  1866                           
  1867                           	psect	text9
  1868  0014FC                     __ptext9:
  1869                           	opt stack 0
  1870  0014FC                     _display_time:
  1871                           	opt stack 23
  1872                           
  1873                           ;picState.c: 106: lcdInst(0x01);;
  1874                           
  1875                           ;incstack = 0
  1876  0014FC  0E01               	movlw	1
  1877  0014FE  ECCC  F00E         	call	_lcdInst
  1878                           
  1879                           ;picState.c: 107: _delay((unsigned long)((300)*(8000000/4000.0)));
  1880  001502  0E04               	movlw	4
  1881  001504  6E3C               	movwf	(??_display_time+1)& (0+255),c
  1882  001506  0E0C               	movlw	12
  1883  001508  6E3B               	movwf	??_display_time& (0+255),c
  1884  00150A  0E34               	movlw	52
  1885  00150C                     u1817:
  1886  00150C  2EE8               	decfsz	wreg,f,c
  1887  00150E  D7FE               	bra	u1817
  1888  001510  2E3B               	decfsz	??_display_time& (0+255),f,c
  1889  001512  D7FC               	bra	u1817
  1890  001514  2E3C               	decfsz	(??_display_time+1)& (0+255),f,c
  1891  001516  D7FA               	bra	u1817
  1892                           
  1893                           ;picState.c: 108: while (mode == 1) {
  1894  001518  D065               	goto	l2329
  1895  00151A                     l2297:
  1896                           
  1897                           ;picState.c: 109: I2C_Master_Start();
  1898  00151A  ECEC  F00E         	call	_I2C_Master_Start	;wreg free
  1899                           
  1900                           ;picState.c: 110: I2C_Master_Write(0b11010001);
  1901  00151E  0E00               	movlw	0
  1902  001520  6E1B               	movwf	I2C_Master_Write@d+1,c
  1903  001522  0ED1               	movlw	209
  1904  001524  6E1A               	movwf	I2C_Master_Write@d,c
  1905  001526  ECDE  F00E         	call	_I2C_Master_Write	;wreg free
  1906                           
  1907                           ;picState.c: 111: for (unsigned char i = 0; i < 0x06; i++) {
  1908  00152A  0E00               	movlw	0
  1909  00152C  6E3D               	movwf	display_time@i,c
  1910  00152E                     l2301:
  1911  00152E  0E05               	movlw	5
  1912  001530  643D               	cpfsgt	display_time@i,c
  1913  001532  D001               	goto	l2305
  1914  001534  D00E               	goto	l2311
  1915  001536                     l2305:
  1916                           
  1917                           ;picState.c: 112: time[i] = I2C_Master_Read(1);
  1918  001536  503D               	movf	display_time@i,w,c
  1919  001538  0D01               	mullw	1
  1920  00153A  0E43               	movlw	low _time
  1921  00153C  24F3               	addwf	prodl,w,c
  1922  00153E  6ED9               	movwf	fsr2l,c
  1923  001540  0E00               	movlw	high _time
  1924  001542  20F4               	addwfc	prodh,w,c
  1925  001544  6EDA               	movwf	fsr2h,c
  1926  001546  0E01               	movlw	1
  1927  001548  EC4D  F00E         	call	_I2C_Master_Read
  1928  00154C  6EDF               	movwf	indf2,c
  1929  00154E  2A3D               	incf	display_time@i,f,c
  1930  001550  D7EE               	goto	l2301
  1931  001552                     l2311:
  1932                           
  1933                           ;picState.c: 113: }
  1934                           ;picState.c: 114: time[6] = I2C_Master_Read(0);
  1935  001552  0E00               	movlw	0
  1936  001554  EC4D  F00E         	call	_I2C_Master_Read
  1937  001558  6E49               	movwf	_time+6,c
  1938                           
  1939                           ;picState.c: 115: I2C_Master_Stop();
  1940  00155A  ECE8  F00E         	call	_I2C_Master_Stop	;wreg free
  1941                           
  1942                           ;picState.c: 116: lcdInst(0b10000000);;
  1943  00155E  0E80               	movlw	128
  1944  001560  ECCC  F00E         	call	_lcdInst
  1945                           
  1946                           ;picState.c: 117: printf("%02x/%02x/%02x", time[6], time[5],
  1947                           ;picState.c: 118: time[4]);
  1948  001564  0E94               	movlw	low STR_10
  1949  001566  6E25               	movwf	printf@f,c
  1950  001568  0E10               	movlw	high STR_10
  1951  00156A  6E26               	movwf	printf@f+1,c
  1952  00156C  C049  F027         	movff	_time+6,?_printf+2
  1953  001570  6A28               	clrf	?_printf+3,c
  1954  001572  C048  F029         	movff	_time+5,?_printf+4
  1955  001576  6A2A               	clrf	?_printf+5,c
  1956  001578  C047  F02B         	movff	_time+4,?_printf+6
  1957  00157C  6A2C               	clrf	?_printf+7,c
  1958  00157E  EC74  F008         	call	_printf	;wreg free
  1959                           
  1960                           ;picState.c: 119: lcdInst(0b11000000);;
  1961  001582  0EC0               	movlw	192
  1962  001584  ECCC  F00E         	call	_lcdInst
  1963                           
  1964                           ;picState.c: 120: printf("%02x:%02x:%02x", time[2], time[1],
  1965                           ;picState.c: 121: time[0]);
  1966  001588  0EA3               	movlw	low STR_11
  1967  00158A  6E25               	movwf	printf@f,c
  1968  00158C  0E10               	movlw	high STR_11
  1969  00158E  6E26               	movwf	printf@f+1,c
  1970  001590  C045  F027         	movff	_time+2,?_printf+2
  1971  001594  6A28               	clrf	?_printf+3,c
  1972  001596  C044  F029         	movff	_time+1,?_printf+4
  1973  00159A  6A2A               	clrf	?_printf+5,c
  1974  00159C  C043  F02B         	movff	_time,?_printf+6
  1975  0015A0  6A2C               	clrf	?_printf+7,c
  1976  0015A2  EC74  F008         	call	_printf	;wreg free
  1977                           
  1978                           ;picState.c: 123: I2C_Master_Start();
  1979  0015A6  ECEC  F00E         	call	_I2C_Master_Start	;wreg free
  1980                           
  1981                           ;picState.c: 124: I2C_Master_Write(0b11010000);
  1982  0015AA  0E00               	movlw	0
  1983  0015AC  6E1B               	movwf	I2C_Master_Write@d+1,c
  1984  0015AE  0ED0               	movlw	208
  1985  0015B0  6E1A               	movwf	I2C_Master_Write@d,c
  1986  0015B2  ECDE  F00E         	call	_I2C_Master_Write	;wreg free
  1987                           
  1988                           ;picState.c: 125: I2C_Master_Write(0x00);
  1989  0015B6  0E00               	movlw	0
  1990  0015B8  6E1B               	movwf	I2C_Master_Write@d+1,c
  1991  0015BA  0E00               	movlw	0
  1992  0015BC  6E1A               	movwf	I2C_Master_Write@d,c
  1993  0015BE  ECDE  F00E         	call	_I2C_Master_Write	;wreg free
  1994                           
  1995                           ;picState.c: 126: I2C_Master_Stop();
  1996  0015C2  ECE8  F00E         	call	_I2C_Master_Stop	;wreg free
  1997                           
  1998                           ;picState.c: 128: _delay((unsigned long)((990)*(8000000/4000.0)));
  1999  0015C6  0E0B               	movlw	11
  2000  0015C8  6E3C               	movwf	(??_display_time+1)& (0+255),c
  2001  0015CA  0E0C               	movlw	12
  2002  0015CC  6E3B               	movwf	??_display_time& (0+255),c
  2003  0015CE  0E64               	movlw	100
  2004  0015D0                     u1827:
  2005  0015D0  2EE8               	decfsz	wreg,f,c
  2006  0015D2  D7FE               	bra	u1827
  2007  0015D4  2E3B               	decfsz	??_display_time& (0+255),f,c
  2008  0015D6  D7FC               	bra	u1827
  2009  0015D8  2E3C               	decfsz	(??_display_time+1)& (0+255),f,c
  2010  0015DA  D7FA               	bra	u1827
  2011  0015DC  D000               	nop2	
  2012                           
  2013                           ;picState.c: 129: lcdInst(0b10000000);;
  2014  0015DE  0E80               	movlw	128
  2015  0015E0  ECCC  F00E         	call	_lcdInst
  2016  0015E4                     l2329:
  2017  0015E4  0457               	decf	_mode,w,c
  2018  0015E6  A4D8               	btfss	status,2,c
  2019  0015E8  0012               	return	
  2020  0015EA  D797               	goto	l2297
  2021  0015EC                     __end_of_display_time:
  2022                           	opt stack 0
  2023                           tblptru	equ	0xFF8
  2024                           prodh	equ	0xFF4
  2025                           prodl	equ	0xFF3
  2026                           intcon	equ	0xFF2
  2027                           intcon3	equ	0xFF0
  2028                           postinc0	equ	0xFEE
  2029                           wreg	equ	0xFE8
  2030                           indf1	equ	0xFE7
  2031                           fsr1h	equ	0xFE2
  2032                           fsr1l	equ	0xFE1
  2033                           indf2	equ	0xFDF
  2034                           fsr2h	equ	0xFDA
  2035                           fsr2l	equ	0xFD9
  2036                           status	equ	0xFD8
  2037                           
  2038 ;; *************** function _I2C_Master_Write *****************
  2039 ;; Defined at:
  2040 ;;		line 47 in file "I2C.c"
  2041 ;; Parameters:    Size  Location     Type
  2042 ;;  d               2   25[COMRAM] unsigned int 
  2043 ;; Auto vars:     Size  Location     Type
  2044 ;;		None
  2045 ;; Return value:  Size  Location     Type
  2046 ;;                  1    wreg      void 
  2047 ;; Registers used:
  2048 ;;		wreg, status,2, status,0, cstack
  2049 ;; Tracked objects:
  2050 ;;		On entry : 0/0
  2051 ;;		On exit  : 0/0
  2052 ;;		Unchanged: 0/0
  2053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2054 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2057 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2058 ;;Total ram usage:        2 bytes
  2059 ;; Hardware stack levels used:    1
  2060 ;; Hardware stack levels required when called:    5
  2061 ;; This function calls:
  2062 ;;		_I2C_Master_Wait
  2063 ;; This function is called by:
  2064 ;;		_display_time
  2065 ;;		_initPIC
  2066 ;;		_get_time
  2067 ;;		_set_time
  2068 ;; This function uses a non-reentrant model
  2069 ;;
  2070                           
  2071                           	psect	text10
  2072  001DBC                     __ptext10:
  2073                           	opt stack 0
  2074  001DBC                     _I2C_Master_Write:
  2075                           	opt stack 23
  2076                           
  2077                           ;I2C.c: 49: I2C_Master_Wait();
  2078                           
  2079                           ;incstack = 0
  2080  001DBC  ECB4  F00E         	call	_I2C_Master_Wait	;wreg free
  2081                           
  2082                           ;I2C.c: 50: SSPBUF = d;
  2083  001DC0  C01A  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  2084  001DC4  0012               	return		;funcret
  2085  001DC6                     __end_of_I2C_Master_Write:
  2086                           	opt stack 0
  2087                           tblptru	equ	0xFF8
  2088                           prodh	equ	0xFF4
  2089                           prodl	equ	0xFF3
  2090                           intcon	equ	0xFF2
  2091                           intcon3	equ	0xFF0
  2092                           postinc0	equ	0xFEE
  2093                           wreg	equ	0xFE8
  2094                           indf1	equ	0xFE7
  2095                           fsr1h	equ	0xFE2
  2096                           fsr1l	equ	0xFE1
  2097                           indf2	equ	0xFDF
  2098                           fsr2h	equ	0xFDA
  2099                           fsr2l	equ	0xFD9
  2100                           status	equ	0xFD8
  2101                           
  2102 ;; *************** function _I2C_Master_Stop *****************
  2103 ;; Defined at:
  2104 ;;		line 41 in file "I2C.c"
  2105 ;; Parameters:    Size  Location     Type
  2106 ;;		None
  2107 ;; Auto vars:     Size  Location     Type
  2108 ;;		None
  2109 ;; Return value:  Size  Location     Type
  2110 ;;                  1    wreg      void 
  2111 ;; Registers used:
  2112 ;;		wreg, status,2, status,0, cstack
  2113 ;; Tracked objects:
  2114 ;;		On entry : 0/0
  2115 ;;		On exit  : 0/0
  2116 ;;		Unchanged: 0/0
  2117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2121 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2122 ;;Total ram usage:        0 bytes
  2123 ;; Hardware stack levels used:    1
  2124 ;; Hardware stack levels required when called:    5
  2125 ;; This function calls:
  2126 ;;		_I2C_Master_Wait
  2127 ;; This function is called by:
  2128 ;;		_display_time
  2129 ;;		_initPIC
  2130 ;;		_get_time
  2131 ;;		_set_time
  2132 ;; This function uses a non-reentrant model
  2133 ;;
  2134                           
  2135                           	psect	text11
  2136  001DD0                     __ptext11:
  2137                           	opt stack 0
  2138  001DD0                     _I2C_Master_Stop:
  2139                           	opt stack 23
  2140                           
  2141                           ;I2C.c: 43: I2C_Master_Wait();
  2142                           
  2143                           ;incstack = 0
  2144  001DD0  ECB4  F00E         	call	_I2C_Master_Wait	;wreg free
  2145                           
  2146                           ;I2C.c: 44: PEN = 1;
  2147  001DD4  84C5               	bsf	4037,2,c	;volatile
  2148  001DD6  0012               	return		;funcret
  2149  001DD8                     __end_of_I2C_Master_Stop:
  2150                           	opt stack 0
  2151                           tblptru	equ	0xFF8
  2152                           prodh	equ	0xFF4
  2153                           prodl	equ	0xFF3
  2154                           intcon	equ	0xFF2
  2155                           intcon3	equ	0xFF0
  2156                           postinc0	equ	0xFEE
  2157                           wreg	equ	0xFE8
  2158                           indf1	equ	0xFE7
  2159                           fsr1h	equ	0xFE2
  2160                           fsr1l	equ	0xFE1
  2161                           indf2	equ	0xFDF
  2162                           fsr2h	equ	0xFDA
  2163                           fsr2l	equ	0xFD9
  2164                           status	equ	0xFD8
  2165                           
  2166 ;; *************** function _I2C_Master_Start *****************
  2167 ;; Defined at:
  2168 ;;		line 29 in file "I2C.c"
  2169 ;; Parameters:    Size  Location     Type
  2170 ;;		None
  2171 ;; Auto vars:     Size  Location     Type
  2172 ;;		None
  2173 ;; Return value:  Size  Location     Type
  2174 ;;                  1    wreg      void 
  2175 ;; Registers used:
  2176 ;;		wreg, status,2, status,0, cstack
  2177 ;; Tracked objects:
  2178 ;;		On entry : 0/0
  2179 ;;		On exit  : 0/0
  2180 ;;		Unchanged: 0/0
  2181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2183 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2185 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2186 ;;Total ram usage:        0 bytes
  2187 ;; Hardware stack levels used:    1
  2188 ;; Hardware stack levels required when called:    5
  2189 ;; This function calls:
  2190 ;;		_I2C_Master_Wait
  2191 ;; This function is called by:
  2192 ;;		_display_time
  2193 ;;		_initPIC
  2194 ;;		_get_time
  2195 ;;		_set_time
  2196 ;; This function uses a non-reentrant model
  2197 ;;
  2198                           
  2199                           	psect	text12
  2200  001DD8                     __ptext12:
  2201                           	opt stack 0
  2202  001DD8                     _I2C_Master_Start:
  2203                           	opt stack 23
  2204                           
  2205                           ;I2C.c: 31: I2C_Master_Wait();
  2206                           
  2207                           ;incstack = 0
  2208  001DD8  ECB4  F00E         	call	_I2C_Master_Wait	;wreg free
  2209                           
  2210                           ;I2C.c: 32: SEN = 1;
  2211  001DDC  80C5               	bsf	4037,0,c	;volatile
  2212  001DDE  0012               	return		;funcret
  2213  001DE0                     __end_of_I2C_Master_Start:
  2214                           	opt stack 0
  2215                           tblptru	equ	0xFF8
  2216                           prodh	equ	0xFF4
  2217                           prodl	equ	0xFF3
  2218                           intcon	equ	0xFF2
  2219                           intcon3	equ	0xFF0
  2220                           postinc0	equ	0xFEE
  2221                           wreg	equ	0xFE8
  2222                           indf1	equ	0xFE7
  2223                           fsr1h	equ	0xFE2
  2224                           fsr1l	equ	0xFE1
  2225                           indf2	equ	0xFDF
  2226                           fsr2h	equ	0xFDA
  2227                           fsr2l	equ	0xFD9
  2228                           status	equ	0xFD8
  2229                           
  2230 ;; *************** function _I2C_Master_Read *****************
  2231 ;; Defined at:
  2232 ;;		line 53 in file "I2C.c"
  2233 ;; Parameters:    Size  Location     Type
  2234 ;;  a               1    wreg     unsigned char 
  2235 ;; Auto vars:     Size  Location     Type
  2236 ;;  a               1   25[COMRAM] unsigned char 
  2237 ;;  temp            1   26[COMRAM] unsigned char 
  2238 ;; Return value:  Size  Location     Type
  2239 ;;                  1    wreg      unsigned char 
  2240 ;; Registers used:
  2241 ;;		wreg, status,2, status,0, cstack
  2242 ;; Tracked objects:
  2243 ;;		On entry : 0/0
  2244 ;;		On exit  : 0/0
  2245 ;;		Unchanged: 0/0
  2246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2248 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2250 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2251 ;;Total ram usage:        2 bytes
  2252 ;; Hardware stack levels used:    1
  2253 ;; Hardware stack levels required when called:    5
  2254 ;; This function calls:
  2255 ;;		_I2C_Master_Wait
  2256 ;; This function is called by:
  2257 ;;		_display_time
  2258 ;;		_get_time
  2259 ;; This function uses a non-reentrant model
  2260 ;;
  2261                           
  2262                           	psect	text13
  2263  001C9A                     __ptext13:
  2264                           	opt stack 0
  2265  001C9A                     _I2C_Master_Read:
  2266                           	opt stack 23
  2267                           
  2268                           ;incstack = 0
  2269                           ;I2C_Master_Read@a stored from wreg
  2270  001C9A  6E1A               	movwf	I2C_Master_Read@a,c
  2271                           
  2272                           ;I2C.c: 55: unsigned char temp;
  2273                           ;I2C.c: 56: I2C_Master_Wait();
  2274  001C9C  ECB4  F00E         	call	_I2C_Master_Wait	;wreg free
  2275                           
  2276                           ;I2C.c: 57: RCEN = 1;
  2277  001CA0  86C5               	bsf	4037,3,c	;volatile
  2278                           
  2279                           ;I2C.c: 58: I2C_Master_Wait();
  2280  001CA2  ECB4  F00E         	call	_I2C_Master_Wait	;wreg free
  2281                           
  2282                           ;I2C.c: 59: temp = SSPBUF;
  2283  001CA6  CFC9 F01B          	movff	4041,I2C_Master_Read@temp	;volatile
  2284                           
  2285                           ;I2C.c: 60: I2C_Master_Wait();
  2286  001CAA  ECB4  F00E         	call	_I2C_Master_Wait	;wreg free
  2287                           
  2288                           ;I2C.c: 61: ACKDT = (a)?0:1;
  2289  001CAE  501A               	movf	I2C_Master_Read@a,w,c
  2290  001CB0  A4D8               	btfss	status,2,c
  2291  001CB2  D002               	goto	u30
  2292  001CB4  8AC5               	bsf	4037,5,c	;volatile
  2293  001CB6  D001               	goto	l1167
  2294  001CB8                     u30:
  2295  001CB8  9AC5               	bcf	4037,5,c	;volatile
  2296  001CBA                     l1167:
  2297                           
  2298                           ;I2C.c: 62: ACKEN = 1;
  2299  001CBA  88C5               	bsf	4037,4,c	;volatile
  2300                           
  2301                           ;I2C.c: 63: return temp;
  2302  001CBC  501B               	movf	I2C_Master_Read@temp,w,c
  2303  001CBE  0012               	return	
  2304  001CC0                     __end_of_I2C_Master_Read:
  2305                           	opt stack 0
  2306                           tblptru	equ	0xFF8
  2307                           prodh	equ	0xFF4
  2308                           prodl	equ	0xFF3
  2309                           intcon	equ	0xFF2
  2310                           intcon3	equ	0xFF0
  2311                           postinc0	equ	0xFEE
  2312                           wreg	equ	0xFE8
  2313                           indf1	equ	0xFE7
  2314                           fsr1h	equ	0xFE2
  2315                           fsr1l	equ	0xFE1
  2316                           indf2	equ	0xFDF
  2317                           fsr2h	equ	0xFDA
  2318                           fsr2l	equ	0xFD9
  2319                           status	equ	0xFD8
  2320                           
  2321 ;; *************** function _I2C_Master_Wait *****************
  2322 ;; Defined at:
  2323 ;;		line 24 in file "I2C.c"
  2324 ;; Parameters:    Size  Location     Type
  2325 ;;		None
  2326 ;; Auto vars:     Size  Location     Type
  2327 ;;		None
  2328 ;; Return value:  Size  Location     Type
  2329 ;;                  1    wreg      void 
  2330 ;; Registers used:
  2331 ;;		wreg, status,2, status,0
  2332 ;; Tracked objects:
  2333 ;;		On entry : 0/0
  2334 ;;		On exit  : 0/0
  2335 ;;		Unchanged: 0/0
  2336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2339 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2340 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2341 ;;Total ram usage:        1 bytes
  2342 ;; Hardware stack levels used:    1
  2343 ;; Hardware stack levels required when called:    4
  2344 ;; This function calls:
  2345 ;;		Nothing
  2346 ;; This function is called by:
  2347 ;;		_I2C_Master_Start
  2348 ;;		_I2C_Master_Stop
  2349 ;;		_I2C_Master_Write
  2350 ;;		_I2C_Master_Read
  2351 ;;		_I2C_Master_RepeatedStart
  2352 ;; This function uses a non-reentrant model
  2353 ;;
  2354                           
  2355                           	psect	text14
  2356  001D68                     __ptext14:
  2357                           	opt stack 0
  2358  001D68                     _I2C_Master_Wait:
  2359                           	opt stack 23
  2360  001D68                     l34:
  2361  001D68  B4C7               	btfsc	4039,2,c	;volatile
  2362  001D6A  D7FE               	goto	l34
  2363  001D6C  CFC5 F019          	movff	4037,??_I2C_Master_Wait	;volatile
  2364  001D70  0E1F               	movlw	31
  2365  001D72  1619               	andwf	??_I2C_Master_Wait,f,c
  2366  001D74  B4D8               	btfsc	status,2,c
  2367  001D76  0012               	return	
  2368  001D78  D7F7               	goto	l34
  2369  001D7A                     __end_of_I2C_Master_Wait:
  2370                           	opt stack 0
  2371                           tblptru	equ	0xFF8
  2372                           prodh	equ	0xFF4
  2373                           prodl	equ	0xFF3
  2374                           intcon	equ	0xFF2
  2375                           intcon3	equ	0xFF0
  2376                           postinc0	equ	0xFEE
  2377                           wreg	equ	0xFE8
  2378                           indf1	equ	0xFE7
  2379                           fsr1h	equ	0xFE2
  2380                           fsr1l	equ	0xFE1
  2381                           indf2	equ	0xFDF
  2382                           fsr2h	equ	0xFDA
  2383                           fsr2l	equ	0xFD9
  2384                           status	equ	0xFD8
  2385                           
  2386 ;; *************** function _display_sorting_time *****************
  2387 ;; Defined at:
  2388 ;;		line 133 in file "picState.c"
  2389 ;; Parameters:    Size  Location     Type
  2390 ;;		None
  2391 ;; Auto vars:     Size  Location     Type
  2392 ;;  i               2   59[COMRAM] int 
  2393 ;; Return value:  Size  Location     Type
  2394 ;;                  2   92[None  ] int 
  2395 ;; Registers used:
  2396 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2397 ;; Tracked objects:
  2398 ;;		On entry : 0/0
  2399 ;;		On exit  : 0/0
  2400 ;;		Unchanged: 0/0
  2401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2403 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2404 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2405 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2406 ;;Total ram usage:        3 bytes
  2407 ;; Hardware stack levels used:    1
  2408 ;; Hardware stack levels required when called:    7
  2409 ;; This function calls:
  2410 ;;		_lcdInst
  2411 ;;		_printf
  2412 ;; This function is called by:
  2413 ;;		_main
  2414 ;; This function uses a non-reentrant model
  2415 ;;
  2416                           
  2417                           	psect	text15
  2418  001B7E                     __ptext15:
  2419                           	opt stack 0
  2420  001B7E                     _display_sorting_time:
  2421                           	opt stack 23
  2422                           
  2423                           ;picState.c: 135: lcdInst(0x01);;
  2424                           
  2425                           ;incstack = 0
  2426  001B7E  0E01               	movlw	1
  2427  001B80  ECCC  F00E         	call	_lcdInst
  2428                           
  2429                           ;picState.c: 136: _delay((unsigned long)((10)*(8000000/4000.0)));
  2430  001B84  0E1A               	movlw	26
  2431  001B86  6E3B               	movwf	??_display_sorting_time& (0+255),c
  2432  001B88  0EF8               	movlw	248
  2433  001B8A                     u1837:
  2434  001B8A  2EE8               	decfsz	wreg,f,c
  2435  001B8C  D7FE               	bra	u1837
  2436  001B8E  2E3B               	decfsz	??_display_sorting_time& (0+255),f,c
  2437  001B90  D7FC               	bra	u1837
  2438  001B92  D000               	nop2	
  2439                           
  2440                           ;picState.c: 137: LATCbits.LATC1 = 0;
  2441  001B94  928B               	bcf	3979,1,c	;volatile
  2442                           
  2443                           ;picState.c: 138: LATBbits.LATB2 = 0;
  2444  001B96  948A               	bcf	3978,2,c	;volatile
  2445                           
  2446                           ;picState.c: 139: int i = passed_time;
  2447  001B98  C056  F03C         	movff	_passed_time,display_sorting_time@i
  2448  001B9C  6A3D               	clrf	display_sorting_time@i+1,c
  2449                           
  2450                           ;picState.c: 140: printf("Time used: %d s", i);
  2451  001B9E  0E75               	movlw	low STR_12
  2452  001BA0  6E25               	movwf	printf@f,c
  2453  001BA2  0E10               	movlw	high STR_12
  2454  001BA4  6E26               	movwf	printf@f+1,c
  2455  001BA6  C03C  F027         	movff	display_sorting_time@i,?_printf+2
  2456  001BAA  C03D  F028         	movff	display_sorting_time@i+1,?_printf+3
  2457  001BAE  EC74  F008         	call	_printf	;wreg free
  2458                           
  2459                           ;picState.c: 141: lcdInst(0b11000000);;
  2460  001BB2  0EC0               	movlw	192
  2461  001BB4  ECCC  F00E         	call	_lcdInst
  2462                           
  2463                           ;picState.c: 143: flag = 0;
  2464  001BB8  0E00               	movlw	0
  2465  001BBA  6E55               	movwf	_flag+1,c
  2466  001BBC  0E00               	movlw	0
  2467  001BBE  6E54               	movwf	_flag,c
  2468                           
  2469                           ;picState.c: 144: LATDbits.LATD0 = 0;
  2470  001BC0  908C               	bcf	3980,0,c	;volatile
  2471  001BC2                     l2375:
  2472  001BC2  0E03               	movlw	3
  2473  001BC4  1857               	xorwf	_mode,w,c
  2474  001BC6  A4D8               	btfss	status,2,c
  2475  001BC8  0012               	return	
  2476  001BCA  D7FB               	goto	l2375
  2477  001BCC                     __end_of_display_sorting_time:
  2478                           	opt stack 0
  2479                           tblptru	equ	0xFF8
  2480                           prodh	equ	0xFF4
  2481                           prodl	equ	0xFF3
  2482                           intcon	equ	0xFF2
  2483                           intcon3	equ	0xFF0
  2484                           postinc0	equ	0xFEE
  2485                           wreg	equ	0xFE8
  2486                           indf1	equ	0xFE7
  2487                           fsr1h	equ	0xFE2
  2488                           fsr1l	equ	0xFE1
  2489                           indf2	equ	0xFDF
  2490                           fsr2h	equ	0xFDA
  2491                           fsr2l	equ	0xFD9
  2492                           status	equ	0xFD8
  2493                           
  2494 ;; *************** function _debug *****************
  2495 ;; Defined at:
  2496 ;;		line 35 in file "picState.c"
  2497 ;; Parameters:    Size  Location     Type
  2498 ;;		None
  2499 ;; Auto vars:     Size  Location     Type
  2500 ;;  i               2   63[COMRAM] int 
  2501 ;;  H_max           2   61[COMRAM] int 
  2502 ;; Return value:  Size  Location     Type
  2503 ;;                  2   94[None  ] int 
  2504 ;; Registers used:
  2505 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2506 ;; Tracked objects:
  2507 ;;		On entry : 0/0
  2508 ;;		On exit  : 0/0
  2509 ;;		Unchanged: 0/0
  2510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2512 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2513 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2514 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2515 ;;Total ram usage:        7 bytes
  2516 ;; Hardware stack levels used:    1
  2517 ;; Hardware stack levels required when called:    7
  2518 ;; This function calls:
  2519 ;;		_lcdInst
  2520 ;;		_printf
  2521 ;;		_readADC
  2522 ;; This function is called by:
  2523 ;;		_main
  2524 ;; This function uses a non-reentrant model
  2525 ;;
  2526                           
  2527                           	psect	text16
  2528  00186C                     __ptext16:
  2529                           	opt stack 0
  2530  00186C                     _debug:
  2531                           	opt stack 23
  2532                           
  2533                           ;picState.c: 36: int H_max = 0;
  2534                           
  2535                           ;incstack = 0
  2536  00186C  0E00               	movlw	0
  2537  00186E  6E3F               	movwf	debug@H_max+1,c
  2538  001870  0E00               	movlw	0
  2539  001872  6E3E               	movwf	debug@H_max,c
  2540                           
  2541                           ;picState.c: 37: int i = 0;
  2542  001874  0E00               	movlw	0
  2543  001876  6E41               	movwf	debug@i+1,c
  2544  001878  0E00               	movlw	0
  2545  00187A  6E40               	movwf	debug@i,c
  2546                           
  2547                           ;picState.c: 38: while(i < 50){
  2548  00187C  D02C               	goto	l2391
  2549  00187E                     l2379:
  2550                           
  2551                           ;picState.c: 39: lcdInst(0b10000000);;
  2552  00187E  0E80               	movlw	128
  2553  001880  ECCC  F00E         	call	_lcdInst
  2554                           
  2555                           ;picState.c: 41: readADC(5);
  2556  001884  0E05               	movlw	5
  2557  001886  EC86  F00E         	call	_readADC
  2558                           
  2559                           ;picState.c: 42: if (ADRESH > H_max) {
  2560  00188A  50C4               	movf	4036,w,c	;volatile
  2561  00188C  6E3B               	movwf	??_debug& (0+255),c
  2562  00188E  6A3C               	clrf	(??_debug+1)& (0+255),c
  2563  001890  503B               	movf	??_debug,w,c
  2564  001892  5C3E               	subwf	debug@H_max,w,c
  2565  001894  503F               	movf	debug@H_max+1,w,c
  2566  001896  0A80               	xorlw	128
  2567  001898  6E3D               	movwf	(??_debug+2)& (0+255),c
  2568  00189A  503C               	movf	??_debug+1,w,c
  2569  00189C  0A80               	xorlw	128
  2570  00189E  583D               	subwfb	(??_debug+2)& (0+255),w,c
  2571  0018A0  B0D8               	btfsc	status,0,c
  2572  0018A2  D003               	goto	l2385
  2573                           
  2574                           ;picState.c: 43: H_max = ADRESH;
  2575  0018A4  CFC4 F03E          	movff	4036,debug@H_max	;volatile
  2576  0018A8  6A3F               	clrf	debug@H_max+1,c
  2577  0018AA                     l2385:
  2578                           
  2579                           ;picState.c: 44: }
  2580                           ;picState.c: 45: printf("%x", ADRESH);
  2581  0018AA  0EE4               	movlw	low STR_7
  2582  0018AC  6E25               	movwf	printf@f,c
  2583  0018AE  0E10               	movlw	high STR_7
  2584  0018B0  6E26               	movwf	printf@f+1,c
  2585  0018B2  CFC4 F027          	movff	4036,?_printf+2	;volatile
  2586  0018B6  6A28               	clrf	?_printf+3,c
  2587  0018B8  EC74  F008         	call	_printf	;wreg free
  2588                           
  2589                           ;picState.c: 46: _delay((unsigned long)((500)*(8000000/4000.0)));
  2590  0018BC  0E06               	movlw	6
  2591  0018BE  6E3C               	movwf	(??_debug+1)& (0+255),c
  2592  0018C0  0E13               	movlw	19
  2593  0018C2  6E3B               	movwf	??_debug& (0+255),c
  2594  0018C4  0EAE               	movlw	174
  2595  0018C6                     u1847:
  2596  0018C6  2EE8               	decfsz	wreg,f,c
  2597  0018C8  D7FE               	bra	u1847
  2598  0018CA  2E3B               	decfsz	??_debug& (0+255),f,c
  2599  0018CC  D7FC               	bra	u1847
  2600  0018CE  2E3C               	decfsz	(??_debug+1)& (0+255),f,c
  2601  0018D0  D7FA               	bra	u1847
  2602                           
  2603                           ;picState.c: 47: i++;
  2604  0018D2  4A40               	infsnz	debug@i,f,c
  2605  0018D4  2A41               	incf	debug@i+1,f,c
  2606  0018D6                     l2391:
  2607  0018D6  BE41               	btfsc	debug@i+1,7,c
  2608  0018D8  D7D2               	goto	l2379
  2609  0018DA  5041               	movf	debug@i+1,w,c
  2610  0018DC  E105               	bnz	l198
  2611  0018DE  0E32               	movlw	50
  2612  0018E0  5C40               	subwf	debug@i,w,c
  2613  0018E2  B0D8               	btfsc	status,0,c
  2614  0018E4  0012               	return	
  2615  0018E6  D7CB               	goto	l2379
  2616  0018E8                     l198:
  2617  0018E8  0012               	return		;funcret
  2618  0018EA                     __end_of_debug:
  2619                           	opt stack 0
  2620                           tblptru	equ	0xFF8
  2621                           prodh	equ	0xFF4
  2622                           prodl	equ	0xFF3
  2623                           intcon	equ	0xFF2
  2624                           intcon3	equ	0xFF0
  2625                           postinc0	equ	0xFEE
  2626                           wreg	equ	0xFE8
  2627                           indf1	equ	0xFE7
  2628                           fsr1h	equ	0xFE2
  2629                           fsr1l	equ	0xFE1
  2630                           indf2	equ	0xFDF
  2631                           fsr2h	equ	0xFDA
  2632                           fsr2l	equ	0xFD9
  2633                           status	equ	0xFD8
  2634                           
  2635 ;; *************** function _readADC *****************
  2636 ;; Defined at:
  2637 ;;		line 21 in file "adc.c"
  2638 ;; Parameters:    Size  Location     Type
  2639 ;;  channel         1    wreg     unsigned char 
  2640 ;; Auto vars:     Size  Location     Type
  2641 ;;  channel         1   25[COMRAM] unsigned char 
  2642 ;; Return value:  Size  Location     Type
  2643 ;;                  1    wreg      void 
  2644 ;; Registers used:
  2645 ;;		wreg, status,2, status,0
  2646 ;; Tracked objects:
  2647 ;;		On entry : 0/0
  2648 ;;		On exit  : 0/0
  2649 ;;		Unchanged: 0/0
  2650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2652 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2653 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2654 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2655 ;;Total ram usage:        2 bytes
  2656 ;; Hardware stack levels used:    1
  2657 ;; Hardware stack levels required when called:    4
  2658 ;; This function calls:
  2659 ;;		Nothing
  2660 ;; This function is called by:
  2661 ;;		_debug
  2662 ;;		_sense_can
  2663 ;;		_readLightSensor
  2664 ;; This function uses a non-reentrant model
  2665 ;;
  2666                           
  2667                           	psect	text17
  2668  001D0C                     __ptext17:
  2669                           	opt stack 0
  2670  001D0C                     _readADC:
  2671                           	opt stack 25
  2672                           
  2673                           ;incstack = 0
  2674                           ;readADC@channel stored from wreg
  2675  001D0C  6E1A               	movwf	readADC@channel,c
  2676                           
  2677                           ;adc.c: 22: ADCON0 = (ADCON0 & 0X3C)|((channel & 0x0F)<<2);
  2678  001D0E  C01A  F019         	movff	readADC@channel,??_readADC
  2679  001D12  0E0F               	movlw	15
  2680  001D14  1619               	andwf	??_readADC,f,c
  2681  001D16  90D8               	bcf	status,0,c
  2682  001D18  3619               	rlcf	??_readADC,f,c
  2683  001D1A  90D8               	bcf	status,0,c
  2684  001D1C  3619               	rlcf	??_readADC,f,c
  2685  001D1E  50C2               	movf	4034,w,c	;volatile
  2686  001D20  0B3C               	andlw	60
  2687  001D22  1019               	iorwf	??_readADC,w,c
  2688  001D24  6EC2               	movwf	4034,c	;volatile
  2689                           
  2690                           ;adc.c: 23: ADON = 1;
  2691  001D26  80C2               	bsf	4034,0,c	;volatile
  2692                           
  2693                           ;adc.c: 24: ADCON0bits.GO = 1;
  2694  001D28  82C2               	bsf	4034,1,c	;volatile
  2695  001D2A                     l126:
  2696  001D2A  A2C2               	btfss	4034,1,c	;volatile
  2697  001D2C  0012               	return	
  2698  001D2E  D7FD               	goto	l126
  2699  001D30                     __end_of_readADC:
  2700                           	opt stack 0
  2701                           tblptru	equ	0xFF8
  2702                           prodh	equ	0xFF4
  2703                           prodl	equ	0xFF3
  2704                           intcon	equ	0xFF2
  2705                           intcon3	equ	0xFF0
  2706                           postinc0	equ	0xFEE
  2707                           wreg	equ	0xFE8
  2708                           indf1	equ	0xFE7
  2709                           fsr1h	equ	0xFE2
  2710                           fsr1l	equ	0xFE1
  2711                           indf2	equ	0xFDF
  2712                           fsr2h	equ	0xFDA
  2713                           fsr2l	equ	0xFD9
  2714                           status	equ	0xFD8
  2715                           
  2716 ;; *************** function _printf *****************
  2717 ;; Defined at:
  2718 ;;		line 464 in file "/Applications/microchip/xc8/v1.41/sources/common/doprnt.c"
  2719 ;; Parameters:    Size  Location     Type
  2720 ;;  f               2   36[COMRAM] PTR const unsigned char 
  2721 ;;		 -> STR_14(13), STR_13(11), STR_12(16), STR_11(15), 
  2722 ;;		 -> STR_10(15), STR_9(20), STR_8(16), STR_7(3), 
  2723 ;;		 -> STR_6(10), STR_5(15), STR_4(7), STR_3(21), 
  2724 ;;		 -> STR_2(13), STR_1(9), 
  2725 ;; Auto vars:     Size  Location     Type
  2726 ;;  idx             1   48[COMRAM] unsigned char 
  2727 ;;  tmpval          4    0        struct .
  2728 ;;  cp              3    0        PTR const unsigned char 
  2729 ;;  width           2   55[COMRAM] int 
  2730 ;;  val             2   52[COMRAM] unsigned int 
  2731 ;;  ap              2   49[COMRAM] PTR void [1]
  2732 ;;		 -> ?_printf(2), 
  2733 ;;  len             2    0        unsigned int 
  2734 ;;  c               1   57[COMRAM] char 
  2735 ;;  flag            1   54[COMRAM] unsigned char 
  2736 ;;  prec            1   51[COMRAM] char 
  2737 ;; Return value:  Size  Location     Type
  2738 ;;                  2   36[COMRAM] int 
  2739 ;; Registers used:
  2740 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2741 ;; Tracked objects:
  2742 ;;		On entry : 0/0
  2743 ;;		On exit  : 0/0
  2744 ;;		Unchanged: 0/0
  2745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2746 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2747 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2748 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2749 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2750 ;;Total ram usage:       22 bytes
  2751 ;; Hardware stack levels used:    1
  2752 ;; Hardware stack levels required when called:    6
  2753 ;; This function calls:
  2754 ;;		___lwdiv
  2755 ;;		___lwmod
  2756 ;;		___wmul
  2757 ;;		_isdigit
  2758 ;;		_putch
  2759 ;; This function is called by:
  2760 ;;		_welcome
  2761 ;;		_debug
  2762 ;;		_sort
  2763 ;;		_display_time
  2764 ;;		_display_sorting_time
  2765 ;;		_getSortTime
  2766 ;; This function uses a non-reentrant model
  2767 ;;
  2768                           
  2769                           	psect	text18
  2770  0010E8                     __ptext18:
  2771                           	opt stack 0
  2772  0010E8                     _printf:
  2773                           	opt stack 23
  2774                           
  2775                           ;doprnt.c: 466: va_list ap;
  2776                           ;doprnt.c: 499: signed char c;
  2777                           ;doprnt.c: 501: int width;
  2778                           ;doprnt.c: 506: signed char prec;
  2779                           ;doprnt.c: 508: unsigned char flag;
  2780                           ;doprnt.c: 523: union {
  2781                           ;doprnt.c: 524: unsigned long vd;
  2782                           ;doprnt.c: 525: double integ;
  2783                           ;doprnt.c: 526: } tmpval;
  2784                           ;doprnt.c: 528: unsigned int val;
  2785                           ;doprnt.c: 529: unsigned len;
  2786                           ;doprnt.c: 530: const char * cp;
  2787                           ;doprnt.c: 533: *ap = __va_start();
  2788                           
  2789                           ;incstack = 0
  2790  0010E8  0E27               	movlw	low (?_printf+2)
  2791  0010EA  6E32               	movwf	printf@ap,c
  2792  0010EC  0E00               	movlw	high (?_printf+2)
  2793  0010EE  6E33               	movwf	printf@ap+1,c
  2794                           
  2795                           ;doprnt.c: 536: while(c = *f++) {
  2796  0010F0  D174               	goto	l2189
  2797  0010F2                     l2063:
  2798                           
  2799                           ;doprnt.c: 538: if(c != '%')
  2800  0010F2  0E25               	movlw	37
  2801  0010F4  183A               	xorwf	printf@c,w,c
  2802  0010F6  B4D8               	btfsc	status,2,c
  2803  0010F8  D004               	goto	l2067
  2804                           
  2805                           ;doprnt.c: 540: {
  2806                           ;doprnt.c: 541: (putch(c) );
  2807  0010FA  503A               	movf	printf@c,w,c
  2808  0010FC  ECC6  F00E         	call	_putch
  2809                           
  2810                           ;doprnt.c: 542: continue;
  2811  001100  D16C               	goto	l2189
  2812  001102                     l2067:
  2813                           
  2814                           ;doprnt.c: 543: }
  2815                           ;doprnt.c: 546: width = 0;
  2816  001102  0E00               	movlw	0
  2817  001104  6E39               	movwf	printf@width+1,c
  2818  001106  0E00               	movlw	0
  2819  001108  6E38               	movwf	printf@width,c
  2820                           
  2821                           ;doprnt.c: 548: flag = 0;
  2822  00110A  0E00               	movlw	0
  2823  00110C  6E37               	movwf	printf@flag,c
  2824                           
  2825                           ;doprnt.c: 551: switch(*f) {
  2826                           
  2827                           ;doprnt.c: 550: for(;;) {
  2828  00110E  D003               	goto	l2073
  2829  001110                     l2069:
  2830                           
  2831                           ;doprnt.c: 580: flag |= 0x04;
  2832  001110  8437               	bsf	printf@flag,2,c
  2833                           
  2834                           ;doprnt.c: 581: f++;
  2835  001112  4A25               	infsnz	printf@f,f,c
  2836  001114  2A26               	incf	printf@f+1,f,c
  2837  001116                     l2073:
  2838  001116  C025  FFF6         	movff	printf@f,tblptrl
  2839  00111A  C026  FFF7         	movff	printf@f+1,tblptrh
  2840  00111E                     	if	0	;tblptru may be non-zero
  2841  00111E                     	endif
  2842  00111E                     	if	0	;tblptru may be non-zero
  2843  00111E                     	endif
  2844  00111E  0008               	tblrd		*
  2845  001120  50F5               	movf	tablat,w,c
  2846                           
  2847                           ; Switch size 1, requested type "space"
  2848                           ; Number of cases is 1, Range of values is 48 to 48
  2849                           ; switch strategies available:
  2850                           ; Name         Instructions Cycles
  2851                           ; simple_byte            4     3 (average)
  2852                           ;	Chosen strategy is simple_byte
  2853  001122  0A30               	xorlw	48	; case 48
  2854  001124  B4D8               	btfsc	status,2,c
  2855  001126  D7F4               	goto	l2069
  2856                           
  2857                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2858                           
  2859                           ;doprnt.c: 586: }
  2860                           
  2861                           ;doprnt.c: 585: break;
  2862  001128  C025  FFF6         	movff	printf@f,tblptrl
  2863  00112C  C026  FFF7         	movff	printf@f+1,tblptrh
  2864  001130                     	if	0	;tblptru may be non-zero
  2865  001130                     	endif
  2866  001130                     	if	0	;tblptru may be non-zero
  2867  001130                     	endif
  2868  001130  0008               	tblrd		*
  2869  001132  50F5               	movf	tablat,w,c
  2870  001134  EC98  F00E         	call	_isdigit
  2871  001138  A0D8               	btfss	status,0,c
  2872  00113A  D035               	goto	l2091
  2873                           
  2874                           ;doprnt.c: 598: width = 0;
  2875  00113C  0E00               	movlw	0
  2876  00113E  6E39               	movwf	printf@width+1,c
  2877  001140  0E00               	movlw	0
  2878  001142  6E38               	movwf	printf@width,c
  2879  001144                     l2079:
  2880                           
  2881                           ;doprnt.c: 600: width *= 10;
  2882  001144  C038  F019         	movff	printf@width,___wmul@multiplier
  2883  001148  C039  F01A         	movff	printf@width+1,___wmul@multiplier+1
  2884  00114C  0E00               	movlw	0
  2885  00114E  6E1C               	movwf	___wmul@multiplicand+1,c
  2886  001150  0E0A               	movlw	10
  2887  001152  6E1B               	movwf	___wmul@multiplicand,c
  2888  001154  EC60  F00E         	call	___wmul	;wreg free
  2889  001158  C019  F038         	movff	?___wmul,printf@width
  2890  00115C  C01A  F039         	movff	?___wmul+1,printf@width+1
  2891                           
  2892                           ;doprnt.c: 601: width += *f++ - '0';
  2893  001160  0ED0               	movlw	208
  2894  001162  6E2D               	movwf	??_printf& (0+255),c
  2895  001164  0EFF               	movlw	255
  2896  001166  6E2E               	movwf	(??_printf+1)& (0+255),c
  2897  001168  C025  FFF6         	movff	printf@f,tblptrl
  2898  00116C  C026  FFF7         	movff	printf@f+1,tblptrh
  2899  001170                     	if	0	;tblptru may be non-zero
  2900  001170                     	endif
  2901  001170                     	if	0	;tblptru may be non-zero
  2902  001170                     	endif
  2903  001170  0008               	tblrd		*
  2904  001172  50F5               	movf	tablat,w,c
  2905  001174  6E2F               	movwf	(??_printf+2)& (0+255),c
  2906  001176  6A30               	clrf	(??_printf+3)& (0+255),c
  2907  001178  502D               	movf	??_printf,w,c
  2908  00117A  262F               	addwf	??_printf+2,f,c
  2909  00117C  502E               	movf	??_printf+1,w,c
  2910  00117E  2230               	addwfc	??_printf+3,f,c
  2911  001180  502F               	movf	??_printf+2,w,c
  2912  001182  2638               	addwf	printf@width,f,c
  2913  001184  5030               	movf	??_printf+3,w,c
  2914  001186  2239               	addwfc	printf@width+1,f,c
  2915  001188  4A25               	infsnz	printf@f,f,c
  2916  00118A  2A26               	incf	printf@f+1,f,c
  2917                           
  2918                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2919  00118C  C025  FFF6         	movff	printf@f,tblptrl
  2920  001190  C026  FFF7         	movff	printf@f+1,tblptrh
  2921  001194                     	if	0	;tblptru may be non-zero
  2922  001194                     	endif
  2923  001194                     	if	0	;tblptru may be non-zero
  2924  001194                     	endif
  2925  001194  0008               	tblrd		*
  2926  001196  50F5               	movf	tablat,w,c
  2927  001198  EC98  F00E         	call	_isdigit
  2928  00119C  A0D8               	btfss	status,0,c
  2929  00119E  D003               	goto	l2091
  2930  0011A0  D7D1               	goto	l2079
  2931  0011A2                     l2087:
  2932                           
  2933                           ;doprnt.c: 721: flag |= 0x80;
  2934  0011A2  8E37               	bsf	printf@flag,7,c
  2935                           
  2936                           ;doprnt.c: 723: break;
  2937  0011A4  D017               	goto	l469
  2938  0011A6                     l2091:
  2939  0011A6  C025  FFF6         	movff	printf@f,tblptrl
  2940  0011AA  C026  FFF7         	movff	printf@f+1,tblptrh
  2941  0011AE  4A25               	infsnz	printf@f,f,c
  2942  0011B0  2A26               	incf	printf@f+1,f,c
  2943  0011B2                     	if	0	;tblptru may be non-zero
  2944  0011B2                     	endif
  2945  0011B2                     	if	0	;tblptru may be non-zero
  2946  0011B2                     	endif
  2947  0011B2  0008               	tblrd		*
  2948  0011B4  CFF5 F03A          	movff	tablat,printf@c
  2949  0011B8  503A               	movf	printf@c,w,c
  2950                           
  2951                           ; Switch size 1, requested type "space"
  2952                           ; Number of cases is 4, Range of values is 0 to 120
  2953                           ; switch strategies available:
  2954                           ; Name         Instructions Cycles
  2955                           ; simple_byte           13     7 (average)
  2956                           ;	Chosen strategy is simple_byte
  2957  0011BA  0A00               	xorlw	0	; case 0
  2958  0011BC  B4D8               	btfsc	status,2,c
  2959  0011BE  0012               	return	
  2960  0011C0  0A64               	xorlw	100	; case 100
  2961  0011C2  B4D8               	btfsc	status,2,c
  2962  0011C4  D007               	goto	l469
  2963  0011C6  0A0D               	xorlw	13	; case 105
  2964  0011C8  B4D8               	btfsc	status,2,c
  2965  0011CA  D004               	goto	l469
  2966  0011CC  0A11               	xorlw	17	; case 120
  2967  0011CE  B4D8               	btfsc	status,2,c
  2968  0011D0  D7E8               	goto	l2087
  2969  0011D2  D103               	goto	l2189
  2970  0011D4                     l469:
  2971                           
  2972                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2973  0011D4  BE37               	btfsc	printf@flag,7,c
  2974  0011D6  D015               	goto	l2103
  2975                           
  2976                           ;doprnt.c: 1253: {
  2977                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2978  0011D8  C032  FFD9         	movff	printf@ap,fsr2l
  2979  0011DC  C033  FFDA         	movff	printf@ap+1,fsr2h
  2980  0011E0  CFDE F035          	movff	postinc2,printf@val
  2981  0011E4  CFDD F036          	movff	postdec2,printf@val+1
  2982  0011E8  0E02               	movlw	2
  2983  0011EA  2632               	addwf	printf@ap,f,c
  2984  0011EC  0E00               	movlw	0
  2985  0011EE  2233               	addwfc	printf@ap+1,f,c
  2986                           
  2987                           ;doprnt.c: 1261: if((int)val < 0) {
  2988  0011F0  AE36               	btfss	printf@val+1,7,c
  2989  0011F2  D044               	goto	l2137
  2990                           
  2991                           ;doprnt.c: 1262: flag |= 0x03;
  2992  0011F4  0E03               	movlw	3
  2993  0011F6  1237               	iorwf	printf@flag,f,c
  2994                           
  2995                           ;doprnt.c: 1263: val = -val;
  2996  0011F8  6C35               	negf	printf@val,c
  2997  0011FA  1E36               	comf	printf@val+1,f,c
  2998  0011FC  B0D8               	btfsc	status,0,c
  2999  0011FE  2A36               	incf	printf@val+1,f,c
  3000                           
  3001                           ;doprnt.c: 1264: }
  3002                           ;doprnt.c: 1266: }
  3003  001200  D03D               	goto	l2137
  3004  001202                     l2103:
  3005                           
  3006                           ;doprnt.c: 1268: else
  3007                           ;doprnt.c: 1273: {
  3008                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3009  001202  C032  FFD9         	movff	printf@ap,fsr2l
  3010  001206  C033  FFDA         	movff	printf@ap+1,fsr2h
  3011  00120A  CFDE F035          	movff	postinc2,printf@val
  3012  00120E  CFDD F036          	movff	postdec2,printf@val+1
  3013  001212  0E02               	movlw	2
  3014  001214  2632               	addwf	printf@ap,f,c
  3015  001216  0E00               	movlw	0
  3016  001218  2233               	addwfc	printf@ap+1,f,c
  3017                           
  3018                           ;doprnt.c: 1287: }
  3019                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  3020  00121A  D030               	goto	l2137
  3021  00121C                     l2107:
  3022                           
  3023                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3024  00121C  0E01               	movlw	1
  3025  00121E  6E3A               	movwf	printf@c,c
  3026  001220                     l2109:
  3027  001220  0E05               	movlw	5
  3028  001222  183A               	xorwf	printf@c,w,c
  3029  001224  B4D8               	btfsc	status,2,c
  3030  001226  D032               	goto	l2139
  3031                           
  3032                           ;doprnt.c: 1306: if(val < dpowers[c])
  3033  001228  503A               	movf	printf@c,w,c
  3034  00122A  0D02               	mullw	2
  3035  00122C  0E12               	movlw	low _dpowers
  3036  00122E  24F3               	addwf	prodl,w,c
  3037  001230  6EF6               	movwf	tblptrl,c
  3038  001232  0E10               	movlw	high _dpowers
  3039  001234  20F4               	addwfc	prodh,w,c
  3040  001236  6EF7               	movwf	tblptrh,c
  3041  001238                     	if	0	;There are less than 3 active tblptr bytes
  3042  001238                     	endif
  3043  001238  0009               	tblrd		*+
  3044  00123A  50F5               	movf	tablat,w,c
  3045  00123C  5C35               	subwf	printf@val,w,c
  3046  00123E  0009               	tblrd		*+
  3047  001240  50F5               	movf	tablat,w,c
  3048  001242  5836               	subwfb	printf@val+1,w,c
  3049  001244  A0D8               	btfss	status,0,c
  3050  001246  D022               	goto	l2139
  3051                           
  3052                           ;doprnt.c: 1307: break;
  3053  001248  2A3A               	incf	printf@c,f,c
  3054  00124A  D7EA               	goto	l2109
  3055  00124C                     l2121:
  3056                           
  3057                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3058  00124C  0E01               	movlw	1
  3059  00124E  6E3A               	movwf	printf@c,c
  3060  001250                     l2123:
  3061  001250  0E04               	movlw	4
  3062  001252  183A               	xorwf	printf@c,w,c
  3063  001254  B4D8               	btfsc	status,2,c
  3064  001256  D01A               	goto	l2139
  3065                           
  3066                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3067  001258  503A               	movf	printf@c,w,c
  3068  00125A  0D02               	mullw	2
  3069  00125C  0E1C               	movlw	low _hexpowers
  3070  00125E  24F3               	addwf	prodl,w,c
  3071  001260  6EF6               	movwf	tblptrl,c
  3072  001262  0E10               	movlw	high _hexpowers
  3073  001264  20F4               	addwfc	prodh,w,c
  3074  001266  6EF7               	movwf	tblptrh,c
  3075  001268                     	if	0	;There are less than 3 active tblptr bytes
  3076  001268                     	endif
  3077  001268  0009               	tblrd		*+
  3078  00126A  50F5               	movf	tablat,w,c
  3079  00126C  5C35               	subwf	printf@val,w,c
  3080  00126E  0009               	tblrd		*+
  3081  001270  50F5               	movf	tablat,w,c
  3082  001272  5836               	subwfb	printf@val+1,w,c
  3083  001274  A0D8               	btfss	status,0,c
  3084  001276  D00A               	goto	l2139
  3085                           
  3086                           ;doprnt.c: 1318: break;
  3087  001278  2A3A               	incf	printf@c,f,c
  3088  00127A  D7EA               	goto	l2123
  3089  00127C                     l2137:
  3090  00127C  5037               	movf	printf@flag,w,c
  3091  00127E  0B80               	andlw	128
  3092                           
  3093                           ; Switch size 1, requested type "space"
  3094                           ; Number of cases is 2, Range of values is 0 to 128
  3095                           ; switch strategies available:
  3096                           ; Name         Instructions Cycles
  3097                           ; simple_byte            7     4 (average)
  3098                           ;	Chosen strategy is simple_byte
  3099  001280  0A00               	xorlw	0	; case 0
  3100  001282  B4D8               	btfsc	status,2,c
  3101  001284  D7CB               	goto	l2107
  3102  001286  0A80               	xorlw	128	; case 128
  3103  001288  B4D8               	btfsc	status,2,c
  3104  00128A  D7E0               	goto	l2121
  3105  00128C                     l2139:
  3106                           
  3107                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3108  00128C  5038               	movf	printf@width,w,c
  3109  00128E  1039               	iorwf	printf@width+1,w,c
  3110  001290  B4D8               	btfsc	status,2,c
  3111  001292  D009               	goto	l2145
  3112  001294  C037  F02D         	movff	printf@flag,??_printf
  3113  001298  0E03               	movlw	3
  3114  00129A  162D               	andwf	??_printf,f,c
  3115  00129C  B4D8               	btfsc	status,2,c
  3116  00129E  D003               	goto	l2145
  3117                           
  3118                           ;doprnt.c: 1346: width--;
  3119  0012A0  0638               	decf	printf@width,f,c
  3120  0012A2  A0D8               	btfss	status,0,c
  3121  0012A4  0639               	decf	printf@width+1,f,c
  3122  0012A6                     l2145:
  3123                           
  3124                           ;doprnt.c: 1381: if(width > c)
  3125  0012A6  0E80               	movlw	128
  3126  0012A8  BE3A               	btfsc	printf@c,7,c
  3127  0012AA  0E7F               	movlw	127
  3128  0012AC  6E2D               	movwf	??_printf& (0+255),c
  3129  0012AE  5038               	movf	printf@width,w,c
  3130  0012B0  5C3A               	subwf	printf@c,w,c
  3131  0012B2  5039               	movf	printf@width+1,w,c
  3132  0012B4  0A80               	xorlw	128
  3133  0012B6  582D               	subwfb	??_printf& (0+255),w,c
  3134  0012B8  B0D8               	btfsc	status,0,c
  3135  0012BA  D007               	goto	l2149
  3136                           
  3137                           ;doprnt.c: 1382: width -= c;
  3138  0012BC  503A               	movf	printf@c,w,c
  3139  0012BE  5E38               	subwf	printf@width,f,c
  3140  0012C0  0E00               	movlw	0
  3141  0012C2  BE3A               	btfsc	printf@c,7,c
  3142  0012C4  0EFF               	movlw	255
  3143  0012C6  5A39               	subwfb	printf@width+1,f,c
  3144  0012C8  D004               	goto	l2151
  3145  0012CA                     l2149:
  3146                           
  3147                           ;doprnt.c: 1383: else
  3148                           ;doprnt.c: 1384: width = 0;
  3149  0012CA  0E00               	movlw	0
  3150  0012CC  6E39               	movwf	printf@width+1,c
  3151  0012CE  0E00               	movlw	0
  3152  0012D0  6E38               	movwf	printf@width,c
  3153  0012D2                     l2151:
  3154                           
  3155                           ;doprnt.c: 1387: if(flag & 0x04) {
  3156  0012D2  A437               	btfss	printf@flag,2,c
  3157  0012D4  D014               	goto	l2163
  3158                           
  3159                           ;doprnt.c: 1392: if(flag & 0x03)
  3160  0012D6  C037  F02D         	movff	printf@flag,??_printf
  3161  0012DA  0E03               	movlw	3
  3162  0012DC  162D               	andwf	??_printf,f,c
  3163  0012DE  B4D8               	btfsc	status,2,c
  3164  0012E0  D003               	goto	l2157
  3165                           
  3166                           ;doprnt.c: 1393: (putch('-') );
  3167  0012E2  0E2D               	movlw	45
  3168  0012E4  ECC6  F00E         	call	_putch
  3169  0012E8                     l2157:
  3170                           
  3171                           ;doprnt.c: 1415: if(width)
  3172  0012E8  5038               	movf	printf@width,w,c
  3173  0012EA  1039               	iorwf	printf@width+1,w,c
  3174  0012EC  B4D8               	btfsc	status,2,c
  3175  0012EE  D01E               	goto	l2173
  3176                           
  3177                           ;doprnt.c: 1417: (putch('0') );
  3178                           
  3179                           ;doprnt.c: 1416: do
  3180  0012F0  0E30               	movlw	48
  3181  0012F2  ECC6  F00E         	call	_putch
  3182                           
  3183                           ;doprnt.c: 1418: while(--width);
  3184  0012F6  0638               	decf	printf@width,f,c
  3185  0012F8  A0D8               	btfss	status,0,c
  3186  0012FA  0639               	decf	printf@width+1,f,c
  3187  0012FC  D7F5               	goto	l2157
  3188  0012FE                     l2163:
  3189                           
  3190                           ;doprnt.c: 1422: {
  3191                           ;doprnt.c: 1424: if(width
  3192                           ;doprnt.c: 1428: )
  3193  0012FE  5038               	movf	printf@width,w,c
  3194  001300  1039               	iorwf	printf@width+1,w,c
  3195  001302  B4D8               	btfsc	status,2,c
  3196  001304  D00A               	goto	l2169
  3197  001306                     l2165:
  3198                           
  3199                           ;doprnt.c: 1430: (putch(' ') );
  3200  001306  0E20               	movlw	32
  3201  001308  ECC6  F00E         	call	_putch
  3202                           
  3203                           ;doprnt.c: 1431: while(--width);
  3204  00130C  0638               	decf	printf@width,f,c
  3205  00130E  A0D8               	btfss	status,0,c
  3206  001310  0639               	decf	printf@width+1,f,c
  3207  001312  5038               	movf	printf@width,w,c
  3208  001314  1039               	iorwf	printf@width+1,w,c
  3209  001316  A4D8               	btfss	status,2,c
  3210  001318  D7F6               	goto	l2165
  3211  00131A                     l2169:
  3212                           
  3213                           ;doprnt.c: 1438: if(flag & 0x03)
  3214  00131A  C037  F02D         	movff	printf@flag,??_printf
  3215  00131E  0E03               	movlw	3
  3216  001320  162D               	andwf	??_printf,f,c
  3217  001322  B4D8               	btfsc	status,2,c
  3218  001324  D003               	goto	l2173
  3219                           
  3220                           ;doprnt.c: 1439: (putch('-') );
  3221  001326  0E2D               	movlw	45
  3222  001328  ECC6  F00E         	call	_putch
  3223  00132C                     l2173:
  3224                           
  3225                           ;doprnt.c: 1469: }
  3226                           ;doprnt.c: 1472: prec = c;
  3227  00132C  C03A  F034         	movff	printf@c,printf@prec
  3228                           
  3229                           ;doprnt.c: 1474: while(prec--) {
  3230  001330  D050               	goto	l2187
  3231  001332                     l2175:
  3232                           
  3233                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3234  001332  5034               	movf	printf@prec,w,c
  3235  001334  0D02               	mullw	2
  3236  001336  0E12               	movlw	low _dpowers
  3237  001338  24F3               	addwf	prodl,w,c
  3238  00133A  6EF6               	movwf	tblptrl,c
  3239  00133C  0E10               	movlw	high _dpowers
  3240  00133E  20F4               	addwfc	prodh,w,c
  3241  001340  6EF7               	movwf	tblptrh,c
  3242  001342                     	if	0	;There are less than 3 active tblptr bytes
  3243  001342                     	endif
  3244  001342  0009               	tblrd		*+
  3245  001344  CFF5 F01B          	movff	tablat,___lwdiv@divisor
  3246  001348  000A               	tblrd		*-
  3247  00134A  CFF5 F01C          	movff	tablat,___lwdiv@divisor+1
  3248  00134E  C035  F019         	movff	printf@val,___lwdiv@dividend
  3249  001352  C036  F01A         	movff	printf@val+1,___lwdiv@dividend+1
  3250  001356  EC6E  F00D         	call	___lwdiv	;wreg free
  3251  00135A  C019  F020         	movff	?___lwdiv,___lwmod@dividend
  3252  00135E  C01A  F021         	movff	?___lwdiv+1,___lwmod@dividend+1
  3253  001362  0E00               	movlw	0
  3254  001364  6E23               	movwf	___lwmod@divisor+1,c
  3255  001366  0E0A               	movlw	10
  3256  001368  6E22               	movwf	___lwmod@divisor,c
  3257  00136A  EC2C  F00E         	call	___lwmod	;wreg free
  3258  00136E  5020               	movf	?___lwmod,w,c
  3259  001370  0F30               	addlw	48
  3260  001372  6E3A               	movwf	printf@c,c
  3261                           
  3262                           ;doprnt.c: 1491: break;
  3263  001374  D02B               	goto	l2185
  3264  001376                     l2177:
  3265                           
  3266                           ;doprnt.c: 1499: {
  3267                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3268  001376  C035  F019         	movff	printf@val,___lwdiv@dividend
  3269  00137A  C036  F01A         	movff	printf@val+1,___lwdiv@dividend+1
  3270  00137E  5034               	movf	printf@prec,w,c
  3271  001380  0D02               	mullw	2
  3272  001382  0E1C               	movlw	low _hexpowers
  3273  001384  24F3               	addwf	prodl,w,c
  3274  001386  6EF6               	movwf	tblptrl,c
  3275  001388  0E10               	movlw	high _hexpowers
  3276  00138A  20F4               	addwfc	prodh,w,c
  3277  00138C  6EF7               	movwf	tblptrh,c
  3278  00138E                     	if	0	;There are less than 3 active tblptr bytes
  3279  00138E                     	endif
  3280  00138E  0009               	tblrd		*+
  3281  001390  CFF5 F01B          	movff	tablat,___lwdiv@divisor
  3282  001394  000A               	tblrd		*-
  3283  001396  CFF5 F01C          	movff	tablat,___lwdiv@divisor+1
  3284  00139A  EC6E  F00D         	call	___lwdiv	;wreg free
  3285  00139E  5019               	movf	?___lwdiv,w,c
  3286  0013A0  0B0F               	andlw	15
  3287  0013A2  6E31               	movwf	printf@idx,c
  3288                           
  3289                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3290  0013A4  5031               	movf	printf@idx,w,c
  3291  0013A6  0D01               	mullw	1
  3292  0013A8  0E54               	movlw	low STR_15
  3293  0013AA  24F3               	addwf	prodl,w,c
  3294  0013AC  6EF6               	movwf	tblptrl,c
  3295  0013AE  0E10               	movlw	high STR_15
  3296  0013B0  20F4               	addwfc	prodh,w,c
  3297  0013B2  6EF7               	movwf	tblptrh,c
  3298  0013B4                     	if	0	;There are less than 3 active tblptr bytes
  3299  0013B4                     	endif
  3300  0013B4  0008               	tblrd		*
  3301  0013B6  CFF5 F03A          	movff	tablat,printf@c
  3302                           
  3303                           ;doprnt.c: 1523: }
  3304                           
  3305                           ;doprnt.c: 1508: }
  3306                           ;doprnt.c: 1510: break;
  3307  0013BA  D008               	goto	l2185
  3308  0013BC                     l2183:
  3309  0013BC  5037               	movf	printf@flag,w,c
  3310  0013BE  0B80               	andlw	128
  3311                           
  3312                           ; Switch size 1, requested type "space"
  3313                           ; Number of cases is 2, Range of values is 0 to 128
  3314                           ; switch strategies available:
  3315                           ; Name         Instructions Cycles
  3316                           ; simple_byte            7     4 (average)
  3317                           ;	Chosen strategy is simple_byte
  3318  0013C0  0A00               	xorlw	0	; case 0
  3319  0013C2  B4D8               	btfsc	status,2,c
  3320  0013C4  D7B6               	goto	l2175
  3321  0013C6  0A80               	xorlw	128	; case 128
  3322  0013C8  B4D8               	btfsc	status,2,c
  3323  0013CA  D7D5               	goto	l2177
  3324  0013CC                     l2185:
  3325                           
  3326                           ;doprnt.c: 1524: (putch(c) );
  3327  0013CC  503A               	movf	printf@c,w,c
  3328  0013CE  ECC6  F00E         	call	_putch
  3329  0013D2                     l2187:
  3330  0013D2  0634               	decf	printf@prec,f,c
  3331  0013D4  2834               	incf	printf@prec,w,c
  3332  0013D6  A4D8               	btfss	status,2,c
  3333  0013D8  D7F1               	goto	l2183
  3334  0013DA                     l2189:
  3335  0013DA  C025  FFF6         	movff	printf@f,tblptrl
  3336  0013DE  C026  FFF7         	movff	printf@f+1,tblptrh
  3337  0013E2  4A25               	infsnz	printf@f,f,c
  3338  0013E4  2A26               	incf	printf@f+1,f,c
  3339  0013E6                     	if	0	;tblptru may be non-zero
  3340  0013E6                     	endif
  3341  0013E6                     	if	0	;tblptru may be non-zero
  3342  0013E6                     	endif
  3343  0013E6  0008               	tblrd		*
  3344  0013E8  CFF5 F03A          	movff	tablat,printf@c
  3345  0013EC  503A               	movf	printf@c,w,c
  3346  0013EE  B4D8               	btfsc	status,2,c
  3347  0013F0  0012               	return	
  3348  0013F2  D67F               	goto	l2063
  3349  0013F4                     __end_of_printf:
  3350                           	opt stack 0
  3351                           tblptru	equ	0xFF8
  3352                           tblptrh	equ	0xFF7
  3353                           tblptrl	equ	0xFF6
  3354                           tablat	equ	0xFF5
  3355                           prodh	equ	0xFF4
  3356                           prodl	equ	0xFF3
  3357                           intcon	equ	0xFF2
  3358                           intcon3	equ	0xFF0
  3359                           postinc0	equ	0xFEE
  3360                           wreg	equ	0xFE8
  3361                           indf1	equ	0xFE7
  3362                           fsr1h	equ	0xFE2
  3363                           fsr1l	equ	0xFE1
  3364                           indf2	equ	0xFDF
  3365                           postinc2	equ	0xFDE
  3366                           postdec2	equ	0xFDD
  3367                           fsr2h	equ	0xFDA
  3368                           fsr2l	equ	0xFD9
  3369                           status	equ	0xFD8
  3370                           
  3371 ;; *************** function _putch *****************
  3372 ;; Defined at:
  3373 ;;		line 30 in file "lcd.c"
  3374 ;; Parameters:    Size  Location     Type
  3375 ;;  data            1    wreg     unsigned char 
  3376 ;; Auto vars:     Size  Location     Type
  3377 ;;  data            1   26[COMRAM] unsigned char 
  3378 ;; Return value:  Size  Location     Type
  3379 ;;                  1    wreg      void 
  3380 ;; Registers used:
  3381 ;;		wreg, status,2, status,0, cstack
  3382 ;; Tracked objects:
  3383 ;;		On entry : 0/0
  3384 ;;		On exit  : 0/0
  3385 ;;		Unchanged: 0/0
  3386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3388 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3390 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3391 ;;Total ram usage:        1 bytes
  3392 ;; Hardware stack levels used:    1
  3393 ;; Hardware stack levels required when called:    5
  3394 ;; This function calls:
  3395 ;;		_lcdNibble
  3396 ;; This function is called by:
  3397 ;;		_printf
  3398 ;; This function uses a non-reentrant model
  3399 ;;
  3400                           
  3401                           	psect	text19
  3402  001D8C                     __ptext19:
  3403                           	opt stack 0
  3404  001D8C                     _putch:
  3405                           	opt stack 23
  3406                           
  3407                           ;incstack = 0
  3408                           ;putch@data stored from wreg
  3409  001D8C  6E1B               	movwf	putch@data,c
  3410                           
  3411                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  3412  001D8E  848C               	bsf	3980,2,c	;volatile
  3413                           
  3414                           ;lcd.c: 32: lcdNibble(data);
  3415  001D90  501B               	movf	putch@data,w,c
  3416  001D92  EC18  F00D         	call	_lcdNibble
  3417  001D96  0012               	return		;funcret
  3418  001D98                     __end_of_putch:
  3419                           	opt stack 0
  3420                           tblptru	equ	0xFF8
  3421                           tblptrh	equ	0xFF7
  3422                           tblptrl	equ	0xFF6
  3423                           tablat	equ	0xFF5
  3424                           prodh	equ	0xFF4
  3425                           prodl	equ	0xFF3
  3426                           intcon	equ	0xFF2
  3427                           intcon3	equ	0xFF0
  3428                           postinc0	equ	0xFEE
  3429                           wreg	equ	0xFE8
  3430                           indf1	equ	0xFE7
  3431                           fsr1h	equ	0xFE2
  3432                           fsr1l	equ	0xFE1
  3433                           indf2	equ	0xFDF
  3434                           postinc2	equ	0xFDE
  3435                           postdec2	equ	0xFDD
  3436                           fsr2h	equ	0xFDA
  3437                           fsr2l	equ	0xFD9
  3438                           status	equ	0xFD8
  3439                           
  3440 ;; *************** function _isdigit *****************
  3441 ;; Defined at:
  3442 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/isdigit.c"
  3443 ;; Parameters:    Size  Location     Type
  3444 ;;  c               1    wreg     unsigned char 
  3445 ;; Auto vars:     Size  Location     Type
  3446 ;;  c               1   26[COMRAM] unsigned char 
  3447 ;; Return value:  Size  Location     Type
  3448 ;;		None               void
  3449 ;; Registers used:
  3450 ;;		wreg, status,2, status,0
  3451 ;; Tracked objects:
  3452 ;;		On entry : 0/0
  3453 ;;		On exit  : 0/0
  3454 ;;		Unchanged: 0/0
  3455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3457 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3458 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3459 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3460 ;;Total ram usage:        3 bytes
  3461 ;; Hardware stack levels used:    1
  3462 ;; Hardware stack levels required when called:    4
  3463 ;; This function calls:
  3464 ;;		Nothing
  3465 ;; This function is called by:
  3466 ;;		_printf
  3467 ;; This function uses a non-reentrant model
  3468 ;;
  3469                           
  3470                           	psect	text20
  3471  001D30                     __ptext20:
  3472                           	opt stack 0
  3473  001D30                     _isdigit:
  3474                           	opt stack 24
  3475                           
  3476                           ;incstack = 0
  3477                           ;isdigit@c stored from wreg
  3478  001D30  6E1B               	movwf	isdigit@c,c
  3479  001D32  0E00               	movlw	0
  3480  001D34  6E1A               	movwf	_isdigit$1070,c
  3481  001D36  0E3A               	movlw	58
  3482  001D38  601B               	cpfslt	isdigit@c,c
  3483  001D3A  D005               	goto	l1979
  3484  001D3C  0E2F               	movlw	47
  3485  001D3E  641B               	cpfsgt	isdigit@c,c
  3486  001D40  D002               	goto	l1979
  3487  001D42  0E01               	movlw	1
  3488  001D44  6E1A               	movwf	_isdigit$1070,c
  3489  001D46                     l1979:
  3490  001D46  C01A  F019         	movff	_isdigit$1070,??_isdigit
  3491  001D4A  3019               	rrcf	??_isdigit,w,c
  3492  001D4C  0012               	return	
  3493  001D4E                     __end_of_isdigit:
  3494                           	opt stack 0
  3495                           tblptru	equ	0xFF8
  3496                           tblptrh	equ	0xFF7
  3497                           tblptrl	equ	0xFF6
  3498                           tablat	equ	0xFF5
  3499                           prodh	equ	0xFF4
  3500                           prodl	equ	0xFF3
  3501                           intcon	equ	0xFF2
  3502                           intcon3	equ	0xFF0
  3503                           postinc0	equ	0xFEE
  3504                           wreg	equ	0xFE8
  3505                           indf1	equ	0xFE7
  3506                           fsr1h	equ	0xFE2
  3507                           fsr1l	equ	0xFE1
  3508                           indf2	equ	0xFDF
  3509                           postinc2	equ	0xFDE
  3510                           postdec2	equ	0xFDD
  3511                           fsr2h	equ	0xFDA
  3512                           fsr2l	equ	0xFD9
  3513                           status	equ	0xFD8
  3514                           
  3515 ;; *************** function ___wmul *****************
  3516 ;; Defined at:
  3517 ;;		line 15 in file "/Applications/microchip/xc8/v1.41/sources/common/Umul16.c"
  3518 ;; Parameters:    Size  Location     Type
  3519 ;;  multiplier      2   24[COMRAM] unsigned int 
  3520 ;;  multiplicand    2   26[COMRAM] unsigned int 
  3521 ;; Auto vars:     Size  Location     Type
  3522 ;;  product         2   28[COMRAM] unsigned int 
  3523 ;; Return value:  Size  Location     Type
  3524 ;;                  2   24[COMRAM] unsigned int 
  3525 ;; Registers used:
  3526 ;;		wreg, status,2, status,0, prodl, prodh
  3527 ;; Tracked objects:
  3528 ;;		On entry : 0/0
  3529 ;;		On exit  : 0/0
  3530 ;;		Unchanged: 0/0
  3531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3532 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3533 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3535 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3536 ;;Total ram usage:        6 bytes
  3537 ;; Hardware stack levels used:    1
  3538 ;; Hardware stack levels required when called:    4
  3539 ;; This function calls:
  3540 ;;		Nothing
  3541 ;; This function is called by:
  3542 ;;		_printf
  3543 ;;		_getSortTime
  3544 ;; This function uses a non-reentrant model
  3545 ;;
  3546                           
  3547                           	psect	text21
  3548  001CC0                     __ptext21:
  3549                           	opt stack 0
  3550  001CC0                     ___wmul:
  3551                           	opt stack 24
  3552                           
  3553                           ;incstack = 0
  3554  001CC0  5019               	movf	___wmul@multiplier,w,c
  3555  001CC2  021B               	mulwf	___wmul@multiplicand,c
  3556  001CC4  CFF3 F01D          	movff	prodl,___wmul@product
  3557  001CC8  CFF4 F01E          	movff	prodh,___wmul@product+1
  3558  001CCC  5019               	movf	___wmul@multiplier,w,c
  3559  001CCE  021C               	mulwf	___wmul@multiplicand+1,c
  3560  001CD0  50F3               	movf	prodl,w,c
  3561  001CD2  261E               	addwf	___wmul@product+1,f,c
  3562  001CD4  501A               	movf	___wmul@multiplier+1,w,c
  3563  001CD6  021B               	mulwf	___wmul@multiplicand,c
  3564  001CD8  50F3               	movf	prodl,w,c
  3565  001CDA  261E               	addwf	___wmul@product+1,f,c
  3566  001CDC  C01D  F019         	movff	___wmul@product,?___wmul
  3567  001CE0  C01E  F01A         	movff	___wmul@product+1,?___wmul+1
  3568  001CE4  0012               	return	
  3569  001CE6                     __end_of___wmul:
  3570                           	opt stack 0
  3571                           tblptru	equ	0xFF8
  3572                           tblptrh	equ	0xFF7
  3573                           tblptrl	equ	0xFF6
  3574                           tablat	equ	0xFF5
  3575                           prodh	equ	0xFF4
  3576                           prodl	equ	0xFF3
  3577                           intcon	equ	0xFF2
  3578                           intcon3	equ	0xFF0
  3579                           postinc0	equ	0xFEE
  3580                           wreg	equ	0xFE8
  3581                           indf1	equ	0xFE7
  3582                           fsr1h	equ	0xFE2
  3583                           fsr1l	equ	0xFE1
  3584                           indf2	equ	0xFDF
  3585                           postinc2	equ	0xFDE
  3586                           postdec2	equ	0xFDD
  3587                           fsr2h	equ	0xFDA
  3588                           fsr2l	equ	0xFD9
  3589                           status	equ	0xFD8
  3590                           
  3591 ;; *************** function ___lwmod *****************
  3592 ;; Defined at:
  3593 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwmod.c"
  3594 ;; Parameters:    Size  Location     Type
  3595 ;;  dividend        2   31[COMRAM] unsigned int 
  3596 ;;  divisor         2   33[COMRAM] unsigned int 
  3597 ;; Auto vars:     Size  Location     Type
  3598 ;;  counter         1   35[COMRAM] unsigned char 
  3599 ;; Return value:  Size  Location     Type
  3600 ;;                  2   31[COMRAM] unsigned int 
  3601 ;; Registers used:
  3602 ;;		wreg, status,2, status,0
  3603 ;; Tracked objects:
  3604 ;;		On entry : 0/0
  3605 ;;		On exit  : 0/0
  3606 ;;		Unchanged: 0/0
  3607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3608 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3609 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3611 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3612 ;;Total ram usage:        5 bytes
  3613 ;; Hardware stack levels used:    1
  3614 ;; Hardware stack levels required when called:    4
  3615 ;; This function calls:
  3616 ;;		Nothing
  3617 ;; This function is called by:
  3618 ;;		_printf
  3619 ;;		_getSortTime
  3620 ;; This function uses a non-reentrant model
  3621 ;;
  3622                           
  3623                           	psect	text22
  3624  001C58                     __ptext22:
  3625                           	opt stack 0
  3626  001C58                     ___lwmod:
  3627                           	opt stack 24
  3628                           
  3629                           ;incstack = 0
  3630  001C58  5022               	movf	___lwmod@divisor,w,c
  3631  001C5A  1023               	iorwf	___lwmod@divisor+1,w,c
  3632  001C5C  B4D8               	btfsc	status,2,c
  3633  001C5E  D018               	goto	l924
  3634  001C60  0E01               	movlw	1
  3635  001C62  6E24               	movwf	___lwmod@counter,c
  3636  001C64  D004               	goto	l2039
  3637  001C66                     l2037:
  3638  001C66  90D8               	bcf	status,0,c
  3639  001C68  3622               	rlcf	___lwmod@divisor,f,c
  3640  001C6A  3623               	rlcf	___lwmod@divisor+1,f,c
  3641  001C6C  2A24               	incf	___lwmod@counter,f,c
  3642  001C6E                     l2039:
  3643  001C6E  AE23               	btfss	___lwmod@divisor+1,7,c
  3644  001C70  D7FA               	goto	l2037
  3645  001C72                     l2041:
  3646  001C72  5022               	movf	___lwmod@divisor,w,c
  3647  001C74  5C20               	subwf	___lwmod@dividend,w,c
  3648  001C76  5023               	movf	___lwmod@divisor+1,w,c
  3649  001C78  5821               	subwfb	___lwmod@dividend+1,w,c
  3650  001C7A  A0D8               	btfss	status,0,c
  3651  001C7C  D004               	goto	l2045
  3652  001C7E  5022               	movf	___lwmod@divisor,w,c
  3653  001C80  5E20               	subwf	___lwmod@dividend,f,c
  3654  001C82  5023               	movf	___lwmod@divisor+1,w,c
  3655  001C84  5A21               	subwfb	___lwmod@dividend+1,f,c
  3656  001C86                     l2045:
  3657  001C86  90D8               	bcf	status,0,c
  3658  001C88  3223               	rrcf	___lwmod@divisor+1,f,c
  3659  001C8A  3222               	rrcf	___lwmod@divisor,f,c
  3660  001C8C  2E24               	decfsz	___lwmod@counter,f,c
  3661  001C8E  D7F1               	goto	l2041
  3662  001C90                     l924:
  3663  001C90  C020  F020         	movff	___lwmod@dividend,?___lwmod
  3664  001C94  C021  F021         	movff	___lwmod@dividend+1,?___lwmod+1
  3665  001C98  0012               	return		;funcret
  3666  001C9A                     __end_of___lwmod:
  3667                           	opt stack 0
  3668                           tblptru	equ	0xFF8
  3669                           tblptrh	equ	0xFF7
  3670                           tblptrl	equ	0xFF6
  3671                           tablat	equ	0xFF5
  3672                           prodh	equ	0xFF4
  3673                           prodl	equ	0xFF3
  3674                           intcon	equ	0xFF2
  3675                           intcon3	equ	0xFF0
  3676                           postinc0	equ	0xFEE
  3677                           wreg	equ	0xFE8
  3678                           indf1	equ	0xFE7
  3679                           fsr1h	equ	0xFE2
  3680                           fsr1l	equ	0xFE1
  3681                           indf2	equ	0xFDF
  3682                           postinc2	equ	0xFDE
  3683                           postdec2	equ	0xFDD
  3684                           fsr2h	equ	0xFDA
  3685                           fsr2l	equ	0xFD9
  3686                           status	equ	0xFD8
  3687                           
  3688 ;; *************** function ___lwdiv *****************
  3689 ;; Defined at:
  3690 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwdiv.c"
  3691 ;; Parameters:    Size  Location     Type
  3692 ;;  dividend        2   24[COMRAM] unsigned int 
  3693 ;;  divisor         2   26[COMRAM] unsigned int 
  3694 ;; Auto vars:     Size  Location     Type
  3695 ;;  quotient        2   28[COMRAM] unsigned int 
  3696 ;;  counter         1   30[COMRAM] unsigned char 
  3697 ;; Return value:  Size  Location     Type
  3698 ;;                  2   24[COMRAM] unsigned int 
  3699 ;; Registers used:
  3700 ;;		wreg, status,2, status,0
  3701 ;; Tracked objects:
  3702 ;;		On entry : 0/0
  3703 ;;		On exit  : 0/0
  3704 ;;		Unchanged: 0/0
  3705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3706 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3707 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3709 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3710 ;;Total ram usage:        7 bytes
  3711 ;; Hardware stack levels used:    1
  3712 ;; Hardware stack levels required when called:    4
  3713 ;; This function calls:
  3714 ;;		Nothing
  3715 ;; This function is called by:
  3716 ;;		_printf
  3717 ;;		_getSortTime
  3718 ;; This function uses a non-reentrant model
  3719 ;;
  3720                           
  3721                           	psect	text23
  3722  001ADC                     __ptext23:
  3723                           	opt stack 0
  3724  001ADC                     ___lwdiv:
  3725                           	opt stack 24
  3726                           
  3727                           ;incstack = 0
  3728  001ADC  0E00               	movlw	0
  3729  001ADE  6E1E               	movwf	___lwdiv@quotient+1,c
  3730  001AE0  0E00               	movlw	0
  3731  001AE2  6E1D               	movwf	___lwdiv@quotient,c
  3732  001AE4  501B               	movf	___lwdiv@divisor,w,c
  3733  001AE6  101C               	iorwf	___lwdiv@divisor+1,w,c
  3734  001AE8  B4D8               	btfsc	status,2,c
  3735  001AEA  D01C               	goto	l914
  3736  001AEC  0E01               	movlw	1
  3737  001AEE  6E1F               	movwf	___lwdiv@counter,c
  3738  001AF0  D004               	goto	l2019
  3739  001AF2                     l2017:
  3740  001AF2  90D8               	bcf	status,0,c
  3741  001AF4  361B               	rlcf	___lwdiv@divisor,f,c
  3742  001AF6  361C               	rlcf	___lwdiv@divisor+1,f,c
  3743  001AF8  2A1F               	incf	___lwdiv@counter,f,c
  3744  001AFA                     l2019:
  3745  001AFA  AE1C               	btfss	___lwdiv@divisor+1,7,c
  3746  001AFC  D7FA               	goto	l2017
  3747  001AFE                     l2021:
  3748  001AFE  90D8               	bcf	status,0,c
  3749  001B00  361D               	rlcf	___lwdiv@quotient,f,c
  3750  001B02  361E               	rlcf	___lwdiv@quotient+1,f,c
  3751  001B04  501B               	movf	___lwdiv@divisor,w,c
  3752  001B06  5C19               	subwf	___lwdiv@dividend,w,c
  3753  001B08  501C               	movf	___lwdiv@divisor+1,w,c
  3754  001B0A  581A               	subwfb	___lwdiv@dividend+1,w,c
  3755  001B0C  A0D8               	btfss	status,0,c
  3756  001B0E  D005               	goto	l2029
  3757  001B10  501B               	movf	___lwdiv@divisor,w,c
  3758  001B12  5E19               	subwf	___lwdiv@dividend,f,c
  3759  001B14  501C               	movf	___lwdiv@divisor+1,w,c
  3760  001B16  5A1A               	subwfb	___lwdiv@dividend+1,f,c
  3761  001B18  801D               	bsf	___lwdiv@quotient,0,c
  3762  001B1A                     l2029:
  3763  001B1A  90D8               	bcf	status,0,c
  3764  001B1C  321C               	rrcf	___lwdiv@divisor+1,f,c
  3765  001B1E  321B               	rrcf	___lwdiv@divisor,f,c
  3766  001B20  2E1F               	decfsz	___lwdiv@counter,f,c
  3767  001B22  D7ED               	goto	l2021
  3768  001B24                     l914:
  3769  001B24  C01D  F019         	movff	___lwdiv@quotient,?___lwdiv
  3770  001B28  C01E  F01A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3771  001B2C  0012               	return		;funcret
  3772  001B2E                     __end_of___lwdiv:
  3773                           	opt stack 0
  3774                           tblptru	equ	0xFF8
  3775                           tblptrh	equ	0xFF7
  3776                           tblptrl	equ	0xFF6
  3777                           tablat	equ	0xFF5
  3778                           prodh	equ	0xFF4
  3779                           prodl	equ	0xFF3
  3780                           intcon	equ	0xFF2
  3781                           intcon3	equ	0xFF0
  3782                           postinc0	equ	0xFEE
  3783                           wreg	equ	0xFE8
  3784                           indf1	equ	0xFE7
  3785                           fsr1h	equ	0xFE2
  3786                           fsr1l	equ	0xFE1
  3787                           indf2	equ	0xFDF
  3788                           postinc2	equ	0xFDE
  3789                           postdec2	equ	0xFDD
  3790                           fsr2h	equ	0xFDA
  3791                           fsr2l	equ	0xFD9
  3792                           status	equ	0xFD8
  3793                           
  3794 ;; *************** function _lcdInst *****************
  3795 ;; Defined at:
  3796 ;;		line 25 in file "lcd.c"
  3797 ;; Parameters:    Size  Location     Type
  3798 ;;  data            1    wreg     unsigned char 
  3799 ;; Auto vars:     Size  Location     Type
  3800 ;;  data            1   26[COMRAM] unsigned char 
  3801 ;; Return value:  Size  Location     Type
  3802 ;;                  1    wreg      void 
  3803 ;; Registers used:
  3804 ;;		wreg, status,2, status,0, cstack
  3805 ;; Tracked objects:
  3806 ;;		On entry : 0/0
  3807 ;;		On exit  : 0/0
  3808 ;;		Unchanged: 0/0
  3809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3811 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3813 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3814 ;;Total ram usage:        1 bytes
  3815 ;; Hardware stack levels used:    1
  3816 ;; Hardware stack levels required when called:    5
  3817 ;; This function calls:
  3818 ;;		_lcdNibble
  3819 ;; This function is called by:
  3820 ;;		_initLCD
  3821 ;;		_welcome
  3822 ;;		_debug
  3823 ;;		_sort
  3824 ;;		_display_time
  3825 ;;		_display_sorting_time
  3826 ;;		_getSortTime
  3827 ;; This function uses a non-reentrant model
  3828 ;;
  3829                           
  3830                           	psect	text24
  3831  001D98                     __ptext24:
  3832                           	opt stack 0
  3833  001D98                     _lcdInst:
  3834                           	opt stack 24
  3835                           
  3836                           ;incstack = 0
  3837                           ;lcdInst@data stored from wreg
  3838  001D98  6E1B               	movwf	lcdInst@data,c
  3839                           
  3840                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  3841  001D9A  948C               	bcf	3980,2,c	;volatile
  3842                           
  3843                           ;lcd.c: 27: lcdNibble(data);
  3844  001D9C  501B               	movf	lcdInst@data,w,c
  3845  001D9E  EC18  F00D         	call	_lcdNibble
  3846  001DA2  0012               	return		;funcret
  3847  001DA4                     __end_of_lcdInst:
  3848                           	opt stack 0
  3849                           tblptru	equ	0xFF8
  3850                           tblptrh	equ	0xFF7
  3851                           tblptrl	equ	0xFF6
  3852                           tablat	equ	0xFF5
  3853                           prodh	equ	0xFF4
  3854                           prodl	equ	0xFF3
  3855                           intcon	equ	0xFF2
  3856                           intcon3	equ	0xFF0
  3857                           postinc0	equ	0xFEE
  3858                           wreg	equ	0xFE8
  3859                           indf1	equ	0xFE7
  3860                           fsr1h	equ	0xFE2
  3861                           fsr1l	equ	0xFE1
  3862                           indf2	equ	0xFDF
  3863                           postinc2	equ	0xFDE
  3864                           postdec2	equ	0xFDD
  3865                           fsr2h	equ	0xFDA
  3866                           fsr2l	equ	0xFD9
  3867                           status	equ	0xFD8
  3868                           
  3869 ;; *************** function _lcdNibble *****************
  3870 ;; Defined at:
  3871 ;;		line 35 in file "lcd.c"
  3872 ;; Parameters:    Size  Location     Type
  3873 ;;  data            1    wreg     unsigned char 
  3874 ;; Auto vars:     Size  Location     Type
  3875 ;;  data            1   25[COMRAM] unsigned char 
  3876 ;;  temp            1   24[COMRAM] unsigned char 
  3877 ;; Return value:  Size  Location     Type
  3878 ;;                  1    wreg      void 
  3879 ;; Registers used:
  3880 ;;		wreg, status,2, status,0
  3881 ;; Tracked objects:
  3882 ;;		On entry : 0/0
  3883 ;;		On exit  : 0/0
  3884 ;;		Unchanged: 0/0
  3885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3887 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3889 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3890 ;;Total ram usage:        2 bytes
  3891 ;; Hardware stack levels used:    1
  3892 ;; Hardware stack levels required when called:    4
  3893 ;; This function calls:
  3894 ;;		Nothing
  3895 ;; This function is called by:
  3896 ;;		_lcdInst
  3897 ;;		_putch
  3898 ;; This function uses a non-reentrant model
  3899 ;;
  3900                           
  3901                           	psect	text25
  3902  001A30                     __ptext25:
  3903                           	opt stack 0
  3904  001A30                     _lcdNibble:
  3905                           	opt stack 23
  3906                           
  3907                           ;incstack = 0
  3908                           ;lcdNibble@data stored from wreg
  3909  001A30  6E1A               	movwf	lcdNibble@data,c
  3910                           
  3911                           ;lcd.c: 37: char temp = data & 0xF0;
  3912  001A32  501A               	movf	lcdNibble@data,w,c
  3913  001A34  0BF0               	andlw	240
  3914  001A36  6E19               	movwf	lcdNibble@temp,c
  3915                           
  3916                           ;lcd.c: 38: LATD = LATD & 0x0F;
  3917  001A38  508C               	movf	3980,w,c	;volatile
  3918  001A3A  0B0F               	andlw	15
  3919  001A3C  6E8C               	movwf	3980,c	;volatile
  3920                           
  3921                           ;lcd.c: 39: LATD = temp | LATD;
  3922  001A3E  5019               	movf	lcdNibble@temp,w,c
  3923  001A40  108C               	iorwf	3980,w,c	;volatile
  3924  001A42  6E8C               	movwf	3980,c	;volatile
  3925                           
  3926                           ;lcd.c: 41: LATDbits.LATD3 = 0;
  3927  001A44  968C               	bcf	3980,3,c	;volatile
  3928                           
  3929                           ;lcd.c: 42: _delay((unsigned long)((25)*(8000000/4000000.0)));
  3930  001A46  0E10               	movlw	16
  3931  001A48                     u1857:
  3932  001A48  2EE8               	decfsz	wreg,f,c
  3933  001A4A  D7FE               	bra	u1857
  3934  001A4C  D000               	nop2	
  3935                           
  3936                           ;lcd.c: 43: LATDbits.LATD3 = 1;
  3937  001A4E  868C               	bsf	3980,3,c	;volatile
  3938                           
  3939                           ;lcd.c: 44: _delay((unsigned long)((25)*(8000000/4000000.0)));
  3940  001A50  0E10               	movlw	16
  3941  001A52                     u1867:
  3942  001A52  2EE8               	decfsz	wreg,f,c
  3943  001A54  D7FE               	bra	u1867
  3944  001A56  D000               	nop2	
  3945                           
  3946                           ;lcd.c: 46: data = data << 4;
  3947  001A58  381A               	swapf	lcdNibble@data,w,c
  3948  001A5A  0BF0               	andlw	240
  3949  001A5C  6E1A               	movwf	lcdNibble@data,c
  3950                           
  3951                           ;lcd.c: 48: temp = data & 0xF0;
  3952  001A5E  501A               	movf	lcdNibble@data,w,c
  3953  001A60  0BF0               	andlw	240
  3954  001A62  6E19               	movwf	lcdNibble@temp,c
  3955                           
  3956                           ;lcd.c: 49: LATD = LATD & 0x0F;
  3957  001A64  508C               	movf	3980,w,c	;volatile
  3958  001A66  0B0F               	andlw	15
  3959  001A68  6E8C               	movwf	3980,c	;volatile
  3960                           
  3961                           ;lcd.c: 50: LATD = temp | LATD;
  3962  001A6A  5019               	movf	lcdNibble@temp,w,c
  3963  001A6C  108C               	iorwf	3980,w,c	;volatile
  3964  001A6E  6E8C               	movwf	3980,c	;volatile
  3965                           
  3966                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  3967  001A70  968C               	bcf	3980,3,c	;volatile
  3968                           
  3969                           ;lcd.c: 53: _delay((unsigned long)((25)*(8000000/4000000.0)));
  3970  001A72  0E10               	movlw	16
  3971  001A74                     u1877:
  3972  001A74  2EE8               	decfsz	wreg,f,c
  3973  001A76  D7FE               	bra	u1877
  3974  001A78  D000               	nop2	
  3975                           
  3976                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  3977  001A7A  868C               	bsf	3980,3,c	;volatile
  3978                           
  3979                           ;lcd.c: 55: _delay((unsigned long)((25)*(8000000/4000000.0)));
  3980  001A7C  0E10               	movlw	16
  3981  001A7E                     u1887:
  3982  001A7E  2EE8               	decfsz	wreg,f,c
  3983  001A80  D7FE               	bra	u1887
  3984  001A82  D000               	nop2	
  3985  001A84  0012               	return		;funcret
  3986  001A86                     __end_of_lcdNibble:
  3987                           	opt stack 0
  3988                           tblptru	equ	0xFF8
  3989                           tblptrh	equ	0xFF7
  3990                           tblptrl	equ	0xFF6
  3991                           tablat	equ	0xFF5
  3992                           prodh	equ	0xFF4
  3993                           prodl	equ	0xFF3
  3994                           intcon	equ	0xFF2
  3995                           intcon3	equ	0xFF0
  3996                           postinc0	equ	0xFEE
  3997                           wreg	equ	0xFE8
  3998                           indf1	equ	0xFE7
  3999                           fsr1h	equ	0xFE2
  4000                           fsr1l	equ	0xFE1
  4001                           indf2	equ	0xFDF
  4002                           postinc2	equ	0xFDE
  4003                           postdec2	equ	0xFDD
  4004                           fsr2h	equ	0xFDA
  4005                           fsr2l	equ	0xFD9
  4006                           status	equ	0xFD8
  4007                           
  4008 ;; *************** function _interrupt_handler *****************
  4009 ;; Defined at:
  4010 ;;		line 23 in file "interrupt.c"
  4011 ;; Parameters:    Size  Location     Type
  4012 ;;		None
  4013 ;; Auto vars:     Size  Location     Type
  4014 ;;  keypress        1   23[COMRAM] unsigned char 
  4015 ;; Return value:  Size  Location     Type
  4016 ;;                  1    wreg      void 
  4017 ;; Registers used:
  4018 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4019 ;; Tracked objects:
  4020 ;;		On entry : 0/0
  4021 ;;		On exit  : 0/0
  4022 ;;		Unchanged: 0/0
  4023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4025 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4026 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4027 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4028 ;;Total ram usage:       16 bytes
  4029 ;; Hardware stack levels used:    1
  4030 ;; Hardware stack levels required when called:    3
  4031 ;; This function calls:
  4032 ;;		i2_get_time
  4033 ;;		i2_lcdInst
  4034 ;;		i2_putch
  4035 ;; This function is called by:
  4036 ;;		Interrupt level 2
  4037 ;; This function uses a non-reentrant model
  4038 ;;
  4039                           
  4040                           	psect	intcode
  4041  000008                     __pintcode:
  4042                           	opt stack 0
  4043  000008                     _interrupt_handler:
  4044                           	opt stack 23
  4045                           
  4046                           ;incstack = 0
  4047  000008  8266               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4048  00000A  EDFA  F009         	call	int_func,f	;refresh shadow registers
  4049                           tblptru	equ	0xFF8
  4050                           tblptrh	equ	0xFF7
  4051                           tblptrl	equ	0xFF6
  4052                           tablat	equ	0xFF5
  4053                           prodh	equ	0xFF4
  4054                           prodl	equ	0xFF3
  4055                           intcon	equ	0xFF2
  4056                           intcon3	equ	0xFF0
  4057                           postinc0	equ	0xFEE
  4058                           wreg	equ	0xFE8
  4059                           indf1	equ	0xFE7
  4060                           fsr1h	equ	0xFE2
  4061                           fsr1l	equ	0xFE1
  4062                           indf2	equ	0xFDF
  4063                           postinc2	equ	0xFDE
  4064                           postdec2	equ	0xFDD
  4065                           fsr2h	equ	0xFDA
  4066                           fsr2l	equ	0xFD9
  4067                           status	equ	0xFD8
  4068                           
  4069                           	psect	intcode_body
  4070  0013F4                     __pintcode_body:
  4071                           	opt stack 23
  4072  0013F4                     int_func:
  4073                           	opt stack 23
  4074  0013F4  0006               	pop		; remove dummy address from shadow register refresh
  4075  0013F6  CFFA F00A          	movff	pclath,??_interrupt_handler+1
  4076  0013FA  CFFB F00B          	movff	pclatu,??_interrupt_handler+2
  4077  0013FE  CFE9 F00C          	movff	fsr0l,??_interrupt_handler+3
  4078  001402  CFEA F00D          	movff	fsr0h,??_interrupt_handler+4
  4079  001406  CFE1 F00E          	movff	fsr1l,??_interrupt_handler+5
  4080  00140A  CFE2 F00F          	movff	fsr1h,??_interrupt_handler+6
  4081  00140E  CFD9 F010          	movff	fsr2l,??_interrupt_handler+7
  4082  001412  CFDA F011          	movff	fsr2h,??_interrupt_handler+8
  4083  001416  CFF3 F012          	movff	prodl,??_interrupt_handler+9
  4084  00141A  CFF4 F013          	movff	prodh,??_interrupt_handler+10
  4085  00141E  CFF6 F014          	movff	tblptrl,??_interrupt_handler+11
  4086  001422  CFF7 F015          	movff	tblptrh,??_interrupt_handler+12
  4087  001426  CFF8 F016          	movff	tblptru,??_interrupt_handler+13
  4088  00142A  CFF5 F017          	movff	tablat,??_interrupt_handler+14
  4089                           
  4090                           ;interrupt.c: 24: if (INT1IF) {
  4091  00142E  A0F0               	btfss	intcon3,0,c	;volatile
  4092  001430  D046               	goto	i2l2539
  4093                           
  4094                           ;interrupt.c: 25: lcdInst(0b11000000);;
  4095  001432  0EC0               	movlw	192
  4096  001434  ECD8  F00E         	call	i2_lcdInst
  4097                           
  4098                           ;interrupt.c: 26: unsigned char keypress = (PORTB & 0xF0) >> 4;
  4099  001438  3881               	swapf	3969,w,c	;volatile
  4100  00143A  0B0F               	andlw	15
  4101  00143C  0B0F               	andlw	15
  4102  00143E  6E18               	movwf	interrupt_handler@keypress,c
  4103                           
  4104                           ;interrupt.c: 27: putch(keys[keypress]);
  4105  001440  5018               	movf	interrupt_handler@keypress,w,c
  4106  001442  0D01               	mullw	1
  4107  001444  0E01               	movlw	low _keys
  4108  001446  24F3               	addwf	prodl,w,c
  4109  001448  6EF6               	movwf	tblptrl,c
  4110  00144A  0E10               	movlw	high _keys
  4111  00144C  20F4               	addwfc	prodh,w,c
  4112  00144E  6EF7               	movwf	tblptrh,c
  4113  001450                     	if	0	;There are less than 3 active tblptr bytes
  4114  001450                     	endif
  4115  001450  0008               	tblrd		*
  4116  001452  50F5               	movf	tablat,w,c
  4117  001454  ECD2  F00E         	call	i2_putch
  4118                           
  4119                           ;interrupt.c: 28: if (mode == 2) {
  4120  001458  0E02               	movlw	2
  4121  00145A  1857               	xorwf	_mode,w,c
  4122  00145C  A4D8               	btfss	status,2,c
  4123  00145E  D013               	goto	i2l2519
  4124                           
  4125                           ;interrupt.c: 29: get_time(end_time);
  4126  001460  0E58               	movlw	low _end_time
  4127  001462  6E04               	movwf	i2get_time@datime,c
  4128  001464  0E00               	movlw	high _end_time
  4129  001466  6E05               	movwf	i2get_time@datime+1,c
  4130  001468  EC50  F00B         	call	i2_get_time	;wreg free
  4131                           
  4132                           ;interrupt.c: 30: passed_time =
  4133                           ;interrupt.c: 31: (end_time[1] - start_time[1]) * 60 + (end_time[0] - start_time[0]);
  4134  00146C  505F               	movf	_start_time,w,c
  4135  00146E  0800               	sublw	0
  4136  001470  6E09               	movwf	??_interrupt_handler& (0+255),c
  4137  001472  5060               	movf	_start_time+1,w,c
  4138  001474  0800               	sublw	0
  4139  001476  2459               	addwf	_end_time+1,w,c
  4140  001478  0D3C               	mullw	60
  4141  00147A  50F3               	movf	prodl,w,c
  4142  00147C  2409               	addwf	??_interrupt_handler,w,c
  4143  00147E  2458               	addwf	_end_time,w,c
  4144  001480  6E56               	movwf	_passed_time,c
  4145                           
  4146                           ;interrupt.c: 32: mode = 3;
  4147  001482  0E03               	movlw	3
  4148  001484  D01B               	goto	L4
  4149  001486                     i2l2519:
  4150  001486  5018               	movf	interrupt_handler@keypress,w,c
  4151  001488  A4D8               	btfss	status,2,c
  4152  00148A  D005               	goto	i2l2525
  4153                           
  4154                           ;interrupt.c: 35: if (mode == 0) {
  4155  00148C  5057               	movf	_mode,w,c
  4156  00148E  A4D8               	btfss	status,2,c
  4157  001490  D016               	goto	i2l2539
  4158                           
  4159                           ;interrupt.c: 36: mode = 1;
  4160  001492  0E01               	movlw	1
  4161  001494  D013               	goto	L4
  4162  001496                     i2l2525:
  4163  001496  0E03               	movlw	3
  4164  001498  1818               	xorwf	interrupt_handler@keypress,w,c
  4165  00149A  A4D8               	btfss	status,2,c
  4166  00149C  D005               	goto	i2l2531
  4167                           
  4168                           ;interrupt.c: 40: if (mode == 0) {
  4169  00149E  5057               	movf	_mode,w,c
  4170  0014A0  A4D8               	btfss	status,2,c
  4171  0014A2  D00D               	goto	i2l2539
  4172                           
  4173                           ;interrupt.c: 41: mode = 2;
  4174  0014A4  0E02               	movlw	2
  4175  0014A6  D00A               	goto	L4
  4176  0014A8                     i2l2531:
  4177                           
  4178                           ;interrupt.c: 45: else if (keypress == 0x1) {
  4179  0014A8  0418               	decf	interrupt_handler@keypress,w,c
  4180  0014AA  A4D8               	btfss	status,2,c
  4181  0014AC  D002               	goto	i2l2535
  4182                           
  4183                           ;interrupt.c: 46: mode = 0;
  4184  0014AE  0E00               	movlw	0
  4185  0014B0  D005               	goto	L4
  4186  0014B2                     i2l2535:
  4187  0014B2  0E02               	movlw	2
  4188  0014B4  1818               	xorwf	interrupt_handler@keypress,w,c
  4189  0014B6  A4D8               	btfss	status,2,c
  4190  0014B8  D002               	goto	i2l2539
  4191                           
  4192                           ;interrupt.c: 49: mode = 99;
  4193  0014BA  0E63               	movlw	99
  4194  0014BC                     L4:
  4195  0014BC  6E57               	movwf	_mode,c
  4196  0014BE                     i2l2539:
  4197                           
  4198                           ;interrupt.c: 50: }
  4199                           ;interrupt.c: 51: }
  4200                           ;interrupt.c: 52: INT1IF = 0;
  4201  0014BE  90F0               	bcf	intcon3,0,c	;volatile
  4202  0014C0  C017  FFF5         	movff	??_interrupt_handler+14,tablat
  4203  0014C4  C016  FFF8         	movff	??_interrupt_handler+13,tblptru
  4204  0014C8  C015  FFF7         	movff	??_interrupt_handler+12,tblptrh
  4205  0014CC  C014  FFF6         	movff	??_interrupt_handler+11,tblptrl
  4206  0014D0  C013  FFF4         	movff	??_interrupt_handler+10,prodh
  4207  0014D4  C012  FFF3         	movff	??_interrupt_handler+9,prodl
  4208  0014D8  C011  FFDA         	movff	??_interrupt_handler+8,fsr2h
  4209  0014DC  C010  FFD9         	movff	??_interrupt_handler+7,fsr2l
  4210  0014E0  C00F  FFE2         	movff	??_interrupt_handler+6,fsr1h
  4211  0014E4  C00E  FFE1         	movff	??_interrupt_handler+5,fsr1l
  4212  0014E8  C00D  FFEA         	movff	??_interrupt_handler+4,fsr0h
  4213  0014EC  C00C  FFE9         	movff	??_interrupt_handler+3,fsr0l
  4214  0014F0  C00B  FFFB         	movff	??_interrupt_handler+2,pclatu
  4215  0014F4  C00A  FFFA         	movff	??_interrupt_handler+1,pclath
  4216  0014F8  9266               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4217  0014FA  0011               	retfie		f
  4218  0014FC                     __end_of_interrupt_handler:
  4219                           	opt stack 0
  4220                           pclatu	equ	0xFFB
  4221                           pclath	equ	0xFFA
  4222                           tblptru	equ	0xFF8
  4223                           tblptrh	equ	0xFF7
  4224                           tblptrl	equ	0xFF6
  4225                           tablat	equ	0xFF5
  4226                           prodh	equ	0xFF4
  4227                           prodl	equ	0xFF3
  4228                           intcon	equ	0xFF2
  4229                           intcon3	equ	0xFF0
  4230                           postinc0	equ	0xFEE
  4231                           fsr0h	equ	0xFEA
  4232                           fsr0l	equ	0xFE9
  4233                           wreg	equ	0xFE8
  4234                           indf1	equ	0xFE7
  4235                           fsr1h	equ	0xFE2
  4236                           fsr1l	equ	0xFE1
  4237                           indf2	equ	0xFDF
  4238                           postinc2	equ	0xFDE
  4239                           postdec2	equ	0xFDD
  4240                           fsr2h	equ	0xFDA
  4241                           fsr2l	equ	0xFD9
  4242                           status	equ	0xFD8
  4243                           
  4244 ;; *************** function i2_putch *****************
  4245 ;; Defined at:
  4246 ;;		line 30 in file "lcd.c"
  4247 ;; Parameters:    Size  Location     Type
  4248 ;;  data            1    wreg     unsigned char 
  4249 ;; Auto vars:     Size  Location     Type
  4250 ;;  data            1    2[COMRAM] unsigned char 
  4251 ;; Return value:  Size  Location     Type
  4252 ;;                  1    wreg      void 
  4253 ;; Registers used:
  4254 ;;		wreg, status,2, status,0, cstack
  4255 ;; Tracked objects:
  4256 ;;		On entry : 0/0
  4257 ;;		On exit  : 0/0
  4258 ;;		Unchanged: 0/0
  4259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4261 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4263 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4264 ;;Total ram usage:        1 bytes
  4265 ;; Hardware stack levels used:    1
  4266 ;; Hardware stack levels required when called:    1
  4267 ;; This function calls:
  4268 ;;		i2_lcdNibble
  4269 ;; This function is called by:
  4270 ;;		_interrupt_handler
  4271 ;; This function uses a non-reentrant model
  4272 ;;
  4273                           
  4274                           	psect	text27
  4275  001DA4                     __ptext27:
  4276                           	opt stack 0
  4277  001DA4                     i2_putch:
  4278                           	opt stack 24
  4279                           
  4280                           ;incstack = 0
  4281                           ;i2putch@data stored from wreg
  4282  001DA4  6E03               	movwf	i2putch@data,c
  4283                           
  4284                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  4285  001DA6  848C               	bsf	3980,2,c	;volatile
  4286                           
  4287                           ;lcd.c: 32: lcdNibble(data);
  4288  001DA8  5003               	movf	i2putch@data,w,c
  4289  001DAA  EC43  F00D         	call	i2_lcdNibble
  4290  001DAE  0012               	return		;funcret
  4291  001DB0                     __end_ofi2_putch:
  4292                           	opt stack 0
  4293                           pclatu	equ	0xFFB
  4294                           pclath	equ	0xFFA
  4295                           tblptru	equ	0xFF8
  4296                           tblptrh	equ	0xFF7
  4297                           tblptrl	equ	0xFF6
  4298                           tablat	equ	0xFF5
  4299                           prodh	equ	0xFF4
  4300                           prodl	equ	0xFF3
  4301                           intcon	equ	0xFF2
  4302                           intcon3	equ	0xFF0
  4303                           postinc0	equ	0xFEE
  4304                           fsr0h	equ	0xFEA
  4305                           fsr0l	equ	0xFE9
  4306                           wreg	equ	0xFE8
  4307                           indf1	equ	0xFE7
  4308                           fsr1h	equ	0xFE2
  4309                           fsr1l	equ	0xFE1
  4310                           indf2	equ	0xFDF
  4311                           postinc2	equ	0xFDE
  4312                           postdec2	equ	0xFDD
  4313                           fsr2h	equ	0xFDA
  4314                           fsr2l	equ	0xFD9
  4315                           status	equ	0xFD8
  4316                           
  4317 ;; *************** function i2_lcdInst *****************
  4318 ;; Defined at:
  4319 ;;		line 25 in file "lcd.c"
  4320 ;; Parameters:    Size  Location     Type
  4321 ;;  data            1    wreg     unsigned char 
  4322 ;; Auto vars:     Size  Location     Type
  4323 ;;  data            1    2[COMRAM] unsigned char 
  4324 ;; Return value:  Size  Location     Type
  4325 ;;                  1    wreg      void 
  4326 ;; Registers used:
  4327 ;;		wreg, status,2, status,0, cstack
  4328 ;; Tracked objects:
  4329 ;;		On entry : 0/0
  4330 ;;		On exit  : 0/0
  4331 ;;		Unchanged: 0/0
  4332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4334 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4336 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4337 ;;Total ram usage:        1 bytes
  4338 ;; Hardware stack levels used:    1
  4339 ;; Hardware stack levels required when called:    1
  4340 ;; This function calls:
  4341 ;;		i2_lcdNibble
  4342 ;; This function is called by:
  4343 ;;		_interrupt_handler
  4344 ;; This function uses a non-reentrant model
  4345 ;;
  4346                           
  4347                           	psect	text28
  4348  001DB0                     __ptext28:
  4349                           	opt stack 0
  4350  001DB0                     i2_lcdInst:
  4351                           	opt stack 24
  4352                           
  4353                           ;incstack = 0
  4354                           ;i2lcdInst@data stored from wreg
  4355  001DB0  6E03               	movwf	i2lcdInst@data,c
  4356                           
  4357                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  4358  001DB2  948C               	bcf	3980,2,c	;volatile
  4359                           
  4360                           ;lcd.c: 27: lcdNibble(data);
  4361  001DB4  5003               	movf	i2lcdInst@data,w,c
  4362  001DB6  EC43  F00D         	call	i2_lcdNibble
  4363  001DBA  0012               	return		;funcret
  4364  001DBC                     __end_ofi2_lcdInst:
  4365                           	opt stack 0
  4366                           pclatu	equ	0xFFB
  4367                           pclath	equ	0xFFA
  4368                           tblptru	equ	0xFF8
  4369                           tblptrh	equ	0xFF7
  4370                           tblptrl	equ	0xFF6
  4371                           tablat	equ	0xFF5
  4372                           prodh	equ	0xFF4
  4373                           prodl	equ	0xFF3
  4374                           intcon	equ	0xFF2
  4375                           intcon3	equ	0xFF0
  4376                           postinc0	equ	0xFEE
  4377                           fsr0h	equ	0xFEA
  4378                           fsr0l	equ	0xFE9
  4379                           wreg	equ	0xFE8
  4380                           indf1	equ	0xFE7
  4381                           fsr1h	equ	0xFE2
  4382                           fsr1l	equ	0xFE1
  4383                           indf2	equ	0xFDF
  4384                           postinc2	equ	0xFDE
  4385                           postdec2	equ	0xFDD
  4386                           fsr2h	equ	0xFDA
  4387                           fsr2l	equ	0xFD9
  4388                           status	equ	0xFD8
  4389                           
  4390 ;; *************** function i2_lcdNibble *****************
  4391 ;; Defined at:
  4392 ;;		line 35 in file "lcd.c"
  4393 ;; Parameters:    Size  Location     Type
  4394 ;;  data            1    wreg     unsigned char 
  4395 ;; Auto vars:     Size  Location     Type
  4396 ;;  data            1    1[COMRAM] unsigned char 
  4397 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  4398 ;; Return value:  Size  Location     Type
  4399 ;;                  1    wreg      void 
  4400 ;; Registers used:
  4401 ;;		wreg, status,2, status,0
  4402 ;; Tracked objects:
  4403 ;;		On entry : 0/0
  4404 ;;		On exit  : 0/0
  4405 ;;		Unchanged: 0/0
  4406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4408 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4410 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4411 ;;Total ram usage:        2 bytes
  4412 ;; Hardware stack levels used:    1
  4413 ;; This function calls:
  4414 ;;		Nothing
  4415 ;; This function is called by:
  4416 ;;		i2_lcdInst
  4417 ;;		i2_putch
  4418 ;; This function uses a non-reentrant model
  4419 ;;
  4420                           
  4421                           	psect	text29
  4422  001A86                     __ptext29:
  4423                           	opt stack 0
  4424  001A86                     i2_lcdNibble:
  4425                           	opt stack 24
  4426                           
  4427                           ;incstack = 0
  4428                           ;i2lcdNibble@data stored from wreg
  4429  001A86  6E02               	movwf	i2lcdNibble@data,c
  4430                           
  4431                           ;lcd.c: 37: char temp = data & 0xF0;
  4432  001A88  5002               	movf	i2lcdNibble@data,w,c
  4433  001A8A  0BF0               	andlw	240
  4434  001A8C  6E01               	movwf	i2lcdNibble@temp,c
  4435                           
  4436                           ;lcd.c: 38: LATD = LATD & 0x0F;
  4437  001A8E  508C               	movf	3980,w,c	;volatile
  4438  001A90  0B0F               	andlw	15
  4439  001A92  6E8C               	movwf	3980,c	;volatile
  4440                           
  4441                           ;lcd.c: 39: LATD = temp | LATD;
  4442  001A94  5001               	movf	i2lcdNibble@temp,w,c
  4443  001A96  108C               	iorwf	3980,w,c	;volatile
  4444  001A98  6E8C               	movwf	3980,c	;volatile
  4445                           
  4446                           ;lcd.c: 41: LATDbits.LATD3 = 0;
  4447  001A9A  968C               	bcf	3980,3,c	;volatile
  4448                           
  4449                           ;lcd.c: 42: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4450  001A9C  0E10               	movlw	16
  4451  001A9E                     i2u189_47:
  4452  001A9E  2EE8               	decfsz	wreg,f,c
  4453  001AA0  D7FE               	bra	i2u189_47
  4454  001AA2  D000               	nop2	
  4455                           
  4456                           ;lcd.c: 43: LATDbits.LATD3 = 1;
  4457  001AA4  868C               	bsf	3980,3,c	;volatile
  4458                           
  4459                           ;lcd.c: 44: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4460  001AA6  0E10               	movlw	16
  4461  001AA8                     i2u190_47:
  4462  001AA8  2EE8               	decfsz	wreg,f,c
  4463  001AAA  D7FE               	bra	i2u190_47
  4464  001AAC  D000               	nop2	
  4465                           
  4466                           ;lcd.c: 46: data = data << 4;
  4467  001AAE  3802               	swapf	i2lcdNibble@data,w,c
  4468  001AB0  0BF0               	andlw	240
  4469  001AB2  6E02               	movwf	i2lcdNibble@data,c
  4470                           
  4471                           ;lcd.c: 48: temp = data & 0xF0;
  4472  001AB4  5002               	movf	i2lcdNibble@data,w,c
  4473  001AB6  0BF0               	andlw	240
  4474  001AB8  6E01               	movwf	i2lcdNibble@temp,c
  4475                           
  4476                           ;lcd.c: 49: LATD = LATD & 0x0F;
  4477  001ABA  508C               	movf	3980,w,c	;volatile
  4478  001ABC  0B0F               	andlw	15
  4479  001ABE  6E8C               	movwf	3980,c	;volatile
  4480                           
  4481                           ;lcd.c: 50: LATD = temp | LATD;
  4482  001AC0  5001               	movf	i2lcdNibble@temp,w,c
  4483  001AC2  108C               	iorwf	3980,w,c	;volatile
  4484  001AC4  6E8C               	movwf	3980,c	;volatile
  4485                           
  4486                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  4487  001AC6  968C               	bcf	3980,3,c	;volatile
  4488                           
  4489                           ;lcd.c: 53: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4490  001AC8  0E10               	movlw	16
  4491  001ACA                     i2u191_47:
  4492  001ACA  2EE8               	decfsz	wreg,f,c
  4493  001ACC  D7FE               	bra	i2u191_47
  4494  001ACE  D000               	nop2	
  4495                           
  4496                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  4497  001AD0  868C               	bsf	3980,3,c	;volatile
  4498                           
  4499                           ;lcd.c: 55: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4500  001AD2  0E10               	movlw	16
  4501  001AD4                     i2u192_47:
  4502  001AD4  2EE8               	decfsz	wreg,f,c
  4503  001AD6  D7FE               	bra	i2u192_47
  4504  001AD8  D000               	nop2	
  4505  001ADA  0012               	return		;funcret
  4506  001ADC                     __end_ofi2_lcdNibble:
  4507                           	opt stack 0
  4508                           pclatu	equ	0xFFB
  4509                           pclath	equ	0xFFA
  4510                           tblptru	equ	0xFF8
  4511                           tblptrh	equ	0xFF7
  4512                           tblptrl	equ	0xFF6
  4513                           tablat	equ	0xFF5
  4514                           prodh	equ	0xFF4
  4515                           prodl	equ	0xFF3
  4516                           intcon	equ	0xFF2
  4517                           intcon3	equ	0xFF0
  4518                           postinc0	equ	0xFEE
  4519                           fsr0h	equ	0xFEA
  4520                           fsr0l	equ	0xFE9
  4521                           wreg	equ	0xFE8
  4522                           indf1	equ	0xFE7
  4523                           fsr1h	equ	0xFE2
  4524                           fsr1l	equ	0xFE1
  4525                           indf2	equ	0xFDF
  4526                           postinc2	equ	0xFDE
  4527                           postdec2	equ	0xFDD
  4528                           fsr2h	equ	0xFDA
  4529                           fsr2l	equ	0xFD9
  4530                           status	equ	0xFD8
  4531                           
  4532 ;; *************** function i2_get_time *****************
  4533 ;; Defined at:
  4534 ;;		line 39 in file "time.c"
  4535 ;; Parameters:    Size  Location     Type
  4536 ;;  datime          2    3[COMRAM] PTR unsigned char 
  4537 ;;		 -> end_time(7), start_time(7), 
  4538 ;; Auto vars:     Size  Location     Type
  4539 ;;  get_time        2    6[COMRAM] int 
  4540 ;; Return value:  Size  Location     Type
  4541 ;;                  1    wreg      void 
  4542 ;; Registers used:
  4543 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4544 ;; Tracked objects:
  4545 ;;		On entry : 0/0
  4546 ;;		On exit  : 0/0
  4547 ;;		Unchanged: 0/0
  4548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4549 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4550 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4551 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4552 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4553 ;;Total ram usage:        5 bytes
  4554 ;; Hardware stack levels used:    1
  4555 ;; Hardware stack levels required when called:    2
  4556 ;; This function calls:
  4557 ;;		i2_I2C_Master_Read
  4558 ;;		i2_I2C_Master_Start
  4559 ;;		i2_I2C_Master_Stop
  4560 ;;		i2_I2C_Master_Write
  4561 ;; This function is called by:
  4562 ;;		_interrupt_handler
  4563 ;; This function uses a non-reentrant model
  4564 ;;
  4565                           
  4566                           	psect	text30
  4567  0016A0                     __ptext30:
  4568                           	opt stack 0
  4569  0016A0                     i2_get_time:
  4570                           	opt stack 23
  4571                           
  4572                           ;time.c: 40: I2C_Master_Start();
  4573                           
  4574                           ;incstack = 0
  4575  0016A0  ECF4  F00E         	call	i2_I2C_Master_Start	;wreg free
  4576                           
  4577                           ;time.c: 41: I2C_Master_Write(0b11010000);
  4578  0016A4  0E00               	movlw	0
  4579  0016A6  6E03               	movwf	i2I2C_Master_Write@d+1,c
  4580  0016A8  0ED0               	movlw	208
  4581  0016AA  6E02               	movwf	i2I2C_Master_Write@d,c
  4582  0016AC  ECE3  F00E         	call	i2_I2C_Master_Write	;wreg free
  4583                           
  4584                           ;time.c: 42: I2C_Master_Write(0x00);
  4585  0016B0  0E00               	movlw	0
  4586  0016B2  6E03               	movwf	i2I2C_Master_Write@d+1,c
  4587  0016B4  0E00               	movlw	0
  4588  0016B6  6E02               	movwf	i2I2C_Master_Write@d,c
  4589  0016B8  ECE3  F00E         	call	i2_I2C_Master_Write	;wreg free
  4590                           
  4591                           ;time.c: 43: I2C_Master_Stop();
  4592  0016BC  ECF0  F00E         	call	i2_I2C_Master_Stop	;wreg free
  4593                           
  4594                           ;time.c: 46: I2C_Master_Start();
  4595  0016C0  ECF4  F00E         	call	i2_I2C_Master_Start	;wreg free
  4596                           
  4597                           ;time.c: 47: I2C_Master_Write(0b11010001);
  4598  0016C4  0E00               	movlw	0
  4599  0016C6  6E03               	movwf	i2I2C_Master_Write@d+1,c
  4600  0016C8  0ED1               	movlw	209
  4601  0016CA  6E02               	movwf	i2I2C_Master_Write@d,c
  4602  0016CC  ECE3  F00E         	call	i2_I2C_Master_Write	;wreg free
  4603                           
  4604                           ;time.c: 48: for(int i = 0; i < 6; i++){
  4605  0016D0  0E00               	movlw	0
  4606  0016D2  6E08               	movwf	i2get_time@i+1,c
  4607  0016D4  0E00               	movlw	0
  4608  0016D6  6E07               	movwf	i2get_time@i,c
  4609  0016D8                     i2l2405:
  4610  0016D8  BE08               	btfsc	i2get_time@i+1,7,c
  4611  0016DA  D006               	goto	i2l2409
  4612  0016DC  5008               	movf	i2get_time@i+1,w,c
  4613  0016DE  E12D               	bnz	i2l2417
  4614  0016E0  0E06               	movlw	6
  4615  0016E2  5C07               	subwf	i2get_time@i,w,c
  4616  0016E4  B0D8               	btfsc	status,0,c
  4617  0016E6  D029               	goto	i2l2417
  4618  0016E8                     i2l2409:
  4619                           
  4620                           ;time.c: 49: datime[i] = I2C_Master_Read(1);
  4621  0016E8  5007               	movf	i2get_time@i,w,c
  4622  0016EA  2404               	addwf	i2get_time@datime,w,c
  4623  0016EC  6ED9               	movwf	fsr2l,c
  4624  0016EE  5008               	movf	i2get_time@i+1,w,c
  4625  0016F0  2005               	addwfc	i2get_time@datime+1,w,c
  4626  0016F2  6EDA               	movwf	fsr2h,c
  4627  0016F4  0E01               	movlw	1
  4628  0016F6  EC73  F00E         	call	i2_I2C_Master_Read
  4629  0016FA  6EDF               	movwf	indf2,c
  4630                           
  4631                           ;time.c: 50: datime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  4632  0016FC  5007               	movf	i2get_time@i,w,c
  4633  0016FE  2404               	addwf	i2get_time@datime,w,c
  4634  001700  6ED9               	movwf	fsr2l,c
  4635  001702  5008               	movf	i2get_time@i+1,w,c
  4636  001704  2005               	addwfc	i2get_time@datime+1,w,c
  4637  001706  6EDA               	movwf	fsr2h,c
  4638  001708  0E43               	movlw	low _time
  4639  00170A  2407               	addwf	i2get_time@i,w,c
  4640  00170C  6EE1               	movwf	fsr1l,c
  4641  00170E  0E00               	movlw	high _time
  4642  001710  2008               	addwfc	i2get_time@i+1,w,c
  4643  001712  6EE2               	movwf	fsr1h,c
  4644  001714  50E7               	movf	indf1,w,c
  4645  001716  6E06               	movwf	??i2_get_time& (0+255),c
  4646  001718  3806               	swapf	??i2_get_time,w,c
  4647  00171A  0B0F               	andlw	15
  4648  00171C  0B0F               	andlw	15
  4649  00171E  0D0A               	mullw	10
  4650  001720  0E43               	movlw	low _time
  4651  001722  2407               	addwf	i2get_time@i,w,c
  4652  001724  6EE1               	movwf	fsr1l,c
  4653  001726  0E00               	movlw	high _time
  4654  001728  2008               	addwfc	i2get_time@i+1,w,c
  4655  00172A  6EE2               	movwf	fsr1h,c
  4656  00172C  50E7               	movf	indf1,w,c
  4657  00172E  0B0F               	andlw	15
  4658  001730  24F3               	addwf	prodl,w,c
  4659  001732  6EDF               	movwf	indf2,c
  4660  001734  4A07               	infsnz	i2get_time@i,f,c
  4661  001736  2A08               	incf	i2get_time@i+1,f,c
  4662  001738  D7CF               	goto	i2l2405
  4663  00173A                     i2l2417:
  4664                           
  4665                           ;time.c: 52: }
  4666                           ;time.c: 53: datime[6] = I2C_Master_Read(0);
  4667  00173A  EE20 F006          	lfsr	2,6
  4668  00173E  5004               	movf	i2get_time@datime,w,c
  4669  001740  26D9               	addwf	fsr2l,f,c
  4670  001742  5005               	movf	i2get_time@datime+1,w,c
  4671  001744  22DA               	addwfc	fsr2h,f,c
  4672  001746  0E00               	movlw	0
  4673  001748  EC73  F00E         	call	i2_I2C_Master_Read
  4674  00174C  6EDF               	movwf	indf2,c
  4675                           
  4676                           ;time.c: 54: I2C_Master_Stop();
  4677  00174E  ECF0  F00E         	call	i2_I2C_Master_Stop	;wreg free
  4678  001752  0012               	return		;funcret
  4679  001754                     __end_ofi2_get_time:
  4680                           	opt stack 0
  4681                           pclatu	equ	0xFFB
  4682                           pclath	equ	0xFFA
  4683                           tblptru	equ	0xFF8
  4684                           tblptrh	equ	0xFF7
  4685                           tblptrl	equ	0xFF6
  4686                           tablat	equ	0xFF5
  4687                           prodh	equ	0xFF4
  4688                           prodl	equ	0xFF3
  4689                           intcon	equ	0xFF2
  4690                           intcon3	equ	0xFF0
  4691                           postinc0	equ	0xFEE
  4692                           fsr0h	equ	0xFEA
  4693                           fsr0l	equ	0xFE9
  4694                           wreg	equ	0xFE8
  4695                           indf1	equ	0xFE7
  4696                           fsr1h	equ	0xFE2
  4697                           fsr1l	equ	0xFE1
  4698                           indf2	equ	0xFDF
  4699                           postinc2	equ	0xFDE
  4700                           postdec2	equ	0xFDD
  4701                           fsr2h	equ	0xFDA
  4702                           fsr2l	equ	0xFD9
  4703                           status	equ	0xFD8
  4704                           
  4705 ;; *************** function i2_I2C_Master_Write *****************
  4706 ;; Defined at:
  4707 ;;		line 47 in file "I2C.c"
  4708 ;; Parameters:    Size  Location     Type
  4709 ;;  d               2    1[COMRAM] unsigned int 
  4710 ;; Auto vars:     Size  Location     Type
  4711 ;;		None
  4712 ;; Return value:  Size  Location     Type
  4713 ;;                  1    wreg      void 
  4714 ;; Registers used:
  4715 ;;		wreg, status,2, status,0, cstack
  4716 ;; Tracked objects:
  4717 ;;		On entry : 0/0
  4718 ;;		On exit  : 0/0
  4719 ;;		Unchanged: 0/0
  4720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4721 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4724 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4725 ;;Total ram usage:        2 bytes
  4726 ;; Hardware stack levels used:    1
  4727 ;; Hardware stack levels required when called:    1
  4728 ;; This function calls:
  4729 ;;		i2_I2C_Master_Wait
  4730 ;; This function is called by:
  4731 ;;		i2_get_time
  4732 ;; This function uses a non-reentrant model
  4733 ;;
  4734                           
  4735                           	psect	text31
  4736  001DC6                     __ptext31:
  4737                           	opt stack 0
  4738  001DC6                     i2_I2C_Master_Write:
  4739                           	opt stack 23
  4740                           
  4741                           ;I2C.c: 49: I2C_Master_Wait();
  4742                           
  4743                           ;incstack = 0
  4744  001DC6  ECBD  F00E         	call	i2_I2C_Master_Wait	;wreg free
  4745                           
  4746                           ;I2C.c: 50: SSPBUF = d;
  4747  001DCA  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
  4748  001DCE  0012               	return		;funcret
  4749  001DD0                     __end_ofi2_I2C_Master_Write:
  4750                           	opt stack 0
  4751                           pclatu	equ	0xFFB
  4752                           pclath	equ	0xFFA
  4753                           tblptru	equ	0xFF8
  4754                           tblptrh	equ	0xFF7
  4755                           tblptrl	equ	0xFF6
  4756                           tablat	equ	0xFF5
  4757                           prodh	equ	0xFF4
  4758                           prodl	equ	0xFF3
  4759                           intcon	equ	0xFF2
  4760                           intcon3	equ	0xFF0
  4761                           postinc0	equ	0xFEE
  4762                           fsr0h	equ	0xFEA
  4763                           fsr0l	equ	0xFE9
  4764                           wreg	equ	0xFE8
  4765                           indf1	equ	0xFE7
  4766                           fsr1h	equ	0xFE2
  4767                           fsr1l	equ	0xFE1
  4768                           indf2	equ	0xFDF
  4769                           postinc2	equ	0xFDE
  4770                           postdec2	equ	0xFDD
  4771                           fsr2h	equ	0xFDA
  4772                           fsr2l	equ	0xFD9
  4773                           status	equ	0xFD8
  4774                           
  4775 ;; *************** function i2_I2C_Master_Stop *****************
  4776 ;; Defined at:
  4777 ;;		line 41 in file "I2C.c"
  4778 ;; Parameters:    Size  Location     Type
  4779 ;;		None
  4780 ;; Auto vars:     Size  Location     Type
  4781 ;;		None
  4782 ;; Return value:  Size  Location     Type
  4783 ;;                  1    wreg      void 
  4784 ;; Registers used:
  4785 ;;		wreg, status,2, status,0, cstack
  4786 ;; Tracked objects:
  4787 ;;		On entry : 0/0
  4788 ;;		On exit  : 0/0
  4789 ;;		Unchanged: 0/0
  4790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4794 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4795 ;;Total ram usage:        0 bytes
  4796 ;; Hardware stack levels used:    1
  4797 ;; Hardware stack levels required when called:    1
  4798 ;; This function calls:
  4799 ;;		i2_I2C_Master_Wait
  4800 ;; This function is called by:
  4801 ;;		i2_get_time
  4802 ;; This function uses a non-reentrant model
  4803 ;;
  4804                           
  4805                           	psect	text32
  4806  001DE0                     __ptext32:
  4807                           	opt stack 0
  4808  001DE0                     i2_I2C_Master_Stop:
  4809                           	opt stack 23
  4810                           
  4811                           ;I2C.c: 43: I2C_Master_Wait();
  4812                           
  4813                           ;incstack = 0
  4814  001DE0  ECBD  F00E         	call	i2_I2C_Master_Wait	;wreg free
  4815                           
  4816                           ;I2C.c: 44: PEN = 1;
  4817  001DE4  84C5               	bsf	4037,2,c	;volatile
  4818  001DE6  0012               	return		;funcret
  4819  001DE8                     __end_ofi2_I2C_Master_Stop:
  4820                           	opt stack 0
  4821                           pclatu	equ	0xFFB
  4822                           pclath	equ	0xFFA
  4823                           tblptru	equ	0xFF8
  4824                           tblptrh	equ	0xFF7
  4825                           tblptrl	equ	0xFF6
  4826                           tablat	equ	0xFF5
  4827                           prodh	equ	0xFF4
  4828                           prodl	equ	0xFF3
  4829                           intcon	equ	0xFF2
  4830                           intcon3	equ	0xFF0
  4831                           postinc0	equ	0xFEE
  4832                           fsr0h	equ	0xFEA
  4833                           fsr0l	equ	0xFE9
  4834                           wreg	equ	0xFE8
  4835                           indf1	equ	0xFE7
  4836                           fsr1h	equ	0xFE2
  4837                           fsr1l	equ	0xFE1
  4838                           indf2	equ	0xFDF
  4839                           postinc2	equ	0xFDE
  4840                           postdec2	equ	0xFDD
  4841                           fsr2h	equ	0xFDA
  4842                           fsr2l	equ	0xFD9
  4843                           status	equ	0xFD8
  4844                           
  4845 ;; *************** function i2_I2C_Master_Start *****************
  4846 ;; Defined at:
  4847 ;;		line 29 in file "I2C.c"
  4848 ;; Parameters:    Size  Location     Type
  4849 ;;		None
  4850 ;; Auto vars:     Size  Location     Type
  4851 ;;		None
  4852 ;; Return value:  Size  Location     Type
  4853 ;;                  1    wreg      void 
  4854 ;; Registers used:
  4855 ;;		wreg, status,2, status,0, cstack
  4856 ;; Tracked objects:
  4857 ;;		On entry : 0/0
  4858 ;;		On exit  : 0/0
  4859 ;;		Unchanged: 0/0
  4860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4864 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4865 ;;Total ram usage:        0 bytes
  4866 ;; Hardware stack levels used:    1
  4867 ;; Hardware stack levels required when called:    1
  4868 ;; This function calls:
  4869 ;;		i2_I2C_Master_Wait
  4870 ;; This function is called by:
  4871 ;;		i2_get_time
  4872 ;; This function uses a non-reentrant model
  4873 ;;
  4874                           
  4875                           	psect	text33
  4876  001DE8                     __ptext33:
  4877                           	opt stack 0
  4878  001DE8                     i2_I2C_Master_Start:
  4879                           	opt stack 23
  4880                           
  4881                           ;I2C.c: 31: I2C_Master_Wait();
  4882                           
  4883                           ;incstack = 0
  4884  001DE8  ECBD  F00E         	call	i2_I2C_Master_Wait	;wreg free
  4885                           
  4886                           ;I2C.c: 32: SEN = 1;
  4887  001DEC  80C5               	bsf	4037,0,c	;volatile
  4888  001DEE  0012               	return		;funcret
  4889  001DF0                     __end_ofi2_I2C_Master_Start:
  4890                           	opt stack 0
  4891                           pclatu	equ	0xFFB
  4892                           pclath	equ	0xFFA
  4893                           tblptru	equ	0xFF8
  4894                           tblptrh	equ	0xFF7
  4895                           tblptrl	equ	0xFF6
  4896                           tablat	equ	0xFF5
  4897                           prodh	equ	0xFF4
  4898                           prodl	equ	0xFF3
  4899                           intcon	equ	0xFF2
  4900                           intcon3	equ	0xFF0
  4901                           postinc0	equ	0xFEE
  4902                           fsr0h	equ	0xFEA
  4903                           fsr0l	equ	0xFE9
  4904                           wreg	equ	0xFE8
  4905                           indf1	equ	0xFE7
  4906                           fsr1h	equ	0xFE2
  4907                           fsr1l	equ	0xFE1
  4908                           indf2	equ	0xFDF
  4909                           postinc2	equ	0xFDE
  4910                           postdec2	equ	0xFDD
  4911                           fsr2h	equ	0xFDA
  4912                           fsr2l	equ	0xFD9
  4913                           status	equ	0xFD8
  4914                           
  4915 ;; *************** function i2_I2C_Master_Read *****************
  4916 ;; Defined at:
  4917 ;;		line 53 in file "I2C.c"
  4918 ;; Parameters:    Size  Location     Type
  4919 ;;  a               1    wreg     unsigned char 
  4920 ;; Auto vars:     Size  Location     Type
  4921 ;;  a               1    1[COMRAM] unsigned char 
  4922 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
  4923 ;; Return value:  Size  Location     Type
  4924 ;;                  1    wreg      unsigned char 
  4925 ;; Registers used:
  4926 ;;		wreg, status,2, status,0, cstack
  4927 ;; Tracked objects:
  4928 ;;		On entry : 0/0
  4929 ;;		On exit  : 0/0
  4930 ;;		Unchanged: 0/0
  4931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4933 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4935 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4936 ;;Total ram usage:        2 bytes
  4937 ;; Hardware stack levels used:    1
  4938 ;; Hardware stack levels required when called:    1
  4939 ;; This function calls:
  4940 ;;		i2_I2C_Master_Wait
  4941 ;; This function is called by:
  4942 ;;		i2_get_time
  4943 ;; This function uses a non-reentrant model
  4944 ;;
  4945                           
  4946                           	psect	text34
  4947  001CE6                     __ptext34:
  4948                           	opt stack 0
  4949  001CE6                     i2_I2C_Master_Read:
  4950                           	opt stack 23
  4951                           
  4952                           ;incstack = 0
  4953                           ;i2I2C_Master_Read@a stored from wreg
  4954  001CE6  6E02               	movwf	i2I2C_Master_Read@a,c
  4955                           
  4956                           ;I2C.c: 55: unsigned char temp;
  4957                           ;I2C.c: 56: I2C_Master_Wait();
  4958  001CE8  ECBD  F00E         	call	i2_I2C_Master_Wait	;wreg free
  4959                           
  4960                           ;I2C.c: 57: RCEN = 1;
  4961  001CEC  86C5               	bsf	4037,3,c	;volatile
  4962                           
  4963                           ;I2C.c: 58: I2C_Master_Wait();
  4964  001CEE  ECBD  F00E         	call	i2_I2C_Master_Wait	;wreg free
  4965                           
  4966                           ;I2C.c: 59: temp = SSPBUF;
  4967  001CF2  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
  4968                           
  4969                           ;I2C.c: 60: I2C_Master_Wait();
  4970  001CF6  ECBD  F00E         	call	i2_I2C_Master_Wait	;wreg free
  4971                           
  4972                           ;I2C.c: 61: ACKDT = (a)?0:1;
  4973  001CFA  5002               	movf	i2I2C_Master_Read@a,w,c
  4974  001CFC  A4D8               	btfss	status,2,c
  4975  001CFE  D002               	goto	i2u146_40
  4976  001D00  8AC5               	bsf	4037,5,c	;volatile
  4977  001D02  D001               	goto	i2l2231
  4978  001D04                     i2u146_40:
  4979  001D04  9AC5               	bcf	4037,5,c	;volatile
  4980  001D06                     i2l2231:
  4981                           
  4982                           ;I2C.c: 62: ACKEN = 1;
  4983  001D06  88C5               	bsf	4037,4,c	;volatile
  4984                           
  4985                           ;I2C.c: 63: return temp;
  4986  001D08  5003               	movf	i2I2C_Master_Read@temp,w,c
  4987  001D0A  0012               	return	
  4988  001D0C                     __end_ofi2_I2C_Master_Read:
  4989                           	opt stack 0
  4990                           pclatu	equ	0xFFB
  4991                           pclath	equ	0xFFA
  4992                           tblptru	equ	0xFF8
  4993                           tblptrh	equ	0xFF7
  4994                           tblptrl	equ	0xFF6
  4995                           tablat	equ	0xFF5
  4996                           prodh	equ	0xFF4
  4997                           prodl	equ	0xFF3
  4998                           intcon	equ	0xFF2
  4999                           intcon3	equ	0xFF0
  5000                           postinc0	equ	0xFEE
  5001                           fsr0h	equ	0xFEA
  5002                           fsr0l	equ	0xFE9
  5003                           wreg	equ	0xFE8
  5004                           indf1	equ	0xFE7
  5005                           fsr1h	equ	0xFE2
  5006                           fsr1l	equ	0xFE1
  5007                           indf2	equ	0xFDF
  5008                           postinc2	equ	0xFDE
  5009                           postdec2	equ	0xFDD
  5010                           fsr2h	equ	0xFDA
  5011                           fsr2l	equ	0xFD9
  5012                           status	equ	0xFD8
  5013                           
  5014 ;; *************** function i2_I2C_Master_Wait *****************
  5015 ;; Defined at:
  5016 ;;		line 24 in file "I2C.c"
  5017 ;; Parameters:    Size  Location     Type
  5018 ;;		None
  5019 ;; Auto vars:     Size  Location     Type
  5020 ;;		None
  5021 ;; Return value:  Size  Location     Type
  5022 ;;                  1    wreg      void 
  5023 ;; Registers used:
  5024 ;;		wreg, status,2, status,0
  5025 ;; Tracked objects:
  5026 ;;		On entry : 0/0
  5027 ;;		On exit  : 0/0
  5028 ;;		Unchanged: 0/0
  5029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5031 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5032 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5033 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5034 ;;Total ram usage:        1 bytes
  5035 ;; Hardware stack levels used:    1
  5036 ;; This function calls:
  5037 ;;		Nothing
  5038 ;; This function is called by:
  5039 ;;		i2_I2C_Master_Start
  5040 ;;		i2_I2C_Master_Stop
  5041 ;;		i2_I2C_Master_Write
  5042 ;;		i2_I2C_Master_Read
  5043 ;; This function uses a non-reentrant model
  5044 ;;
  5045                           
  5046                           	psect	text35
  5047  001D7A                     __ptext35:
  5048                           	opt stack 0
  5049  001D7A                     i2_I2C_Master_Wait:
  5050                           	opt stack 23
  5051  001D7A                     i2l34:
  5052  001D7A  B4C7               	btfsc	4039,2,c	;volatile
  5053  001D7C  D7FE               	goto	i2l34
  5054  001D7E  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
  5055  001D82  0E1F               	movlw	31
  5056  001D84  1601               	andwf	??i2_I2C_Master_Wait,f,c
  5057  001D86  B4D8               	btfsc	status,2,c
  5058  001D88  0012               	return	
  5059  001D8A  D7F7               	goto	i2l34
  5060  001D8C                     __end_ofi2_I2C_Master_Wait:
  5061                           	opt stack 0
  5062                           pclatu	equ	0xFFB
  5063                           pclath	equ	0xFFA
  5064                           tblptru	equ	0xFF8
  5065                           tblptrh	equ	0xFF7
  5066                           tblptrl	equ	0xFF6
  5067                           tablat	equ	0xFF5
  5068                           prodh	equ	0xFF4
  5069                           prodl	equ	0xFF3
  5070                           intcon	equ	0xFF2
  5071                           intcon3	equ	0xFF0
  5072                           postinc0	equ	0xFEE
  5073                           fsr0h	equ	0xFEA
  5074                           fsr0l	equ	0xFE9
  5075                           wreg	equ	0xFE8
  5076                           indf1	equ	0xFE7
  5077                           fsr1h	equ	0xFE2
  5078                           fsr1l	equ	0xFE1
  5079                           indf2	equ	0xFDF
  5080                           postinc2	equ	0xFDE
  5081                           postdec2	equ	0xFDD
  5082                           fsr2h	equ	0xFDA
  5083                           fsr2l	equ	0xFD9
  5084                           status	equ	0xFD8
  5085                           pclatu	equ	0xFFB
  5086                           pclath	equ	0xFFA
  5087                           tblptru	equ	0xFF8
  5088                           tblptrh	equ	0xFF7
  5089                           tblptrl	equ	0xFF6
  5090                           tablat	equ	0xFF5
  5091                           prodh	equ	0xFF4
  5092                           prodl	equ	0xFF3
  5093                           intcon	equ	0xFF2
  5094                           intcon3	equ	0xFF0
  5095                           postinc0	equ	0xFEE
  5096                           fsr0h	equ	0xFEA
  5097                           fsr0l	equ	0xFE9
  5098                           wreg	equ	0xFE8
  5099                           indf1	equ	0xFE7
  5100                           fsr1h	equ	0xFE2
  5101                           fsr1l	equ	0xFE1
  5102                           indf2	equ	0xFDF
  5103                           postinc2	equ	0xFDE
  5104                           postdec2	equ	0xFDD
  5105                           fsr2h	equ	0xFDA
  5106                           fsr2l	equ	0xFD9
  5107                           status	equ	0xFD8
  5108                           
  5109                           	psect	rparam
  5110  0000                     pclatu	equ	0xFFB
  5111                           pclath	equ	0xFFA
  5112                           tblptru	equ	0xFF8
  5113                           tblptrh	equ	0xFF7
  5114                           tblptrl	equ	0xFF6
  5115                           tablat	equ	0xFF5
  5116                           prodh	equ	0xFF4
  5117                           prodl	equ	0xFF3
  5118                           intcon	equ	0xFF2
  5119                           intcon3	equ	0xFF0
  5120                           postinc0	equ	0xFEE
  5121                           fsr0h	equ	0xFEA
  5122                           fsr0l	equ	0xFE9
  5123                           wreg	equ	0xFE8
  5124                           indf1	equ	0xFE7
  5125                           fsr1h	equ	0xFE2
  5126                           fsr1l	equ	0xFE1
  5127                           indf2	equ	0xFDF
  5128                           postinc2	equ	0xFDE
  5129                           postdec2	equ	0xFDD
  5130                           fsr2h	equ	0xFDA
  5131                           fsr2l	equ	0xFD9
  5132                           status	equ	0xFD8
  5133                           
  5134                           	psect	temp
  5135  000066                     btemp:
  5136                           	opt stack 0
  5137  000066                     	ds	1
  5138  0000                     int$flags	set	btemp
  5139                           pclatu	equ	0xFFB
  5140                           pclath	equ	0xFFA
  5141                           tblptru	equ	0xFF8
  5142                           tblptrh	equ	0xFF7
  5143                           tblptrl	equ	0xFF6
  5144                           tablat	equ	0xFF5
  5145                           prodh	equ	0xFF4
  5146                           prodl	equ	0xFF3
  5147                           intcon	equ	0xFF2
  5148                           intcon3	equ	0xFF0
  5149                           postinc0	equ	0xFEE
  5150                           fsr0h	equ	0xFEA
  5151                           fsr0l	equ	0xFE9
  5152                           wreg	equ	0xFE8
  5153                           indf1	equ	0xFE7
  5154                           fsr1h	equ	0xFE2
  5155                           fsr1l	equ	0xFE1
  5156                           indf2	equ	0xFDF
  5157                           postinc2	equ	0xFDE
  5158                           postdec2	equ	0xFDD
  5159                           fsr2h	equ	0xFDA
  5160                           fsr2l	equ	0xFD9
  5161                           status	equ	0xFD8


Data Sizes:
    Strings     188
    Constant    42
    Data        0
    BSS         35
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     66     101
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          239      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_14(CODE[13]), STR_13(CODE[11]), STR_12(CODE[16]), STR_11(CODE[15]), 
		 -> STR_10(CODE[15]), STR_9(CODE[20]), STR_8(CODE[16]), STR_7(CODE[3]), 
		 -> STR_6(CODE[10]), STR_5(CODE[15]), STR_4(CODE[7]), STR_3(CODE[21]), 
		 -> STR_2(CODE[13]), STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    get_time@datime	PTR unsigned char  size(2) Largest target is 7
		 -> end_time(COMRAM[7]), start_time(COMRAM[7]), 


Critical Paths under _main in COMRAM

    _main->_sort
    _welcome->_printf
    _sort->_printf
    _get_time->_I2C_Master_Read
    _get_time->_I2C_Master_Write
    _initPIC->_I2C_Master_Init
    _initLCD->_lcdInst
    _I2C_Master_Init->___lldiv
    _display_time->_printf
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _display_sorting_time->_printf
    _debug->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _interrupt_handler in COMRAM

    _interrupt_handler->i2_get_time
    i2_putch->i2_lcdNibble
    i2_lcdInst->i2_lcdNibble
    i2_get_time->i2_I2C_Master_Read
    i2_get_time->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    None.

Critical Paths under _interrupt_handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interrupt_handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interrupt_handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interrupt_handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interrupt_handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interrupt_handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interrupt_handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interrupt_handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interrupt_handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interrupt_handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interrupt_handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   23530
                              _debug
               _display_sorting_time
                       _display_time
                            _initPIC
                               _sort
                            _welcome
 ---------------------------------------------------------------------------------
 (1) _welcome                                              2     2      0    4029
                                             58 COMRAM     2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _sort                                                 8     8      0    5248
                                             58 COMRAM     8     8      0
                           _get_time
                            _lcdInst
                             _printf
                             _shaker
 ---------------------------------------------------------------------------------
 (2) _shaker                                               3     3      0      30
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _get_time                                             5     3      2    1186
                                             27 COMRAM     5     3      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _initPIC                                              0     0      0    1256
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0      90
                                             27 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     440
                                             37 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     290
                                             24 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _display_time                                         3     3      0    4853
                                             58 COMRAM     3     3      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2     726
                                             25 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      30
                                             25 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _display_sorting_time                                 3     3      0    4052
                                             58 COMRAM     3     3      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _debug                                                7     7      0    4092
                                             58 COMRAM     7     7      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _readADC                                              2     2      0      15
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    3939
                                             36 COMRAM    22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      90
                                             26 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     543
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     671
                                             31 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     674
                                             24 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0      90
                                             26 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0      75
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _interrupt_handler                                   16    16      0     752
                                              8 COMRAM    16    16      0
                         i2_get_time
                          i2_lcdInst
                            i2_putch
 ---------------------------------------------------------------------------------
 (6) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (6) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) i2_get_time                                           5     3      2     371
                                              3 COMRAM     5     3      2
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Write                                   2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _debug
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _readADC
   _display_sorting_time
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _display_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _initPIC
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _initLCD
       _lcdInst
         _lcdNibble
   _sort
     _get_time
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _shaker
   _welcome
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble

 _interrupt_handler (ROOT)
   i2_get_time
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait
   i2_lcdInst
     i2_lcdNibble
   i2_putch
     i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EEE      0       0      38        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           EF      0       0      33        0.0%
BANK14              EF      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BIGRAM_1            80      0       0      37        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     42      65       1       80.2%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      65       6        0.0%
DATA                 0      0      65       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Mar 29 03:41:05 2017

           i2_I2C_Master_Start 1DE8             i2_I2C_Master_Write 1DC6                             l34 1D68  
                           u30 1CB8            ___wmul@multiplicand 001B                    __CFG_BORV$3 000000  
                 __CFG_CP0$OFF 000000                   __CFG_CP1$OFF 000000                   __CFG_CP2$OFF 000000  
                 __CFG_CP3$OFF 000000                    __CFG_OSC$HS 000000                            l126 1D2A  
                          l198 18E8                            l383 1B4E                            l385 1B7C  
                          l469 11D4                            l914 1B24                            l924 1C90  
                          l861 185A                   __CFG_CPB$OFF 000000                            _PEN 007E2A  
                 __CFG_CPD$OFF 000000                            _SEN 007E28                  ?_display_time 0001  
          ?i2_I2C_Master_Start 0001            ?i2_I2C_Master_Write 0002   __end_of_display_sorting_time 1BCC  
                          prod 000FF3                            wreg 000FE8                    _total_count 004A  
                 __CFG_LVP$OFF 000000                   __CFG_WDT$OFF 000000                           l2021 1AFE  
                         l2103 1202                           l2007 184C                           l2017 1AF2  
                         l2041 1C72                           l2121 124C                           l2019 1AFA  
                         l2123 1250                           l2107 121C                           l2029 1B1A  
                         l2045 1C86                           l2037 1C66                           l2109 1220  
                         l2301 152E                           l2039 1C6E                           l2151 12D2  
                         l2063 10F2                           l1167 1CBA                           l2311 1552  
                         l2207 1686                           l2145 12A6                           l2137 127C  
                         l2073 1116                           l2305 1536                           l2163 12FE  
                         l2139 128C                           l2091 11A6                           l2067 1102  
                         l1443 1B3E                           l2165 1306                           l2173 132C  
                         l2157 12E8                           l2149 12CA                           l2069 1110  
                         l2175 1332                           l2183 13BC                           l2087 11A2  
                         l2079 1144                           l2431 1BE8                           l2423 1BD0  
                         l2177 1376                           l2185 13CC                           l2169 131A  
                         l2329 15E4                           l2187 13D2                           l2195 1624  
                         l2347 17BC                           l2355 17E0                           l2291 195C  
                         l2435 1BF6                           l2427 1BDC                           l2189 13DA  
                         l2391 18D6                           l2375 1BC2                           l2199 1634  
                         l2439 1C04                           l2385 18AA                           l2297 151A  
                         l2379 187E                     i2_get_time 16A0                           l1979 1D46  
                         l1995 180C                           l1997 1818                           l1999 181C  
                         _ADON 007E10                           STR_1 10D4                           STR_2 1087  
                         STR_3 102B                           STR_4 10DD                           STR_5 1085  
                         STR_6 10CA                           STR_7 10E4                           STR_8 1065  
                         STR_9 1040                           u1205 1A04                           _LATA 000F89  
                         _LATB 000F8A                           _LATC 000F8B                           _LATD 000F8C  
                         _LATE 000F8D                           u1807 1C4C                           u1817 150C  
                         u1827 15D0                           u1747 1900                           u1837 1B8A  
                         u1757 177C                           u1847 18C6                           u1767 17CC  
                         u1857 1A48                           u1777 1B58                           u1867 1A52  
                         u1787 1B6C                           u1877 1A74                           u1797 1C18  
                         u1887 1A7E                           _RCEN 007E2B                           i2l34 1D7A  
                         _RSEN 007E29                           _flag 0054                           _main 1BCC  
                         _mode 0057                           _keys 1001                           _time 0043  
                         fsr0h 000FEA                           fsr1h 000FE2                           fsr2h 000FDA  
                         fsr0l 000FE9                           indf1 000FE7                           indf2 000FDF  
                         fsr1l 000FE1                           fsr2l 000FD9                           _sort 1754  
                         btemp 0066           ??i2_I2C_Master_Start 0002           ??i2_I2C_Master_Write 0004  
                         prodh 000FF4                           prodl 000FF3                           start 000E  
                __CFG_IESO$OFF 000000                __end_ofi2_putch 1DB0                  __CFG_MCLRE$ON 000000  
                 ___param_bank 000000                    i2_lcdNibble 1A86               ?_I2C_Master_Init 0026  
             ?_I2C_Master_Read 0001               ?_I2C_Master_Wait 0001               ?_I2C_Master_Stop 0001  
                        ?_main 0001                          _ACKEN 007E2C                          _ACKDT 007E2D  
               ??_display_time 003B                          STR_10 1094                          STR_11 10A3  
                        STR_12 1075                          STR_13 10BF                          STR_14 10B2  
                        STR_15 1054                          ?_sort 0001                __end_of___lldiv 186C  
                        _T0CON 000FD5                __end_of___lwdiv 1B2E                __end_of___lwmod 1C9A  
                        _TMR0H 000FD7                          _TMR0L 000FD6                          _PORTB 000F81  
                        _TRISA 000F92                          _TRISB 000F93                          _TRISC 000F94  
                        _TRISD 000F95                  __CFG_PWRT$OFF 000000                  __CFG_WRT0$OFF 000000  
                __CFG_WRT1$OFF 000000                  __CFG_WRT2$OFF 000000                  __CFG_WRT3$OFF 000000  
              __end_of_lcdInst 1DA4                 __CFG_EBTR0$OFF 000000                 __CFG_FCMEN$OFF 000000  
               __CFG_EBTR1$OFF 000000                 __CFG_EBTR2$OFF 000000                 __CFG_EBTR3$OFF 000000  
                __CFG_WRTB$OFF 000000                  __CFG_WRTC$OFF 000000                  __CFG_WRTD$OFF 000000  
              __end_of_readADC 1D30                __end_of_initLCD 1C58                 __CFG_EBTRB$OFF 000000  
                        _debug 186C                __end_of_initPIC 19D6                __end_of_dpowers 101C  
              __end_of_isdigit 1D4E                          _putch 1D8C                          pclath 000FFA  
                        tablat 000FF5                __end_of_welcome 1964                          status 000FD8  
               __CFG_PBADEN$ON 000000                __initialization 1D4E             __size_ofi2_lcdInst 000C  
                 __end_of_main 1C12                   __end_of_keys 1012                   __end_of_sort 17EA  
                       ??_main 0043                         ??_sort 003B                  __activetblptr 000002  
                  i2get_time@i 0007              ?_I2C_Master_Start 0001              ?_I2C_Master_Write 001A  
                       ?_debug 0001             ??_I2C_Master_Start 001A                         _ADCON0 000FC2  
                       _ADCON1 000FC1             ??_I2C_Master_Write 001C                         _ADCON2 000FC0  
                       _ADRESH 000FC4                         _ADRESL 000FC3                i2lcdNibble@data 0002  
                  ?i2_get_time 0004                         ?_putch 0001                i2lcdNibble@temp 0001  
                       _INT1IE 007F83                         _INT1IF 007F80                         i2l2231 1D06  
                       i2l2405 16D8                         i2l2417 173A                         i2l2409 16E8  
                       i2l2531 14A8                         i2l2525 1496                         i2l2535 14B2  
                       i2l2519 1486                         i2l2539 14BE                      ??i2_putch 0003  
                       _TMR0ON 007EAF               i2get_time@datime 0004                         _SSPADD 000FC8  
                       _TRISC3 007CA3                         _TRISC4 007CA4                         _SSPBUF 000FC9  
               __CFG_XINST$OFF 000000           _display_sorting_time 1B7E               __end_of_get_time 16A0  
                       ___wmul 1CC0                 __CFG_STVREN$ON 000000                      ??___lldiv 0021  
                    ??___lwdiv 001D                      ??___lwmod 0024                         debug@i 0040  
                       clear_0 1D54                         _shaker 1B2E                      ??_lcdInst 001B  
                       _printf 10E8                      ??_readADC 0019                      ??_initLCD 001C  
                    ??_initPIC 002E                      ??_isdigit 0019                   __mediumconst 0000  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
                    ??_welcome 003B                  display_time@i 003D              __end_ofi2_lcdInst 1DBC  
                   __accesstop 0080        __end_of__initialization 1D5A           __end_of_display_time 15EC  
                ___rparam_used 000001          ?_display_sorting_time 0001                 __pcstackCOMRAM 0001  
                __end_of_debug 18EA                  __end_of_putch 1D98            __size_ofi2_get_time 00B4  
           __size_of_lcdNibble 0056                    i2putch@data 0003                        ??_debug 003B  
                      ??_putch 001B                 _soup_can_label 004E                   ?i2_lcdNibble 0001  
                      ?___wmul 0019                 get_time@datime 001C                        ?_shaker 0001  
                      ?_printf 0025                        _SSPCON1 000FC6                        _SSPCON2 000FC5  
                      _SSPSTAT 000FC7                      ?_get_time 001C                        i2_putch 1DA4  
       ??_display_sorting_time 003B    __size_ofi2_I2C_Master_Start 0008              __end_of_lcdNibble 1A86  
  __size_ofi2_I2C_Master_Write 000A                        __Hparam 0000                        __Lparam 0000  
                   debug@H_max 003E                        ___lldiv 17EA                __size_of___wmul 0026  
                      ___lwdiv 1ADC                        ___lwmod 1C58                   __psmallconst 1000  
                      __pcinit 1D4E                        __ramtop 1000                __size_of_shaker 0050  
                      _lcdInst 1D98                        __ptext0 1BCC                        __ptext1 18EA  
                      __ptext2 1754                        __ptext3 1B2E                        __ptext4 15EC  
                      __ptext5 1964                        __ptext6 1C12                        __ptext7 19D6  
                      __ptext8 17EA                        __ptext9 14FC                __size_of_printf 030C  
                      _readADC 1D0C                        _initLCD 1C12              __end_of_hexpowers 1024  
                      _initPIC 1964                        _dpowers 1012                        _isdigit 1D30  
     __size_of_I2C_Master_Init 005A       __size_of_I2C_Master_Read 0026       __size_of_I2C_Master_Wait 0012  
     __size_of_I2C_Master_Stop 0008                        _welcome 18EA                   ??i2_get_time 0006  
                   ??_get_time 001E                 __pintcode_body 13F4          __size_of_display_time 00F0  
         end_of_initialization 1D5A                  __Lmediumconst 0000                        int_func 13F4  
                      shaker@i 001A      __size_of_I2C_Master_Start 0008      __size_of_I2C_Master_Write 000A  
              ___lldiv@divisor 001D                ___lldiv@counter 0025                        printf@c 003A  
                      printf@f 0025               I2C_Master_Init@c 0026               I2C_Master_Read@a 001A  
                      postdec2 000FDD                     _timeSetter 1024                        postinc0 000FEE  
                      postinc2 000FDE                        sort@tap 003D                        sort@tin 003F  
           __end_ofi2_get_time 1754                      _PORTBbits 000F81                   _display_time 14FC  
            i2_I2C_Master_Read 1CE6              i2_I2C_Master_Wait 1D7A              i2_I2C_Master_Stop 1DE0  
               _pop_can_no_tap 0050             ?i2_I2C_Master_Read 0001             ?i2_I2C_Master_Wait 0001  
           ?i2_I2C_Master_Stop 0001                     _start_time 005F                      i2_lcdInst 1DB0  
                  printf@width 0038            ??i2_I2C_Master_Read 0002            ??i2_I2C_Master_Wait 0001  
          ??i2_I2C_Master_Stop 0002                 __end_of___wmul 1CE6           __size_ofi2_lcdNibble 0056  
                i2lcdInst@data 0003                 __end_of_shaker 1B7E                 __end_of_printf 13F4  
    __end_ofi2_I2C_Master_Read 1D0C      __end_ofi2_I2C_Master_Wait 1D8C            start_initialization 1D4E  
    __end_ofi2_I2C_Master_Stop 1DE8          i2I2C_Master_Read@temp 0003              ??_I2C_Master_Init 002A  
            ??_I2C_Master_Read 001A                    sort@noLabel 0041              ??_I2C_Master_Wait 0019  
                   ?i2_lcdInst 0001              ??_I2C_Master_Stop 001A                       ??___wmul 001D  
             __CFG_LPT1OSC$OFF 000000                       ??_shaker 0019                       ??_printf 002D  
            _soup_can_no_label 004C                    __pbssCOMRAM 0043                   _isdigit$1070 001A  
                     ?i2_putch 0001              __size_of_get_time 00B4               _I2C_Master_Start 1DD8  
          i2I2C_Master_Write@d 0002               _I2C_Master_Write 1DBC               ___lwdiv@dividend 0019  
            __CFG_CCP2MX$PORTC 000000                      __pintcode 0008      interrupt_handler@keypress 0018  
                    _lcdNibble 1A30                       ?___lldiv 0019                       ?___lwdiv 0019  
                     ?___lwmod 0020                       ?_lcdInst 0001              _interrupt_handler 0008  
                     ?_readADC 0001                       ?_initLCD 0001                       ?_initPIC 0001  
                  __smallconst 1000                       ?_isdigit 0001     __size_ofi2_I2C_Master_Read 0026  
   __size_ofi2_I2C_Master_Wait 0012     __size_ofi2_I2C_Master_Stop 0008             ?_interrupt_handler 0001  
                     ?_welcome 0001                      _hexpowers 101C               ___lwdiv@quotient 001D  
               __size_of_debug 007E                 __size_of_putch 000C            ??_interrupt_handler 0009  
   __end_ofi2_I2C_Master_Start 1DF0     __end_ofi2_I2C_Master_Write 1DD0                    ??i2_lcdInst 0003  
               ___wmul@product 001D                       _LATAbits 000F89                       _LATBbits 000F8A  
                     _LATCbits 000F8B                       _LATDbits 000F8C  __size_of_display_sorting_time 004E  
                     i2u146_40 1D04                       i2u190_47 1AA8                       i2u191_47 1ACA  
                     i2u192_47 1AD4                       i2u189_47 1A9E               __CFG_WDTPS$32768 000000  
                   ?_lcdNibble 0001      __end_of_interrupt_handler 14FC                     _ADCON0bits 000FC2  
            ___wmul@multiplier 0019                  lcdNibble@data 001A                     printf@flag 0037  
                lcdNibble@temp 0019                     printf@prec 0034                      get_time@i 001F  
          I2C_Master_Read@temp 001B               __size_ofi2_putch 000C                       __Hrparam 0000  
                     __Lrparam 0000             __CFG_BOREN$SBORDIS 000000               __size_of___lldiv 0082  
             __size_of___lwdiv 0052               __size_of___lwmod 0042                 readADC@channel 001A  
           i2I2C_Master_Read@a 0002               __size_of_lcdInst 000C                _I2C_Master_Init 19D6  
             __size_of_readADC 0024                _I2C_Master_Read 1C9A               __size_of_initLCD 0046  
             __size_of_initPIC 0072                _I2C_Master_Wait 1D68                _I2C_Master_Stop 1DD0  
             __size_of_isdigit 001E                ___lwdiv@divisor 001B                ___lwdiv@counter 001F  
                     __ptext10 1DBC                       __ptext11 1DD0                       __ptext20 1D30  
                     __ptext12 1DD8                       __ptext21 1CC0                       __ptext13 1C9A  
                     __ptext30 16A0                       __ptext22 1C58                       __ptext14 1D68  
                     __ptext31 1DC6                       __ptext23 1ADC                       __ptext15 1B7E  
                     __ptext32 1DE0                       __ptext24 1D98                       __ptext16 186C  
                     __ptext33 1DE8                       __ptext25 1A30                       __ptext17 1D0C  
                     __ptext34 1CE6                       __ptext18 10E8                       __ptext35 1D7A  
                     __ptext27 1DA4                       __ptext19 1D8C                       __ptext28 1DB0  
                     __ptext29 1A86                       _end_time 0058               __size_of_welcome 007A  
                     _get_time 15EC                  __size_of_main 0046                  __size_of_sort 0096  
                ??i2_lcdNibble 0001                    ??_lcdNibble 0019                       int$flags 0066  
                  _passed_time 0056                      printf@idx 0031                      printf@val 0035  
   __size_of_interrupt_handler 14F4                      putch@data 001B       __end_of_I2C_Master_Start 1DE0  
     __end_of_I2C_Master_Write 1DC6                     _INTCONbits 000FF2                       isdigit@c 001B  
                     intlevel2 0000             __end_of_timeSetter 102B               ___lwmod@dividend 0020  
             ___lldiv@dividend 0019          display_sorting_time@i 003C                    _pop_can_tap 0052  
                     printf@ap 0032        __end_of_I2C_Master_Init 1A30        __end_of_I2C_Master_Read 1CC0  
      __end_of_I2C_Master_Wait 1D7A        __end_of_I2C_Master_Stop 1DD8                    lcdInst@data 001B  
          __end_ofi2_lcdNibble 1ADC               ___lldiv@quotient 0021              I2C_Master_Write@d 001A  
              ___lwmod@divisor 0022                ___lwmod@counter 0024  
